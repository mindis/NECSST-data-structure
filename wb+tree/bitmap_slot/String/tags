!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Append	wbtree.c	/^int Append(node *n, unsigned char *key, int key_len, void *value)$/;"	f
Append_in_inner	wbtree.c	/^int Append_in_inner(node *n, unsigned long key, void *value)$/;"	f
BIN_DIR	Makefile	/^BIN_DIR=.\/$/;"	m
BITMAP_SIZE	wbtree.h	13;"	d
BITOP_WORD	wbtree.c	12;"	d	file:
BITS_PER_LONG	wbtree.h	12;"	d
CACHE_LINE_SIZE	wbtree.h	5;"	d
CFLAGS	Makefile	/^CFLAGS= -c $/;"	m
CPU_FREQ_MHZ	wbtree.c	19;"	d	file:
Delete	wbtree.c	/^int Delete(tree *t, unsigned long key)$/;"	f
INPUT_NUM	main.c	8;"	d	file:
Insert	wbtree.c	/^void Insert(tree *t, unsigned char *key, int key_len, void *value)$/;"	f
LATENCY	wbtree.c	18;"	d	file:
LE_COMMIT	wbtree.h	10;"	d
LE_DATA	wbtree.h	9;"	d
LOG_AREA_SIZE	wbtree.h	8;"	d
LOG_DATA_SIZE	wbtree.h	7;"	d
Lookup	wbtree.c	/^void *Lookup(tree *t, unsigned long key)$/;"	f
MIN_LIVE_ENTRIES	wbtree.h	4;"	d
NODE_SIZE	wbtree.h	2;"	d
Range_Lookup	wbtree.c	/^void Range_Lookup(tree *t, unsigned long start_key, unsigned int num, $/;"	f
SLOT_SIZE	wbtree.h	3;"	d
Search	wbtree.c	/^int Search(node *curr, char *temp, unsigned char *key, int key_len)$/;"	f
Update	wbtree.c	/^void *Update(tree *t, unsigned long key, void *value)$/;"	f
add_log_entry	wbtree.c	/^void add_log_entry(tree *t, void *addr, unsigned int size, unsigned char type)$/;"	f
addr	wbtree.h	/^	void *addr;$/;"	m	struct:__anon1
allocNode	wbtree.c	/^node *allocNode()$/;"	f
bitmap	wbtree.h	/^	unsigned long bitmap;$/;"	m	struct:node
clflush_count	wbtree.c	/^unsigned long clflush_count = 0;$/;"	v
cpu_pause	wbtree.c	/^static inline void cpu_pause()$/;"	f	file:
data	wbtree.h	/^	char data[LOG_DATA_SIZE];$/;"	m	struct:__anon1
delete_in_leaf	wbtree.c	/^int delete_in_leaf(node *curr, unsigned long key)$/;"	f
dummy	wbtree.h	/^	char dummy[48];		\/\/63$/;"	m	struct:node
entries	wbtree.h	/^	struct entry entries[NODE_SIZE];$/;"	m	struct:node	typeref:struct:node::entry
entry	wbtree.h	/^struct entry{$/;"	s
entry	wbtree.h	/^typedef struct entry entry;$/;"	t	typeref:struct:entry
ffz	wbtree.h	/^static inline unsigned long ffz(unsigned long word)$/;"	f
find_leaf_node	wbtree.c	/^node *find_leaf_node(node *curr, unsigned char *key, int key_len) $/;"	f
find_next_zero_bit	wbtree.c	/^unsigned long find_next_zero_bit(const unsigned long *addr, unsigned long size,$/;"	f
flush_buffer	wbtree.c	/^void flush_buffer(void *buf, unsigned long len, bool fence)$/;"	f
flush_buffer_nocount	wbtree.c	/^void flush_buffer_nocount(void *buf, unsigned long len, bool fence)$/;"	f
initTree	wbtree.c	/^tree *initTree()$/;"	f
insert_in_inner	wbtree.c	/^void insert_in_inner(node *curr, unsigned long key, void *value)$/;"	f
insert_in_inner_noflush	wbtree.c	/^int insert_in_inner_noflush(node *curr, unsigned long key, void *value)$/;"	f
insert_in_leaf	wbtree.c	/^void insert_in_leaf(node *curr, unsigned char *key, int key_len, void *value)$/;"	f
insert_in_leaf_noflush	wbtree.c	/^int insert_in_leaf_noflush(node *curr, unsigned long key, void *value)$/;"	f
insert_in_parent	wbtree.c	/^void insert_in_parent(tree *t, node *curr, unsigned long key, node *splitNode) {$/;"	f
isleaf	wbtree.h	/^	int isleaf;$/;"	m	struct:node
key	wbtree.h	/^	key_item *key;$/;"	m	struct:entry
key	wbtree.h	/^	unsigned char key[];$/;"	m	struct:__anon3
key_item	wbtree.h	/^} key_item;$/;"	t	typeref:struct:__anon3
key_len	wbtree.h	/^	int key_len;$/;"	m	struct:__anon3
leftmostPtr	wbtree.h	/^	struct node *leftmostPtr;$/;"	m	struct:node	typeref:struct:node::node
log_area	wbtree.h	/^} log_area;$/;"	t	typeref:struct:__anon2
log_data	wbtree.h	/^	char log_data[LOG_AREA_SIZE];$/;"	m	struct:__anon2
log_entry	wbtree.h	/^} log_entry;$/;"	t	typeref:struct:__anon1
main	main.c	/^int main(void)$/;"	f
make_key_item	wbtree.c	/^key_item *make_key_item(unsigned char *key, int key_len)$/;"	f
mfence	wbtree.c	11;"	d	file:
mfence_count	wbtree.c	/^unsigned long mfence_count = 0;$/;"	v
min	wbtree.c	/^static inline int min(int a, int b) {$/;"	f	file:
next_offset	wbtree.h	/^	log_entry *next_offset;$/;"	m	struct:__anon2
node	wbtree.h	/^struct node{$/;"	s
node	wbtree.h	/^typedef struct node node;$/;"	t	typeref:struct:node
node_count	wbtree.c	/^unsigned long node_count = 0;$/;"	v
node_count	wbtree.h	/^unsigned long node_count;$/;"	v
parent	wbtree.h	/^	struct node *parent;$/;"	m	struct:node	typeref:struct:node::node
ptr	wbtree.h	/^	void *ptr;$/;"	m	struct:entry
read_tsc	wbtree.c	/^static inline unsigned long read_tsc(void)$/;"	f	file:
root	wbtree.h	/^	node *root;$/;"	m	struct:tree
size	wbtree.h	/^	unsigned int size;$/;"	m	struct:__anon1
slot	wbtree.h	/^	char slot[SLOT_SIZE];$/;"	m	struct:node
start_log	wbtree.h	/^	log_area *start_log;$/;"	m	struct:tree
tree	wbtree.h	/^struct tree{$/;"	s
tree	wbtree.h	/^typedef struct tree tree;$/;"	t	typeref:struct:tree
type	wbtree.h	/^	unsigned char type;$/;"	m	struct:__anon1
