!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABORT	testsuite/tpunit.h	55;"	d
AFTER	testsuite/tpunit.h	140;"	d
AFTER_CLASS	testsuite/tpunit.h	141;"	d
AFTER_CLASS_METHOD	testsuite/tpunit.h	/^               AFTER_METHOD,  AFTER_CLASS_METHOD,$/;"	e	enum:tpunit::TestFixture::method::__anon1
AFTER_METHOD	testsuite/tpunit.h	/^               AFTER_METHOD,  AFTER_CLASS_METHOD,$/;"	e	enum:tpunit::TestFixture::method::__anon1
ASSERT	testsuite/tpunit.h	88;"	d
ASSERT_ANY_THROW	testsuite/tpunit.h	121;"	d
ASSERT_EQUAL	testsuite/tpunit.h	75;"	d
ASSERT_FALSE	testsuite/tpunit.h	73;"	d
ASSERT_FLOAT_EQUAL	testsuite/tpunit.h	98;"	d
ASSERT_FLOAT_NEAR	testsuite/tpunit.h	100;"	d
ASSERT_GREATER_THAN	testsuite/tpunit.h	79;"	d
ASSERT_GREATER_THAN_EQUAL	testsuite/tpunit.h	81;"	d
ASSERT_LESS_THAN	testsuite/tpunit.h	83;"	d
ASSERT_LESS_THAN_EQUAL	testsuite/tpunit.h	85;"	d
ASSERT_NOT_EQUAL	testsuite/tpunit.h	77;"	d
ASSERT_NO_THROW	testsuite/tpunit.h	119;"	d
ASSERT_THROW	testsuite/tpunit.h	117;"	d
ASSERT_TRUE	testsuite/tpunit.h	71;"	d
After	testsuite/tpunit.h	/^         method* After(void (C::*_method)(), const char* _name)$/;"	f	class:tpunit::TestFixture
AfterClass	testsuite/tpunit.h	/^         method* AfterClass(void (C::*_method)(), const char* _name)$/;"	f	class:tpunit::TestFixture
AppBTreeDemo	wxbtreedemo/WMain.cpp	/^class AppBTreeDemo : public wxApp$/;"	c	file:
Array	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	c
Array.push	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	m
BEFORE	testsuite/tpunit.h	142;"	d
BEFORE_CLASS	testsuite/tpunit.h	143;"	d
BEFORE_CLASS_METHOD	testsuite/tpunit.h	/^               BEFORE_METHOD, BEFORE_CLASS_METHOD,$/;"	e	enum:tpunit::TestFixture::method::__anon1
BEFORE_METHOD	testsuite/tpunit.h	/^               BEFORE_METHOD, BEFORE_CLASS_METHOD,$/;"	e	enum:tpunit::TestFixture::method::__anon1
BTREE_ASSERT	include/stx/btree.h	58;"	d
BTREE_ASSERT	include/stx/btree.h	66;"	d
BTREE_FRIENDS	include/stx/btree.h	77;"	d
BTREE_FRIENDS	wxbtreedemo/WMain.h	30;"	d
BTREE_MAX	include/stx/btree.h	71;"	d
BTREE_PRINT	include/stx/btree.h	55;"	d
BTREE_PRINT	include/stx/btree.h	63;"	d
BTreeBundle	wxbtreedemo/WMain.h	/^class BTreeBundle$/;"	c
BTreeOp_Clear	wxbtreedemo/WMain.cpp	/^struct BTreeOp_Clear$/;"	s	file:
BTreeOp_Draw	wxbtreedemo/WTreeDrawing.h	/^        BTreeOp_Draw(WTreeDrawing &_w, wxDC &_dc, const class BTreeBundle &_tb)$/;"	f	struct:WTreeDrawing::BTreeOp_Draw
BTreeOp_Draw	wxbtreedemo/WTreeDrawing.h	/^    struct BTreeOp_Draw$/;"	s	class:WTreeDrawing
BTreeOp_EqualRange	wxbtreedemo/WMain.cpp	/^struct BTreeOp_EqualRange$/;"	s	file:
BTreeOp_Erase	wxbtreedemo/WMain.cpp	/^struct BTreeOp_Erase$/;"	s	file:
BTreeOp_FindKey	wxbtreedemo/WMain.cpp	/^struct BTreeOp_FindKey$/;"	s	file:
BTreeOp_GetVector	wxbtreedemo/WMain.cpp	/^struct BTreeOp_GetVector$/;"	s	file:
BTreeOp_Insert	wxbtreedemo/WMain.cpp	/^struct BTreeOp_Insert$/;"	s	file:
BTreeOp_InsertRandomInteger	wxbtreedemo/WMain.cpp	/^struct BTreeOp_InsertRandomInteger$/;"	s	file:
BTreeOp_InsertRandomString	wxbtreedemo/WMain.cpp	/^struct BTreeOp_InsertRandomString$/;"	s	file:
BTreeOp_LoadFile	wxbtreedemo/WMain.cpp	/^struct BTreeOp_LoadFile$/;"	s	file:
BTreeOp_PutVector	wxbtreedemo/WMain.cpp	/^struct BTreeOp_PutVector$/;"	s	file:
Before	testsuite/tpunit.h	/^         method* Before(void (C::*_method)(), const char* _name)$/;"	f	class:tpunit::TestFixture
BeforeClass	testsuite/tpunit.h	/^         method* BeforeClass(void (C::*_method)(), const char* _name)$/;"	f	class:tpunit::TestFixture
BoundTest	testsuite/BoundTest.cc	/^    BoundTest() : tpunit::TestFixture($/;"	f	struct:BoundTest
BoundTest	testsuite/BoundTest.cc	/^struct BoundTest : public tpunit::TestFixture$/;"	s	file:
BtreeMap	memprofile/main.cc	/^                                           std::less<unsigned int> > > BtreeMap;$/;"	t	struct:TestFactory_Map	file:
BtreeMap	speedtest/speedtest.cc	/^        BtreeMap(unsigned int n)$/;"	f	struct:TestFactory_Map::BtreeMap
BtreeMap	speedtest/speedtest.cc	/^    struct BtreeMap$/;"	s	struct:TestFactory_Map	file:
BtreeSet	speedtest/speedtest.cc	/^        BtreeSet(unsigned int n)$/;"	f	struct:TestFactory_Set::BtreeSet
BtreeSet	speedtest/speedtest.cc	/^    struct BtreeSet$/;"	s	struct:TestFactory_Set	file:
BulkLoadTest	testsuite/BulkLoadTest.cc	/^    BulkLoadTest() : tpunit::TestFixture($/;"	f	struct:BulkLoadTest
BulkLoadTest	testsuite/BulkLoadTest.cc	/^struct BulkLoadTest : public tpunit::TestFixture$/;"	s	file:
C	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
DrawBTree	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::DrawBTree(wxDC &dc)$/;"	f	class:WTreeDrawing
DumpRestoreTest	testsuite/DumpRestoreTest.cc	/^    DumpRestoreTest() : tpunit::TestFixture($/;"	f	struct:DumpRestoreTest
DumpRestoreTest	testsuite/DumpRestoreTest.cc	/^struct DumpRestoreTest : public tpunit::TestFixture$/;"	s	file:
E	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
EXPECT_ANY_THROW	testsuite/tpunit.h	122;"	d
EXPECT_EQUAL	testsuite/tpunit.h	76;"	d
EXPECT_FALSE	testsuite/tpunit.h	74;"	d
EXPECT_FLOAT_EQUAL	testsuite/tpunit.h	99;"	d
EXPECT_FLOAT_NEAR	testsuite/tpunit.h	101;"	d
EXPECT_GREATER_THAN	testsuite/tpunit.h	80;"	d
EXPECT_GREATER_THAN_EQUAL	testsuite/tpunit.h	82;"	d
EXPECT_LESS_THAN	testsuite/tpunit.h	84;"	d
EXPECT_LESS_THAN_EQUAL	testsuite/tpunit.h	86;"	d
EXPECT_NOT_EQUAL	testsuite/tpunit.h	78;"	d
EXPECT_NO_THROW	testsuite/tpunit.h	120;"	d
EXPECT_THROW	testsuite/tpunit.h	118;"	d
EXPECT_TRUE	testsuite/tpunit.h	72;"	d
F	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	v
FAIL	testsuite/tpunit.h	56;"	d
HashMap	memprofile/main.cc	/^    typedef TestClass< __gnu_cxx::hash_multimap<unsigned int, unsigned int> > HashMap;$/;"	t	struct:TestFactory_Map	file:
HashMap	speedtest/speedtest.cc	/^    typedef TestClass< __gnu_cxx::hash_multimap<unsigned int, unsigned int> > HashMap;$/;"	t	struct:TestFactory_Map	file:
HashSet	speedtest/speedtest.cc	/^    typedef TestClass< __gnu_cxx::hash_multiset<unsigned int> > HashSet;$/;"	t	struct:TestFactory_Set	file:
ID_BUTTON_CLEAR	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_CLEAR = wxID_HIGHEST + 1008,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_EQUALRANGE	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_EQUALRANGE = wxID_HIGHEST + 1007,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_ERASE	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_ERASE = wxID_HIGHEST + 1004,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_FINDKEY	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_FINDKEY = wxID_HIGHEST + 1006,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_INSERT	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_INSERT = wxID_HIGHEST + 1003,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_INSERTRANDOM	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_INSERTRANDOM = wxID_HIGHEST + 1005,$/;"	e	enum:WMain_wxg::__anon2
ID_BUTTON_LOADFILE	wxbtreedemo/WMain_wxg.h	/^        ID_BUTTON_LOADFILE = wxID_HIGHEST + 1009$/;"	e	enum:WMain_wxg::__anon2
ID_CHECKBOX_DUPLICATES	wxbtreedemo/WMain_wxg.h	/^        ID_CHECKBOX_DUPLICATES = wxID_HIGHEST + 1002,$/;"	e	enum:WMain_wxg::__anon2
ID_CHOICE_DATATYPE	wxbtreedemo/WMain_wxg.h	/^        ID_CHOICE_DATATYPE = wxID_HIGHEST + 1000,$/;"	e	enum:WMain_wxg::__anon2
ID_CHOICE_NODESLOTS	wxbtreedemo/WMain_wxg.h	/^        ID_CHOICE_NODESLOTS = wxID_HIGHEST + 1001,$/;"	e	enum:WMain_wxg::__anon2
INIT_HEAP_SIZE	memprofile/malloc_count.c	59;"	d	file:
IteratorTest	testsuite/IteratorTest.cc	/^    IteratorTest() : tpunit::TestFixture($/;"	f	struct:IteratorTest
IteratorTest	testsuite/IteratorTest.cc	/^struct IteratorTest : public tpunit::TestFixture$/;"	s	file:
K	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
LargeTest	testsuite/LargeTest.cc	/^    LargeTest() : tpunit::TestFixture($/;"	f	struct:LargeTest
LargeTest	testsuite/LargeTest.cc	/^struct LargeTest : public tpunit::TestFixture$/;"	s	file:
MemProfile	memprofile/memprofile.h	/^    MemProfile(const char* filepath,$/;"	f	class:MemProfile
MemProfile	memprofile/memprofile.h	/^class MemProfile$/;"	c
OnButtonClear	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonClear(wxCommandEvent &)$/;"	f	class:WMain
OnButtonEqualRange	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonEqualRange(wxCommandEvent &)$/;"	f	class:WMain
OnButtonErase	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonErase(wxCommandEvent &)$/;"	f	class:WMain
OnButtonFindKey	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonFindKey(wxCommandEvent &)$/;"	f	class:WMain
OnButtonInsert	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonInsert(wxCommandEvent &)$/;"	f	class:WMain
OnButtonInsertRandom	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonInsertRandom(wxCommandEvent &)$/;"	f	class:WMain
OnButtonLoadFile	wxbtreedemo/WMain.cpp	/^void WMain::OnButtonLoadFile(wxCommandEvent &)$/;"	f	class:WMain
OnCheckboxDuplicates	wxbtreedemo/WMain.cpp	/^void WMain::OnCheckboxDuplicates(wxCommandEvent &)$/;"	f	class:WMain
OnChoiceDataType	wxbtreedemo/WMain.cpp	/^void WMain::OnChoiceDataType(wxCommandEvent &)$/;"	f	class:WMain
OnChoiceNodeSlots	wxbtreedemo/WMain.cpp	/^void WMain::OnChoiceNodeSlots(wxCommandEvent &)$/;"	f	class:WMain
OnInit	wxbtreedemo/WMain.cpp	/^bool AppBTreeDemo::OnInit()$/;"	f	class:AppBTreeDemo
OnKillFocus	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::OnKillFocus(wxFocusEvent &fe)$/;"	f	class:WTreeDrawing
OnMenuInsertRandom	wxbtreedemo/WMain.cpp	/^void WMain::OnMenuInsertRandom(wxCommandEvent &ce)$/;"	f	class:WMain
OnMouseWheel	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::OnMouseWheel(wxMouseEvent &me)$/;"	f	class:WTreeDrawing
OnPaint	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::OnPaint(wxPaintEvent &)$/;"	f	class:WTreeDrawing
OnSetFocus	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::OnSetFocus(wxFocusEvent &fe)$/;"	f	class:WTreeDrawing
OnSize	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::OnSize(wxSizeEvent &se)$/;"	f	class:WTreeDrawing
PASS	testsuite/tpunit.h	57;"	d
RelationTest	testsuite/RelationTest.cc	/^    RelationTest() : tpunit::TestFixture($/;"	f	struct:RelationTest
RelationTest	testsuite/RelationTest.cc	/^struct RelationTest : public tpunit::TestFixture$/;"	s	file:
Run	testsuite/tpunit.h	/^         static int Run() { return TestFixture::__do_run(); }$/;"	f	class:tpunit::Tests
SET_FIXTURE_METHOD	testsuite/tpunit.h	259;"	d
SET_FIXTURE_METHOD	testsuite/tpunit.h	282;"	d
SearchBox	doxygen-html/search/search.js	/^function SearchBox(name, resultsPath, inFrame, label)$/;"	c
SearchBox.Activate	doxygen-html/search/search.js	/^  this.Activate = function(isActive)$/;"	m
SearchBox.CloseResultsWindow	doxygen-html/search/search.js	/^  this.CloseResultsWindow = function()$/;"	m
SearchBox.CloseSelectionWindow	doxygen-html/search/search.js	/^  this.CloseSelectionWindow = function()$/;"	m
SearchBox.DOMPopupSearchResults	doxygen-html/search/search.js	/^  this.DOMPopupSearchResults = function()$/;"	m
SearchBox.DOMPopupSearchResultsWindow	doxygen-html/search/search.js	/^  this.DOMPopupSearchResultsWindow = function()$/;"	m
SearchBox.DOMSearchBox	doxygen-html/search/search.js	/^  this.DOMSearchBox = function()$/;"	m
SearchBox.DOMSearchClose	doxygen-html/search/search.js	/^  this.DOMSearchClose = function()$/;"	m
SearchBox.DOMSearchField	doxygen-html/search/search.js	/^  this.DOMSearchField = function()$/;"	m
SearchBox.DOMSearchSelect	doxygen-html/search/search.js	/^  this.DOMSearchSelect = function()$/;"	m
SearchBox.DOMSearchSelectWindow	doxygen-html/search/search.js	/^  this.DOMSearchSelectWindow = function()$/;"	m
SearchBox.OnSearchFieldChange	doxygen-html/search/search.js	/^  this.OnSearchFieldChange = function(evt)$/;"	m
SearchBox.OnSearchFieldFocus	doxygen-html/search/search.js	/^  this.OnSearchFieldFocus = function(isActive)$/;"	m
SearchBox.OnSearchSelectHide	doxygen-html/search/search.js	/^  this.OnSearchSelectHide = function()$/;"	m
SearchBox.OnSearchSelectKey	doxygen-html/search/search.js	/^  this.OnSearchSelectKey = function(evt)$/;"	m
SearchBox.OnSearchSelectShow	doxygen-html/search/search.js	/^  this.OnSearchSelectShow = function()$/;"	m
SearchBox.OnSelectItem	doxygen-html/search/search.js	/^  this.OnSelectItem = function(id)$/;"	m
SearchBox.Search	doxygen-html/search/search.js	/^  this.Search = function()$/;"	m
SearchBox.SelectItemCount	doxygen-html/search/search.js	/^  this.SelectItemCount = function(id)$/;"	m
SearchBox.SelectItemSet	doxygen-html/search/search.js	/^  this.SelectItemSet = function(id)$/;"	m
SearchResults	doxygen-html/search/search.js	/^function SearchResults(name)$/;"	c
SearchResults.FindChildElement	doxygen-html/search/search.js	/^    this.FindChildElement = function(id)$/;"	m
SearchResults.Nav	doxygen-html/search/search.js	/^    this.Nav = function(evt,itemIndex) $/;"	m
SearchResults.NavChild	doxygen-html/search/search.js	/^    this.NavChild = function(evt,itemIndex,childIndex)$/;"	m
SearchResults.NavNext	doxygen-html/search/search.js	/^    this.NavNext = function(index)$/;"	m
SearchResults.NavPrev	doxygen-html/search/search.js	/^    this.NavPrev = function(index)$/;"	m
SearchResults.ProcessKeys	doxygen-html/search/search.js	/^    this.ProcessKeys = function(e)$/;"	m
SearchResults.Search	doxygen-html/search/search.js	/^    this.Search = function(search)$/;"	m
SearchResults.Toggle	doxygen-html/search/search.js	/^    this.Toggle = function(id)$/;"	m
SetWMain	wxbtreedemo/WTreeDrawing.cpp	/^void WTreeDrawing::SetWMain(WMain *wm)$/;"	f	class:WTreeDrawing
SimpleTest	testsuite/SimpleTest.cc	/^    SimpleTest() : tpunit::TestFixture($/;"	f	struct:SimpleTest
SimpleTest	testsuite/SimpleTest.cc	/^struct SimpleTest : public tpunit::TestFixture$/;"	s	file:
StdDeque	memprofile/main.cc	/^    typedef TestClass< std::deque< std::pair<unsigned int, unsigned int> > > StdDeque;$/;"	t	struct:TestFactory_Array	file:
StdMap	memprofile/main.cc	/^    typedef TestClass< std::multimap<unsigned int, unsigned int> > StdMap;$/;"	t	struct:TestFactory_Map	file:
StdMap	speedtest/speedtest.cc	/^    typedef TestClass< std::multimap<unsigned int, unsigned int> > StdMap;$/;"	t	struct:TestFactory_Map	file:
StdSet	speedtest/speedtest.cc	/^    typedef TestClass< std::multiset<unsigned int> > StdSet;$/;"	t	struct:TestFactory_Set	file:
StdVector	memprofile/main.cc	/^    typedef TestClass< std::vector< std::pair<unsigned int, unsigned int> > > StdVector;$/;"	t	struct:TestFactory_Array	file:
StructureTest	testsuite/StructureTest.cc	/^    StructureTest() : tpunit::TestFixture($/;"	f	struct:StructureTest
StructureTest	testsuite/StructureTest.cc	/^struct StructureTest : public tpunit::TestFixture$/;"	s	file:
TEST	testsuite/tpunit.h	144;"	d
TEST_METHOD	testsuite/tpunit.h	/^               TEST_METHOD$/;"	e	enum:tpunit::TestFixture::method::__anon1
THREAD_SAFE_GCC_INTRINSICS	memprofile/malloc_count.c	44;"	d	file:
TPUNITPP_VERSION	testsuite/tpunit.h	40;"	d
TPUNITPP_VERSION_MAJOR	testsuite/tpunit.h	41;"	d
TPUNITPP_VERSION_MINOR	testsuite/tpunit.h	42;"	d
TPUNITPP_VERSION_PATCH	testsuite/tpunit.h	43;"	d
TRACE	testsuite/tpunit.h	58;"	d
Test	testsuite/tpunit.h	/^         method* Test(void (C::*_method)(), const char* _name)$/;"	f	class:tpunit::TestFixture
TestFactory_Array	memprofile/main.cc	/^struct TestFactory_Array$/;"	s	file:
TestFactory_Map	memprofile/main.cc	/^struct TestFactory_Map$/;"	s	file:
TestFactory_Map	speedtest/speedtest.cc	/^struct TestFactory_Map$/;"	s	file:
TestFactory_Set	speedtest/speedtest.cc	/^struct TestFactory_Set$/;"	s	file:
TestFixture	testsuite/tpunit.h	/^         TestFixture(method* m0,      method* m1  = 0, method* m2  = 0, method* m3  = 0, method* m4  = 0,$/;"	f	class:tpunit::TestFixture
TestFixture	testsuite/tpunit.h	/^   class TestFixture$/;"	c	namespace:tpunit
Test_Array_Insert	memprofile/main.cc	/^    Test_Array_Insert(unsigned int) {}$/;"	f	struct:Test_Array_Insert
Test_Array_Insert	memprofile/main.cc	/^struct Test_Array_Insert$/;"	s	file:
Test_BtreeSet_Find	speedtest/speedtest-tune.cc	/^    Test_BtreeSet_Find(unsigned int insertnum)$/;"	f	struct:Test_BtreeSet_Find
Test_BtreeSet_Find	speedtest/speedtest-tune.cc	/^struct Test_BtreeSet_Find$/;"	s	file:
Test_BtreeSet_Insert	speedtest/speedtest-tune.cc	/^    Test_BtreeSet_Insert(unsigned int) {}$/;"	f	struct:Test_BtreeSet_Insert
Test_BtreeSet_Insert	speedtest/speedtest-tune.cc	/^struct Test_BtreeSet_Insert$/;"	s	file:
Test_BtreeSet_InsertFindDelete	speedtest/speedtest-tune.cc	/^    Test_BtreeSet_InsertFindDelete(unsigned int) {}$/;"	f	struct:Test_BtreeSet_InsertFindDelete
Test_BtreeSet_InsertFindDelete	speedtest/speedtest-tune.cc	/^struct Test_BtreeSet_InsertFindDelete$/;"	s	file:
Test_Map_Find	speedtest/speedtest.cc	/^    Test_Map_Find(unsigned int items)$/;"	f	struct:Test_Map_Find
Test_Map_Find	speedtest/speedtest.cc	/^struct Test_Map_Find$/;"	s	file:
Test_Map_Insert	memprofile/main.cc	/^    Test_Map_Insert(unsigned int) {}$/;"	f	struct:Test_Map_Insert
Test_Map_Insert	memprofile/main.cc	/^struct Test_Map_Insert$/;"	s	file:
Test_Map_Insert	speedtest/speedtest.cc	/^    Test_Map_Insert(unsigned int) {}$/;"	f	struct:Test_Map_Insert
Test_Map_Insert	speedtest/speedtest.cc	/^struct Test_Map_Insert$/;"	s	file:
Test_Map_InsertFindDelete	speedtest/speedtest.cc	/^    Test_Map_InsertFindDelete(unsigned int) {}$/;"	f	struct:Test_Map_InsertFindDelete
Test_Map_InsertFindDelete	speedtest/speedtest.cc	/^struct Test_Map_InsertFindDelete$/;"	s	file:
Test_Set_Find	speedtest/speedtest.cc	/^    Test_Set_Find(unsigned int items)$/;"	f	struct:Test_Set_Find
Test_Set_Find	speedtest/speedtest.cc	/^struct Test_Set_Find$/;"	s	file:
Test_Set_Insert	speedtest/speedtest.cc	/^    Test_Set_Insert(unsigned int) {}$/;"	f	struct:Test_Set_Insert
Test_Set_Insert	speedtest/speedtest.cc	/^struct Test_Set_Insert$/;"	s	file:
Test_Set_InsertFindDelete	speedtest/speedtest.cc	/^    Test_Set_InsertFindDelete(unsigned int) {}$/;"	f	struct:Test_Set_InsertFindDelete
Test_Set_InsertFindDelete	speedtest/speedtest.cc	/^struct Test_Set_InsertFindDelete$/;"	s	file:
Tests	testsuite/tpunit.h	/^         Tests() : TestFixture(0) { \/* disable instance creation *\/ }$/;"	f	class:tpunit::Tests
Tests	testsuite/tpunit.h	/^   class Tests : private TestFixture$/;"	c	namespace:tpunit
UnorderedMap	memprofile/main.cc	/^    typedef TestClass< std::tr1::unordered_multimap<unsigned int, unsigned int> > UnorderedMap;$/;"	t	struct:TestFactory_Map	file:
UnorderedMap	speedtest/speedtest.cc	/^    typedef TestClass< std::tr1::unordered_multimap<unsigned int, unsigned int> > UnorderedMap;$/;"	t	struct:TestFactory_Map	file:
UnorderedSet	speedtest/speedtest.cc	/^    typedef TestClass< std::tr1::unordered_multiset<unsigned int> > UnorderedSet;$/;"	t	struct:TestFactory_Set	file:
UpdateViews	wxbtreedemo/WMain.cpp	/^void WMain::UpdateViews()$/;"	f	class:WMain
WMAIN_WXG_H	wxbtreedemo/WMain_wxg.h	7;"	d
WMain	wxbtreedemo/WMain.cpp	/^WMain::WMain()$/;"	f	class:WMain
WMain	wxbtreedemo/WMain.h	/^class WMain : public WMain_wxg$/;"	c
WMain_wxg	wxbtreedemo/WMain_wxg.cpp	/^WMain_wxg::WMain_wxg(wxWindow* parent, int id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):$/;"	f	class:WMain_wxg
WMain_wxg	wxbtreedemo/WMain_wxg.h	/^class WMain_wxg: public wxFrame {$/;"	c
WTreeDrawing	wxbtreedemo/WTreeDrawing.cpp	/^WTreeDrawing::WTreeDrawing(wxWindow *parent, int id)$/;"	f	class:WTreeDrawing
WTreeDrawing	wxbtreedemo/WTreeDrawing.h	/^class WTreeDrawing : public wxScrolledWindow$/;"	c
_GNU_SOURCE	memprofile/malloc_count.c	29;"	d	file:
_MALLOC_COUNT_H_	memprofile/malloc_count.h	30;"	d
_MEM_PROFILE_H_	memprofile/memprofile.h	24;"	d
_STX_BTREE_H_	include/stx/btree.h	36;"	d
_STX_BTREE_MAP_H_	include/stx/btree_map.h	35;"	d
_STX_BTREE_MULTIMAP_H_	include/stx/btree_multimap.h	35;"	d
_STX_BTREE_MULTISET_H_	include/stx/btree_multiset.h	35;"	d
_STX_BTREE_SET_H_	include/stx/btree_set.h	35;"	d
_WMain_H_	wxbtreedemo/WMain.h	20;"	d
_WTreeDrawing_H_	wxbtreedemo/WTreeDrawing.h	20;"	d
__BoundTest	testsuite/BoundTest.cc	/^} __BoundTest;$/;"	v	typeref:struct:BoundTest
__BulkLoadTest	testsuite/BulkLoadTest.cc	/^} __BulkLoadTest;$/;"	v	typeref:struct:BulkLoadTest
__DumpRestoreTest	testsuite/DumpRestoreTest.cc	/^} __DumpRestoreTest;$/;"	v	typeref:struct:DumpRestoreTest
__IteratorTest	testsuite/IteratorTest.cc	/^} __IteratorTest;$/;"	v	typeref:struct:IteratorTest
__LargeTest	testsuite/LargeTest.cc	/^} __LargeTest;$/;"	v	typeref:struct:LargeTest
__RelationTest	testsuite/RelationTest.cc	/^} __RelationTest;$/;"	v	typeref:struct:RelationTest
__SimpleTest10	testsuite/SimpleTest.cc	/^struct SimpleTest<10> __SimpleTest10;$/;"	v	typeref:struct:SimpleTest
__SimpleTest101	testsuite/SimpleTest.cc	/^struct SimpleTest<101> __SimpleTest101;$/;"	v	typeref:struct:SimpleTest
__SimpleTest11	testsuite/SimpleTest.cc	/^struct SimpleTest<11> __SimpleTest11;$/;"	v	typeref:struct:SimpleTest
__SimpleTest12	testsuite/SimpleTest.cc	/^struct SimpleTest<12> __SimpleTest12;$/;"	v	typeref:struct:SimpleTest
__SimpleTest13	testsuite/SimpleTest.cc	/^struct SimpleTest<13> __SimpleTest13;$/;"	v	typeref:struct:SimpleTest
__SimpleTest14	testsuite/SimpleTest.cc	/^struct SimpleTest<14> __SimpleTest14;$/;"	v	typeref:struct:SimpleTest
__SimpleTest15	testsuite/SimpleTest.cc	/^struct SimpleTest<15> __SimpleTest15;$/;"	v	typeref:struct:SimpleTest
__SimpleTest16	testsuite/SimpleTest.cc	/^struct SimpleTest<16> __SimpleTest16;$/;"	v	typeref:struct:SimpleTest
__SimpleTest17	testsuite/SimpleTest.cc	/^struct SimpleTest<17> __SimpleTest17;$/;"	v	typeref:struct:SimpleTest
__SimpleTest19	testsuite/SimpleTest.cc	/^struct SimpleTest<19> __SimpleTest19;$/;"	v	typeref:struct:SimpleTest
__SimpleTest20	testsuite/SimpleTest.cc	/^struct SimpleTest<20> __SimpleTest20;$/;"	v	typeref:struct:SimpleTest
__SimpleTest203	testsuite/SimpleTest.cc	/^struct SimpleTest<203> __SimpleTest203;$/;"	v	typeref:struct:SimpleTest
__SimpleTest21	testsuite/SimpleTest.cc	/^struct SimpleTest<21> __SimpleTest21;$/;"	v	typeref:struct:SimpleTest
__SimpleTest23	testsuite/SimpleTest.cc	/^struct SimpleTest<23> __SimpleTest23;$/;"	v	typeref:struct:SimpleTest
__SimpleTest24	testsuite/SimpleTest.cc	/^struct SimpleTest<24> __SimpleTest24;$/;"	v	typeref:struct:SimpleTest
__SimpleTest32	testsuite/SimpleTest.cc	/^struct SimpleTest<32> __SimpleTest32;$/;"	v	typeref:struct:SimpleTest
__SimpleTest48	testsuite/SimpleTest.cc	/^struct SimpleTest<48> __SimpleTest48;$/;"	v	typeref:struct:SimpleTest
__SimpleTest63	testsuite/SimpleTest.cc	/^struct SimpleTest<63> __SimpleTest63;$/;"	v	typeref:struct:SimpleTest
__SimpleTest64	testsuite/SimpleTest.cc	/^struct SimpleTest<64> __SimpleTest64;$/;"	v	typeref:struct:SimpleTest
__SimpleTest65	testsuite/SimpleTest.cc	/^struct SimpleTest<65> __SimpleTest65;$/;"	v	typeref:struct:SimpleTest
__SimpleTest8	testsuite/SimpleTest.cc	/^struct SimpleTest<8> __SimpleTest8;$/;"	v	typeref:struct:SimpleTest
__SimpleTest9	testsuite/SimpleTest.cc	/^struct SimpleTest<9> __SimpleTest9;$/;"	v	typeref:struct:SimpleTest
__StructureTest	testsuite/StructureTest.cc	/^} __StructureTest;$/;"	v	typeref:struct:StructureTest
__TPUNITPP_HPP__	testsuite/tpunit.h	23;"	d
__assert	testsuite/tpunit.h	/^         static void __assert(const char* _file, int _line)$/;"	f	class:tpunit::TestFixture
__do_methods	testsuite/tpunit.h	/^         static void __do_methods(method* m)$/;"	f	class:tpunit::TestFixture
__do_run	testsuite/tpunit.h	/^         static int __do_run()$/;"	f	class:tpunit::TestFixture
__do_tests	testsuite/tpunit.h	/^         static void __do_tests(fixture* f)$/;"	f	class:tpunit::TestFixture
__fixtures	testsuite/tpunit.h	/^         static fixture& __fixtures()$/;"	f	class:tpunit::TestFixture
__fp_equal	testsuite/tpunit.h	/^         static bool __fp_equal(double lhs, double rhs, unsigned char ulps)$/;"	f	class:tpunit::TestFixture
__fp_equal	testsuite/tpunit.h	/^         static bool __fp_equal(float lhs, float rhs, unsigned char ulps)$/;"	f	class:tpunit::TestFixture
__stats	testsuite/tpunit.h	/^         static stats& __stats()$/;"	f	class:tpunit::TestFixture
__trace	testsuite/tpunit.h	/^         static void __trace(const char* _file, int _line, const char* _message)$/;"	f	class:tpunit::TestFixture
_addr	testsuite/tpunit.h	/^            void (TestFixture::*_addr)();$/;"	m	struct:tpunit::TestFixture::method
_after_classes	testsuite/tpunit.h	/^            method* _after_classes;$/;"	m	struct:tpunit::TestFixture::fixture
_afters	testsuite/tpunit.h	/^            method* _afters;$/;"	m	struct:tpunit::TestFixture::fixture
_assertions	testsuite/tpunit.h	/^            int _assertions;$/;"	m	struct:tpunit::TestFixture::stats
_before_classes	testsuite/tpunit.h	/^            method* _before_classes;$/;"	m	struct:tpunit::TestFixture::fixture
_befores	testsuite/tpunit.h	/^            method* _befores;$/;"	m	struct:tpunit::TestFixture::fixture
_failures	testsuite/tpunit.h	/^            int _failures;$/;"	m	struct:tpunit::TestFixture::stats
_name	testsuite/tpunit.h	/^            char _name[256];$/;"	m	struct:tpunit::TestFixture::method
_next	testsuite/tpunit.h	/^            fixture* _next;$/;"	m	struct:tpunit::TestFixture::fixture
_next	testsuite/tpunit.h	/^            method* _next;$/;"	m	struct:tpunit::TestFixture::method
_passes	testsuite/tpunit.h	/^            int _passes;$/;"	m	struct:tpunit::TestFixture::stats
_tests	testsuite/tpunit.h	/^            method* _tests;$/;"	m	struct:tpunit::TestFixture::fixture
_this	testsuite/tpunit.h	/^            TestFixture* _this;$/;"	m	struct:tpunit::TestFixture::method
_traces	testsuite/tpunit.h	/^            int _traces;$/;"	m	struct:tpunit::TestFixture::stats
_type	testsuite/tpunit.h	/^            unsigned char _type;$/;"	m	struct:tpunit::TestFixture::method
a	testsuite/StructureTest.cc	/^        unsigned int a, b;$/;"	m	struct:StructureTest::testdata	file:
absdiff	memprofile/memprofile.h	/^    static inline Type absdiff(const Type& a, const Type& b)$/;"	f	class:MemProfile
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_cxx_check_header_compile	configure	/^ac_fn_cxx_check_header_compile ()$/;"	f
ac_fn_cxx_check_type	configure	/^ac_fn_cxx_check_type ()$/;"	f
ac_fn_cxx_try_compile	configure	/^ac_fn_cxx_try_compile ()$/;"	f
ac_fn_cxx_try_cpp	configure	/^ac_fn_cxx_try_cpp ()$/;"	f
ac_fn_cxx_try_run	configure	/^ac_fn_cxx_try_run ()$/;"	f
alloc_type	include/stx/btree.h	/^        typedef typename _Alloc::template rebind<inner_node>::other alloc_type;$/;"	t	struct:stx::btree::inner_node
alloc_type	include/stx/btree.h	/^        typedef typename _Alloc::template rebind<leaf_node>::other alloc_type;$/;"	t	struct:stx::btree::leaf_node
allocate_inner	include/stx/btree.h	/^    inline inner_node* allocate_inner(unsigned short level)$/;"	f	class:stx::btree
allocate_leaf	include/stx/btree.h	/^    inline leaf_node* allocate_leaf()$/;"	f	class:stx::btree
allocator_type	include/stx/btree.h	/^    typedef _Alloc                      allocator_type;$/;"	t	class:stx::btree
allocator_type	include/stx/btree_map.h	/^    typedef _Alloc                      allocator_type;$/;"	t	class:stx::btree_map
allocator_type	include/stx/btree_multimap.h	/^    typedef _Alloc                      allocator_type;$/;"	t	class:stx::btree_multimap
allocator_type	include/stx/btree_multiset.h	/^    typedef _Alloc                      allocator_type;$/;"	t	class:stx::btree_multiset
allocator_type	include/stx/btree_set.h	/^    typedef _Alloc                      allocator_type;$/;"	t	class:stx::btree_set
allow_duplicates	include/stx/btree.h	/^        bool            allow_duplicates;$/;"	m	struct:stx::btree::dump_header
allow_duplicates	include/stx/btree.h	/^    static const bool                   allow_duplicates = _Duplicates;$/;"	m	class:stx::btree
allow_duplicates	include/stx/btree_map.h	/^    static const bool                   allow_duplicates = btree_impl::allow_duplicates;$/;"	m	class:stx::btree_map
allow_duplicates	include/stx/btree_multimap.h	/^    static const bool                   allow_duplicates = btree_impl::allow_duplicates;$/;"	m	class:stx::btree_multimap
allow_duplicates	include/stx/btree_multiset.h	/^    static const bool                   allow_duplicates = btree_impl::allow_duplicates;$/;"	m	class:stx::btree_multiset
allow_duplicates	include/stx/btree_set.h	/^    static const bool                   allow_duplicates = btree_impl::allow_duplicates;$/;"	m	class:stx::btree_set
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
avgfill_leaves	include/stx/btree.h	/^        inline double avgfill_leaves() const$/;"	f	struct:stx::btree::tree_stats
b	testsuite/StructureTest.cc	/^        unsigned int a, b;$/;"	m	struct:StructureTest::testdata	file:
begin	include/stx/btree.h	/^    inline const_iterator begin() const$/;"	f	class:stx::btree
begin	include/stx/btree.h	/^    inline iterator begin()$/;"	f	class:stx::btree
begin	include/stx/btree_map.h	/^    inline const_iterator begin() const$/;"	f	class:stx::btree_map
begin	include/stx/btree_map.h	/^    inline iterator begin()$/;"	f	class:stx::btree_map
begin	include/stx/btree_multimap.h	/^    inline const_iterator begin() const$/;"	f	class:stx::btree_multimap
begin	include/stx/btree_multimap.h	/^    inline iterator begin()$/;"	f	class:stx::btree_multimap
begin	include/stx/btree_multiset.h	/^    inline const_iterator begin() const$/;"	f	class:stx::btree_multiset
begin	include/stx/btree_multiset.h	/^    inline iterator begin()$/;"	f	class:stx::btree_multiset
begin	include/stx/btree_set.h	/^    inline const_iterator begin() const$/;"	f	class:stx::btree_set
begin	include/stx/btree_set.h	/^    inline iterator begin()$/;"	f	class:stx::btree_set
binsearch_threshold	include/stx/btree.h	/^    static const size_t binsearch_threshold = 256;$/;"	m	struct:stx::btree_default_map_traits
binsearch_threshold	include/stx/btree.h	/^    static const size_t binsearch_threshold = 256;$/;"	m	struct:stx::btree_default_set_traits
binsearch_threshold	speedtest/speedtest-tune.cc	/^    static const int    binsearch_threshold = _bs_slots;$/;"	m	struct:btree_traits_speed	file:
binsearch_threshold	speedtest/speedtest.cc	/^    static const size_t binsearch_threshold = 256*1024*1024; \/\/ never$/;"	m	struct:btree_traits_speed	file:
bt	speedtest/speedtest-tune.cc	/^    btree_type bt;$/;"	m	struct:Test_BtreeSet_Find	file:
btmap_int_10_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<10,int> >         btmap_int_10_slots;$/;"	m	class:BTreeBundle
btmap_int_11_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<11,int> >         btmap_int_11_slots;$/;"	m	class:BTreeBundle
btmap_int_12_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<12,int> >         btmap_int_12_slots;$/;"	m	class:BTreeBundle
btmap_int_13_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<13,int> >         btmap_int_13_slots;$/;"	m	class:BTreeBundle
btmap_int_14_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<14,int> >         btmap_int_14_slots;$/;"	m	class:BTreeBundle
btmap_int_15_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<15,int> >         btmap_int_15_slots;$/;"	m	class:BTreeBundle
btmap_int_16_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<16,int> >         btmap_int_16_slots;$/;"	m	class:BTreeBundle
btmap_int_32_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<32,int> >         btmap_int_32_slots;$/;"	m	class:BTreeBundle
btmap_int_4_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<4,int> >          btmap_int_4_slots;$/;"	m	class:BTreeBundle
btmap_int_5_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<5,int> >          btmap_int_5_slots;$/;"	m	class:BTreeBundle
btmap_int_6_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<6,int> >          btmap_int_6_slots;$/;"	m	class:BTreeBundle
btmap_int_7_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<7,int> >          btmap_int_7_slots;$/;"	m	class:BTreeBundle
btmap_int_8_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<8,int> >          btmap_int_8_slots;$/;"	m	class:BTreeBundle
btmap_int_9_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<int, int, std::less<int>, btree_traits_nodebug<9,int> >          btmap_int_9_slots;$/;"	m	class:BTreeBundle
btmap_string_10_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<10,wxString> >          btmap_string_10_slots;$/;"	m	class:BTreeBundle
btmap_string_11_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<11,wxString> >          btmap_string_11_slots;$/;"	m	class:BTreeBundle
btmap_string_12_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<12,wxString> >          btmap_string_12_slots;$/;"	m	class:BTreeBundle
btmap_string_13_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<13,wxString> >          btmap_string_13_slots;$/;"	m	class:BTreeBundle
btmap_string_14_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<14,wxString> >          btmap_string_14_slots;$/;"	m	class:BTreeBundle
btmap_string_15_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<15,wxString> >          btmap_string_15_slots;$/;"	m	class:BTreeBundle
btmap_string_16_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<16,wxString> >          btmap_string_16_slots;$/;"	m	class:BTreeBundle
btmap_string_32_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<32,wxString> >          btmap_string_32_slots;$/;"	m	class:BTreeBundle
btmap_string_4_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<4,wxString> >           btmap_string_4_slots;$/;"	m	class:BTreeBundle
btmap_string_5_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<5,wxString> >           btmap_string_5_slots;$/;"	m	class:BTreeBundle
btmap_string_6_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<6,wxString> >           btmap_string_6_slots;$/;"	m	class:BTreeBundle
btmap_string_7_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<7,wxString> >           btmap_string_7_slots;$/;"	m	class:BTreeBundle
btmap_string_8_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<8,wxString> >           btmap_string_8_slots;$/;"	m	class:BTreeBundle
btmap_string_9_slots	wxbtreedemo/WMain.h	/^    stx::btree_map<wxString, wxString, std::less<wxString>, btree_traits_nodebug<9,wxString> >           btmap_string_9_slots;$/;"	m	class:BTreeBundle
btmultimap_int_10_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<10,int> >            btmultimap_int_10_slots;$/;"	m	class:BTreeBundle
btmultimap_int_11_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<11,int> >            btmultimap_int_11_slots;$/;"	m	class:BTreeBundle
btmultimap_int_12_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<12,int> >            btmultimap_int_12_slots;$/;"	m	class:BTreeBundle
btmultimap_int_13_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<13,int> >            btmultimap_int_13_slots;$/;"	m	class:BTreeBundle
btmultimap_int_14_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<14,int> >            btmultimap_int_14_slots;$/;"	m	class:BTreeBundle
btmultimap_int_15_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<15,int> >            btmultimap_int_15_slots;$/;"	m	class:BTreeBundle
btmultimap_int_16_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<16,int> >            btmultimap_int_16_slots;$/;"	m	class:BTreeBundle
btmultimap_int_32_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<32,int> >            btmultimap_int_32_slots;$/;"	m	class:BTreeBundle
btmultimap_int_4_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<4,int> >             btmultimap_int_4_slots;$/;"	m	class:BTreeBundle
btmultimap_int_5_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<5,int> >             btmultimap_int_5_slots;$/;"	m	class:BTreeBundle
btmultimap_int_6_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<6,int> >             btmultimap_int_6_slots;$/;"	m	class:BTreeBundle
btmultimap_int_7_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<7,int> >             btmultimap_int_7_slots;$/;"	m	class:BTreeBundle
btmultimap_int_8_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<8,int> >             btmultimap_int_8_slots;$/;"	m	class:BTreeBundle
btmultimap_int_9_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<int, int, std::less<int>, btree_traits_nodebug<9,int> >             btmultimap_int_9_slots;$/;"	m	class:BTreeBundle
btmultimap_string_10_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<10,wxString> >             btmultimap_string_10_slots;$/;"	m	class:BTreeBundle
btmultimap_string_11_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<11,wxString> >             btmultimap_string_11_slots;$/;"	m	class:BTreeBundle
btmultimap_string_12_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<12,wxString> >             btmultimap_string_12_slots;$/;"	m	class:BTreeBundle
btmultimap_string_13_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<13,wxString> >             btmultimap_string_13_slots;$/;"	m	class:BTreeBundle
btmultimap_string_14_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<14,wxString> >             btmultimap_string_14_slots;$/;"	m	class:BTreeBundle
btmultimap_string_15_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<15,wxString> >             btmultimap_string_15_slots;$/;"	m	class:BTreeBundle
btmultimap_string_16_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<16,wxString> >             btmultimap_string_16_slots;$/;"	m	class:BTreeBundle
btmultimap_string_32_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<32,wxString> >             btmultimap_string_32_slots;$/;"	m	class:BTreeBundle
btmultimap_string_4_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<4,wxString> >              btmultimap_string_4_slots;$/;"	m	class:BTreeBundle
btmultimap_string_5_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<5,wxString> >              btmultimap_string_5_slots;$/;"	m	class:BTreeBundle
btmultimap_string_6_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<6,wxString> >              btmultimap_string_6_slots;$/;"	m	class:BTreeBundle
btmultimap_string_7_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<7,wxString> >              btmultimap_string_7_slots;$/;"	m	class:BTreeBundle
btmultimap_string_8_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<8,wxString> >              btmultimap_string_8_slots;$/;"	m	class:BTreeBundle
btmultimap_string_9_slots	wxbtreedemo/WMain.h	/^    stx::btree_multimap<wxString, wxString, std::less<wxString>, btree_traits_nodebug<9,wxString> >              btmultimap_string_9_slots;$/;"	m	class:BTreeBundle
btree	include/stx/btree.h	/^    explicit inline btree(const allocator_type &alloc = allocator_type())$/;"	f	class:stx::btree
btree	include/stx/btree.h	/^    explicit inline btree(const key_compare &kcf,$/;"	f	class:stx::btree
btree	include/stx/btree.h	/^    inline btree(InputIterator first, InputIterator last, const key_compare &kcf,$/;"	f	class:stx::btree
btree	include/stx/btree.h	/^    inline btree(InputIterator first, InputIterator last,$/;"	f	class:stx::btree
btree	include/stx/btree.h	/^    inline btree(const btree_self &other)$/;"	f	class:stx::btree
btree	include/stx/btree.h	/^class btree$/;"	c	namespace:stx
btree_default_map_traits	include/stx/btree.h	/^struct btree_default_map_traits$/;"	s	namespace:stx
btree_default_set_traits	include/stx/btree.h	/^struct btree_default_set_traits$/;"	s	namespace:stx
btree_fixmerge	include/stx/btree.h	/^        btree_fixmerge = 4$/;"	e	enum:stx::btree::result_flags_t
btree_impl	include/stx/btree_map.h	/^                       traits, false, allocator_type, false> btree_impl;$/;"	t	class:stx::btree_map
btree_impl	include/stx/btree_multimap.h	/^                       traits, true, allocator_type, false> btree_impl;$/;"	t	class:stx::btree_multimap
btree_impl	include/stx/btree_multiset.h	/^                       traits, true, allocator_type, true> btree_impl;$/;"	t	class:stx::btree_multiset
btree_impl	include/stx/btree_set.h	/^                       traits, false, allocator_type, true> btree_impl;$/;"	t	class:stx::btree_set
btree_map	include/stx/btree_map.h	/^    explicit inline btree_map(const allocator_type &alloc = allocator_type())$/;"	f	class:stx::btree_map
btree_map	include/stx/btree_map.h	/^    explicit inline btree_map(const key_compare &kcf,$/;"	f	class:stx::btree_map
btree_map	include/stx/btree_map.h	/^    inline btree_map(InputIterator first, InputIterator last, const key_compare &kcf,$/;"	f	class:stx::btree_map
btree_map	include/stx/btree_map.h	/^    inline btree_map(InputIterator first, InputIterator last,$/;"	f	class:stx::btree_map
btree_map	include/stx/btree_map.h	/^    inline btree_map(const self &other)$/;"	f	class:stx::btree_map
btree_map	include/stx/btree_map.h	/^class btree_map$/;"	c	namespace:stx
btree_map	testsuite/InstantiationTest.cc	/^template class stx::btree_map<int, double>;$/;"	m	class:stx	typeref:class:stx::	file:
btree_multimap	include/stx/btree_multimap.h	/^    explicit inline btree_multimap(const allocator_type &alloc = allocator_type())$/;"	f	class:stx::btree_multimap
btree_multimap	include/stx/btree_multimap.h	/^    explicit inline btree_multimap(const key_compare &kcf,$/;"	f	class:stx::btree_multimap
btree_multimap	include/stx/btree_multimap.h	/^    inline btree_multimap(InputIterator first, InputIterator last, const key_compare &kcf,$/;"	f	class:stx::btree_multimap
btree_multimap	include/stx/btree_multimap.h	/^    inline btree_multimap(InputIterator first, InputIterator last,$/;"	f	class:stx::btree_multimap
btree_multimap	include/stx/btree_multimap.h	/^    inline btree_multimap(const self &other)$/;"	f	class:stx::btree_multimap
btree_multimap	include/stx/btree_multimap.h	/^class btree_multimap$/;"	c	namespace:stx
btree_multimap	testsuite/InstantiationTest.cc	/^template class stx::btree_multimap<int, int>;$/;"	m	class:stx	typeref:class:stx::	file:
btree_multiset	include/stx/btree_multiset.h	/^    explicit inline btree_multiset(const allocator_type &alloc = allocator_type())$/;"	f	class:stx::btree_multiset
btree_multiset	include/stx/btree_multiset.h	/^    explicit inline btree_multiset(const key_compare &kcf,$/;"	f	class:stx::btree_multiset
btree_multiset	include/stx/btree_multiset.h	/^    inline btree_multiset(InputIterator first, InputIterator last, const key_compare &kcf,$/;"	f	class:stx::btree_multiset
btree_multiset	include/stx/btree_multiset.h	/^    inline btree_multiset(InputIterator first, InputIterator last,$/;"	f	class:stx::btree_multiset
btree_multiset	include/stx/btree_multiset.h	/^    inline btree_multiset(const self &other)$/;"	f	class:stx::btree_multiset
btree_multiset	include/stx/btree_multiset.h	/^class btree_multiset$/;"	c	namespace:stx
btree_multiset	testsuite/InstantiationTest.cc	/^template class stx::btree_multiset<int>;$/;"	m	class:stx	typeref:class:stx::	file:
btree_not_found	include/stx/btree.h	/^        btree_not_found = 1,$/;"	e	enum:stx::btree::result_flags_t
btree_ok	include/stx/btree.h	/^        btree_ok = 0,$/;"	e	enum:stx::btree::result_flags_t
btree_pair_to_value	include/stx/btree.h	/^    struct btree_pair_to_value$/;"	s	class:stx::btree
btree_pair_to_value	include/stx/btree.h	/^    struct btree_pair_to_value<value_type, value_type>$/;"	s	class:stx::btree
btree_range	speedtest/speedtest.cc	/^struct btree_range$/;"	s	file:
btree_range	speedtest/speedtest.cc	/^struct btree_range<functional, Low, Low>$/;"	s	file:
btree_self	include/stx/btree.h	/^                  traits, allow_duplicates, allocator_type, used_as_set> btree_self;$/;"	t	class:stx::btree
btree_set	include/stx/btree_set.h	/^    explicit inline btree_set(const allocator_type &alloc = allocator_type())$/;"	f	class:stx::btree_set
btree_set	include/stx/btree_set.h	/^    explicit inline btree_set(const key_compare &kcf,$/;"	f	class:stx::btree_set
btree_set	include/stx/btree_set.h	/^    inline btree_set(InputIterator first, InputIterator last, const key_compare &kcf,$/;"	f	class:stx::btree_set
btree_set	include/stx/btree_set.h	/^    inline btree_set(InputIterator first, InputIterator last,$/;"	f	class:stx::btree_set
btree_set	include/stx/btree_set.h	/^    inline btree_set(const self &other)$/;"	f	class:stx::btree_set
btree_set	include/stx/btree_set.h	/^class btree_set$/;"	c	namespace:stx
btree_set	testsuite/InstantiationTest.cc	/^template class stx::btree_set<unsigned int>;$/;"	m	class:stx	typeref:class:stx::	file:
btree_traits_nodebug	wxbtreedemo/WMain.h	/^    struct btree_traits_nodebug : stx::btree_default_map_traits<Type,Type>$/;"	s	class:BTreeBundle
btree_traits_speed	speedtest/speedtest-tune.cc	/^struct btree_traits_speed : public stx::btree_default_set_traits<KeyType>$/;"	s	file:
btree_traits_speed	speedtest/speedtest.cc	/^struct btree_traits_speed : stx::btree_default_set_traits<unsigned int>$/;"	s	file:
btree_type	speedtest/speedtest-tune.cc	/^                                btree_traits_speed<unsigned int, Slots> > btree_type;$/;"	t	struct:Test_BtreeSet_Insert	file:
btree_type	speedtest/speedtest-tune.cc	/^                                struct btree_traits_speed<unsigned int, Slots> > btree_type;$/;"	t	struct:Test_BtreeSet_Find	file:
btree_type	speedtest/speedtest-tune.cc	/^                                struct btree_traits_speed<unsigned int, Slots> > btree_type;$/;"	t	struct:Test_BtreeSet_InsertFindDelete	file:
btree_update_lastkey	include/stx/btree.h	/^        btree_update_lastkey = 2,$/;"	e	enum:stx::btree::result_flags_t
bulk_load	include/stx/btree.h	/^    void bulk_load(Iterator ibegin, Iterator iend)$/;"	f	class:stx::btree
bulk_load	include/stx/btree_map.h	/^    inline void bulk_load(Iterator first, Iterator last)$/;"	f	class:stx::btree_map
bulk_load	include/stx/btree_multimap.h	/^    inline void bulk_load(Iterator first, Iterator last)$/;"	f	class:stx::btree_multimap
bulk_load	include/stx/btree_multiset.h	/^    inline void bulk_load(Iterator first, Iterator last)$/;"	f	class:stx::btree_multiset
bulk_load	include/stx/btree_set.h	/^    inline void bulk_load(Iterator first, Iterator last)$/;"	f	class:stx::btree_set
button_Clear	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_Clear;$/;"	m	class:WMain_wxg
button_EqualRange	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_EqualRange;$/;"	m	class:WMain_wxg
button_Erase	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_Erase;$/;"	m	class:WMain_wxg
button_FindKey	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_FindKey;$/;"	m	class:WMain_wxg
button_Insert	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_Insert;$/;"	m	class:WMain_wxg
button_InsertRandom	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_InsertRandom;$/;"	m	class:WMain_wxg
button_LoadFile	wxbtreedemo/WMain_wxg.h	/^    wxButton* button_LoadFile;$/;"	m	class:WMain_wxg
call_testrunner	speedtest/speedtest.cc	/^void TestFactory_Map<TestClass>::call_testrunner(std::ostream& os, unsigned int items)$/;"	f	class:TestFactory_Map
call_testrunner	speedtest/speedtest.cc	/^void TestFactory_Set<TestClass>::call_testrunner(std::ostream& os, unsigned int items)$/;"	f	class:TestFactory_Set
callback	memprofile/malloc_count.c	/^static malloc_count_callback_type callback = NULL;$/;"	v	file:
callback	memprofile/memprofile.h	/^    inline void callback(size_t memcurr)$/;"	f	class:MemProfile
callback_cookie	memprofile/malloc_count.c	/^static void* callback_cookie = NULL;$/;"	v	file:
calloc	memprofile/malloc_count.c	/^extern void* calloc(size_t nmemb, size_t size)$/;"	f
checkbox_Duplicates	wxbtreedemo/WMain_wxg.h	/^    wxCheckBox* checkbox_Duplicates;$/;"	m	class:WMain_wxg
childid	include/stx/btree.h	/^        node*           childid[innerslotmax+1];$/;"	m	struct:stx::btree::inner_node
choice_DataType	wxbtreedemo/WMain_wxg.h	/^    wxChoice* choice_DataType;$/;"	m	class:WMain_wxg
choice_NodeSlots	wxbtreedemo/WMain_wxg.h	/^    wxChoice* choice_NodeSlots;$/;"	m	class:WMain_wxg
clear	include/stx/btree.h	/^    void clear()$/;"	f	class:stx::btree
clear	include/stx/btree_map.h	/^    void clear()$/;"	f	class:stx::btree_map
clear	include/stx/btree_multimap.h	/^    void clear()$/;"	f	class:stx::btree_multimap
clear	include/stx/btree_multiset.h	/^    void clear()$/;"	f	class:stx::btree_multiset
clear	include/stx/btree_set.h	/^    void clear()$/;"	f	class:stx::btree_set
clearMarks	wxbtreedemo/WMain.h	/^    inline void clearMarks()$/;"	f	class:BTreeBundle
clear_recursive	include/stx/btree.h	/^    void clear_recursive(node *n)$/;"	f	class:stx::btree
const_iterator	include/stx/btree.h	/^        inline const_iterator()$/;"	f	class:stx::btree::const_iterator
const_iterator	include/stx/btree.h	/^        inline const_iterator(const const_reverse_iterator &it)$/;"	f	class:stx::btree::const_iterator
const_iterator	include/stx/btree.h	/^        inline const_iterator(const iterator &it)$/;"	f	class:stx::btree::const_iterator
const_iterator	include/stx/btree.h	/^        inline const_iterator(const reverse_iterator &it)$/;"	f	class:stx::btree::const_iterator
const_iterator	include/stx/btree.h	/^        inline const_iterator(const typename btree::leaf_node *l, unsigned short s)$/;"	f	class:stx::btree::const_iterator
const_iterator	include/stx/btree.h	/^    class const_iterator$/;"	c	class:stx::btree
const_iterator	include/stx/btree_map.h	/^    typedef typename btree_impl::const_iterator         const_iterator;$/;"	t	class:stx::btree_map
const_iterator	include/stx/btree_multimap.h	/^    typedef typename btree_impl::const_iterator         const_iterator;$/;"	t	class:stx::btree_multimap
const_iterator	include/stx/btree_multiset.h	/^    typedef typename btree_impl::const_iterator         const_iterator;$/;"	t	class:stx::btree_multiset
const_iterator	include/stx/btree_set.h	/^    typedef typename btree_impl::const_iterator         const_iterator;$/;"	t	class:stx::btree_set
const_reverse_iterator	include/stx/btree.h	/^        inline const_reverse_iterator()$/;"	f	class:stx::btree::const_reverse_iterator
const_reverse_iterator	include/stx/btree.h	/^        inline const_reverse_iterator(const const_iterator &it)$/;"	f	class:stx::btree::const_reverse_iterator
const_reverse_iterator	include/stx/btree.h	/^        inline const_reverse_iterator(const iterator &it)$/;"	f	class:stx::btree::const_reverse_iterator
const_reverse_iterator	include/stx/btree.h	/^        inline const_reverse_iterator(const reverse_iterator &it)$/;"	f	class:stx::btree::const_reverse_iterator
const_reverse_iterator	include/stx/btree.h	/^        inline const_reverse_iterator(const typename btree::leaf_node *l, unsigned short s)$/;"	f	class:stx::btree::const_reverse_iterator
const_reverse_iterator	include/stx/btree.h	/^    class const_reverse_iterator$/;"	c	class:stx::btree
const_reverse_iterator	include/stx/btree_map.h	/^    typedef typename btree_impl::const_reverse_iterator const_reverse_iterator;$/;"	t	class:stx::btree_map
const_reverse_iterator	include/stx/btree_multimap.h	/^    typedef typename btree_impl::const_reverse_iterator const_reverse_iterator;$/;"	t	class:stx::btree_multimap
const_reverse_iterator	include/stx/btree_multiset.h	/^    typedef typename btree_impl::const_reverse_iterator const_reverse_iterator;$/;"	t	class:stx::btree_multiset
const_reverse_iterator	include/stx/btree_set.h	/^    typedef typename btree_impl::const_reverse_iterator const_reverse_iterator;$/;"	t	class:stx::btree_set
convertToId	doxygen-html/search/search.js	/^function convertToId(search)$/;"	f
copy_recursive	include/stx/btree.h	/^    struct node* copy_recursive(const node *n)$/;"	f	class:stx::btree
count	include/stx/btree.h	/^    size_type count(const key_type &key) const$/;"	f	class:stx::btree
count	include/stx/btree_map.h	/^    size_type count(const key_type &key) const$/;"	f	class:stx::btree_map
count	include/stx/btree_multimap.h	/^    size_type count(const key_type &key) const$/;"	f	class:stx::btree_multimap
count	include/stx/btree_multiset.h	/^    size_type count(const key_type &key) const$/;"	f	class:stx::btree_multiset
count	include/stx/btree_set.h	/^    size_type count(const key_type &key) const$/;"	f	class:stx::btree_set
createResults	doxygen-html/search/search.js	/^function createResults()$/;"	f
curr	memprofile/malloc_count.c	/^static long long peak = 0, curr = 0, total = 0;$/;"	v	file:
currnode	include/stx/btree.h	/^        const typename btree::leaf_node*        currnode;$/;"	m	class:stx::btree::const_iterator
currnode	include/stx/btree.h	/^        const typename btree::leaf_node*        currnode;$/;"	m	class:stx::btree::const_reverse_iterator
currnode	include/stx/btree.h	/^        typename btree::leaf_node*      currnode;$/;"	m	class:stx::btree::iterator
currnode	include/stx/btree.h	/^        typename btree::leaf_node*      currnode;$/;"	m	class:stx::btree::reverse_iterator
currslot	include/stx/btree.h	/^        unsigned short                          currslot;$/;"	m	class:stx::btree::const_reverse_iterator
currslot	include/stx/btree.h	/^        unsigned short                  currslot;$/;"	m	class:stx::btree::const_iterator
currslot	include/stx/btree.h	/^        unsigned short          currslot;$/;"	m	class:stx::btree::iterator
currslot	include/stx/btree.h	/^        unsigned short          currslot;$/;"	m	class:stx::btree::reverse_iterator
data	include/stx/btree.h	/^        inline const data_type& data() const$/;"	f	class:stx::btree::const_iterator
data	include/stx/btree.h	/^        inline const data_type& data() const$/;"	f	class:stx::btree::const_reverse_iterator
data	include/stx/btree.h	/^        inline data_type& data() const$/;"	f	class:stx::btree::iterator
data	include/stx/btree.h	/^        inline data_type& data() const$/;"	f	class:stx::btree::reverse_iterator
data_copy	include/stx/btree.h	/^    static OutputIterator data_copy (InputIterator first, InputIterator last,$/;"	f	class:stx::btree
data_copy_backward	include/stx/btree.h	/^    static OutputIterator data_copy_backward (InputIterator first, InputIterator last,$/;"	f	class:stx::btree
data_type	include/stx/btree.h	/^        typedef typename btree::data_type               data_type;$/;"	t	class:stx::btree::const_iterator
data_type	include/stx/btree.h	/^        typedef typename btree::data_type               data_type;$/;"	t	class:stx::btree::const_reverse_iterator
data_type	include/stx/btree.h	/^        typedef typename btree::data_type               data_type;$/;"	t	class:stx::btree::iterator
data_type	include/stx/btree.h	/^        typedef typename btree::data_type               data_type;$/;"	t	class:stx::btree::reverse_iterator
data_type	include/stx/btree.h	/^    typedef _Data                       data_type;$/;"	t	class:stx::btree
data_type	include/stx/btree_map.h	/^    typedef _Data                       data_type;$/;"	t	class:stx::btree_map
data_type	include/stx/btree_multimap.h	/^    typedef _Data                       data_type;$/;"	t	class:stx::btree_multimap
data_type	include/stx/btree_multiset.h	/^    typedef struct empty_struct         data_type;$/;"	t	class:stx::btree_multiset	typeref:struct:stx::btree_multiset::empty_struct
data_type	include/stx/btree_set.h	/^    typedef struct empty_struct         data_type;$/;"	t	class:stx::btree_set	typeref:struct:stx::btree_set::empty_struct
data_type_size	include/stx/btree.h	/^        unsigned short  data_type_size;$/;"	m	struct:stx::btree::dump_header
dc	wxbtreedemo/WTreeDrawing.h	/^        wxDC &dc;$/;"	m	struct:WTreeDrawing::BTreeOp_Draw
debug	include/stx/btree.h	/^    static const bool                   debug = traits::debug;$/;"	m	class:stx::btree
debug	include/stx/btree.h	/^    static const bool   debug = false;$/;"	m	struct:stx::btree_default_map_traits
debug	include/stx/btree.h	/^    static const bool   debug = false;$/;"	m	struct:stx::btree_default_set_traits
debug	include/stx/btree_map.h	/^    static const bool                   debug = btree_impl::debug;$/;"	m	class:stx::btree_map
debug	include/stx/btree_multimap.h	/^    static const bool                   debug = btree_impl::debug;$/;"	m	class:stx::btree_multimap
debug	include/stx/btree_multiset.h	/^    static const bool                   debug = btree_impl::debug;$/;"	m	class:stx::btree_multiset
debug	include/stx/btree_set.h	/^    static const bool                   debug = btree_impl::debug;$/;"	m	class:stx::btree_set
debug	speedtest/speedtest.cc	/^    static const bool   debug = false;$/;"	m	struct:btree_traits_speed	file:
debug	testsuite/BoundTest.cc	/^        static const bool       debug = false;$/;"	m	struct:BoundTest::traits_nodebug	file:
debug	testsuite/BulkLoadTest.cc	/^        static const bool       debug = false;$/;"	m	struct:BulkLoadTest::traits_nodebug	file:
debug	testsuite/DumpRestoreTest.cc	/^        static const bool       debug = false;$/;"	m	struct:DumpRestoreTest::traits_nodebug	file:
debug	testsuite/IteratorTest.cc	/^        static const bool       debug = false;$/;"	m	struct:IteratorTest::traits_nodebug	file:
debug	testsuite/LargeTest.cc	/^        static const bool       debug = false;$/;"	m	struct:LargeTest::traits_nodebug	file:
debug	testsuite/RelationTest.cc	/^        static const bool       debug = false;$/;"	m	struct:RelationTest::traits_nodebug	file:
debug	testsuite/SimpleTest.cc	/^        static const bool       debug = false;$/;"	m	struct:SimpleTest::traits_nodebug	file:
debug	testsuite/StructureTest.cc	/^        static const bool       debug = false;$/;"	m	struct:StructureTest::traits_nodebug	file:
debug	wxbtreedemo/WMain.h	/^        static const bool       debug = false;$/;"	m	struct:BTreeBundle::btree_traits_nodebug
dec_count	memprofile/malloc_count.c	/^static void dec_count(size_t dec)$/;"	f	file:
define-members	doxygen-html/a00026.html	/^<tr><td colspan="2"><h2><a name="define-members"><\/a>$/;"	a
details	doxygen-html/a00001.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00002.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00003.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00004.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00005.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00006.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00007.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00008.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00009.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00010.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00011.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00012.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00013.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00014.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00015.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00016.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00017.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00018.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00019.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00020.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00021.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00022.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00024.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00025.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00026.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00027.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00028.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00029.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00030.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00031.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00032.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00033.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00034.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
details	doxygen-html/a00036.html	/^<hr\/><a name="details" id="details"><\/a><h2>Detailed Description<\/h2>$/;"	a
difference_type	include/stx/btree.h	/^        typedef ptrdiff_t               difference_type;$/;"	t	class:stx::btree::const_iterator
difference_type	include/stx/btree.h	/^        typedef ptrdiff_t               difference_type;$/;"	t	class:stx::btree::const_reverse_iterator
difference_type	include/stx/btree.h	/^        typedef ptrdiff_t               difference_type;$/;"	t	class:stx::btree::iterator
difference_type	include/stx/btree.h	/^        typedef ptrdiff_t               difference_type;$/;"	t	class:stx::btree::reverse_iterator
do_layout	wxbtreedemo/WMain_wxg.cpp	/^void WMain_wxg::do_layout()$/;"	f	class:WMain_wxg
draw_node	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::draw_node(int offsetx, int offsety, const class BTreeType::btree_impl::node* node)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
draw_tree	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::draw_tree(BTreeType &bt)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
dump	include/stx/btree.h	/^    void dump(std::ostream &os) const$/;"	f	class:stx::btree
dump	include/stx/btree_map.h	/^    void dump(std::ostream &os) const$/;"	f	class:stx::btree_map
dump	include/stx/btree_multimap.h	/^    void dump(std::ostream &os) const$/;"	f	class:stx::btree_multimap
dump	include/stx/btree_multiset.h	/^    void dump(std::ostream &os) const$/;"	f	class:stx::btree_multiset
dump	include/stx/btree_set.h	/^    void dump(std::ostream &os) const$/;"	f	class:stx::btree_set
dump_header	include/stx/btree.h	/^    struct dump_header$/;"	s	class:stx::btree
dump_node	include/stx/btree.h	/^    void dump_node(std::ostream &os, const node* n) const$/;"	f	class:stx::btree
e	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
empty	include/stx/btree.h	/^    inline bool empty() const$/;"	f	class:stx::btree
empty	include/stx/btree_map.h	/^    inline bool empty() const$/;"	f	class:stx::btree_map
empty	include/stx/btree_multimap.h	/^    inline bool empty() const$/;"	f	class:stx::btree_multimap
empty	include/stx/btree_multiset.h	/^    inline bool empty() const$/;"	f	class:stx::btree_multiset
empty	include/stx/btree_set.h	/^    inline bool empty() const$/;"	f	class:stx::btree_set
empty_struct	include/stx/btree_multiset.h	/^    struct empty_struct$/;"	s	class:stx::btree_multiset
empty_struct	include/stx/btree_set.h	/^    struct empty_struct$/;"	s	class:stx::btree_set
end	include/stx/btree.h	/^    inline const_iterator end() const$/;"	f	class:stx::btree
end	include/stx/btree.h	/^    inline iterator end()$/;"	f	class:stx::btree
end	include/stx/btree_map.h	/^    inline const_iterator end() const$/;"	f	class:stx::btree_map
end	include/stx/btree_map.h	/^    inline iterator end()$/;"	f	class:stx::btree_map
end	include/stx/btree_multimap.h	/^    inline const_iterator end() const$/;"	f	class:stx::btree_multimap
end	include/stx/btree_multimap.h	/^    inline iterator end()$/;"	f	class:stx::btree_multimap
end	include/stx/btree_multiset.h	/^    inline const_iterator end() const$/;"	f	class:stx::btree_multiset
end	include/stx/btree_multiset.h	/^    inline iterator end()$/;"	f	class:stx::btree_multiset
end	include/stx/btree_set.h	/^    inline const_iterator end() const$/;"	f	class:stx::btree_set
end	include/stx/btree_set.h	/^    inline iterator end()$/;"	f	class:stx::btree_set
equal_range	include/stx/btree.h	/^    inline std::pair<const_iterator, const_iterator> equal_range(const key_type& key) const$/;"	f	class:stx::btree
equal_range	include/stx/btree.h	/^    inline std::pair<iterator, iterator> equal_range(const key_type& key)$/;"	f	class:stx::btree
equal_range	include/stx/btree_map.h	/^    inline std::pair<const_iterator, const_iterator> equal_range(const key_type& key) const$/;"	f	class:stx::btree_map
equal_range	include/stx/btree_map.h	/^    inline std::pair<iterator, iterator> equal_range(const key_type& key)$/;"	f	class:stx::btree_map
equal_range	include/stx/btree_multimap.h	/^    inline std::pair<const_iterator, const_iterator> equal_range(const key_type& key) const$/;"	f	class:stx::btree_multimap
equal_range	include/stx/btree_multimap.h	/^    inline std::pair<iterator, iterator> equal_range(const key_type& key)$/;"	f	class:stx::btree_multimap
equal_range	include/stx/btree_multiset.h	/^    inline std::pair<const_iterator, const_iterator> equal_range(const key_type& key) const$/;"	f	class:stx::btree_multiset
equal_range	include/stx/btree_multiset.h	/^    inline std::pair<iterator, iterator> equal_range(const key_type& key)$/;"	f	class:stx::btree_multiset
equal_range	include/stx/btree_set.h	/^    inline std::pair<const_iterator, const_iterator> equal_range(const key_type& key) const$/;"	f	class:stx::btree_set
equal_range	include/stx/btree_set.h	/^    inline std::pair<iterator, iterator> equal_range(const key_type& key)$/;"	f	class:stx::btree_set
erase	include/stx/btree.h	/^    size_type erase(const key_type &key)$/;"	f	class:stx::btree
erase	include/stx/btree.h	/^    void erase(iterator \/* first *\/, iterator \/* last *\/)$/;"	f	class:stx::btree
erase	include/stx/btree.h	/^    void erase(iterator iter)$/;"	f	class:stx::btree
erase	include/stx/btree_map.h	/^    size_type erase(const key_type &key)$/;"	f	class:stx::btree_map
erase	include/stx/btree_map.h	/^    void erase(iterator \/* first *\/, iterator \/* last *\/)$/;"	f	class:stx::btree_map
erase	include/stx/btree_map.h	/^    void erase(iterator iter)$/;"	f	class:stx::btree_map
erase	include/stx/btree_multimap.h	/^    size_type erase(const key_type &key)$/;"	f	class:stx::btree_multimap
erase	include/stx/btree_multimap.h	/^    void erase(iterator \/* first *\/, iterator \/* last *\/)$/;"	f	class:stx::btree_multimap
erase	include/stx/btree_multimap.h	/^    void erase(iterator iter)$/;"	f	class:stx::btree_multimap
erase	include/stx/btree_multiset.h	/^    size_type erase(const key_type &key)$/;"	f	class:stx::btree_multiset
erase	include/stx/btree_multiset.h	/^    void erase(iterator \/* first *\/, iterator \/* last *\/)$/;"	f	class:stx::btree_multiset
erase	include/stx/btree_multiset.h	/^    void erase(iterator iter)$/;"	f	class:stx::btree_multiset
erase	include/stx/btree_set.h	/^    size_type erase(const key_type &key)$/;"	f	class:stx::btree_set
erase	include/stx/btree_set.h	/^    void erase(iterator \/* first *\/, iterator \/* last *\/)$/;"	f	class:stx::btree_set
erase	include/stx/btree_set.h	/^    void erase(iterator iter)$/;"	f	class:stx::btree_set
erase_iter_descend	include/stx/btree.h	/^    result_t erase_iter_descend(const iterator& iter,$/;"	f	class:stx::btree
erase_one	include/stx/btree.h	/^    bool erase_one(const key_type &key)$/;"	f	class:stx::btree
erase_one	include/stx/btree_map.h	/^    bool erase_one(const key_type &key)$/;"	f	class:stx::btree_map
erase_one	include/stx/btree_multimap.h	/^    bool erase_one(const key_type &key)$/;"	f	class:stx::btree_multimap
erase_one	include/stx/btree_multiset.h	/^    bool erase_one(const key_type &key)$/;"	f	class:stx::btree_multiset
erase_one	include/stx/btree_set.h	/^    bool erase_one(const key_type &key)$/;"	f	class:stx::btree_set
erase_one_descend	include/stx/btree.h	/^    result_t erase_one_descend(const key_type& key,$/;"	f	class:stx::btree
exists	include/stx/btree.h	/^    bool exists(const key_type &key) const$/;"	f	class:stx::btree
exists	include/stx/btree_map.h	/^    bool exists(const key_type &key) const$/;"	f	class:stx::btree_map
exists	include/stx/btree_multimap.h	/^    bool exists(const key_type &key) const$/;"	f	class:stx::btree_multimap
exists	include/stx/btree_multiset.h	/^    bool exists(const key_type &key) const$/;"	f	class:stx::btree_multiset
exists	include/stx/btree_set.h	/^    bool exists(const key_type &key) const$/;"	f	class:stx::btree_set
fill	include/stx/btree.h	/^        inline void fill()$/;"	f	struct:stx::btree::dump_header
find	include/stx/btree.h	/^    const_iterator find(const key_type &key) const$/;"	f	class:stx::btree
find	include/stx/btree.h	/^    iterator find(const key_type &key)$/;"	f	class:stx::btree
find	include/stx/btree_map.h	/^    const_iterator find(const key_type &key) const$/;"	f	class:stx::btree_map
find	include/stx/btree_map.h	/^    iterator find(const key_type &key)$/;"	f	class:stx::btree_map
find	include/stx/btree_multimap.h	/^    const_iterator find(const key_type &key) const$/;"	f	class:stx::btree_multimap
find	include/stx/btree_multimap.h	/^    iterator find(const key_type &key)$/;"	f	class:stx::btree_multimap
find	include/stx/btree_multiset.h	/^    const_iterator find(const key_type &key) const$/;"	f	class:stx::btree_multiset
find	include/stx/btree_multiset.h	/^    iterator find(const key_type &key)$/;"	f	class:stx::btree_multiset
find	include/stx/btree_set.h	/^    const_iterator find(const key_type &key) const$/;"	f	class:stx::btree_set
find	include/stx/btree_set.h	/^    iterator find(const key_type &key)$/;"	f	class:stx::btree_set
find_lower	include/stx/btree.h	/^    inline int find_lower(const node_type *n, const key_type& key) const$/;"	f	class:stx::btree
find_upper	include/stx/btree.h	/^    inline int find_upper(const node_type *n, const key_type& key) const$/;"	f	class:stx::btree
finish	memprofile/malloc_count.c	/^static __attribute__((destructor)) void finish(void)$/;"	f	file:
fixture	testsuite/tpunit.h	/^            fixture()$/;"	f	struct:tpunit::TestFixture::fixture
fixture	testsuite/tpunit.h	/^         struct fixture$/;"	s	class:tpunit::TestFixture
flags	include/stx/btree.h	/^        result_flags_t  flags;$/;"	m	struct:stx::btree::result_t
free	memprofile/malloc_count.c	/^extern void free(void* ptr)$/;"	f
free_node	include/stx/btree.h	/^    inline void free_node(node *n)$/;"	f	class:stx::btree
free_type	memprofile/malloc_count.c	/^typedef void  (*free_type)(void*);$/;"	t	file:
friends	doxygen-html/a00010.html	/^<tr><td colspan="2"><h2><a name="friends"><\/a>$/;"	a
friends	doxygen-html/a00011.html	/^<tr><td colspan="2"><h2><a name="friends"><\/a>$/;"	a
friends	doxygen-html/a00016.html	/^<tr><td colspan="2"><h2><a name="friends"><\/a>$/;"	a
friends	doxygen-html/a00020.html	/^<tr><td colspan="2"><h2><a name="friends"><\/a>$/;"	a
friends	doxygen-html/a00022.html	/^<tr><td colspan="2"><h2><a name="friends"><\/a>$/;"	a
getXPos	doxygen-html/search/search.js	/^function getXPos(item)$/;"	f
getYPos	doxygen-html/search/search.js	/^function getYPos(item)$/;"	f
get_allocator	include/stx/btree.h	/^    allocator_type get_allocator() const$/;"	f	class:stx::btree
get_allocator	include/stx/btree_map.h	/^    allocator_type get_allocator() const$/;"	f	class:stx::btree_map
get_allocator	include/stx/btree_multimap.h	/^    allocator_type get_allocator() const$/;"	f	class:stx::btree_multimap
get_allocator	include/stx/btree_multiset.h	/^    allocator_type get_allocator() const$/;"	f	class:stx::btree_multiset
get_allocator	include/stx/btree_set.h	/^    allocator_type get_allocator() const$/;"	f	class:stx::btree_set
get_stats	include/stx/btree.h	/^    inline const struct tree_stats& get_stats() const$/;"	f	class:stx::btree
get_stats	include/stx/btree_map.h	/^    inline const tree_stats& get_stats() const$/;"	f	class:stx::btree_map
get_stats	include/stx/btree_multimap.h	/^    inline const tree_stats& get_stats() const$/;"	f	class:stx::btree_multimap
get_stats	include/stx/btree_multiset.h	/^    inline const tree_stats& get_stats() const$/;"	f	class:stx::btree_multiset
get_stats	include/stx/btree_set.h	/^    inline const tree_stats& get_stats() const$/;"	f	class:stx::btree_set
has	include/stx/btree.h	/^        inline bool has(result_flags_t f) const$/;"	f	struct:stx::btree::result_t
hasfocus	wxbtreedemo/WTreeDrawing.h	/^    bool                hasfocus;$/;"	m	class:WTreeDrawing
inc_count	memprofile/malloc_count.c	/^static void inc_count(size_t inc)$/;"	f	file:
indexSectionNames.0	doxygen-html/search/search.js	/^  0: "all",$/;"	p
indexSectionNames.1	doxygen-html/search/search.js	/^  1: "classes",$/;"	p
indexSectionNames.10	doxygen-html/search/search.js	/^  10: "defines"$/;"	p
indexSectionNames.2	doxygen-html/search/search.js	/^  2: "namespaces",$/;"	p
indexSectionNames.3	doxygen-html/search/search.js	/^  3: "files",$/;"	p
indexSectionNames.4	doxygen-html/search/search.js	/^  4: "functions",$/;"	p
indexSectionNames.5	doxygen-html/search/search.js	/^  5: "variables",$/;"	p
indexSectionNames.6	doxygen-html/search/search.js	/^  6: "typedefs",$/;"	p
indexSectionNames.7	doxygen-html/search/search.js	/^  7: "enums",$/;"	p
indexSectionNames.8	doxygen-html/search/search.js	/^  8: "enumvalues",$/;"	p
indexSectionNames.9	doxygen-html/search/search.js	/^  9: "related",$/;"	p
indexSectionsWithContent.0	doxygen-html/search/search.js	/^  0: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111011111101111100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.1	doxygen-html/search/search.js	/^  1: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011110001001010001010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.10	doxygen-html/search/search.js	/^  10: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"$/;"	p
indexSectionsWithContent.2	doxygen-html/search/search.js	/^  2: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.3	doxygen-html/search/search.js	/^  3: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.4	doxygen-html/search/search.js	/^  4: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111011111101111100000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.5	doxygen-html/search/search.js	/^  5: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111101001011110100111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.6	doxygen-html/search/search.js	/^  6: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111100001010000101110100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.7	doxygen-html/search/search.js	/^  7: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.8	doxygen-html/search/search.js	/^  8: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
indexSectionsWithContent.9	doxygen-html/search/search.js	/^  9: "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011000001000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",$/;"	p
init	memprofile/malloc_count.c	/^static __attribute__((constructor)) void init(void)$/;"	f	file:
init_heap	memprofile/malloc_count.c	/^static char init_heap[INIT_HEAP_SIZE];$/;"	v	file:
init_heap_use	memprofile/malloc_count.c	/^static size_t init_heap_use = 0;$/;"	v	file:
initialize	include/stx/btree.h	/^        inline void initialize()$/;"	f	struct:stx::btree::leaf_node
initialize	include/stx/btree.h	/^        inline void initialize(const unsigned short l)$/;"	f	struct:stx::btree::inner_node
initialize	include/stx/btree.h	/^        inline void initialize(const unsigned short l)$/;"	f	struct:stx::btree::node
inner_node	include/stx/btree.h	/^    struct inner_node : public node$/;"	s	class:stx::btree
inner_node_allocator	include/stx/btree.h	/^    typename inner_node::alloc_type inner_node_allocator()$/;"	f	class:stx::btree
innernodes	include/stx/btree.h	/^        size_type       innernodes;$/;"	m	struct:stx::btree::tree_stats
innerslotmax	include/stx/btree.h	/^    static const unsigned short         innerslotmax =  traits::innerslots;$/;"	m	class:stx::btree
innerslotmax	include/stx/btree_map.h	/^    static const unsigned short         innerslotmax =  btree_impl::innerslotmax;$/;"	m	class:stx::btree_map
innerslotmax	include/stx/btree_multimap.h	/^    static const unsigned short         innerslotmax =  btree_impl::innerslotmax;$/;"	m	class:stx::btree_multimap
innerslotmax	include/stx/btree_multiset.h	/^    static const unsigned short         innerslotmax =  btree_impl::innerslotmax;$/;"	m	class:stx::btree_multiset
innerslotmax	include/stx/btree_set.h	/^    static const unsigned short         innerslotmax =  btree_impl::innerslotmax;$/;"	m	class:stx::btree_set
innerslots	include/stx/btree.h	/^        static const unsigned short     innerslots = btree_self::innerslotmax;$/;"	m	struct:stx::btree::tree_stats
innerslots	include/stx/btree.h	/^        unsigned short  innerslots;$/;"	m	struct:stx::btree::dump_header
innerslots	include/stx/btree.h	/^    static const int    innerslots = BTREE_MAX( 8, 256 \/ (sizeof(_Key) + sizeof(void*)) );$/;"	m	struct:stx::btree_default_map_traits
innerslots	include/stx/btree.h	/^    static const int    innerslots = BTREE_MAX( 8, 256 \/ (sizeof(_Key) + sizeof(void*)) );$/;"	m	struct:stx::btree_default_set_traits
innerslots	speedtest/speedtest.cc	/^    static const int    innerslots = _leafslots;$/;"	m	struct:btree_traits_speed	file:
innerslots	testsuite/BoundTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:BoundTest::traits_nodebug	file:
innerslots	testsuite/BulkLoadTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:BulkLoadTest::traits_nodebug	file:
innerslots	testsuite/DumpRestoreTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:DumpRestoreTest::traits_nodebug	file:
innerslots	testsuite/IteratorTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:IteratorTest::traits_nodebug	file:
innerslots	testsuite/LargeTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:LargeTest::traits_nodebug	file:
innerslots	testsuite/RelationTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:RelationTest::traits_nodebug	file:
innerslots	testsuite/SimpleTest.cc	/^        static const int        innerslots = Slots;$/;"	m	struct:SimpleTest::traits_nodebug	file:
innerslots	testsuite/StructureTest.cc	/^        static const int        innerslots = 8;$/;"	m	struct:StructureTest::traits_nodebug	file:
innerslots	wxbtreedemo/WMain.h	/^        static const int        innerslots = Slots;$/;"	m	struct:BTreeBundle::btree_traits_nodebug
inputdata	wxbtreedemo/WMain.cpp	/^    wxString            inputkey, inputdata;$/;"	m	struct:BTreeOp_Insert	file:
inputkey	wxbtreedemo/WMain.cpp	/^    wxString            inputkey, inputdata;$/;"	m	struct:BTreeOp_Insert	file:
inputkey	wxbtreedemo/WMain.cpp	/^    wxString            inputkey;$/;"	m	struct:BTreeOp_EqualRange	file:
inputkey	wxbtreedemo/WMain.cpp	/^    wxString            inputkey;$/;"	m	struct:BTreeOp_Erase	file:
inputkey	wxbtreedemo/WMain.cpp	/^    wxString            inputkey;$/;"	m	struct:BTreeOp_FindKey	file:
insert	include/stx/btree.h	/^    inline iterator insert(iterator \/* hint *\/, const pair_type &x)$/;"	f	class:stx::btree
insert	include/stx/btree.h	/^    inline std::pair<iterator, bool> insert(const key_type& key, const data_type& data)$/;"	f	class:stx::btree
insert	include/stx/btree.h	/^    inline std::pair<iterator, bool> insert(const pair_type& x)$/;"	f	class:stx::btree
insert	include/stx/btree.h	/^    inline void insert(InputIterator first, InputIterator last)$/;"	f	class:stx::btree
insert	include/stx/btree_map.h	/^    inline iterator insert(iterator hint, const value_type &x)$/;"	f	class:stx::btree_map
insert	include/stx/btree_map.h	/^    inline std::pair<iterator, bool> insert(const key_type& key, const data_type& data)$/;"	f	class:stx::btree_map
insert	include/stx/btree_map.h	/^    inline std::pair<iterator, bool> insert(const value_type& x)$/;"	f	class:stx::btree_map
insert	include/stx/btree_map.h	/^    inline void insert(InputIterator first, InputIterator last)$/;"	f	class:stx::btree_map
insert	include/stx/btree_multimap.h	/^    inline iterator insert(const key_type& key, const data_type& data)$/;"	f	class:stx::btree_multimap
insert	include/stx/btree_multimap.h	/^    inline iterator insert(const value_type& x)$/;"	f	class:stx::btree_multimap
insert	include/stx/btree_multimap.h	/^    inline iterator insert(iterator hint, const value_type &x)$/;"	f	class:stx::btree_multimap
insert	include/stx/btree_multimap.h	/^    inline void insert(InputIterator first, InputIterator last)$/;"	f	class:stx::btree_multimap
insert	include/stx/btree_multiset.h	/^    inline iterator insert(const key_type& x)$/;"	f	class:stx::btree_multiset
insert	include/stx/btree_multiset.h	/^    inline iterator insert(iterator hint, const key_type &x)$/;"	f	class:stx::btree_multiset
insert	include/stx/btree_multiset.h	/^    inline void insert(InputIterator first, InputIterator last)$/;"	f	class:stx::btree_multiset
insert	include/stx/btree_set.h	/^    inline iterator insert(iterator hint, const key_type &x)$/;"	f	class:stx::btree_set
insert	include/stx/btree_set.h	/^    inline std::pair<iterator, bool> insert(const key_type& x)$/;"	f	class:stx::btree_set
insert	include/stx/btree_set.h	/^    inline void insert(InputIterator first, InputIterator last)$/;"	f	class:stx::btree_set
insert2	include/stx/btree.h	/^    inline iterator insert2(iterator \/* hint *\/, const key_type& key, const data_type& data)$/;"	f	class:stx::btree
insert2	include/stx/btree.h	/^    inline std::pair<iterator, bool> insert2(const key_type& key, const data_type& data)$/;"	f	class:stx::btree
insert2	include/stx/btree_map.h	/^    inline iterator insert2(iterator hint, const key_type& key, const data_type& data)$/;"	f	class:stx::btree_map
insert2	include/stx/btree_map.h	/^    inline std::pair<iterator, bool> insert2(const key_type& key, const data_type& data)$/;"	f	class:stx::btree_map
insert2	include/stx/btree_multimap.h	/^    inline iterator insert2(const key_type& key, const data_type& data)$/;"	f	class:stx::btree_multimap
insert2	include/stx/btree_multimap.h	/^    inline iterator insert2(iterator hint, const key_type& key, const data_type& data)$/;"	f	class:stx::btree_multimap
insert_descend	include/stx/btree.h	/^    std::pair<iterator, bool> insert_descend(node* n,$/;"	f	class:stx::btree
insert_start	include/stx/btree.h	/^    std::pair<iterator, bool> insert_start(const key_type& key, const data_type& value)$/;"	f	class:stx::btree
insertnum	memprofile/main.cc	/^const unsigned int insertnum = 1024000 * 8;$/;"	v
insertnum	speedtest/speedtest-tune.cc	/^const unsigned int insertnum = 1024000 * 32;$/;"	v
invector	wxbtreedemo/WMain.cpp	/^    std::vector< std::pair<wxString,wxString> > &invector;$/;"	m	struct:BTreeOp_LoadFile	file:
invector	wxbtreedemo/WMain.cpp	/^    std::vector< std::pair<wxString,wxString> > &invector;$/;"	m	struct:BTreeOp_PutVector	file:
isIntegerType	wxbtreedemo/WMain.h	/^    inline bool isIntegerType() const$/;"	f	class:BTreeBundle
isMark1	wxbtreedemo/WMain.h	/^    inline bool isMark1(const void* node, int slot) const$/;"	f	class:BTreeBundle
isMark2	wxbtreedemo/WMain.h	/^    inline bool isMark2(const void* node, int slot) const$/;"	f	class:BTreeBundle
isMultimap	wxbtreedemo/WMain.h	/^    inline bool isMultimap() const$/;"	f	class:BTreeBundle
isStringType	wxbtreedemo/WMain.h	/^    inline bool isStringType() const$/;"	f	class:BTreeBundle
isfew	include/stx/btree.h	/^        inline bool isfew() const$/;"	f	struct:stx::btree::inner_node
isfew	include/stx/btree.h	/^        inline bool isfew() const$/;"	f	struct:stx::btree::leaf_node
isfull	include/stx/btree.h	/^        inline bool isfull() const$/;"	f	struct:stx::btree::inner_node
isfull	include/stx/btree.h	/^        inline bool isfull() const$/;"	f	struct:stx::btree::leaf_node
isleafnode	include/stx/btree.h	/^        inline bool isleafnode() const$/;"	f	struct:stx::btree::node
isunderflow	include/stx/btree.h	/^        inline bool isunderflow() const$/;"	f	struct:stx::btree::inner_node
isunderflow	include/stx/btree.h	/^        inline bool isunderflow() const$/;"	f	struct:stx::btree::leaf_node
itemcount	include/stx/btree.h	/^        size_type       itemcount;$/;"	m	struct:stx::btree::dump_header
itemcount	include/stx/btree.h	/^        size_type       itemcount;$/;"	m	struct:stx::btree::tree_stats
iterator	include/stx/btree.h	/^        inline iterator()$/;"	f	class:stx::btree::iterator
iterator	include/stx/btree.h	/^        inline iterator(const reverse_iterator &it)$/;"	f	class:stx::btree::iterator
iterator	include/stx/btree.h	/^        inline iterator(typename btree::leaf_node *l, unsigned short s)$/;"	f	class:stx::btree::iterator
iterator	include/stx/btree.h	/^    class iterator$/;"	c	class:stx::btree
iterator	include/stx/btree_map.h	/^    typedef typename btree_impl::iterator               iterator;$/;"	t	class:stx::btree_map
iterator	include/stx/btree_multimap.h	/^    typedef typename btree_impl::iterator               iterator;$/;"	t	class:stx::btree_multimap
iterator	include/stx/btree_multiset.h	/^    typedef typename btree_impl::iterator               iterator;$/;"	t	class:stx::btree_multiset
iterator	include/stx/btree_set.h	/^    typedef typename btree_impl::iterator               iterator;$/;"	t	class:stx::btree_set
iterator_category	include/stx/btree.h	/^        typedef std::bidirectional_iterator_tag         iterator_category;$/;"	t	class:stx::btree::const_iterator
iterator_category	include/stx/btree.h	/^        typedef std::bidirectional_iterator_tag         iterator_category;$/;"	t	class:stx::btree::const_reverse_iterator
iterator_category	include/stx/btree.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:stx::btree::iterator
iterator_category	include/stx/btree.h	/^        typedef std::bidirectional_iterator_tag iterator_category;$/;"	t	class:stx::btree::reverse_iterator
j	doxygen-html/jquery.js	/^var I=(K>0?this.clone(true):this).get();o.fn[F].apply(o(L[K]),I);J=J.concat(I)}return this.pushStack(J,E,G)}});o.each({removeAttr:function(E){o.attr(this,E,"");if(this.nodeType==1){this.removeAttribute(E)}},addClass:function(E){o.className.add(this,E)},removeClass:function(E){o.className.remove(this,E)},toggleClass:function(F,E){if(typeof E!=="boolean"){E=!o.className.has(this,F)}o.className[E?"add":"remove"](this,F)},remove:function(E){if(!E||o.filter(E,[this]).length){o("*",this).add([this]).each(function(){o.event.remove(this);o.removeData(this)});if(this.parentNode){this.parentNode.removeChild(this)}}},empty:function(){o(this).children().remove();while(this.firstChild){this.removeChild(this.firstChild)}}},function(E,F){o.fn[E]=function(){return this.each(F,arguments)}});function j(E,F){return E[0]&&parseInt(o.curCSS(E[0],F,true),10)||0}var h="jQuery"+e(),v=0,A={};o.extend({cache:{},data:function(F,E,G){F=F==l?A:F;var H=F[h];if(!H){H=F[h]=++v}if(E&&!o.cache[H]){o.cache[H]={}}if(G!==g){o.cache[H][E]=G}return E?o.cache[H][E]:H},removeData:function(F,E){F=F==l?A:F;var H=F[h];if(E){if(o.cache[H]){delete o.cache[H][E];E="";for(E in o.cache[H]){break}if(!E){o.removeData(F)}}}else{try{delete F[h]}catch(G){if(F.removeAttribute){F.removeAttribute(h)}}delete o.cache[H]}},queue:function(F,E,H){if(F){E=(E||"fx")+"queue";var G=o.data(F,E);if(!G||o.isArray(H)){G=o.data(F,E,o.makeArray(H))}else{if(H){G.push(H)}}}return G},dequeue:function(H,G){var E=o.queue(H,G),F=E.shift();if(!G||G==="fx"){F=E[0]}if(F!==g){F.call(H)}}});o.fn.extend({data:function(E,G){var H=E.split(".");H[1]=H[1]?"."+H[1]:"";if(G===g){var F=this.triggerHandler("getData"+H[1]+"!",[H[0]]);if(F===g&&this.length){F=o.data(this[0],E)}return F===g&&H[1]?this.data(H[0]):F}else{return this.trigger("setData"+H[1]+"!",[H[0],G]).each(function(){o.data(this,E,G)})}},removeData:function(E){return this.each(function(){o.removeData(this,E)})},queue:function(E,F){if(typeof E!=="string"){F=E;E="fx"}if(F===g){return o.queue(this[0],E)}return this.each(function(){var G=o.queue(this,E,F);if(E=="fx"&&G.length==1){G[0].call(this)}})},dequeue:function(E){return this.each(function(){o.dequeue(this,E)})}});$/;"	f
key	include/stx/btree.h	/^        inline const key_type& key() const$/;"	f	class:stx::btree::const_iterator
key	include/stx/btree.h	/^        inline const key_type& key() const$/;"	f	class:stx::btree::const_reverse_iterator
key	include/stx/btree.h	/^        inline const key_type& key() const$/;"	f	class:stx::btree::iterator
key	include/stx/btree.h	/^        inline const key_type& key() const$/;"	f	class:stx::btree::reverse_iterator
key_comp	include/stx/btree.h	/^        key_compare     key_comp;$/;"	m	class:stx::btree::value_compare
key_comp	include/stx/btree.h	/^    inline key_compare key_comp() const$/;"	f	class:stx::btree
key_comp	include/stx/btree_map.h	/^    inline key_compare key_comp() const$/;"	f	class:stx::btree_map
key_comp	include/stx/btree_multimap.h	/^    inline key_compare key_comp() const$/;"	f	class:stx::btree_multimap
key_comp	include/stx/btree_multiset.h	/^    inline key_compare key_comp() const$/;"	f	class:stx::btree_multiset
key_comp	include/stx/btree_set.h	/^    inline key_compare key_comp() const$/;"	f	class:stx::btree_set
key_compare	include/stx/btree.h	/^    typedef _Compare                    key_compare;$/;"	t	class:stx::btree
key_compare	include/stx/btree_map.h	/^    typedef _Compare                    key_compare;$/;"	t	class:stx::btree_map
key_compare	include/stx/btree_multimap.h	/^    typedef _Compare                    key_compare;$/;"	t	class:stx::btree_multimap
key_compare	include/stx/btree_multiset.h	/^    typedef _Compare                    key_compare;$/;"	t	class:stx::btree_multiset
key_compare	include/stx/btree_set.h	/^    typedef _Compare                    key_compare;$/;"	t	class:stx::btree_set
key_equal	include/stx/btree.h	/^    inline bool key_equal(const key_type &a, const key_type &b) const$/;"	f	class:stx::btree
key_greater	include/stx/btree.h	/^    inline bool key_greater(const key_type &a, const key_type &b) const$/;"	f	class:stx::btree
key_greaterequal	include/stx/btree.h	/^    inline bool key_greaterequal(const key_type &a, const key_type b) const$/;"	f	class:stx::btree
key_less	include/stx/btree.h	/^    inline bool key_less(const key_type &a, const key_type b) const$/;"	f	class:stx::btree
key_lessequal	include/stx/btree.h	/^    inline bool key_lessequal(const key_type &a, const key_type b) const$/;"	f	class:stx::btree
key_type	include/stx/btree.h	/^        typedef typename btree::key_type                key_type;$/;"	t	class:stx::btree::const_iterator
key_type	include/stx/btree.h	/^        typedef typename btree::key_type                key_type;$/;"	t	class:stx::btree::const_reverse_iterator
key_type	include/stx/btree.h	/^        typedef typename btree::key_type                key_type;$/;"	t	class:stx::btree::iterator
key_type	include/stx/btree.h	/^        typedef typename btree::key_type                key_type;$/;"	t	class:stx::btree::reverse_iterator
key_type	include/stx/btree.h	/^    typedef _Key                        key_type;$/;"	t	class:stx::btree
key_type	include/stx/btree_map.h	/^    typedef _Key                        key_type;$/;"	t	class:stx::btree_map
key_type	include/stx/btree_multimap.h	/^    typedef _Key                        key_type;$/;"	t	class:stx::btree_multimap
key_type	include/stx/btree_multiset.h	/^    typedef _Key                        key_type;$/;"	t	class:stx::btree_multiset
key_type	include/stx/btree_set.h	/^    typedef _Key                        key_type;$/;"	t	class:stx::btree_set
key_type_size	include/stx/btree.h	/^        unsigned short  key_type_size;$/;"	m	struct:stx::btree::dump_header
l00001	doxygen-html/a00024_source.html	/^<a href="a00024.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree<\/span>$/;"	a
l00001	doxygen-html/a00026_source.html	/^<a href="a00026.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/**<\/span>$/;"	a
l00001	doxygen-html/a00027_source.html	/^<a href="a00027.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_map<\/span>$/;"	a
l00001	doxygen-html/a00028_source.html	/^<a href="a00028.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_map.h<\/span>$/;"	a
l00001	doxygen-html/a00029_source.html	/^<a href="a00029.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_multimap<\/span>$/;"	a
l00001	doxygen-html/a00030_source.html	/^<a href="a00030.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_multimap.h<\/span>$/;"	a
l00001	doxygen-html/a00031_source.html	/^<a href="a00031.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_multiset<\/span>$/;"	a
l00001	doxygen-html/a00032_source.html	/^<a href="a00032.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_multiset.h<\/span>$/;"	a
l00001	doxygen-html/a00033_source.html	/^<a href="a00033.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_set<\/span>$/;"	a
l00001	doxygen-html/a00034_source.html	/^<a href="a00034.html">Go to the documentation of this file.<\/a><div class="fragment"><pre class="fragment"><a name="l00001"><\/a>00001 <span class="comment">\/** \\file btree_set.h<\/span>$/;"	a
l00002	doxygen-html/a00024_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Forwarder header to btree.h<\/span>$/;"	a
l00002	doxygen-html/a00026_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * \\file include\/stx\/btree.h<\/span>$/;"	a
l00002	doxygen-html/a00027_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Forwarder header to btree_map.h<\/span>$/;"	a
l00002	doxygen-html/a00028_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Contains the specialized B+ tree template class btree_map<\/span>$/;"	a
l00002	doxygen-html/a00029_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Forwarder header to btree_multimap.h<\/span>$/;"	a
l00002	doxygen-html/a00030_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Contains the specialized B+ tree template class btree_multimap<\/span>$/;"	a
l00002	doxygen-html/a00031_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Forwarder header to btree_multiset.h<\/span>$/;"	a
l00002	doxygen-html/a00032_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Contains the specialized B+ tree template class btree_multiset<\/span>$/;"	a
l00002	doxygen-html/a00033_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Forwarder header to btree_set.h<\/span>$/;"	a
l00002	doxygen-html/a00034_source.html	/^<a name="l00002"><\/a>00002 <span class="comment"> * Contains the specialized B+ tree template class btree_set<\/span>$/;"	a
l00003	doxygen-html/a00024_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00026_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> * Contains the main B+ tree implementation template class btree.<\/span>$/;"	a
l00003	doxygen-html/a00027_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00028_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00029_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00030_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00031_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00032_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00033_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00003	doxygen-html/a00034_source.html	/^<a name="l00003"><\/a>00003 <span class="comment"> *\/<\/span>$/;"	a
l00004	doxygen-html/a00024_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00026_source.html	/^<a name="l00004"><\/a>00004 <span class="comment"> *\/<\/span>$/;"	a
l00004	doxygen-html/a00027_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00028_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00029_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00030_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00031_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00032_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00033_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00004	doxygen-html/a00034_source.html	/^<a name="l00004"><\/a>00004 $/;"	a
l00005	doxygen-html/a00024_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00026_source.html	/^<a name="l00005"><\/a>00005 $/;"	a
l00005	doxygen-html/a00027_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00028_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00029_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00030_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00031_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00032_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00033_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00005	doxygen-html/a00034_source.html	/^<a name="l00005"><\/a>00005 <span class="comment">\/*<\/span>$/;"	a
l00006	doxygen-html/a00024_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00026_source.html	/^<a name="l00006"><\/a>00006 <span class="comment">\/*<\/span>$/;"	a
l00006	doxygen-html/a00027_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00028_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00029_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00030_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00031_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00032_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00033_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00006	doxygen-html/a00034_source.html	/^<a name="l00006"><\/a>00006 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00007	doxygen-html/a00024_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann &lt;tb@panthema.net&gt;<\/span>$/;"	a
l00007	doxygen-html/a00026_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * STX B+ Tree Template Classes v0.9<\/span>$/;"	a
l00007	doxygen-html/a00027_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann &lt;tb@panthema.net&gt;<\/span>$/;"	a
l00007	doxygen-html/a00028_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann &lt;tb@panthema.net&gt;<\/span>$/;"	a
l00007	doxygen-html/a00029_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann &lt;tb@panthema.net&gt;<\/span>$/;"	a
l00007	doxygen-html/a00030_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann<\/span>$/;"	a
l00007	doxygen-html/a00031_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann<\/span>$/;"	a
l00007	doxygen-html/a00032_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann<\/span>$/;"	a
l00007	doxygen-html/a00033_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann<\/span>$/;"	a
l00007	doxygen-html/a00034_source.html	/^<a name="l00007"><\/a>00007 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann<\/span>$/;"	a
l00008	doxygen-html/a00024_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00026_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> * Copyright (C) 2008-2013 Timo Bingmann &lt;tb@panthema.net&gt;<\/span>$/;"	a
l00008	doxygen-html/a00027_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00028_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00029_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00030_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00031_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00032_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00033_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00008	doxygen-html/a00034_source.html	/^<a name="l00008"><\/a>00008 <span class="comment"> *<\/span>$/;"	a
l00009	doxygen-html/a00024_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00026_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> *<\/span>$/;"	a
l00009	doxygen-html/a00027_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00028_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00029_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00030_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00031_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00032_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00033_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00009	doxygen-html/a00034_source.html	/^<a name="l00009"><\/a>00009 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00010	doxygen-html/a00024_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00026_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> * Boost Software License - Version 1.0 - August 17th, 2003<\/span>$/;"	a
l00010	doxygen-html/a00027_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00028_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00029_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00030_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00031_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00032_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00033_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00010	doxygen-html/a00034_source.html	/^<a name="l00010"><\/a>00010 <span class="comment"> *<\/span>$/;"	a
l00011	doxygen-html/a00024_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00026_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> *<\/span>$/;"	a
l00011	doxygen-html/a00027_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00028_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00029_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00030_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00031_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00032_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00033_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00011	doxygen-html/a00034_source.html	/^<a name="l00011"><\/a>00011 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00012	doxygen-html/a00024_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00026_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * Permission is hereby granted, free of charge, to any person or organization<\/span>$/;"	a
l00012	doxygen-html/a00027_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00028_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00029_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00030_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00031_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00032_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00033_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00012	doxygen-html/a00034_source.html	/^<a name="l00012"><\/a>00012 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00013	doxygen-html/a00024_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00026_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * obtaining a copy of the software and accompanying documentation covered by<\/span>$/;"	a
l00013	doxygen-html/a00027_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00028_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00029_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00030_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00031_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00032_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00033_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00013	doxygen-html/a00034_source.html	/^<a name="l00013"><\/a>00013 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00014	doxygen-html/a00024_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00026_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * this license (the &quot;Software&quot;) to use, reproduce, display, distribute,<\/span>$/;"	a
l00014	doxygen-html/a00027_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00028_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00029_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00030_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00031_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00032_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00033_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00014	doxygen-html/a00034_source.html	/^<a name="l00014"><\/a>00014 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00015	doxygen-html/a00024_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00026_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * execute, and transmit the Software, and to prepare derivative works of the<\/span>$/;"	a
l00015	doxygen-html/a00027_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00028_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00029_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00030_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00031_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00032_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00033_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00015	doxygen-html/a00034_source.html	/^<a name="l00015"><\/a>00015 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00016	doxygen-html/a00024_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00026_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * Software, and to permit third-parties to whom the Software is furnished to<\/span>$/;"	a
l00016	doxygen-html/a00027_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00028_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00029_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00030_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00031_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00032_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00033_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00016	doxygen-html/a00034_source.html	/^<a name="l00016"><\/a>00016 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00017	doxygen-html/a00024_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00026_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> * do so, all subject to the following:<\/span>$/;"	a
l00017	doxygen-html/a00027_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00028_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00029_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00030_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00031_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00032_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00033_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00017	doxygen-html/a00034_source.html	/^<a name="l00017"><\/a>00017 <span class="comment"> *<\/span>$/;"	a
l00018	doxygen-html/a00024_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00026_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> *<\/span>$/;"	a
l00018	doxygen-html/a00027_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00028_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00029_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00030_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00031_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00032_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00033_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00018	doxygen-html/a00034_source.html	/^<a name="l00018"><\/a>00018 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00019	doxygen-html/a00024_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00026_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * The copyright notices in the Software and this entire statement, including<\/span>$/;"	a
l00019	doxygen-html/a00027_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00028_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00029_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00030_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00031_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00032_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00033_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00019	doxygen-html/a00034_source.html	/^<a name="l00019"><\/a>00019 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00020	doxygen-html/a00024_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00026_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * the above license grant, this restriction and the following disclaimer, must<\/span>$/;"	a
l00020	doxygen-html/a00027_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00028_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00029_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00030_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00031_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00032_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00033_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00020	doxygen-html/a00034_source.html	/^<a name="l00020"><\/a>00020 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00021	doxygen-html/a00024_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00026_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * be included in all copies of the Software, in whole or in part, and all<\/span>$/;"	a
l00021	doxygen-html/a00027_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00028_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00029_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00030_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00031_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00032_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00033_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00021	doxygen-html/a00034_source.html	/^<a name="l00021"><\/a>00021 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00022	doxygen-html/a00024_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00026_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * derivative works of the Software, unless such copies or derivative works are<\/span>$/;"	a
l00022	doxygen-html/a00027_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00028_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00029_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00030_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00031_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00032_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00033_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00022	doxygen-html/a00034_source.html	/^<a name="l00022"><\/a>00022 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00023	doxygen-html/a00024_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00026_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * solely in the form of machine-executable object code generated by a source<\/span>$/;"	a
l00023	doxygen-html/a00027_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00028_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00029_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00030_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00031_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00032_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00033_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00023	doxygen-html/a00034_source.html	/^<a name="l00023"><\/a>00023 <span class="comment"> * language processor.<\/span>$/;"	a
l00024	doxygen-html/a00024_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00026_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> * language processor.<\/span>$/;"	a
l00024	doxygen-html/a00027_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00028_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00029_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00030_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00031_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00032_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00033_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00024	doxygen-html/a00034_source.html	/^<a name="l00024"><\/a>00024 <span class="comment"> *<\/span>$/;"	a
l00025	doxygen-html/a00024_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00026_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> *<\/span>$/;"	a
l00025	doxygen-html/a00027_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00028_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00029_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00030_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00031_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00032_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00033_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00025	doxygen-html/a00034_source.html	/^<a name="l00025"><\/a>00025 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00026	doxygen-html/a00024_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00026_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<\/span>$/;"	a
l00026	doxygen-html/a00027_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00028_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00029_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00030_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00031_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00032_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00033_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00026	doxygen-html/a00034_source.html	/^<a name="l00026"><\/a>00026 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00027	doxygen-html/a00024_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00026_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<\/span>$/;"	a
l00027	doxygen-html/a00027_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00028_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00029_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00030_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00031_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00032_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00033_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00027	doxygen-html/a00034_source.html	/^<a name="l00027"><\/a>00027 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00028	doxygen-html/a00024_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00026_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT<\/span>$/;"	a
l00028	doxygen-html/a00027_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00028_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00029_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00030_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00031_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00032_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00033_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00028	doxygen-html/a00034_source.html	/^<a name="l00028"><\/a>00028 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00029	doxygen-html/a00024_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00026_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE<\/span>$/;"	a
l00029	doxygen-html/a00027_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00028_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00029_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00030_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00031_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00032_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00033_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00029	doxygen-html/a00034_source.html	/^<a name="l00029"><\/a>00029 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00030	doxygen-html/a00024_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00026_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,<\/span>$/;"	a
l00030	doxygen-html/a00027_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00028_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00029_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00030_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00031_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00032_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00033_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00030	doxygen-html/a00034_source.html	/^<a name="l00030"><\/a>00030 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00031	doxygen-html/a00024_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00026_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER<\/span>$/;"	a
l00031	doxygen-html/a00027_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00028_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00029_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00030_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00031_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00032_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00033_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00031	doxygen-html/a00034_source.html	/^<a name="l00031"><\/a>00031 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00032	doxygen-html/a00024_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00026_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> * DEALINGS IN THE SOFTWARE.<\/span>$/;"	a
l00032	doxygen-html/a00027_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00028_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00029_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00030_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00031_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00032_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00033_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00032	doxygen-html/a00034_source.html	/^<a name="l00032"><\/a>00032 <span class="comment"> *\/<\/span>$/;"	a
l00033	doxygen-html/a00024_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00026_source.html	/^<a name="l00033"><\/a>00033 <span class="comment"> *\/<\/span>$/;"	a
l00033	doxygen-html/a00027_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00028_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00029_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00030_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00031_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00032_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00033_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00033	doxygen-html/a00034_source.html	/^<a name="l00033"><\/a>00033 $/;"	a
l00034	doxygen-html/a00024_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_<\/span>$/;"	a
l00034	doxygen-html/a00026_source.html	/^<a name="l00034"><\/a>00034 $/;"	a
l00034	doxygen-html/a00027_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MAP_<\/span>$/;"	a
l00034	doxygen-html/a00028_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MAP_H_<\/span>$/;"	a
l00034	doxygen-html/a00029_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MULTIMAP_<\/span>$/;"	a
l00034	doxygen-html/a00030_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MULTIMAP_H_<\/span>$/;"	a
l00034	doxygen-html/a00031_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MULTISET_<\/span>$/;"	a
l00034	doxygen-html/a00032_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_MULTISET_H_<\/span>$/;"	a
l00034	doxygen-html/a00033_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_SET_<\/span>$/;"	a
l00034	doxygen-html/a00034_source.html	/^<a name="l00034"><\/a>00034 <span class="preprocessor">#ifndef _STX_BTREE_SET_H_<\/span>$/;"	a
l00035	doxygen-html/a00024_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_<\/span>$/;"	a
l00035	doxygen-html/a00026_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor">#ifndef _STX_BTREE_H_<\/span>$/;"	a
l00035	doxygen-html/a00027_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MAP_<\/span>$/;"	a
l00035	doxygen-html/a00028_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MAP_H_<\/span>$/;"	a
l00035	doxygen-html/a00029_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MULTIMAP_<\/span>$/;"	a
l00035	doxygen-html/a00030_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MULTIMAP_H_<\/span>$/;"	a
l00035	doxygen-html/a00031_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MULTISET_<\/span>$/;"	a
l00035	doxygen-html/a00032_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_MULTISET_H_<\/span>$/;"	a
l00035	doxygen-html/a00033_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_SET_<\/span>$/;"	a
l00035	doxygen-html/a00034_source.html	/^<a name="l00035"><\/a>00035 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_SET_H_<\/span>$/;"	a
l00036	doxygen-html/a00024_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00026_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span><span class="preprocessor">#define _STX_BTREE_H_<\/span>$/;"	a
l00036	doxygen-html/a00027_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00028_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00029_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00030_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00031_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00032_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00033_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00036	doxygen-html/a00034_source.html	/^<a name="l00036"><\/a>00036 <span class="preprocessor"><\/span>$/;"	a
l00037	doxygen-html/a00024_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00026.html" title="Contains the main B+ tree implementation template class btree.">stx\/btree.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00026_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor"><\/span>$/;"	a
l00037	doxygen-html/a00027_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00028.html" title="Contains the specialized B+ tree template class btree_map.">stx\/btree_map.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00028_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00026.html" title="Contains the main B+ tree implementation template class btree.">stx\/btree.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00029_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00030.html" title="Contains the specialized B+ tree template class btree_multimap.">stx\/btree_multimap.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00030_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00026.html" title="Contains the main B+ tree implementation template class btree.">stx\/btree.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00031_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00032.html" title="Contains the specialized B+ tree template class btree_multiset.">stx\/btree_multiset.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00032_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00026.html" title="Contains the main B+ tree implementation template class btree.">stx\/btree.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00033_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00034.html" title="Contains the specialized B+ tree template class btree_set.">stx\/btree_set.h<\/a>&gt;<\/span>$/;"	a
l00037	doxygen-html/a00034_source.html	/^<a name="l00037"><\/a>00037 <span class="preprocessor">#include &lt;<a class="code" href="a00026.html" title="Contains the main B+ tree implementation template class btree.">stx\/btree.h<\/a>&gt;<\/span>$/;"	a
l00038	doxygen-html/a00024_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00026_source.html	/^<a name="l00038"><\/a>00038 <span class="comment">\/\/ *** Required Headers from the STL<\/span>$/;"	a
l00038	doxygen-html/a00027_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00028_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00029_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00030_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00031_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00032_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00033_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00038	doxygen-html/a00034_source.html	/^<a name="l00038"><\/a>00038 $/;"	a
l00039	doxygen-html/a00024_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#endif \/\/ _STX_BTREE_<\/span>$/;"	a
l00039	doxygen-html/a00026_source.html	/^<a name="l00039"><\/a>00039 $/;"	a
l00039	doxygen-html/a00027_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#endif \/\/ _STX_BTREE_MAP_<\/span>$/;"	a
l00039	doxygen-html/a00028_source.html	/^<a name="l00039"><\/a>00039 <span class="keyword">namespace <\/span>stx {$/;"	a
l00039	doxygen-html/a00029_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#endif \/\/ _STX_BTREE_MULTIMAP_<\/span>$/;"	a
l00039	doxygen-html/a00030_source.html	/^<a name="l00039"><\/a>00039 <span class="keyword">namespace <\/span>stx {$/;"	a
l00039	doxygen-html/a00031_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#endif \/\/ _STX_BTREE_MULTISET_<\/span>$/;"	a
l00039	doxygen-html/a00032_source.html	/^<a name="l00039"><\/a>00039 <span class="keyword">namespace <\/span>stx {$/;"	a
l00039	doxygen-html/a00033_source.html	/^<a name="l00039"><\/a>00039 <span class="preprocessor">#endif \/\/ _STX_BTREE_SET_<\/span>$/;"	a
l00039	doxygen-html/a00034_source.html	/^<a name="l00039"><\/a>00039 <span class="keyword">namespace <\/span>stx {$/;"	a
l00040	doxygen-html/a00026_source.html	/^<a name="l00040"><\/a>00040 <span class="preprocessor">#include &lt;algorithm&gt;<\/span>$/;"	a
l00040	doxygen-html/a00028_source.html	/^<a name="l00040"><\/a>00040 <span class="comment"><\/span>$/;"	a
l00040	doxygen-html/a00030_source.html	/^<a name="l00040"><\/a>00040 <span class="comment"><\/span>$/;"	a
l00040	doxygen-html/a00032_source.html	/^<a name="l00040"><\/a>00040 <span class="comment"><\/span>$/;"	a
l00040	doxygen-html/a00034_source.html	/^<a name="l00040"><\/a>00040 <span class="comment"><\/span>$/;"	a
l00041	doxygen-html/a00026_source.html	/^<a name="l00041"><\/a>00041 <span class="preprocessor">#include &lt;functional&gt;<\/span>$/;"	a
l00041	doxygen-html/a00028_source.html	/^<a name="l00041"><\/a>00041 <span class="comment">\/** @brief Specialized B+ tree template class implementing STL&#39;s map container.<\/span>$/;"	a
l00041	doxygen-html/a00030_source.html	/^<a name="l00041"><\/a>00041 <span class="comment">\/** @brief Specialized B+ tree template class implementing STL&#39;s multimap<\/span>$/;"	a
l00041	doxygen-html/a00032_source.html	/^<a name="l00041"><\/a>00041 <span class="comment">\/** @brief Specialized B+ tree template class implementing STL&#39;s multiset<\/span>$/;"	a
l00041	doxygen-html/a00034_source.html	/^<a name="l00041"><\/a>00041 <span class="comment">\/** @brief Specialized B+ tree template class implementing STL&#39;s set container.<\/span>$/;"	a
l00042	doxygen-html/a00026_source.html	/^<a name="l00042"><\/a>00042 <span class="preprocessor">#include &lt;istream&gt;<\/span>$/;"	a
l00042	doxygen-html/a00028_source.html	/^<a name="l00042"><\/a>00042 <span class="comment"> *<\/span>$/;"	a
l00042	doxygen-html/a00030_source.html	/^<a name="l00042"><\/a>00042 <span class="comment"> * container.<\/span>$/;"	a
l00042	doxygen-html/a00032_source.html	/^<a name="l00042"><\/a>00042 <span class="comment"> * container.<\/span>$/;"	a
l00042	doxygen-html/a00034_source.html	/^<a name="l00042"><\/a>00042 <span class="comment"> *<\/span>$/;"	a
l00043	doxygen-html/a00026_source.html	/^<a name="l00043"><\/a>00043 <span class="preprocessor">#include &lt;ostream&gt;<\/span>$/;"	a
l00043	doxygen-html/a00028_source.html	/^<a name="l00043"><\/a>00043 <span class="comment"> * Implements the STL map using a B+ tree. It can be used as a drop-in<\/span>$/;"	a
l00043	doxygen-html/a00030_source.html	/^<a name="l00043"><\/a>00043 <span class="comment"> *<\/span>$/;"	a
l00043	doxygen-html/a00032_source.html	/^<a name="l00043"><\/a>00043 <span class="comment"> *<\/span>$/;"	a
l00043	doxygen-html/a00034_source.html	/^<a name="l00043"><\/a>00043 <span class="comment"> * Implements the STL set using a B+ tree. It can be used as a drop-in<\/span>$/;"	a
l00044	doxygen-html/a00026_source.html	/^<a name="l00044"><\/a>00044 <span class="preprocessor">#include &lt;memory&gt;<\/span>$/;"	a
l00044	doxygen-html/a00028_source.html	/^<a name="l00044"><\/a>00044 <span class="comment"> * replacement for std::map. Not all asymptotic time requirements are met in<\/span>$/;"	a
l00044	doxygen-html/a00030_source.html	/^<a name="l00044"><\/a>00044 <span class="comment"> * Implements the STL multimap using a B+ tree. It can be used as a drop-in<\/span>$/;"	a
l00044	doxygen-html/a00032_source.html	/^<a name="l00044"><\/a>00044 <span class="comment"> * Implements the STL multiset using a B+ tree. It can be used as a drop-in<\/span>$/;"	a
l00044	doxygen-html/a00034_source.html	/^<a name="l00044"><\/a>00044 <span class="comment"> * replacement for std::set. Not all asymptotic time requirements are met in<\/span>$/;"	a
l00045	doxygen-html/a00026_source.html	/^<a name="l00045"><\/a>00045 <span class="preprocessor">#include &lt;cstddef&gt;<\/span>$/;"	a
l00045	doxygen-html/a00028_source.html	/^<a name="l00045"><\/a>00045 <span class="comment"> * theory. The class has a traits class defining B+ tree properties like slots<\/span>$/;"	a
l00045	doxygen-html/a00030_source.html	/^<a name="l00045"><\/a>00045 <span class="comment"> * replacement for std::multimap. Not all asymptotic time requirements are met<\/span>$/;"	a
l00045	doxygen-html/a00032_source.html	/^<a name="l00045"><\/a>00045 <span class="comment"> * replacement for std::multiset. Not all asymptotic time requirements are met<\/span>$/;"	a
l00045	doxygen-html/a00034_source.html	/^<a name="l00045"><\/a>00045 <span class="comment"> * theory. The class has a traits class defining B+ tree properties like slots<\/span>$/;"	a
l00046	doxygen-html/a00026_source.html	/^<a name="l00046"><\/a>00046 <span class="preprocessor">#include &lt;assert.h&gt;<\/span>$/;"	a
l00046	doxygen-html/a00028_source.html	/^<a name="l00046"><\/a>00046 <span class="comment"> * and self-verification. Furthermore an allocator can be specified for tree<\/span>$/;"	a
l00046	doxygen-html/a00030_source.html	/^<a name="l00046"><\/a>00046 <span class="comment"> * in theory. The class has a traits class defining B+ tree properties like<\/span>$/;"	a
l00046	doxygen-html/a00032_source.html	/^<a name="l00046"><\/a>00046 <span class="comment"> * in theory. The class has a traits class defining B+ tree properties like<\/span>$/;"	a
l00046	doxygen-html/a00034_source.html	/^<a name="l00046"><\/a>00046 <span class="comment"> * and self-verification. Furthermore an allocator can be specified for tree<\/span>$/;"	a
l00047	doxygen-html/a00026_source.html	/^<a name="l00047"><\/a>00047 $/;"	a
l00047	doxygen-html/a00028_source.html	/^<a name="l00047"><\/a>00047 <span class="comment"> * nodes.<\/span>$/;"	a
l00047	doxygen-html/a00030_source.html	/^<a name="l00047"><\/a>00047 <span class="comment"> * slots and self-verification. Furthermore an allocator can be specified for<\/span>$/;"	a
l00047	doxygen-html/a00032_source.html	/^<a name="l00047"><\/a>00047 <span class="comment"> * slots and self-verification. Furthermore an allocator can be specified for<\/span>$/;"	a
l00047	doxygen-html/a00034_source.html	/^<a name="l00047"><\/a>00047 <span class="comment"> * nodes.<\/span>$/;"	a
l00048	doxygen-html/a00026_source.html	/^<a name="l00048"><\/a>00048 <span class="comment">\/\/ *** Debugging Macros<\/span>$/;"	a
l00048	doxygen-html/a00028_source.html	/^<a name="l00048"><\/a>00048 <span class="comment"> *<\/span>$/;"	a
l00048	doxygen-html/a00030_source.html	/^<a name="l00048"><\/a>00048 <span class="comment"> * tree nodes.<\/span>$/;"	a
l00048	doxygen-html/a00032_source.html	/^<a name="l00048"><\/a>00048 <span class="comment"> * tree nodes.<\/span>$/;"	a
l00048	doxygen-html/a00034_source.html	/^<a name="l00048"><\/a>00048 <span class="comment"> *<\/span>$/;"	a
l00049	doxygen-html/a00026_source.html	/^<a name="l00049"><\/a>00049 $/;"	a
l00049	doxygen-html/a00028_source.html	/^<a name="l00049"><\/a>00049 <span class="comment"> * Most noteworthy difference to the default red-black implementation of<\/span>$/;"	a
l00049	doxygen-html/a00030_source.html	/^<a name="l00049"><\/a>00049 <span class="comment"> *<\/span>$/;"	a
l00049	doxygen-html/a00032_source.html	/^<a name="l00049"><\/a>00049 <span class="comment"> *<\/span>$/;"	a
l00049	doxygen-html/a00034_source.html	/^<a name="l00049"><\/a>00049 <span class="comment"> * It is somewhat inefficient to implement a set using a B+ tree, a plain B<\/span>$/;"	a
l00050	doxygen-html/a00026_source.html	/^<a name="l00050"><\/a>00050 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l00050	doxygen-html/a00028_source.html	/^<a name="l00050"><\/a>00050 <span class="comment"> * std::map is that the B+ tree does not hold key and data pair together in<\/span>$/;"	a
l00050	doxygen-html/a00030_source.html	/^<a name="l00050"><\/a>00050 <span class="comment"> * Most noteworthy difference to the default red-black implementation of<\/span>$/;"	a
l00050	doxygen-html/a00032_source.html	/^<a name="l00050"><\/a>00050 <span class="comment"> * It is somewhat inefficient to implement a multiset using a B+ tree, a plain<\/span>$/;"	a
l00050	doxygen-html/a00034_source.html	/^<a name="l00050"><\/a>00050 <span class="comment"> * tree would hold fewer copies of the keys.<\/span>$/;"	a
l00051	doxygen-html/a00026_source.html	/^<a name="l00051"><\/a>00051 <span class="preprocessor"><\/span>$/;"	a
l00051	doxygen-html/a00028_source.html	/^<a name="l00051"><\/a>00051 <span class="comment"> * memory. Instead each B+ tree node has two arrays of keys and data<\/span>$/;"	a
l00051	doxygen-html/a00030_source.html	/^<a name="l00051"><\/a>00051 <span class="comment"> * std::multimap is that the B+ tree does not hold key and data pair together<\/span>$/;"	a
l00051	doxygen-html/a00032_source.html	/^<a name="l00051"><\/a>00051 <span class="comment"> * B tree would hold fewer copies of the keys.<\/span>$/;"	a
l00051	doxygen-html/a00034_source.html	/^<a name="l00051"><\/a>00051 <span class="comment"> *<\/span>$/;"	a
l00052	doxygen-html/a00026_source.html	/^<a name="l00052"><\/a>00052 <span class="preprocessor">#include &lt;iostream&gt;<\/span>$/;"	a
l00052	doxygen-html/a00028_source.html	/^<a name="l00052"><\/a>00052 <span class="comment"> * values. This design directly generates many problems in implementing the<\/span>$/;"	a
l00052	doxygen-html/a00030_source.html	/^<a name="l00052"><\/a>00052 <span class="comment"> * in memory. Instead each B+ tree node has two arrays of keys and data<\/span>$/;"	a
l00052	doxygen-html/a00032_source.html	/^<a name="l00052"><\/a>00052 <span class="comment"> *<\/span>$/;"	a
l00052	doxygen-html/a00034_source.html	/^<a name="l00052"><\/a>00052 <span class="comment"> * The set class is derived from the base implementation class btree by<\/span>$/;"	a
l00053	doxygen-html/a00026_source.html	/^<a name="l00053"><\/a>00053 <span class="comment"><\/span>$/;"	a
l00053	doxygen-html/a00028_source.html	/^<a name="l00053"><\/a>00053 <span class="comment"> * iterator&#39;s operator&#39;s which return value_type composition pairs.<\/span>$/;"	a
l00053	doxygen-html/a00030_source.html	/^<a name="l00053"><\/a>00053 <span class="comment"> * values. This design directly generates many problems in implementing the<\/span>$/;"	a
l00053	doxygen-html/a00032_source.html	/^<a name="l00053"><\/a>00053 <span class="comment"> * The set class is derived from the base implementation class btree by<\/span>$/;"	a
l00053	doxygen-html/a00034_source.html	/^<a name="l00053"><\/a>00053 <span class="comment"> * specifying an empty struct as data_type. All function are adapted to provide<\/span>$/;"	a
l00054	doxygen-html/a00026_source.html	/^<a name="l00054"><\/a>00054 <span class="comment">\/\/\/ Print out debug information to std::cout if BTREE_DEBUG is defined.<\/span>$/;"	a
l00054	doxygen-html/a00028_source.html	/^<a name="l00054"><\/a>00054 <span class="comment"> *\/<\/span>$/;"	a
l00054	doxygen-html/a00030_source.html	/^<a name="l00054"><\/a>00054 <span class="comment"> * iterator&#39;s operator&#39;s which return value_type composition pairs.<\/span>$/;"	a
l00054	doxygen-html/a00032_source.html	/^<a name="l00054"><\/a>00054 <span class="comment"> * specifying an empty struct as data_type. All function are adapted to provide<\/span>$/;"	a
l00054	doxygen-html/a00034_source.html	/^<a name="l00054"><\/a>00054 <span class="comment"> * the inner class with placeholder objects. Most tricky to get right were the<\/span>$/;"	a
l00055	doxygen-html/a00026_source.html	/^<a name="l00055"><\/a><a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345">00055<\/a> <span class="comment"><\/span><span class="preprocessor">#define BTREE_PRINT(x)          do { if (debug) (std::cout &lt;&lt; x &lt;&lt; std::endl); } while(0)<\/span>$/;"	a
l00055	doxygen-html/a00028_source.html	/^<a name="l00055"><\/a>00055 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key, <span class="keyword">typename<\/span> _Data,$/;"	a
l00055	doxygen-html/a00030_source.html	/^<a name="l00055"><\/a>00055 <span class="comment"> *\/<\/span>$/;"	a
l00055	doxygen-html/a00032_source.html	/^<a name="l00055"><\/a>00055 <span class="comment"> * the inner class with placeholder objects. Most tricky to get right were the<\/span>$/;"	a
l00055	doxygen-html/a00034_source.html	/^<a name="l00055"><\/a>00055 <span class="comment"> * return type&#39;s of iterators which as value_type should be the same as<\/span>$/;"	a
l00056	doxygen-html/a00026_source.html	/^<a name="l00056"><\/a>00056 <span class="preprocessor"><\/span><span class="comment"><\/span>$/;"	a
l00056	doxygen-html/a00028_source.html	/^<a name="l00056"><\/a>00056           <span class="keyword">typename<\/span> _Compare = std::less&lt;_Key&gt;,$/;"	a
l00056	doxygen-html/a00030_source.html	/^<a name="l00056"><\/a>00056 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key, <span class="keyword">typename<\/span> _Data,$/;"	a
l00056	doxygen-html/a00032_source.html	/^<a name="l00056"><\/a>00056 <span class="comment"> * return type&#39;s of iterators which as value_type should be the same as<\/span>$/;"	a
l00056	doxygen-html/a00034_source.html	/^<a name="l00056"><\/a>00056 <span class="comment"> * key_type, and not a pair of key and dummy-struct. This is taken case of<\/span>$/;"	a
l00057	doxygen-html/a00026_source.html	/^<a name="l00057"><\/a>00057 <span class="comment">\/\/\/ Assertion only if BTREE_DEBUG is defined. This is not used in verify().<\/span>$/;"	a
l00057	doxygen-html/a00028_source.html	/^<a name="l00057"><\/a>00057           <span class="keyword">typename<\/span> _Traits = btree_default_map_traits&lt;_Key, _Data&gt;,$/;"	a
l00057	doxygen-html/a00030_source.html	/^<a name="l00057"><\/a>00057           <span class="keyword">typename<\/span> _Compare = std::less&lt;_Key&gt;,$/;"	a
l00057	doxygen-html/a00032_source.html	/^<a name="l00057"><\/a>00057 <span class="comment"> * key_type, and not a pair of key and dummy-struct. This is taken case of<\/span>$/;"	a
l00057	doxygen-html/a00034_source.html	/^<a name="l00057"><\/a>00057 <span class="comment"> * using some template magic in the btree class.<\/span>$/;"	a
l00058	doxygen-html/a00026_source.html	/^<a name="l00058"><\/a><a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb">00058<\/a> <span class="comment"><\/span><span class="preprocessor">#define BTREE_ASSERT(x)         do { assert(x); } while(0)<\/span>$/;"	a
l00058	doxygen-html/a00028_source.html	/^<a name="l00058"><\/a>00058           <span class="keyword">typename<\/span> _Alloc = std::allocator&lt;std::pair&lt;_Key, _Data&gt; &gt; &gt;$/;"	a
l00058	doxygen-html/a00030_source.html	/^<a name="l00058"><\/a>00058           <span class="keyword">typename<\/span> _Traits = btree_default_map_traits&lt;_Key, _Data&gt;,$/;"	a
l00058	doxygen-html/a00032_source.html	/^<a name="l00058"><\/a>00058 <span class="comment"> * using some template magic in the btree class.<\/span>$/;"	a
l00058	doxygen-html/a00034_source.html	/^<a name="l00058"><\/a>00058 <span class="comment"> *\/<\/span>$/;"	a
l00059	doxygen-html/a00026_source.html	/^<a name="l00059"><\/a>00059 <span class="preprocessor"><\/span>$/;"	a
l00059	doxygen-html/a00028_source.html	/^<a name="l00059"><\/a><a class="code" href="a00004.html">00059<\/a> <span class="keyword">class <\/span><a class="code" href="a00004.html" title="Specialized B+ tree template class implementing STL&#39;s map container.">btree_map<\/a>$/;"	a
l00059	doxygen-html/a00030_source.html	/^<a name="l00059"><\/a>00059           <span class="keyword">typename<\/span> _Alloc = std::allocator&lt;std::pair&lt;_Key, _Data&gt; &gt; &gt;$/;"	a
l00059	doxygen-html/a00032_source.html	/^<a name="l00059"><\/a>00059 <span class="comment"> *\/<\/span>$/;"	a
l00059	doxygen-html/a00034_source.html	/^<a name="l00059"><\/a>00059 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key,$/;"	a
l00060	doxygen-html/a00026_source.html	/^<a name="l00060"><\/a>00060 <span class="preprocessor">#else<\/span>$/;"	a
l00060	doxygen-html/a00028_source.html	/^<a name="l00060"><\/a>00060 {$/;"	a
l00060	doxygen-html/a00030_source.html	/^<a name="l00060"><\/a><a class="code" href="a00005.html">00060<\/a> <span class="keyword">class <\/span><a class="code" href="a00005.html" title="Specialized B+ tree template class implementing STL&#39;s multimap container.">btree_multimap<\/a>$/;"	a
l00060	doxygen-html/a00032_source.html	/^<a name="l00060"><\/a>00060 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key,$/;"	a
l00060	doxygen-html/a00034_source.html	/^<a name="l00060"><\/a>00060           <span class="keyword">typename<\/span> _Compare = std::less&lt;_Key&gt;,$/;"	a
l00061	doxygen-html/a00026_source.html	/^<a name="l00061"><\/a>00061 <span class="preprocessor"><\/span><span class="comment"><\/span>$/;"	a
l00061	doxygen-html/a00028_source.html	/^<a name="l00061"><\/a>00061 <span class="keyword">public<\/span>:$/;"	a
l00061	doxygen-html/a00030_source.html	/^<a name="l00061"><\/a>00061 {$/;"	a
l00061	doxygen-html/a00032_source.html	/^<a name="l00061"><\/a>00061           <span class="keyword">typename<\/span> _Compare = std::less&lt;_Key&gt;,$/;"	a
l00061	doxygen-html/a00034_source.html	/^<a name="l00061"><\/a>00061           <span class="keyword">typename<\/span> _Traits = btree_default_set_traits&lt;_Key&gt;,$/;"	a
l00062	doxygen-html/a00026_source.html	/^<a name="l00062"><\/a>00062 <span class="comment">\/\/\/ Print out debug information to std::cout if BTREE_DEBUG is defined.<\/span>$/;"	a
l00062	doxygen-html/a00028_source.html	/^<a name="l00062"><\/a>00062     <span class="comment">\/\/ *** Template Parameter Types<\/span>$/;"	a
l00062	doxygen-html/a00030_source.html	/^<a name="l00062"><\/a>00062 <span class="keyword">public<\/span>:$/;"	a
l00062	doxygen-html/a00032_source.html	/^<a name="l00062"><\/a>00062           <span class="keyword">typename<\/span> _Traits = btree_default_set_traits&lt;_Key&gt;,$/;"	a
l00062	doxygen-html/a00034_source.html	/^<a name="l00062"><\/a>00062           <span class="keyword">typename<\/span> _Alloc = std::allocator&lt;_Key&gt; &gt;$/;"	a
l00063	doxygen-html/a00026_source.html	/^<a name="l00063"><\/a>00063 <span class="comment"><\/span><span class="preprocessor">#define BTREE_PRINT(x)          do { } while(0)<\/span>$/;"	a
l00063	doxygen-html/a00028_source.html	/^<a name="l00063"><\/a>00063 <span class="comment"><\/span>$/;"	a
l00063	doxygen-html/a00030_source.html	/^<a name="l00063"><\/a>00063     <span class="comment">\/\/ *** Template Parameter Types<\/span>$/;"	a
l00063	doxygen-html/a00032_source.html	/^<a name="l00063"><\/a>00063           <span class="keyword">typename<\/span> _Alloc = std::allocator&lt;_Key&gt; &gt;$/;"	a
l00063	doxygen-html/a00034_source.html	/^<a name="l00063"><\/a><a class="code" href="a00009.html">00063<\/a> <span class="keyword">class <\/span><a class="code" href="a00009.html" title="Specialized B+ tree template class implementing STL&#39;s set container.">btree_set<\/a>$/;"	a
l00064	doxygen-html/a00026_source.html	/^<a name="l00064"><\/a>00064 <span class="preprocessor"><\/span><span class="comment"><\/span>$/;"	a
l00064	doxygen-html/a00028_source.html	/^<a name="l00064"><\/a>00064 <span class="comment">    \/\/\/ First template parameter: The key type of the btree. This is stored in<\/span>$/;"	a
l00064	doxygen-html/a00030_source.html	/^<a name="l00064"><\/a>00064 <span class="comment"><\/span>$/;"	a
l00064	doxygen-html/a00032_source.html	/^<a name="l00064"><\/a><a class="code" href="a00006.html">00064<\/a> <span class="keyword">class <\/span><a class="code" href="a00006.html" title="Specialized B+ tree template class implementing STL&#39;s multiset container.">btree_multiset<\/a>$/;"	a
l00064	doxygen-html/a00034_source.html	/^<a name="l00064"><\/a>00064 {$/;"	a
l00065	doxygen-html/a00026_source.html	/^<a name="l00065"><\/a>00065 <span class="comment">\/\/\/ Assertion only if BTREE_DEBUG is defined. This is not used in verify().<\/span>$/;"	a
l00065	doxygen-html/a00028_source.html	/^<a name="l00065"><\/a>00065 <span class="comment">    \/\/\/ inner nodes and leaves<\/span>$/;"	a
l00065	doxygen-html/a00030_source.html	/^<a name="l00065"><\/a>00065 <span class="comment">    \/\/\/ First template parameter: The key type of the btree. This is stored in<\/span>$/;"	a
l00065	doxygen-html/a00032_source.html	/^<a name="l00065"><\/a>00065 {$/;"	a
l00065	doxygen-html/a00034_source.html	/^<a name="l00065"><\/a>00065 <span class="keyword">public<\/span>:$/;"	a
l00066	doxygen-html/a00026_source.html	/^<a name="l00066"><\/a>00066 <span class="comment"><\/span><span class="preprocessor">#define BTREE_ASSERT(x)         do { } while(0)<\/span>$/;"	a
l00066	doxygen-html/a00028_source.html	/^<a name="l00066"><\/a><a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92">00066<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Key                        <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>;$/;"	a
l00066	doxygen-html/a00030_source.html	/^<a name="l00066"><\/a>00066 <span class="comment">    \/\/\/ inner nodes and leaves<\/span>$/;"	a
l00066	doxygen-html/a00032_source.html	/^<a name="l00066"><\/a>00066 <span class="keyword">public<\/span>:$/;"	a
l00066	doxygen-html/a00034_source.html	/^<a name="l00066"><\/a>00066     <span class="comment">\/\/ *** Template Parameter Types<\/span>$/;"	a
l00067	doxygen-html/a00026_source.html	/^<a name="l00067"><\/a>00067 <span class="preprocessor"><\/span>$/;"	a
l00067	doxygen-html/a00028_source.html	/^<a name="l00067"><\/a>00067 <span class="comment"><\/span>$/;"	a
l00067	doxygen-html/a00030_source.html	/^<a name="l00067"><\/a><a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8">00067<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Key                        <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>;$/;"	a
l00067	doxygen-html/a00032_source.html	/^<a name="l00067"><\/a>00067     <span class="comment">\/\/ *** Template Parameter Types<\/span>$/;"	a
l00067	doxygen-html/a00034_source.html	/^<a name="l00067"><\/a>00067 <span class="comment"><\/span>$/;"	a
l00068	doxygen-html/a00026_source.html	/^<a name="l00068"><\/a>00068 <span class="preprocessor">#endif<\/span>$/;"	a
l00068	doxygen-html/a00028_source.html	/^<a name="l00068"><\/a>00068 <span class="comment">    \/\/\/ Second template parameter: The data type associated with each<\/span>$/;"	a
l00068	doxygen-html/a00030_source.html	/^<a name="l00068"><\/a>00068 <span class="comment"><\/span>$/;"	a
l00068	doxygen-html/a00032_source.html	/^<a name="l00068"><\/a>00068 <span class="comment"><\/span>$/;"	a
l00068	doxygen-html/a00034_source.html	/^<a name="l00068"><\/a>00068 <span class="comment">    \/\/\/ First template parameter: The key type of the B+ tree. This is stored<\/span>$/;"	a
l00069	doxygen-html/a00026_source.html	/^<a name="l00069"><\/a>00069 <span class="preprocessor"><\/span><span class="comment"><\/span>$/;"	a
l00069	doxygen-html/a00028_source.html	/^<a name="l00069"><\/a>00069 <span class="comment">    \/\/\/ key. Stored in the B+ tree&#39;s leaves<\/span>$/;"	a
l00069	doxygen-html/a00030_source.html	/^<a name="l00069"><\/a>00069 <span class="comment">    \/\/\/ Second template parameter: The data type associated with each<\/span>$/;"	a
l00069	doxygen-html/a00032_source.html	/^<a name="l00069"><\/a>00069 <span class="comment">    \/\/\/ First template parameter: The key type of the btree. This is stored in<\/span>$/;"	a
l00069	doxygen-html/a00034_source.html	/^<a name="l00069"><\/a>00069 <span class="comment">    \/\/\/ in inner nodes and leaves<\/span>$/;"	a
l00070	doxygen-html/a00026_source.html	/^<a name="l00070"><\/a>00070 <span class="comment">\/\/\/ The maximum of a and b. Used in some compile-time formulas.<\/span>$/;"	a
l00070	doxygen-html/a00028_source.html	/^<a name="l00070"><\/a><a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb">00070<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Data                       <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>;$/;"	a
l00070	doxygen-html/a00030_source.html	/^<a name="l00070"><\/a>00070 <span class="comment">    \/\/\/ key. Stored in the B+ tree&#39;s leaves<\/span>$/;"	a
l00070	doxygen-html/a00032_source.html	/^<a name="l00070"><\/a>00070 <span class="comment">    \/\/\/ inner nodes and leaves<\/span>$/;"	a
l00070	doxygen-html/a00034_source.html	/^<a name="l00070"><\/a><a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260">00070<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Key                        <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>;$/;"	a
l00071	doxygen-html/a00026_source.html	/^<a name="l00071"><\/a><a class="code" href="a00026.html#a5d7b0c98bc4c3029d6d76199caa35b19">00071<\/a> <span class="comment"><\/span><span class="preprocessor">#define BTREE_MAX(a,b)          ((a) &lt; (b) ? (b) : (a))<\/span>$/;"	a
l00071	doxygen-html/a00028_source.html	/^<a name="l00071"><\/a>00071 <span class="comment"><\/span>$/;"	a
l00071	doxygen-html/a00030_source.html	/^<a name="l00071"><\/a><a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299">00071<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Data                       <a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299" title="Second template parameter: The data type associated with each key.">data_type<\/a>;$/;"	a
l00071	doxygen-html/a00032_source.html	/^<a name="l00071"><\/a><a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e">00071<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Key                        <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>;$/;"	a
l00071	doxygen-html/a00034_source.html	/^<a name="l00071"><\/a>00071 <span class="comment"><\/span>$/;"	a
l00072	doxygen-html/a00026_source.html	/^<a name="l00072"><\/a>00072 <span class="preprocessor"><\/span>$/;"	a
l00072	doxygen-html/a00028_source.html	/^<a name="l00072"><\/a>00072 <span class="comment">    \/\/\/ Third template parameter: Key comparison function object<\/span>$/;"	a
l00072	doxygen-html/a00030_source.html	/^<a name="l00072"><\/a>00072 <span class="comment"><\/span>$/;"	a
l00072	doxygen-html/a00032_source.html	/^<a name="l00072"><\/a>00072 <span class="comment"><\/span>$/;"	a
l00072	doxygen-html/a00034_source.html	/^<a name="l00072"><\/a>00072 <span class="comment">    \/\/\/ Second template parameter: Key comparison function object<\/span>$/;"	a
l00073	doxygen-html/a00026_source.html	/^<a name="l00073"><\/a>00073 <span class="preprocessor">#ifndef BTREE_FRIENDS<\/span>$/;"	a
l00073	doxygen-html/a00028_source.html	/^<a name="l00073"><\/a><a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1">00073<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Compare                    <a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1" title="Third template parameter: Key comparison function object.">key_compare<\/a>;$/;"	a
l00073	doxygen-html/a00030_source.html	/^<a name="l00073"><\/a>00073 <span class="comment">    \/\/\/ Third template parameter: Key comparison function object<\/span>$/;"	a
l00073	doxygen-html/a00032_source.html	/^<a name="l00073"><\/a>00073 <span class="comment">    \/\/\/ Second template parameter: Key comparison function object<\/span>$/;"	a
l00073	doxygen-html/a00034_source.html	/^<a name="l00073"><\/a><a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f">00073<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Compare                    <a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f" title="Second template parameter: Key comparison function object.">key_compare<\/a>;$/;"	a
l00074	doxygen-html/a00026_source.html	/^<a name="l00074"><\/a>00074 <span class="preprocessor"><\/span><span class="comment">\/\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00074	doxygen-html/a00028_source.html	/^<a name="l00074"><\/a>00074 <span class="comment"><\/span>$/;"	a
l00074	doxygen-html/a00030_source.html	/^<a name="l00074"><\/a><a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012">00074<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Compare                    <a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012" title="Third template parameter: Key comparison function object.">key_compare<\/a>;$/;"	a
l00074	doxygen-html/a00032_source.html	/^<a name="l00074"><\/a><a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21">00074<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Compare                    <a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21" title="Second template parameter: Key comparison function object.">key_compare<\/a>;$/;"	a
l00074	doxygen-html/a00034_source.html	/^<a name="l00074"><\/a>00074 <span class="comment"><\/span>$/;"	a
l00075	doxygen-html/a00026_source.html	/^<a name="l00075"><\/a>00075 <span class="comment"><\/span><span class="comment">\/\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00075	doxygen-html/a00028_source.html	/^<a name="l00075"><\/a>00075 <span class="comment">    \/\/\/ Fourth template parameter: Traits object used to define more parameters<\/span>$/;"	a
l00075	doxygen-html/a00030_source.html	/^<a name="l00075"><\/a>00075 <span class="comment"><\/span>$/;"	a
l00075	doxygen-html/a00032_source.html	/^<a name="l00075"><\/a>00075 <span class="comment"><\/span>$/;"	a
l00075	doxygen-html/a00034_source.html	/^<a name="l00075"><\/a>00075 <span class="comment">    \/\/\/ Third template parameter: Traits object used to define more parameters<\/span>$/;"	a
l00076	doxygen-html/a00026_source.html	/^<a name="l00076"><\/a>00076 <span class="comment"><\/span><span class="comment">\/\/\/ tree.<\/span>$/;"	a
l00076	doxygen-html/a00028_source.html	/^<a name="l00076"><\/a>00076 <span class="comment">    \/\/\/ of the B+ tree<\/span>$/;"	a
l00076	doxygen-html/a00030_source.html	/^<a name="l00076"><\/a>00076 <span class="comment">    \/\/\/ Fourth template parameter: Traits object used to define more parameters<\/span>$/;"	a
l00076	doxygen-html/a00032_source.html	/^<a name="l00076"><\/a>00076 <span class="comment">    \/\/\/ Third template parameter: Traits object used to define more parameters<\/span>$/;"	a
l00076	doxygen-html/a00034_source.html	/^<a name="l00076"><\/a>00076 <span class="comment">    \/\/\/ of the B+ tree<\/span>$/;"	a
l00077	doxygen-html/a00026_source.html	/^<a name="l00077"><\/a><a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320">00077<\/a> <span class="comment"><\/span><span class="preprocessor">#define BTREE_FRIENDS           friend class btree_friend;<\/span>$/;"	a
l00077	doxygen-html/a00028_source.html	/^<a name="l00077"><\/a><a class="code" href="a00004.html#ae6754ad8a27ece08ef50350eb6848e77">00077<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Traits                     <a class="code" href="a00004.html#ae6754ad8a27ece08ef50350eb6848e77" title="Fourth template parameter: Traits object used to define more parameters of the B+ tree...">traits<\/a>;$/;"	a
l00077	doxygen-html/a00030_source.html	/^<a name="l00077"><\/a>00077 <span class="comment">    \/\/\/ of the B+ tree<\/span>$/;"	a
l00077	doxygen-html/a00032_source.html	/^<a name="l00077"><\/a>00077 <span class="comment">    \/\/\/ of the B+ tree<\/span>$/;"	a
l00077	doxygen-html/a00034_source.html	/^<a name="l00077"><\/a><a class="code" href="a00009.html#ae4153912a1f97b51f7bbad71b3129008">00077<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Traits                     <a class="code" href="a00009.html#ae4153912a1f97b51f7bbad71b3129008" title="Third template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>;$/;"	a
l00078	doxygen-html/a00026_source.html	/^<a name="l00078"><\/a>00078 <span class="preprocessor"><\/span><span class="preprocessor">#endif<\/span>$/;"	a
l00078	doxygen-html/a00028_source.html	/^<a name="l00078"><\/a>00078 <span class="comment"><\/span>$/;"	a
l00078	doxygen-html/a00030_source.html	/^<a name="l00078"><\/a><a class="code" href="a00005.html#a1156d87c06fbc9814828d9a83b717c0e">00078<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Traits                     <a class="code" href="a00005.html#a1156d87c06fbc9814828d9a83b717c0e" title="Fourth template parameter: Traits object used to define more parameters of the B+ tree...">traits<\/a>;$/;"	a
l00078	doxygen-html/a00032_source.html	/^<a name="l00078"><\/a><a class="code" href="a00006.html#adf34a1c10a3b0e0c1caa0358b9d4f059">00078<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Traits                     <a class="code" href="a00006.html#adf34a1c10a3b0e0c1caa0358b9d4f059" title="Third template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>;$/;"	a
l00078	doxygen-html/a00034_source.html	/^<a name="l00078"><\/a>00078 <span class="comment"><\/span>$/;"	a
l00079	doxygen-html/a00026_source.html	/^<a name="l00079"><\/a>00079 <span class="preprocessor"><\/span><span class="comment"><\/span>$/;"	a
l00079	doxygen-html/a00028_source.html	/^<a name="l00079"><\/a>00079 <span class="comment">    \/\/\/ Fifth template parameter: STL allocator<\/span>$/;"	a
l00079	doxygen-html/a00030_source.html	/^<a name="l00079"><\/a>00079 <span class="comment"><\/span>$/;"	a
l00079	doxygen-html/a00032_source.html	/^<a name="l00079"><\/a>00079 <span class="comment"><\/span>$/;"	a
l00079	doxygen-html/a00034_source.html	/^<a name="l00079"><\/a>00079 <span class="comment">    \/\/\/ Fourth template parameter: STL allocator<\/span>$/;"	a
l00080	doxygen-html/a00026_source.html	/^<a name="l00080"><\/a>00080 <span class="comment">\/\/\/ STX - Some Template Extensions namespace<\/span>$/;"	a
l00080	doxygen-html/a00028_source.html	/^<a name="l00080"><\/a><a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343">00080<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Alloc                      <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>;$/;"	a
l00080	doxygen-html/a00030_source.html	/^<a name="l00080"><\/a>00080 <span class="comment">    \/\/\/ Fifth template parameter: STL allocator<\/span>$/;"	a
l00080	doxygen-html/a00032_source.html	/^<a name="l00080"><\/a>00080 <span class="comment">    \/\/\/ Fourth template parameter: STL allocator<\/span>$/;"	a
l00080	doxygen-html/a00034_source.html	/^<a name="l00080"><\/a><a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b">00080<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Alloc                      <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>;$/;"	a
l00081	doxygen-html/a00026_source.html	/^<a name="l00081"><\/a><a class="code" href="a00036.html">00081<\/a> <span class="comment"><\/span><span class="keyword">namespace <\/span>stx {$/;"	a
l00081	doxygen-html/a00028_source.html	/^<a name="l00081"><\/a>00081 $/;"	a
l00081	doxygen-html/a00030_source.html	/^<a name="l00081"><\/a><a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568">00081<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Alloc                      <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>;$/;"	a
l00081	doxygen-html/a00032_source.html	/^<a name="l00081"><\/a><a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799">00081<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Alloc                      <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>;$/;"	a
l00081	doxygen-html/a00034_source.html	/^<a name="l00081"><\/a>00081 <span class="comment"><\/span>$/;"	a
l00082	doxygen-html/a00026_source.html	/^<a name="l00082"><\/a>00082 <span class="comment"><\/span>$/;"	a
l00082	doxygen-html/a00028_source.html	/^<a name="l00082"><\/a>00082     <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00082	doxygen-html/a00030_source.html	/^<a name="l00082"><\/a>00082 $/;"	a
l00082	doxygen-html/a00032_source.html	/^<a name="l00082"><\/a>00082 $/;"	a
l00082	doxygen-html/a00034_source.html	/^<a name="l00082"><\/a>00082 <span class="comment">    \/\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00083	doxygen-html/a00026_source.html	/^<a name="l00083"><\/a>00083 <span class="comment">\/** Generates default traits for a B+ tree used as a set. It estimates leaf and<\/span>$/;"	a
l00083	doxygen-html/a00028_source.html	/^<a name="l00083"><\/a>00083     <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00083	doxygen-html/a00030_source.html	/^<a name="l00083"><\/a>00083     <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00083	doxygen-html/a00032_source.html	/^<a name="l00083"><\/a>00083     <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00083	doxygen-html/a00034_source.html	/^<a name="l00083"><\/a>00083 <span class="comment">    \/\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00084	doxygen-html/a00026_source.html	/^<a name="l00084"><\/a>00084 <span class="comment"> * inner node sizes by assuming a cache line size of 256 bytes. *\/<\/span>$/;"	a
l00084	doxygen-html/a00028_source.html	/^<a name="l00084"><\/a>00084     <span class="comment">\/\/ tree.<\/span>$/;"	a
l00084	doxygen-html/a00030_source.html	/^<a name="l00084"><\/a>00084     <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00084	doxygen-html/a00032_source.html	/^<a name="l00084"><\/a>00084     <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00084	doxygen-html/a00034_source.html	/^<a name="l00084"><\/a>00084 <span class="comment">    \/\/\/ tree.<\/span>$/;"	a
l00085	doxygen-html/a00026_source.html	/^<a name="l00085"><\/a>00085 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key&gt;$/;"	a
l00085	doxygen-html/a00028_source.html	/^<a name="l00085"><\/a>00085     <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00085	doxygen-html/a00030_source.html	/^<a name="l00085"><\/a>00085     <span class="comment">\/\/ tree.<\/span>$/;"	a
l00085	doxygen-html/a00032_source.html	/^<a name="l00085"><\/a>00085     <span class="comment">\/\/ tree.<\/span>$/;"	a
l00085	doxygen-html/a00034_source.html	/^<a name="l00085"><\/a>00085 <span class="comment"><\/span>    <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00086	doxygen-html/a00026_source.html	/^<a name="l00086"><\/a><a class="code" href="a00003.html">00086<\/a> <span class="keyword">struct <\/span><a class="code" href="a00003.html" title="Generates default traits for a B+ tree used as a set.">btree_default_set_traits<\/a>$/;"	a
l00086	doxygen-html/a00028_source.html	/^<a name="l00086"><\/a>00086 $/;"	a
l00086	doxygen-html/a00030_source.html	/^<a name="l00086"><\/a>00086     <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00086	doxygen-html/a00032_source.html	/^<a name="l00086"><\/a>00086     <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00086	doxygen-html/a00034_source.html	/^<a name="l00086"><\/a>00086 $/;"	a
l00087	doxygen-html/a00026_source.html	/^<a name="l00087"><\/a>00087 {<span class="comment"><\/span>$/;"	a
l00087	doxygen-html/a00028_source.html	/^<a name="l00087"><\/a>00087 <span class="keyword">public<\/span>:$/;"	a
l00087	doxygen-html/a00030_source.html	/^<a name="l00087"><\/a>00087 $/;"	a
l00087	doxygen-html/a00032_source.html	/^<a name="l00087"><\/a>00087 $/;"	a
l00087	doxygen-html/a00034_source.html	/^<a name="l00087"><\/a>00087 <span class="keyword">private<\/span>:$/;"	a
l00088	doxygen-html/a00026_source.html	/^<a name="l00088"><\/a>00088 <span class="comment">    \/\/\/ If true, the tree will self verify it&#39;s invariants after each insert()<\/span>$/;"	a
l00088	doxygen-html/a00028_source.html	/^<a name="l00088"><\/a>00088     <span class="comment">\/\/ *** Constructed Types<\/span>$/;"	a
l00088	doxygen-html/a00030_source.html	/^<a name="l00088"><\/a>00088 <span class="keyword">public<\/span>:$/;"	a
l00088	doxygen-html/a00032_source.html	/^<a name="l00088"><\/a>00088 <span class="keyword">private<\/span>:$/;"	a
l00088	doxygen-html/a00034_source.html	/^<a name="l00088"><\/a>00088     <span class="comment">\/\/ *** The data_type<\/span>$/;"	a
l00089	doxygen-html/a00026_source.html	/^<a name="l00089"><\/a>00089 <span class="comment">    \/\/\/ or erase(). The header must have been compiled with BTREE_DEBUG defined.<\/span>$/;"	a
l00089	doxygen-html/a00028_source.html	/^<a name="l00089"><\/a>00089 <span class="comment"><\/span>$/;"	a
l00089	doxygen-html/a00030_source.html	/^<a name="l00089"><\/a>00089     <span class="comment">\/\/ *** Constructed Types<\/span>$/;"	a
l00089	doxygen-html/a00032_source.html	/^<a name="l00089"><\/a>00089     <span class="comment">\/\/ *** The Data_Type<\/span>$/;"	a
l00089	doxygen-html/a00034_source.html	/^<a name="l00089"><\/a>00089 <span class="comment"><\/span>$/;"	a
l00090	doxygen-html/a00026_source.html	/^<a name="l00090"><\/a><a class="code" href="a00003.html#abbb0859c6f7a2b887863011026e28ab1">00090<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>   <a class="code" href="a00003.html#abbb0859c6f7a2b887863011026e28ab1" title="If true, the tree will self verify it&#39;s invariants after each insert() or erase().">selfverify<\/a> = <span class="keyword">false<\/span>;$/;"	a
l00090	doxygen-html/a00028_source.html	/^<a name="l00090"><\/a>00090 <span class="comment">    \/\/\/ Typedef of our own type<\/span>$/;"	a
l00090	doxygen-html/a00030_source.html	/^<a name="l00090"><\/a>00090 <span class="comment"><\/span>$/;"	a
l00090	doxygen-html/a00032_source.html	/^<a name="l00090"><\/a>00090 <span class="comment"><\/span>$/;"	a
l00090	doxygen-html/a00034_source.html	/^<a name="l00090"><\/a>00090 <span class="comment">    \/\/\/ \\internal The empty struct used as a placeholder for the data_type<\/span>$/;"	a
l00091	doxygen-html/a00026_source.html	/^<a name="l00091"><\/a>00091 <span class="comment"><\/span>$/;"	a
l00091	doxygen-html/a00028_source.html	/^<a name="l00091"><\/a><a class="code" href="a00004.html#a85feee85c59b090041a84a7641574397">00091<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00004.html" title="Specialized B+ tree template class implementing STL&#39;s map container.">btree_map&lt;key_type, data_type, key_compare, traits, allocator_type&gt;<\/a> <span class="keyword">self<\/span>;$/;"	a
l00091	doxygen-html/a00030_source.html	/^<a name="l00091"><\/a>00091 <span class="comment">    \/\/\/ Typedef of our own type<\/span>$/;"	a
l00091	doxygen-html/a00032_source.html	/^<a name="l00091"><\/a>00091 <span class="comment">    \/\/\/ The empty struct used as a placeholder for the data_type.<\/span>$/;"	a
l00091	doxygen-html/a00034_source.html	/^<a name="l00091"><\/a><a class="code" href="a00013.html">00091<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00013.html" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">empty_struct<\/a>$/;"	a
l00092	doxygen-html/a00026_source.html	/^<a name="l00092"><\/a>00092 <span class="comment">    \/\/\/ If true, the tree will print out debug information and a tree dump<\/span>$/;"	a
l00092	doxygen-html/a00028_source.html	/^<a name="l00092"><\/a>00092 <span class="comment"><\/span>$/;"	a
l00092	doxygen-html/a00030_source.html	/^<a name="l00092"><\/a><a class="code" href="a00005.html#aae5bae110a73423fd534e6d9e769a23a">00092<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00005.html" title="Specialized B+ tree template class implementing STL&#39;s multimap container.">btree_multimap&lt;key_type, data_type, key_compare, traits, allocator_type&gt;<\/a>    <span class="keyword">self<\/span>;$/;"	a
l00092	doxygen-html/a00032_source.html	/^<a name="l00092"><\/a><a class="code" href="a00014.html">00092<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00014.html" title="The empty struct used as a placeholder for the data_type.">empty_struct<\/a>$/;"	a
l00092	doxygen-html/a00034_source.html	/^<a name="l00092"><\/a>00092     {$/;"	a
l00093	doxygen-html/a00026_source.html	/^<a name="l00093"><\/a>00093 <span class="comment">    \/\/\/ during insert() or erase() operation. The header must have been<\/span>$/;"	a
l00093	doxygen-html/a00028_source.html	/^<a name="l00093"><\/a>00093 <span class="comment">    \/\/\/ Construct the STL-required value_type as a composition pair of key and<\/span>$/;"	a
l00093	doxygen-html/a00030_source.html	/^<a name="l00093"><\/a>00093 <span class="comment"><\/span>$/;"	a
l00093	doxygen-html/a00032_source.html	/^<a name="l00093"><\/a>00093     {$/;"	a
l00093	doxygen-html/a00034_source.html	/^<a name="l00093"><\/a>00093     };$/;"	a
l00094	doxygen-html/a00026_source.html	/^<a name="l00094"><\/a>00094 <span class="comment">    \/\/\/ compiled with BTREE_DEBUG defined and key_type must be std::ostream<\/span>$/;"	a
l00094	doxygen-html/a00028_source.html	/^<a name="l00094"><\/a>00094 <span class="comment">    \/\/\/ data types<\/span>$/;"	a
l00094	doxygen-html/a00030_source.html	/^<a name="l00094"><\/a>00094 <span class="comment">    \/\/\/ Construct the STL-required value_type as a composition pair of key and<\/span>$/;"	a
l00094	doxygen-html/a00032_source.html	/^<a name="l00094"><\/a>00094     };$/;"	a
l00094	doxygen-html/a00034_source.html	/^<a name="l00094"><\/a>00094 $/;"	a
l00095	doxygen-html/a00026_source.html	/^<a name="l00095"><\/a>00095 <span class="comment">    \/\/\/ printable.<\/span>$/;"	a
l00095	doxygen-html/a00028_source.html	/^<a name="l00095"><\/a><a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e">00095<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> std::pair&lt;key_type, data_type&gt;      <a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>;$/;"	a
l00095	doxygen-html/a00030_source.html	/^<a name="l00095"><\/a>00095 <span class="comment">    \/\/\/ data types<\/span>$/;"	a
l00095	doxygen-html/a00032_source.html	/^<a name="l00095"><\/a>00095 $/;"	a
l00095	doxygen-html/a00034_source.html	/^<a name="l00095"><\/a>00095 <span class="keyword">public<\/span>:$/;"	a
l00096	doxygen-html/a00026_source.html	/^<a name="l00096"><\/a><a class="code" href="a00003.html#ab06ff26a50cb57614ddaf1096b2871bb">00096<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>   <a class="code" href="a00003.html#ab06ff26a50cb57614ddaf1096b2871bb" title="If true, the tree will print out debug information and a tree dump during insert() or erase() operati...">debug<\/a> = <span class="keyword">false<\/span>;$/;"	a
l00096	doxygen-html/a00028_source.html	/^<a name="l00096"><\/a>00096 <span class="comment"><\/span>$/;"	a
l00096	doxygen-html/a00030_source.html	/^<a name="l00096"><\/a><a class="code" href="a00005.html#aa9c86e804b95247c742db5ad7b9351fe">00096<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> std::pair&lt;key_type, data_type&gt;      <a class="code" href="a00005.html#aa9c86e804b95247c742db5ad7b9351fe" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>;$/;"	a
l00096	doxygen-html/a00032_source.html	/^<a name="l00096"><\/a>00096 <span class="keyword">public<\/span>:$/;"	a
l00096	doxygen-html/a00034_source.html	/^<a name="l00096"><\/a>00096     <span class="comment">\/\/ *** Constructed Types<\/span>$/;"	a
l00097	doxygen-html/a00026_source.html	/^<a name="l00097"><\/a>00097 <span class="comment"><\/span>$/;"	a
l00097	doxygen-html/a00028_source.html	/^<a name="l00097"><\/a>00097 <span class="comment">    \/\/\/ Implementation type of the btree_base<\/span>$/;"	a
l00097	doxygen-html/a00030_source.html	/^<a name="l00097"><\/a>00097 <span class="comment"><\/span>$/;"	a
l00097	doxygen-html/a00032_source.html	/^<a name="l00097"><\/a>00097     <span class="comment">\/\/ *** Constructed Types<\/span>$/;"	a
l00097	doxygen-html/a00034_source.html	/^<a name="l00097"><\/a>00097 <span class="comment"><\/span>$/;"	a
l00098	doxygen-html/a00026_source.html	/^<a name="l00098"><\/a>00098 <span class="comment">    \/\/\/ Number of slots in each leaf of the tree. Estimated so that each node<\/span>$/;"	a
l00098	doxygen-html/a00028_source.html	/^<a name="l00098"><\/a>00098 <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">stx::btree<\/a>&lt;<a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>, <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>, <a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>, <a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1" title="Third template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00098	doxygen-html/a00030_source.html	/^<a name="l00098"><\/a>00098 <span class="comment">    \/\/\/ Implementation type of the btree_base<\/span>$/;"	a
l00098	doxygen-html/a00032_source.html	/^<a name="l00098"><\/a>00098 <span class="comment"><\/span>$/;"	a
l00098	doxygen-html/a00034_source.html	/^<a name="l00098"><\/a>00098 <span class="comment">    \/\/\/ The empty data_type<\/span>$/;"	a
l00099	doxygen-html/a00026_source.html	/^<a name="l00099"><\/a>00099 <span class="comment">    \/\/\/ has a size of about 256 bytes.<\/span>$/;"	a
l00099	doxygen-html/a00028_source.html	/^<a name="l00099"><\/a><a class="code" href="a00004.html#aef5dfa6e8d4286e56ea8be50a0c020a7">00099<\/a>                        <a class="code" href="a00004.html#ae6754ad8a27ece08ef50350eb6848e77" title="Fourth template parameter: Traits object used to define more parameters of the B+ tree...">traits<\/a>, <span class="keyword">false<\/span>, <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>, <span class="keyword">false<\/span>&gt; <a class="code" href="a00004.html#aef5dfa6e8d4286e56ea8be50a0c020a7" title="Implementation type of the btree_base.">btree_impl<\/a>;$/;"	a
l00099	doxygen-html/a00030_source.html	/^<a name="l00099"><\/a>00099 <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">stx::btree<\/a>&lt;<a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>, <a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299" title="Second template parameter: The data type associated with each key.">data_type<\/a>, <a class="code" href="a00005.html#aa9c86e804b95247c742db5ad7b9351fe" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>, <a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012" title="Third template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00099	doxygen-html/a00032_source.html	/^<a name="l00099"><\/a>00099 <span class="comment">    \/\/\/ The empty data_type<\/span>$/;"	a
l00099	doxygen-html/a00034_source.html	/^<a name="l00099"><\/a><a class="code" href="a00009.html#a00bbef593d8ccf4068c327a83ec63284">00099<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="a00013.html" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">empty_struct<\/a>         <a class="code" href="a00013.html" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">data_type<\/a>;$/;"	a
l00100	doxygen-html/a00026_source.html	/^<a name="l00100"><\/a><a class="code" href="a00003.html#ab0bbc6a8fdfa17275dab38f5a9c80efc">00100<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">int<\/span>    <a class="code" href="a00003.html#ab0bbc6a8fdfa17275dab38f5a9c80efc" title="Number of slots in each leaf of the tree.">leafslots<\/a> = <a class="code" href="a00026.html#a5d7b0c98bc4c3029d6d76199caa35b19" title="The maximum of a and b. Used in some compile-time formulas.">BTREE_MAX<\/a>( 8, 256 \/ (<span class="keyword">sizeof<\/span>(_Key)) );$/;"	a
l00100	doxygen-html/a00028_source.html	/^<a name="l00100"><\/a>00100 <span class="comment"><\/span>$/;"	a
l00100	doxygen-html/a00030_source.html	/^<a name="l00100"><\/a><a class="code" href="a00005.html#a3d8a91cbf60c0ae367ea7430e2e7b973">00100<\/a>                        <a class="code" href="a00005.html#a1156d87c06fbc9814828d9a83b717c0e" title="Fourth template parameter: Traits object used to define more parameters of the B+ tree...">traits<\/a>, <span class="keyword">true<\/span>, <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>, <span class="keyword">false<\/span>&gt; <a class="code" href="a00005.html#a3d8a91cbf60c0ae367ea7430e2e7b973" title="Implementation type of the btree_base.">btree_impl<\/a>;$/;"	a
l00100	doxygen-html/a00032_source.html	/^<a name="l00100"><\/a><a class="code" href="a00006.html#a4797d9899509ebbd391f6478f85fefd9">00100<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">struct <\/span><a class="code" href="a00014.html" title="The empty struct used as a placeholder for the data_type.">empty_struct<\/a>         <a class="code" href="a00014.html" title="The empty struct used as a placeholder for the data_type.">data_type<\/a>;$/;"	a
l00100	doxygen-html/a00034_source.html	/^<a name="l00100"><\/a>00100 <span class="comment"><\/span>$/;"	a
l00101	doxygen-html/a00026_source.html	/^<a name="l00101"><\/a>00101 <span class="comment"><\/span>$/;"	a
l00101	doxygen-html/a00028_source.html	/^<a name="l00101"><\/a>00101 <span class="comment">    \/\/\/ Function class comparing two value_type pairs.<\/span>$/;"	a
l00101	doxygen-html/a00030_source.html	/^<a name="l00101"><\/a>00101 <span class="comment"><\/span>$/;"	a
l00101	doxygen-html/a00032_source.html	/^<a name="l00101"><\/a>00101 <span class="comment"><\/span>$/;"	a
l00101	doxygen-html/a00034_source.html	/^<a name="l00101"><\/a>00101 <span class="comment">    \/\/\/ Construct the set value_type: the key_type.<\/span>$/;"	a
l00102	doxygen-html/a00026_source.html	/^<a name="l00102"><\/a>00102 <span class="comment">    \/\/\/ Number of slots in each inner node of the tree. Estimated so that each node<\/span>$/;"	a
l00102	doxygen-html/a00028_source.html	/^<a name="l00102"><\/a><a class="code" href="a00004.html#a87d20557ff74243cab447f15e75e2cc0">00102<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::value_compare  <a class="code" href="a00004.html#a87d20557ff74243cab447f15e75e2cc0" title="Function class comparing two value_type pairs.">value_compare<\/a>;$/;"	a
l00102	doxygen-html/a00030_source.html	/^<a name="l00102"><\/a>00102 <span class="comment">    \/\/\/ Function class comparing two value_type pairs.<\/span>$/;"	a
l00102	doxygen-html/a00032_source.html	/^<a name="l00102"><\/a>00102 <span class="comment">    \/\/\/ Construct the set value_type: the key_type.<\/span>$/;"	a
l00102	doxygen-html/a00034_source.html	/^<a name="l00102"><\/a><a class="code" href="a00009.html#a2d6c5e2aa366dfea07ab1232d0d96515">00102<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>                    <a class="code" href="a00009.html#a2d6c5e2aa366dfea07ab1232d0d96515" title="Construct the set value_type: the key_type.">value_type<\/a>;$/;"	a
l00103	doxygen-html/a00026_source.html	/^<a name="l00103"><\/a>00103 <span class="comment">    \/\/\/ has a size of about 256 bytes.<\/span>$/;"	a
l00103	doxygen-html/a00028_source.html	/^<a name="l00103"><\/a>00103 <span class="comment"><\/span>$/;"	a
l00103	doxygen-html/a00030_source.html	/^<a name="l00103"><\/a><a class="code" href="a00005.html#aaf6e0051b191679e462a0f4f8fd49f93">00103<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::value_compare  <a class="code" href="a00005.html#aaf6e0051b191679e462a0f4f8fd49f93" title="Function class comparing two value_type pairs.">value_compare<\/a>;$/;"	a
l00103	doxygen-html/a00032_source.html	/^<a name="l00103"><\/a><a class="code" href="a00006.html#a5fe61553bb02818305fde84b5342e753">00103<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>                    <a class="code" href="a00006.html#a5fe61553bb02818305fde84b5342e753" title="Construct the set value_type: the key_type.">value_type<\/a>;$/;"	a
l00103	doxygen-html/a00034_source.html	/^<a name="l00103"><\/a>00103 <span class="comment"><\/span>$/;"	a
l00104	doxygen-html/a00026_source.html	/^<a name="l00104"><\/a><a class="code" href="a00003.html#a1a1e1c183cffd510e3fc7e71076bad2b">00104<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">int<\/span>    <a class="code" href="a00003.html#a1a1e1c183cffd510e3fc7e71076bad2b" title="Number of slots in each inner node of the tree.">innerslots<\/a> = <a class="code" href="a00026.html#a5d7b0c98bc4c3029d6d76199caa35b19" title="The maximum of a and b. Used in some compile-time formulas.">BTREE_MAX<\/a>( 8, 256 \/ (<span class="keyword">sizeof<\/span>(_Key) + <span class="keyword">sizeof<\/span>(<span class="keywordtype">void<\/span>*)) );$/;"	a
l00104	doxygen-html/a00028_source.html	/^<a name="l00104"><\/a>00104 <span class="comment">    \/\/\/ Size type used to count keys<\/span>$/;"	a
l00104	doxygen-html/a00030_source.html	/^<a name="l00104"><\/a>00104 <span class="comment"><\/span>$/;"	a
l00104	doxygen-html/a00032_source.html	/^<a name="l00104"><\/a>00104 <span class="comment"><\/span>$/;"	a
l00104	doxygen-html/a00034_source.html	/^<a name="l00104"><\/a>00104 <span class="comment">    \/\/\/ Typedef of our own type<\/span>$/;"	a
l00105	doxygen-html/a00026_source.html	/^<a name="l00105"><\/a>00105 <span class="comment"><\/span>$/;"	a
l00105	doxygen-html/a00028_source.html	/^<a name="l00105"><\/a><a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1">00105<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">btree_impl::size_type<\/a>      <a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1" title="Size type used to count keys.">size_type<\/a>;$/;"	a
l00105	doxygen-html/a00030_source.html	/^<a name="l00105"><\/a>00105 <span class="comment">    \/\/\/ Size type used to count keys<\/span>$/;"	a
l00105	doxygen-html/a00032_source.html	/^<a name="l00105"><\/a>00105 <span class="comment">    \/\/\/ Typedef of our own type<\/span>$/;"	a
l00105	doxygen-html/a00034_source.html	/^<a name="l00105"><\/a><a class="code" href="a00009.html#aadf0dbca723b094c06361719ea3f9aae">00105<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00009.html" title="Specialized B+ tree template class implementing STL&#39;s set container.">btree_set&lt;key_type, key_compare, traits, allocator_type&gt;<\/a> <span class="keyword">self<\/span>;$/;"	a
l00106	doxygen-html/a00026_source.html	/^<a name="l00106"><\/a>00106 <span class="comment">    \/\/\/ As of stx-btree-0.9, the code does linear search in find_lower() and<\/span>$/;"	a
l00106	doxygen-html/a00028_source.html	/^<a name="l00106"><\/a>00106 <span class="comment"><\/span>$/;"	a
l00106	doxygen-html/a00030_source.html	/^<a name="l00106"><\/a><a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4">00106<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">btree_impl::size_type<\/a>      <a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4" title="Size type used to count keys.">size_type<\/a>;$/;"	a
l00106	doxygen-html/a00032_source.html	/^<a name="l00106"><\/a><a class="code" href="a00006.html#a99552060748673aa8a60e7d663f8f4a4">00106<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00006.html" title="Specialized B+ tree template class implementing STL&#39;s multiset container.">btree_multiset&lt;key_type, key_compare, traits, allocator_type&gt;<\/a> <span class="keyword">self<\/span>;$/;"	a
l00106	doxygen-html/a00034_source.html	/^<a name="l00106"><\/a>00106 <span class="comment"><\/span>$/;"	a
l00107	doxygen-html/a00026_source.html	/^<a name="l00107"><\/a>00107 <span class="comment">    \/\/\/ find_upper() instead of binary_search, unless the node size is larger<\/span>$/;"	a
l00107	doxygen-html/a00028_source.html	/^<a name="l00107"><\/a>00107 <span class="comment">    \/\/\/ Small structure containing statistics about the tree<\/span>$/;"	a
l00107	doxygen-html/a00030_source.html	/^<a name="l00107"><\/a>00107 <span class="comment"><\/span>$/;"	a
l00107	doxygen-html/a00032_source.html	/^<a name="l00107"><\/a>00107 <span class="comment"><\/span>$/;"	a
l00107	doxygen-html/a00034_source.html	/^<a name="l00107"><\/a>00107 <span class="comment">    \/\/\/ Implementation type of the btree_base<\/span>$/;"	a
l00108	doxygen-html/a00026_source.html	/^<a name="l00108"><\/a>00108 <span class="comment">    \/\/\/ than this threshold. See notes at<\/span>$/;"	a
l00108	doxygen-html/a00028_source.html	/^<a name="l00108"><\/a><a class="code" href="a00004.html#a9dd49396431319c3341c4cdcf68385ed">00108<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::tree_stats     <a class="code" href="a00004.html#a9dd49396431319c3341c4cdcf68385ed" title="Small structure containing statistics about the tree.">tree_stats<\/a>;$/;"	a
l00108	doxygen-html/a00030_source.html	/^<a name="l00108"><\/a>00108 <span class="comment">    \/\/\/ Small structure containing statistics about the tree<\/span>$/;"	a
l00108	doxygen-html/a00032_source.html	/^<a name="l00108"><\/a>00108 <span class="comment">    \/\/\/ Implementation type of the btree_base<\/span>$/;"	a
l00108	doxygen-html/a00034_source.html	/^<a name="l00108"><\/a>00108 <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">stx::btree<\/a>&lt;<a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>, <a class="code" href="a00009.html#a00bbef593d8ccf4068c327a83ec63284" title="The empty data_type.">data_type<\/a>, <a class="code" href="a00009.html#a2d6c5e2aa366dfea07ab1232d0d96515" title="Construct the set value_type: the key_type.">value_type<\/a>, <a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f" title="Second template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00109	doxygen-html/a00026_source.html	/^<a name="l00109"><\/a>00109 <span class="comment">    \/\/\/ http:\/\/panthema.net\/2013\/0504-STX-B+Tree-Binary-vs-Linear-Search<\/span>$/;"	a
l00109	doxygen-html/a00028_source.html	/^<a name="l00109"><\/a>00109 $/;"	a
l00109	doxygen-html/a00030_source.html	/^<a name="l00109"><\/a><a class="code" href="a00005.html#ac5b2a55d1982b407a1075b9474c0d986">00109<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::tree_stats     <a class="code" href="a00005.html#ac5b2a55d1982b407a1075b9474c0d986" title="Small structure containing statistics about the tree.">tree_stats<\/a>;$/;"	a
l00109	doxygen-html/a00032_source.html	/^<a name="l00109"><\/a>00109 <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">stx::btree<\/a>&lt;<a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>, <a class="code" href="a00006.html#a4797d9899509ebbd391f6478f85fefd9" title="The empty data_type.">data_type<\/a>, <a class="code" href="a00006.html#a5fe61553bb02818305fde84b5342e753" title="Construct the set value_type: the key_type.">value_type<\/a>, <a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21" title="Second template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00109	doxygen-html/a00034_source.html	/^<a name="l00109"><\/a><a class="code" href="a00009.html#a446013f241dac77c0b36dd6f410b9026">00109<\/a>                        <a class="code" href="a00009.html#ae4153912a1f97b51f7bbad71b3129008" title="Third template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>, <span class="keyword">false<\/span>, <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>, <span class="keyword">true<\/span>&gt; <a class="code" href="a00009.html#a446013f241dac77c0b36dd6f410b9026" title="Implementation type of the btree_base.">btree_impl<\/a>;$/;"	a
l00110	doxygen-html/a00026_source.html	/^<a name="l00110"><\/a><a class="code" href="a00003.html#a5f30b3761385f6d26acbd2ad1f91c95a">00110<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">size_t<\/span> <a class="code" href="a00003.html#a5f30b3761385f6d26acbd2ad1f91c95a" title="As of stx-btree-0.9, the code does linear search in find_lower() and find_upper() instead of binary_s...">binsearch_threshold<\/a> = 256;$/;"	a
l00110	doxygen-html/a00028_source.html	/^<a name="l00110"><\/a>00110 <span class="keyword">public<\/span>:$/;"	a
l00110	doxygen-html/a00030_source.html	/^<a name="l00110"><\/a>00110 $/;"	a
l00110	doxygen-html/a00032_source.html	/^<a name="l00110"><\/a><a class="code" href="a00006.html#a8dd7ea83ed8beaba51c5578b1283e306">00110<\/a>                        <a class="code" href="a00006.html#adf34a1c10a3b0e0c1caa0358b9d4f059" title="Third template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>, <span class="keyword">true<\/span>, <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>, <span class="keyword">true<\/span>&gt; <a class="code" href="a00006.html#a8dd7ea83ed8beaba51c5578b1283e306" title="Implementation type of the btree_base.">btree_impl<\/a>;$/;"	a
l00110	doxygen-html/a00034_source.html	/^<a name="l00110"><\/a>00110 <span class="comment"><\/span>$/;"	a
l00111	doxygen-html/a00026_source.html	/^<a name="l00111"><\/a>00111 };$/;"	a
l00111	doxygen-html/a00028_source.html	/^<a name="l00111"><\/a>00111     <span class="comment">\/\/ *** Static Constant Options and Values of the B+ Tree<\/span>$/;"	a
l00111	doxygen-html/a00030_source.html	/^<a name="l00111"><\/a>00111 <span class="keyword">public<\/span>:$/;"	a
l00111	doxygen-html/a00032_source.html	/^<a name="l00111"><\/a>00111 <span class="comment"><\/span>$/;"	a
l00111	doxygen-html/a00034_source.html	/^<a name="l00111"><\/a>00111 <span class="comment">    \/\/\/ Function class comparing two value_type keys.<\/span>$/;"	a
l00112	doxygen-html/a00026_source.html	/^<a name="l00112"><\/a>00112 <span class="comment"><\/span>$/;"	a
l00112	doxygen-html/a00028_source.html	/^<a name="l00112"><\/a>00112 <span class="comment"><\/span>$/;"	a
l00112	doxygen-html/a00030_source.html	/^<a name="l00112"><\/a>00112     <span class="comment">\/\/ *** Static Constant Options and Values of the B+ Tree<\/span>$/;"	a
l00112	doxygen-html/a00032_source.html	/^<a name="l00112"><\/a>00112 <span class="comment">    \/\/\/ Function class comparing two value_type keys.<\/span>$/;"	a
l00112	doxygen-html/a00034_source.html	/^<a name="l00112"><\/a><a class="code" href="a00009.html#a9fc9960504727883e021ed064f831a9b">00112<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::value_compare  <a class="code" href="a00009.html#a9fc9960504727883e021ed064f831a9b" title="Function class comparing two value_type keys.">value_compare<\/a>;$/;"	a
l00113	doxygen-html/a00026_source.html	/^<a name="l00113"><\/a>00113 <span class="comment">\/** Generates default traits for a B+ tree used as a map. It estimates leaf and<\/span>$/;"	a
l00113	doxygen-html/a00028_source.html	/^<a name="l00113"><\/a>00113 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key\/data slots in each leaf<\/span>$/;"	a
l00113	doxygen-html/a00030_source.html	/^<a name="l00113"><\/a>00113 <span class="comment"><\/span>$/;"	a
l00113	doxygen-html/a00032_source.html	/^<a name="l00113"><\/a><a class="code" href="a00006.html#a7ef41640ce62bdd8b1857ae6c3ef1c51">00113<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::value_compare  <a class="code" href="a00006.html#a7ef41640ce62bdd8b1857ae6c3ef1c51" title="Function class comparing two value_type keys.">value_compare<\/a>;$/;"	a
l00113	doxygen-html/a00034_source.html	/^<a name="l00113"><\/a>00113 <span class="comment"><\/span>$/;"	a
l00114	doxygen-html/a00026_source.html	/^<a name="l00114"><\/a>00114 <span class="comment"> * inner node sizes by assuming a cache line size of 256 bytes. *\/<\/span>$/;"	a
l00114	doxygen-html/a00028_source.html	/^<a name="l00114"><\/a><a class="code" href="a00004.html#a3c005203452c833ae387f7263195631c">00114<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00004.html#a3c005203452c833ae387f7263195631c" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a> =  <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_impl::leafslotmax<\/a>;$/;"	a
l00114	doxygen-html/a00030_source.html	/^<a name="l00114"><\/a>00114 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key\/data slots in each leaf<\/span>$/;"	a
l00114	doxygen-html/a00032_source.html	/^<a name="l00114"><\/a>00114 <span class="comment"><\/span>$/;"	a
l00114	doxygen-html/a00034_source.html	/^<a name="l00114"><\/a>00114 <span class="comment">    \/\/\/ Size type used to count keys<\/span>$/;"	a
l00115	doxygen-html/a00026_source.html	/^<a name="l00115"><\/a>00115 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key, <span class="keyword">typename<\/span> _Data&gt;$/;"	a
l00115	doxygen-html/a00028_source.html	/^<a name="l00115"><\/a>00115 <span class="comment"><\/span>$/;"	a
l00115	doxygen-html/a00030_source.html	/^<a name="l00115"><\/a><a class="code" href="a00005.html#a5c4b3099fb62acea6118e4700de3d62b">00115<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00005.html#a5c4b3099fb62acea6118e4700de3d62b" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a> =  <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_impl::leafslotmax<\/a>;$/;"	a
l00115	doxygen-html/a00032_source.html	/^<a name="l00115"><\/a>00115 <span class="comment">    \/\/\/ Size type used to count keys<\/span>$/;"	a
l00115	doxygen-html/a00034_source.html	/^<a name="l00115"><\/a><a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45">00115<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">btree_impl::size_type<\/a>      <a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45" title="Size type used to count keys.">size_type<\/a>;$/;"	a
l00116	doxygen-html/a00026_source.html	/^<a name="l00116"><\/a><a class="code" href="a00002.html">00116<\/a> <span class="keyword">struct <\/span><a class="code" href="a00002.html" title="Generates default traits for a B+ tree used as a map.">btree_default_map_traits<\/a>$/;"	a
l00116	doxygen-html/a00028_source.html	/^<a name="l00116"><\/a>00116 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each inner node,<\/span>$/;"	a
l00116	doxygen-html/a00030_source.html	/^<a name="l00116"><\/a>00116 <span class="comment"><\/span>$/;"	a
l00116	doxygen-html/a00032_source.html	/^<a name="l00116"><\/a><a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22">00116<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">btree_impl::size_type<\/a>      <a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22" title="Size type used to count keys.">size_type<\/a>;$/;"	a
l00116	doxygen-html/a00034_source.html	/^<a name="l00116"><\/a>00116 <span class="comment"><\/span>$/;"	a
l00117	doxygen-html/a00026_source.html	/^<a name="l00117"><\/a>00117 {<span class="comment"><\/span>$/;"	a
l00117	doxygen-html/a00028_source.html	/^<a name="l00117"><\/a>00117 <span class="comment">    \/\/\/ this can differ from slots in each leaf.<\/span>$/;"	a
l00117	doxygen-html/a00030_source.html	/^<a name="l00117"><\/a>00117 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each inner node,<\/span>$/;"	a
l00117	doxygen-html/a00032_source.html	/^<a name="l00117"><\/a>00117 <span class="comment"><\/span>$/;"	a
l00117	doxygen-html/a00034_source.html	/^<a name="l00117"><\/a>00117 <span class="comment">    \/\/\/ Small structure containing statistics about the tree<\/span>$/;"	a
l00118	doxygen-html/a00026_source.html	/^<a name="l00118"><\/a>00118 <span class="comment">    \/\/\/ If true, the tree will self verify it&#39;s invariants after each insert()<\/span>$/;"	a
l00118	doxygen-html/a00028_source.html	/^<a name="l00118"><\/a><a class="code" href="a00004.html#a0b12dfa41eaa744ad5b9ff6edae4de4b">00118<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00004.html#a0b12dfa41eaa744ad5b9ff6edae4de4b" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> =  <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_impl::innerslotmax<\/a>;$/;"	a
l00118	doxygen-html/a00030_source.html	/^<a name="l00118"><\/a>00118 <span class="comment">    \/\/\/ this can differ from slots in each leaf.<\/span>$/;"	a
l00118	doxygen-html/a00032_source.html	/^<a name="l00118"><\/a>00118 <span class="comment">    \/\/\/ Small structure containing statistics about the tree<\/span>$/;"	a
l00118	doxygen-html/a00034_source.html	/^<a name="l00118"><\/a><a class="code" href="a00009.html#acb76d4594a31ed8906a25d08f5830f5e">00118<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::tree_stats     <a class="code" href="a00009.html#acb76d4594a31ed8906a25d08f5830f5e" title="Small structure containing statistics about the tree.">tree_stats<\/a>;$/;"	a
l00119	doxygen-html/a00026_source.html	/^<a name="l00119"><\/a>00119 <span class="comment">    \/\/\/ or erase(). The header must have been compiled with BTREE_DEBUG defined.<\/span>$/;"	a
l00119	doxygen-html/a00028_source.html	/^<a name="l00119"><\/a>00119 <span class="comment"><\/span>$/;"	a
l00119	doxygen-html/a00030_source.html	/^<a name="l00119"><\/a><a class="code" href="a00005.html#a3b9667a0290d4edcc1e5218f9a3a9a68">00119<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00005.html#a3b9667a0290d4edcc1e5218f9a3a9a68" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> =  <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_impl::innerslotmax<\/a>;$/;"	a
l00119	doxygen-html/a00032_source.html	/^<a name="l00119"><\/a><a class="code" href="a00006.html#a268704f56c398ed05b600262f8c1d558">00119<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::tree_stats     <a class="code" href="a00006.html#a268704f56c398ed05b600262f8c1d558" title="Small structure containing statistics about the tree.">tree_stats<\/a>;$/;"	a
l00119	doxygen-html/a00034_source.html	/^<a name="l00119"><\/a>00119 $/;"	a
l00120	doxygen-html/a00026_source.html	/^<a name="l00120"><\/a><a class="code" href="a00002.html#a496dd5b655f8504d804b1751c3b346d4">00120<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>   <a class="code" href="a00002.html#a496dd5b655f8504d804b1751c3b346d4" title="If true, the tree will self verify it&#39;s invariants after each insert() or erase().">selfverify<\/a> = <span class="keyword">false<\/span>;$/;"	a
l00120	doxygen-html/a00028_source.html	/^<a name="l00120"><\/a>00120 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key\/data slots used<\/span>$/;"	a
l00120	doxygen-html/a00030_source.html	/^<a name="l00120"><\/a>00120 <span class="comment"><\/span>$/;"	a
l00120	doxygen-html/a00032_source.html	/^<a name="l00120"><\/a>00120 $/;"	a
l00120	doxygen-html/a00034_source.html	/^<a name="l00120"><\/a>00120 <span class="keyword">public<\/span>:$/;"	a
l00121	doxygen-html/a00026_source.html	/^<a name="l00121"><\/a>00121 <span class="comment"><\/span>$/;"	a
l00121	doxygen-html/a00028_source.html	/^<a name="l00121"><\/a>00121 <span class="comment">    \/\/\/ in a leaf. If fewer slots are used, the leaf will be merged or slots<\/span>$/;"	a
l00121	doxygen-html/a00030_source.html	/^<a name="l00121"><\/a>00121 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key\/data slots used<\/span>$/;"	a
l00121	doxygen-html/a00032_source.html	/^<a name="l00121"><\/a>00121 <span class="keyword">public<\/span>:$/;"	a
l00121	doxygen-html/a00034_source.html	/^<a name="l00121"><\/a>00121     <span class="comment">\/\/ *** Static Constant Options and Values of the B+ Tree<\/span>$/;"	a
l00122	doxygen-html/a00026_source.html	/^<a name="l00122"><\/a>00122 <span class="comment">    \/\/\/ If true, the tree will print out debug information and a tree dump<\/span>$/;"	a
l00122	doxygen-html/a00028_source.html	/^<a name="l00122"><\/a>00122 <span class="comment">    \/\/\/ shifted from it&#39;s siblings.<\/span>$/;"	a
l00122	doxygen-html/a00030_source.html	/^<a name="l00122"><\/a>00122 <span class="comment">    \/\/\/ in a leaf. If fewer slots are used, the leaf will be merged or slots<\/span>$/;"	a
l00122	doxygen-html/a00032_source.html	/^<a name="l00122"><\/a>00122     <span class="comment">\/\/ *** Static Constant Options and Values of the B+ Tree<\/span>$/;"	a
l00122	doxygen-html/a00034_source.html	/^<a name="l00122"><\/a>00122 <span class="comment"><\/span>$/;"	a
l00123	doxygen-html/a00026_source.html	/^<a name="l00123"><\/a>00123 <span class="comment">    \/\/\/ during insert() or erase() operation. The header must have been<\/span>$/;"	a
l00123	doxygen-html/a00028_source.html	/^<a name="l00123"><\/a><a class="code" href="a00004.html#a037f1c67f0a692c34b4408657a708221">00123<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00004.html#a037f1c67f0a692c34b4408657a708221" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">minleafslots<\/a> = <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">btree_impl::minleafslots<\/a>;$/;"	a
l00123	doxygen-html/a00030_source.html	/^<a name="l00123"><\/a>00123 <span class="comment">    \/\/\/ shifted from it&#39;s siblings.<\/span>$/;"	a
l00123	doxygen-html/a00032_source.html	/^<a name="l00123"><\/a>00123 <span class="comment"><\/span>$/;"	a
l00123	doxygen-html/a00034_source.html	/^<a name="l00123"><\/a>00123 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each leaf<\/span>$/;"	a
l00124	doxygen-html/a00026_source.html	/^<a name="l00124"><\/a>00124 <span class="comment">    \/\/\/ compiled with BTREE_DEBUG defined and key_type must be std::ostream<\/span>$/;"	a
l00124	doxygen-html/a00028_source.html	/^<a name="l00124"><\/a>00124 <span class="comment"><\/span>$/;"	a
l00124	doxygen-html/a00030_source.html	/^<a name="l00124"><\/a><a class="code" href="a00005.html#a1a58b9466f1025afe1443fffda360300">00124<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00005.html#a1a58b9466f1025afe1443fffda360300" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">minleafslots<\/a> = <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">btree_impl::minleafslots<\/a>;$/;"	a
l00124	doxygen-html/a00032_source.html	/^<a name="l00124"><\/a>00124 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key\/data slots in each leaf<\/span>$/;"	a
l00124	doxygen-html/a00034_source.html	/^<a name="l00124"><\/a><a class="code" href="a00009.html#af20d59df4181356a7731674deeeafa0d">00124<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00009.html#af20d59df4181356a7731674deeeafa0d" title="Base B+ tree parameter: The number of key slots in each leaf.">leafslotmax<\/a> =  <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_impl::leafslotmax<\/a>;$/;"	a
l00125	doxygen-html/a00026_source.html	/^<a name="l00125"><\/a>00125 <span class="comment">    \/\/\/ printable.<\/span>$/;"	a
l00125	doxygen-html/a00028_source.html	/^<a name="l00125"><\/a>00125 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used<\/span>$/;"	a
l00125	doxygen-html/a00030_source.html	/^<a name="l00125"><\/a>00125 <span class="comment"><\/span>$/;"	a
l00125	doxygen-html/a00032_source.html	/^<a name="l00125"><\/a><a class="code" href="a00006.html#ad3e346ec9ff913e6b17857f7de7fa6f0">00125<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00006.html#ad3e346ec9ff913e6b17857f7de7fa6f0" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a> =  <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_impl::leafslotmax<\/a>;$/;"	a
l00125	doxygen-html/a00034_source.html	/^<a name="l00125"><\/a>00125 <span class="comment"><\/span>$/;"	a
l00126	doxygen-html/a00026_source.html	/^<a name="l00126"><\/a><a class="code" href="a00002.html#a89d1e06fd542409800e8b370f9c529dc">00126<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>   <a class="code" href="a00002.html#a89d1e06fd542409800e8b370f9c529dc" title="If true, the tree will print out debug information and a tree dump during insert() or erase() operati...">debug<\/a> = <span class="keyword">false<\/span>;$/;"	a
l00126	doxygen-html/a00028_source.html	/^<a name="l00126"><\/a>00126 <span class="comment">    \/\/\/ in an inner node. If fewer slots are used, the inner node will be<\/span>$/;"	a
l00126	doxygen-html/a00030_source.html	/^<a name="l00126"><\/a>00126 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used<\/span>$/;"	a
l00126	doxygen-html/a00032_source.html	/^<a name="l00126"><\/a>00126 <span class="comment"><\/span>$/;"	a
l00126	doxygen-html/a00034_source.html	/^<a name="l00126"><\/a>00126 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each inner node,<\/span>$/;"	a
l00127	doxygen-html/a00026_source.html	/^<a name="l00127"><\/a>00127 <span class="comment"><\/span>$/;"	a
l00127	doxygen-html/a00028_source.html	/^<a name="l00127"><\/a>00127 <span class="comment">    \/\/\/ merged or slots shifted from it&#39;s siblings.<\/span>$/;"	a
l00127	doxygen-html/a00030_source.html	/^<a name="l00127"><\/a>00127 <span class="comment">    \/\/\/ in an inner node. If fewer slots are used, the inner node will be<\/span>$/;"	a
l00127	doxygen-html/a00032_source.html	/^<a name="l00127"><\/a>00127 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each inner node,<\/span>$/;"	a
l00127	doxygen-html/a00034_source.html	/^<a name="l00127"><\/a>00127 <span class="comment">    \/\/\/ this can differ from slots in each leaf.<\/span>$/;"	a
l00128	doxygen-html/a00026_source.html	/^<a name="l00128"><\/a>00128 <span class="comment">    \/\/\/ Number of slots in each leaf of the tree. Estimated so that each node<\/span>$/;"	a
l00128	doxygen-html/a00028_source.html	/^<a name="l00128"><\/a><a class="code" href="a00004.html#a156a4561d7fe12679b22e3d618a69416">00128<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00004.html#a156a4561d7fe12679b22e3d618a69416" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a> = <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">btree_impl::mininnerslots<\/a>;$/;"	a
l00128	doxygen-html/a00030_source.html	/^<a name="l00128"><\/a>00128 <span class="comment">    \/\/\/ merged or slots shifted from it&#39;s siblings.<\/span>$/;"	a
l00128	doxygen-html/a00032_source.html	/^<a name="l00128"><\/a>00128 <span class="comment">    \/\/\/ this can differ from slots in each leaf.<\/span>$/;"	a
l00128	doxygen-html/a00034_source.html	/^<a name="l00128"><\/a><a class="code" href="a00009.html#aa48cfb5c8f935ff286ca7a12e97886db">00128<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00009.html#aa48cfb5c8f935ff286ca7a12e97886db" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> =  <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_impl::innerslotmax<\/a>;$/;"	a
l00129	doxygen-html/a00026_source.html	/^<a name="l00129"><\/a>00129 <span class="comment">    \/\/\/ has a size of about 256 bytes.<\/span>$/;"	a
l00129	doxygen-html/a00028_source.html	/^<a name="l00129"><\/a>00129 <span class="comment"><\/span>$/;"	a
l00129	doxygen-html/a00030_source.html	/^<a name="l00129"><\/a><a class="code" href="a00005.html#a0a8dc7c50bc26002a6cacdfff86167cf">00129<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00005.html#a0a8dc7c50bc26002a6cacdfff86167cf" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a> = <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">btree_impl::mininnerslots<\/a>;$/;"	a
l00129	doxygen-html/a00032_source.html	/^<a name="l00129"><\/a><a class="code" href="a00006.html#a291d8f653427c2dac2870ddd1e93a326">00129<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00006.html#a291d8f653427c2dac2870ddd1e93a326" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> =  <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_impl::innerslotmax<\/a>;$/;"	a
l00129	doxygen-html/a00034_source.html	/^<a name="l00129"><\/a>00129 <span class="comment"><\/span>$/;"	a
l00130	doxygen-html/a00026_source.html	/^<a name="l00130"><\/a><a class="code" href="a00002.html#a19d18c5e35448829cc2a62f458d65a4f">00130<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">int<\/span>    <a class="code" href="a00002.html#a19d18c5e35448829cc2a62f458d65a4f" title="Number of slots in each leaf of the tree.">leafslots<\/a> = <a class="code" href="a00026.html#a5d7b0c98bc4c3029d6d76199caa35b19" title="The maximum of a and b. Used in some compile-time formulas.">BTREE_MAX<\/a>( 8, 256 \/ (<span class="keyword">sizeof<\/span>(_Key) + <span class="keyword">sizeof<\/span>(_Data)) );$/;"	a
l00130	doxygen-html/a00028_source.html	/^<a name="l00130"><\/a>00130 <span class="comment">    \/\/\/ Debug parameter: Enables expensive and thorough checking of the B+ tree<\/span>$/;"	a
l00130	doxygen-html/a00030_source.html	/^<a name="l00130"><\/a>00130 <span class="comment"><\/span>$/;"	a
l00130	doxygen-html/a00032_source.html	/^<a name="l00130"><\/a>00130 <span class="comment"><\/span>$/;"	a
l00130	doxygen-html/a00034_source.html	/^<a name="l00130"><\/a>00130 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used in a<\/span>$/;"	a
l00131	doxygen-html/a00026_source.html	/^<a name="l00131"><\/a>00131 <span class="comment"><\/span>$/;"	a
l00131	doxygen-html/a00028_source.html	/^<a name="l00131"><\/a>00131 <span class="comment">    \/\/\/ invariants after each insert\/erase operation.<\/span>$/;"	a
l00131	doxygen-html/a00030_source.html	/^<a name="l00131"><\/a>00131 <span class="comment">    \/\/\/ Debug parameter: Enables expensive and thorough checking of the B+ tree<\/span>$/;"	a
l00131	doxygen-html/a00032_source.html	/^<a name="l00131"><\/a>00131 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used in a<\/span>$/;"	a
l00131	doxygen-html/a00034_source.html	/^<a name="l00131"><\/a>00131 <span class="comment">    \/\/\/ leaf. If fewer slots are used, the leaf will be merged or slots shifted<\/span>$/;"	a
l00132	doxygen-html/a00026_source.html	/^<a name="l00132"><\/a>00132 <span class="comment">    \/\/\/ Number of slots in each inner node of the tree. Estimated so that each node<\/span>$/;"	a
l00132	doxygen-html/a00028_source.html	/^<a name="l00132"><\/a><a class="code" href="a00004.html#a18eec4e7f698019480bb8d96b1ceabd4">00132<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00004.html#a18eec4e7f698019480bb8d96b1ceabd4" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a> = <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">btree_impl::selfverify<\/a>;$/;"	a
l00132	doxygen-html/a00030_source.html	/^<a name="l00132"><\/a>00132 <span class="comment">    \/\/\/ invariants after each insert\/erase operation.<\/span>$/;"	a
l00132	doxygen-html/a00032_source.html	/^<a name="l00132"><\/a>00132 <span class="comment">    \/\/\/ leaf. If fewer slots are used, the leaf will be merged or slots shifted<\/span>$/;"	a
l00132	doxygen-html/a00034_source.html	/^<a name="l00132"><\/a>00132 <span class="comment">    \/\/\/ from it&#39;s siblings.<\/span>$/;"	a
l00133	doxygen-html/a00026_source.html	/^<a name="l00133"><\/a>00133 <span class="comment">    \/\/\/ has a size of about 256 bytes.<\/span>$/;"	a
l00133	doxygen-html/a00028_source.html	/^<a name="l00133"><\/a>00133 <span class="comment"><\/span>$/;"	a
l00133	doxygen-html/a00030_source.html	/^<a name="l00133"><\/a><a class="code" href="a00005.html#aefab8e1341d14a1738961ecaf38c8d63">00133<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00005.html#aefab8e1341d14a1738961ecaf38c8d63" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a> = <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">btree_impl::selfverify<\/a>;$/;"	a
l00133	doxygen-html/a00032_source.html	/^<a name="l00133"><\/a>00133 <span class="comment">    \/\/\/ from it&#39;s siblings.<\/span>$/;"	a
l00133	doxygen-html/a00034_source.html	/^<a name="l00133"><\/a><a class="code" href="a00009.html#a16ff8b6fdbbffcbdb50de080d4631015">00133<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> <a class="code" href="a00009.html#a16ff8b6fdbbffcbdb50de080d4631015" title="Computed B+ tree parameter: The minimum number of key slots used in a leaf.">minleafslots<\/a> = <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">btree_impl::minleafslots<\/a>;$/;"	a
l00134	doxygen-html/a00026_source.html	/^<a name="l00134"><\/a><a class="code" href="a00002.html#a8fb65e8200dda28ef52fa765e14301ff">00134<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">int<\/span>    <a class="code" href="a00002.html#a8fb65e8200dda28ef52fa765e14301ff" title="Number of slots in each inner node of the tree.">innerslots<\/a> = <a class="code" href="a00026.html#a5d7b0c98bc4c3029d6d76199caa35b19" title="The maximum of a and b. Used in some compile-time formulas.">BTREE_MAX<\/a>( 8, 256 \/ (<span class="keyword">sizeof<\/span>(_Key) + <span class="keyword">sizeof<\/span>(<span class="keywordtype">void<\/span>*)) );$/;"	a
l00134	doxygen-html/a00028_source.html	/^<a name="l00134"><\/a>00134 <span class="comment">    \/\/\/ Debug parameter: Prints out lots of debug information about how the<\/span>$/;"	a
l00134	doxygen-html/a00030_source.html	/^<a name="l00134"><\/a>00134 <span class="comment"><\/span>$/;"	a
l00134	doxygen-html/a00032_source.html	/^<a name="l00134"><\/a><a class="code" href="a00006.html#a52ff2314ff166b6aec7ad572d37291cf">00134<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00006.html#a52ff2314ff166b6aec7ad572d37291cf" title="Computed B+ tree parameter: The minimum number of key slots used in a leaf.">minleafslots<\/a> = <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">btree_impl::minleafslots<\/a>;$/;"	a
l00134	doxygen-html/a00034_source.html	/^<a name="l00134"><\/a>00134 <span class="comment"><\/span>$/;"	a
l00135	doxygen-html/a00026_source.html	/^<a name="l00135"><\/a>00135 <span class="comment"><\/span>$/;"	a
l00135	doxygen-html/a00028_source.html	/^<a name="l00135"><\/a>00135 <span class="comment">    \/\/\/ algorithms change the tree. Requires the header file to be compiled<\/span>$/;"	a
l00135	doxygen-html/a00030_source.html	/^<a name="l00135"><\/a>00135 <span class="comment">    \/\/\/ Debug parameter: Prints out lots of debug information about how the<\/span>$/;"	a
l00135	doxygen-html/a00032_source.html	/^<a name="l00135"><\/a>00135 <span class="comment"><\/span>$/;"	a
l00135	doxygen-html/a00034_source.html	/^<a name="l00135"><\/a>00135 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used<\/span>$/;"	a
l00136	doxygen-html/a00026_source.html	/^<a name="l00136"><\/a>00136 <span class="comment">    \/\/\/ As of stx-btree-0.9, the code does linear search in find_lower() and<\/span>$/;"	a
l00136	doxygen-html/a00028_source.html	/^<a name="l00136"><\/a>00136 <span class="comment">    \/\/\/ with BTREE_DEBUG and the key type must be std::ostream printable.<\/span>$/;"	a
l00136	doxygen-html/a00030_source.html	/^<a name="l00136"><\/a>00136 <span class="comment">    \/\/\/ algorithms change the tree. Requires the header file to be compiled<\/span>$/;"	a
l00136	doxygen-html/a00032_source.html	/^<a name="l00136"><\/a>00136 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used<\/span>$/;"	a
l00136	doxygen-html/a00034_source.html	/^<a name="l00136"><\/a>00136 <span class="comment">    \/\/\/ in an inner node. If fewer slots are used, the inner node will be<\/span>$/;"	a
l00137	doxygen-html/a00026_source.html	/^<a name="l00137"><\/a>00137 <span class="comment">    \/\/\/ find_upper() instead of binary_search, unless the node size is larger<\/span>$/;"	a
l00137	doxygen-html/a00028_source.html	/^<a name="l00137"><\/a><a class="code" href="a00004.html#aa9abe4fe3ec8c3ff40392c9a4fd3d587">00137<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00004.html#aa9abe4fe3ec8c3ff40392c9a4fd3d587" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a> = <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">btree_impl::debug<\/a>;$/;"	a
l00137	doxygen-html/a00030_source.html	/^<a name="l00137"><\/a>00137 <span class="comment">    \/\/\/ with BTREE_DEBUG and the key type must be std::ostream printable.<\/span>$/;"	a
l00137	doxygen-html/a00032_source.html	/^<a name="l00137"><\/a>00137 <span class="comment">    \/\/\/ in an inner node. If fewer slots are used, the inner node will be<\/span>$/;"	a
l00137	doxygen-html/a00034_source.html	/^<a name="l00137"><\/a>00137 <span class="comment">    \/\/\/ merged or slots shifted from it&#39;s siblings.<\/span>$/;"	a
l00138	doxygen-html/a00026_source.html	/^<a name="l00138"><\/a>00138 <span class="comment">    \/\/\/ than this threshold. See notes at<\/span>$/;"	a
l00138	doxygen-html/a00028_source.html	/^<a name="l00138"><\/a>00138 <span class="comment"><\/span>$/;"	a
l00138	doxygen-html/a00030_source.html	/^<a name="l00138"><\/a><a class="code" href="a00005.html#ae6acad1234b0b3ff715884ecbbda2ac7">00138<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00005.html#ae6acad1234b0b3ff715884ecbbda2ac7" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a> = <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">btree_impl::debug<\/a>;$/;"	a
l00138	doxygen-html/a00032_source.html	/^<a name="l00138"><\/a>00138 <span class="comment">    \/\/\/ merged or slots shifted from it&#39;s siblings.<\/span>$/;"	a
l00138	doxygen-html/a00034_source.html	/^<a name="l00138"><\/a><a class="code" href="a00009.html#a133181518b3bfeec73537984581cc8ef">00138<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> <a class="code" href="a00009.html#a133181518b3bfeec73537984581cc8ef" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a> = <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">btree_impl::mininnerslots<\/a>;$/;"	a
l00139	doxygen-html/a00026_source.html	/^<a name="l00139"><\/a>00139 <span class="comment">    \/\/\/ http:\/\/panthema.net\/2013\/0504-STX-B+Tree-Binary-vs-Linear-Search<\/span>$/;"	a
l00139	doxygen-html/a00028_source.html	/^<a name="l00139"><\/a>00139 <span class="comment">    \/\/\/ Operational parameter: Allow duplicate keys in the btree.<\/span>$/;"	a
l00139	doxygen-html/a00030_source.html	/^<a name="l00139"><\/a>00139 <span class="comment"><\/span>$/;"	a
l00139	doxygen-html/a00032_source.html	/^<a name="l00139"><\/a><a class="code" href="a00006.html#a568261850e92855ce6dd296e969cf12d">00139<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00006.html#a568261850e92855ce6dd296e969cf12d" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a> = <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">btree_impl::mininnerslots<\/a>;$/;"	a
l00139	doxygen-html/a00034_source.html	/^<a name="l00139"><\/a>00139 <span class="comment"><\/span>$/;"	a
l00140	doxygen-html/a00026_source.html	/^<a name="l00140"><\/a><a class="code" href="a00002.html#ae636c1898e7978b0ca36cebd8fe86319">00140<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">size_t<\/span> <a class="code" href="a00002.html#ae636c1898e7978b0ca36cebd8fe86319" title="As of stx-btree-0.9, the code does linear search in find_lower() and find_upper() instead of binary_s...">binsearch_threshold<\/a> = 256;$/;"	a
l00140	doxygen-html/a00028_source.html	/^<a name="l00140"><\/a><a class="code" href="a00004.html#a7a93d908ea2b967d4a54946a37675e25">00140<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00004.html#a7a93d908ea2b967d4a54946a37675e25" title="Operational parameter: Allow duplicate keys in the btree.">allow_duplicates<\/a> = <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">btree_impl::allow_duplicates<\/a>;$/;"	a
l00140	doxygen-html/a00030_source.html	/^<a name="l00140"><\/a>00140 <span class="comment">    \/\/\/ Operational parameter: Allow duplicate keys in the btree.<\/span>$/;"	a
l00140	doxygen-html/a00032_source.html	/^<a name="l00140"><\/a>00140 <span class="comment"><\/span>$/;"	a
l00140	doxygen-html/a00034_source.html	/^<a name="l00140"><\/a>00140 <span class="comment">    \/\/\/ Debug parameter: Enables expensive and thorough checking of the B+ tree<\/span>$/;"	a
l00141	doxygen-html/a00026_source.html	/^<a name="l00141"><\/a>00141 };$/;"	a
l00141	doxygen-html/a00028_source.html	/^<a name="l00141"><\/a>00141 $/;"	a
l00141	doxygen-html/a00030_source.html	/^<a name="l00141"><\/a><a class="code" href="a00005.html#abdf2f0d71029020565eb3c9df2a71db6">00141<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00005.html#abdf2f0d71029020565eb3c9df2a71db6" title="Operational parameter: Allow duplicate keys in the btree.">allow_duplicates<\/a> = <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">btree_impl::allow_duplicates<\/a>;$/;"	a
l00141	doxygen-html/a00032_source.html	/^<a name="l00141"><\/a>00141 <span class="comment">    \/\/\/ Debug parameter: Enables expensive and thorough checking of the B+ tree<\/span>$/;"	a
l00141	doxygen-html/a00034_source.html	/^<a name="l00141"><\/a>00141 <span class="comment">    \/\/\/ invariants after each insert\/erase operation.<\/span>$/;"	a
l00142	doxygen-html/a00026_source.html	/^<a name="l00142"><\/a>00142 <span class="comment"><\/span>$/;"	a
l00142	doxygen-html/a00028_source.html	/^<a name="l00142"><\/a>00142 <span class="keyword">public<\/span>:$/;"	a
l00142	doxygen-html/a00030_source.html	/^<a name="l00142"><\/a>00142 $/;"	a
l00142	doxygen-html/a00032_source.html	/^<a name="l00142"><\/a>00142 <span class="comment">    \/\/\/ invariants after each insert\/erase operation.<\/span>$/;"	a
l00142	doxygen-html/a00034_source.html	/^<a name="l00142"><\/a><a class="code" href="a00009.html#aeef1f92bbdd38ed63f588a56db598077">00142<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00009.html#aeef1f92bbdd38ed63f588a56db598077" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a> = <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">btree_impl::selfverify<\/a>;$/;"	a
l00143	doxygen-html/a00026_source.html	/^<a name="l00143"><\/a>00143 <span class="comment">\/** @brief Basic class implementing a base B+ tree data structure in memory.<\/span>$/;"	a
l00143	doxygen-html/a00028_source.html	/^<a name="l00143"><\/a>00143     <span class="comment">\/\/ *** Iterators and Reverse Iterators<\/span>$/;"	a
l00143	doxygen-html/a00030_source.html	/^<a name="l00143"><\/a>00143 <span class="keyword">public<\/span>:$/;"	a
l00143	doxygen-html/a00032_source.html	/^<a name="l00143"><\/a><a class="code" href="a00006.html#ad58d175cab81f7f1947cdc54547fbf85">00143<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00006.html#ad58d175cab81f7f1947cdc54547fbf85" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a> = <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">btree_impl::selfverify<\/a>;$/;"	a
l00143	doxygen-html/a00034_source.html	/^<a name="l00143"><\/a>00143 <span class="comment"><\/span>$/;"	a
l00144	doxygen-html/a00026_source.html	/^<a name="l00144"><\/a>00144 <span class="comment"> *<\/span>$/;"	a
l00144	doxygen-html/a00028_source.html	/^<a name="l00144"><\/a>00144 <span class="comment"><\/span>$/;"	a
l00144	doxygen-html/a00030_source.html	/^<a name="l00144"><\/a>00144     <span class="comment">\/\/ *** Iterators and Reverse Iterators<\/span>$/;"	a
l00144	doxygen-html/a00032_source.html	/^<a name="l00144"><\/a>00144 <span class="comment"><\/span>$/;"	a
l00144	doxygen-html/a00034_source.html	/^<a name="l00144"><\/a>00144 <span class="comment">    \/\/\/ Debug parameter: Prints out lots of debug information about how the<\/span>$/;"	a
l00145	doxygen-html/a00026_source.html	/^<a name="l00145"><\/a>00145 <span class="comment"> * The base implementation of a memory B+ tree. It is based on the<\/span>$/;"	a
l00145	doxygen-html/a00028_source.html	/^<a name="l00145"><\/a>00145 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00145	doxygen-html/a00030_source.html	/^<a name="l00145"><\/a>00145 <span class="comment"><\/span>$/;"	a
l00145	doxygen-html/a00032_source.html	/^<a name="l00145"><\/a>00145 <span class="comment">    \/\/\/ Debug parameter: Prints out lots of debug information about how the<\/span>$/;"	a
l00145	doxygen-html/a00034_source.html	/^<a name="l00145"><\/a>00145 <span class="comment">    \/\/\/ algorithms change the tree. Requires the header file to be compiled<\/span>$/;"	a
l00146	doxygen-html/a00026_source.html	/^<a name="l00146"><\/a>00146 <span class="comment"> * implementation in Cormen&#39;s Introduction into Algorithms, Jan Jannink&#39;s paper<\/span>$/;"	a
l00146	doxygen-html/a00028_source.html	/^<a name="l00146"><\/a>00146 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00146	doxygen-html/a00030_source.html	/^<a name="l00146"><\/a>00146 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00146	doxygen-html/a00032_source.html	/^<a name="l00146"><\/a>00146 <span class="comment">    \/\/\/ algorithms change the tree. Requires the header file to be compiled<\/span>$/;"	a
l00146	doxygen-html/a00034_source.html	/^<a name="l00146"><\/a>00146 <span class="comment">    \/\/\/ with BTREE_DEBUG and the key type must be std::ostream printable.<\/span>$/;"	a
l00147	doxygen-html/a00026_source.html	/^<a name="l00147"><\/a>00147 <span class="comment"> * and other algorithm resources. Almost all STL-required function calls are<\/span>$/;"	a
l00147	doxygen-html/a00028_source.html	/^<a name="l00147"><\/a><a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597">00147<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::iterator               <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a>;$/;"	a
l00147	doxygen-html/a00030_source.html	/^<a name="l00147"><\/a>00147 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00147	doxygen-html/a00032_source.html	/^<a name="l00147"><\/a>00147 <span class="comment">    \/\/\/ with BTREE_DEBUG and the key type must be std::ostream printable.<\/span>$/;"	a
l00147	doxygen-html/a00034_source.html	/^<a name="l00147"><\/a><a class="code" href="a00009.html#ab3568dade6579ccf9a3f50df18eabb01">00147<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00009.html#ab3568dade6579ccf9a3f50df18eabb01" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a> = <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">btree_impl::debug<\/a>;$/;"	a
l00148	doxygen-html/a00026_source.html	/^<a name="l00148"><\/a>00148 <span class="comment"> * implemented. The asymptotic time requirements of the STL are not always<\/span>$/;"	a
l00148	doxygen-html/a00028_source.html	/^<a name="l00148"><\/a>00148 <span class="comment"><\/span>$/;"	a
l00148	doxygen-html/a00030_source.html	/^<a name="l00148"><\/a><a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322">00148<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::iterator               <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a>;$/;"	a
l00148	doxygen-html/a00032_source.html	/^<a name="l00148"><\/a><a class="code" href="a00006.html#a1f660e9d76a8bc2d8afa950dec6f8fda">00148<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00006.html#a1f660e9d76a8bc2d8afa950dec6f8fda" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a> = <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">btree_impl::debug<\/a>;$/;"	a
l00148	doxygen-html/a00034_source.html	/^<a name="l00148"><\/a>00148 <span class="comment"><\/span>$/;"	a
l00149	doxygen-html/a00026_source.html	/^<a name="l00149"><\/a>00149 <span class="comment"> * fulfilled in theory, however in practice this B+ tree performs better than a<\/span>$/;"	a
l00149	doxygen-html/a00028_source.html	/^<a name="l00149"><\/a>00149 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00149	doxygen-html/a00030_source.html	/^<a name="l00149"><\/a>00149 <span class="comment"><\/span>$/;"	a
l00149	doxygen-html/a00032_source.html	/^<a name="l00149"><\/a>00149 <span class="comment"><\/span>$/;"	a
l00149	doxygen-html/a00034_source.html	/^<a name="l00149"><\/a>00149 <span class="comment">    \/\/\/ Operational parameter: Allow duplicate keys in the btree.<\/span>$/;"	a
l00150	doxygen-html/a00026_source.html	/^<a name="l00150"><\/a>00150 <span class="comment"> * red-black tree by using more memory. The insertion function splits the nodes<\/span>$/;"	a
l00150	doxygen-html/a00028_source.html	/^<a name="l00150"><\/a>00150 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00150	doxygen-html/a00030_source.html	/^<a name="l00150"><\/a>00150 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00150	doxygen-html/a00032_source.html	/^<a name="l00150"><\/a>00150 <span class="comment">    \/\/\/ Operational parameter: Allow duplicate keys in the btree.<\/span>$/;"	a
l00150	doxygen-html/a00034_source.html	/^<a name="l00150"><\/a><a class="code" href="a00009.html#a76a14434ee750af9999bea4e2b657b36">00150<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00009.html#a76a14434ee750af9999bea4e2b657b36" title="Operational parameter: Allow duplicate keys in the btree.">allow_duplicates<\/a> = <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">btree_impl::allow_duplicates<\/a>;$/;"	a
l00151	doxygen-html/a00026_source.html	/^<a name="l00151"><\/a>00151 <span class="comment"> * on the recursion unroll. Erase is largely based on Jannink&#39;s ideas.<\/span>$/;"	a
l00151	doxygen-html/a00028_source.html	/^<a name="l00151"><\/a><a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81">00151<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_iterator         <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00151	doxygen-html/a00030_source.html	/^<a name="l00151"><\/a>00151 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00151	doxygen-html/a00032_source.html	/^<a name="l00151"><\/a><a class="code" href="a00006.html#a2a11e2ee03e9bb4cb206826de0b135b2">00151<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00006.html#a2a11e2ee03e9bb4cb206826de0b135b2" title="Operational parameter: Allow duplicate keys in the btree.">allow_duplicates<\/a> = <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">btree_impl::allow_duplicates<\/a>;$/;"	a
l00151	doxygen-html/a00034_source.html	/^<a name="l00151"><\/a>00151 $/;"	a
l00152	doxygen-html/a00026_source.html	/^<a name="l00152"><\/a>00152 <span class="comment"> *<\/span>$/;"	a
l00152	doxygen-html/a00028_source.html	/^<a name="l00152"><\/a>00152 <span class="comment"><\/span>$/;"	a
l00152	doxygen-html/a00030_source.html	/^<a name="l00152"><\/a><a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246">00152<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_iterator         <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00152	doxygen-html/a00032_source.html	/^<a name="l00152"><\/a>00152 $/;"	a
l00152	doxygen-html/a00034_source.html	/^<a name="l00152"><\/a>00152 <span class="keyword">public<\/span>:$/;"	a
l00153	doxygen-html/a00026_source.html	/^<a name="l00153"><\/a>00153 <span class="comment"> * This class is specialized into btree_set, btree_multiset, btree_map and<\/span>$/;"	a
l00153	doxygen-html/a00028_source.html	/^<a name="l00153"><\/a>00153 <span class="comment">    \/\/\/ create mutable reverse iterator by using STL magic<\/span>$/;"	a
l00153	doxygen-html/a00030_source.html	/^<a name="l00153"><\/a>00153 <span class="comment"><\/span>$/;"	a
l00153	doxygen-html/a00032_source.html	/^<a name="l00153"><\/a>00153 <span class="keyword">public<\/span>:$/;"	a
l00153	doxygen-html/a00034_source.html	/^<a name="l00153"><\/a>00153     <span class="comment">\/\/ *** Iterators and Reverse Iterators<\/span>$/;"	a
l00154	doxygen-html/a00026_source.html	/^<a name="l00154"><\/a>00154 <span class="comment"> * btree_multimap using default template parameters and facade functions.<\/span>$/;"	a
l00154	doxygen-html/a00028_source.html	/^<a name="l00154"><\/a><a class="code" href="a00004.html#a204cd4ff4807b9c35605b1ccc3cb597a">00154<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::reverse_iterator       <a class="code" href="a00004.html#a204cd4ff4807b9c35605b1ccc3cb597a" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a>;$/;"	a
l00154	doxygen-html/a00030_source.html	/^<a name="l00154"><\/a>00154 <span class="comment">    \/\/\/ create mutable reverse iterator by using STL magic<\/span>$/;"	a
l00154	doxygen-html/a00032_source.html	/^<a name="l00154"><\/a>00154     <span class="comment">\/\/ *** Iterators and Reverse Iterators<\/span>$/;"	a
l00154	doxygen-html/a00034_source.html	/^<a name="l00154"><\/a>00154 <span class="comment"><\/span>$/;"	a
l00155	doxygen-html/a00026_source.html	/^<a name="l00155"><\/a>00155 <span class="comment"> *\/<\/span>$/;"	a
l00155	doxygen-html/a00028_source.html	/^<a name="l00155"><\/a>00155 <span class="comment"><\/span>$/;"	a
l00155	doxygen-html/a00030_source.html	/^<a name="l00155"><\/a><a class="code" href="a00005.html#aa54a3a740748e22fae3b05f599458863">00155<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::reverse_iterator       <a class="code" href="a00005.html#aa54a3a740748e22fae3b05f599458863" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a>;$/;"	a
l00155	doxygen-html/a00032_source.html	/^<a name="l00155"><\/a>00155 <span class="comment"><\/span>$/;"	a
l00155	doxygen-html/a00034_source.html	/^<a name="l00155"><\/a>00155 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00156	doxygen-html/a00026_source.html	/^<a name="l00156"><\/a>00156 <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> _Key, <span class="keyword">typename<\/span> _Data,$/;"	a
l00156	doxygen-html/a00028_source.html	/^<a name="l00156"><\/a>00156 <span class="comment">    \/\/\/ create constant reverse iterator by using STL magic<\/span>$/;"	a
l00156	doxygen-html/a00030_source.html	/^<a name="l00156"><\/a>00156 <span class="comment"><\/span>$/;"	a
l00156	doxygen-html/a00032_source.html	/^<a name="l00156"><\/a>00156 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00156	doxygen-html/a00034_source.html	/^<a name="l00156"><\/a>00156 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00157	doxygen-html/a00026_source.html	/^<a name="l00157"><\/a>00157           <span class="keyword">typename<\/span> _Value = std::pair&lt;_Key, _Data&gt;,$/;"	a
l00157	doxygen-html/a00028_source.html	/^<a name="l00157"><\/a><a class="code" href="a00004.html#a581abfef3fb0eab26b2833165f7314b7">00157<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_reverse_iterator <a class="code" href="a00004.html#a581abfef3fb0eab26b2833165f7314b7" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a>;$/;"	a
l00157	doxygen-html/a00030_source.html	/^<a name="l00157"><\/a>00157 <span class="comment">    \/\/\/ create constant reverse iterator by using STL magic<\/span>$/;"	a
l00157	doxygen-html/a00032_source.html	/^<a name="l00157"><\/a>00157 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00157	doxygen-html/a00034_source.html	/^<a name="l00157"><\/a><a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f">00157<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::iterator               <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a>;$/;"	a
l00158	doxygen-html/a00026_source.html	/^<a name="l00158"><\/a>00158           <span class="keyword">typename<\/span> _Compare = std::less&lt;_Key&gt;,$/;"	a
l00158	doxygen-html/a00028_source.html	/^<a name="l00158"><\/a>00158 $/;"	a
l00158	doxygen-html/a00030_source.html	/^<a name="l00158"><\/a><a class="code" href="a00005.html#a0af611010281b93a36b1b0fd3fd2144a">00158<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_reverse_iterator <a class="code" href="a00005.html#a0af611010281b93a36b1b0fd3fd2144a" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a>;$/;"	a
l00158	doxygen-html/a00032_source.html	/^<a name="l00158"><\/a><a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889">00158<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::iterator               <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a>;$/;"	a
l00158	doxygen-html/a00034_source.html	/^<a name="l00158"><\/a>00158 <span class="comment"><\/span>$/;"	a
l00159	doxygen-html/a00026_source.html	/^<a name="l00159"><\/a>00159           <span class="keyword">typename<\/span> _Traits = <a class="code" href="a00002.html" title="Generates default traits for a B+ tree used as a map.">btree_default_map_traits&lt;_Key, _Data&gt;<\/a>,$/;"	a
l00159	doxygen-html/a00028_source.html	/^<a name="l00159"><\/a>00159 <span class="keyword">private<\/span>:$/;"	a
l00159	doxygen-html/a00030_source.html	/^<a name="l00159"><\/a>00159 $/;"	a
l00159	doxygen-html/a00032_source.html	/^<a name="l00159"><\/a>00159 <span class="comment"><\/span>$/;"	a
l00159	doxygen-html/a00034_source.html	/^<a name="l00159"><\/a>00159 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00160	doxygen-html/a00026_source.html	/^<a name="l00160"><\/a>00160           <span class="keywordtype">bool<\/span> _Duplicates = <span class="keyword">false<\/span>,$/;"	a
l00160	doxygen-html/a00028_source.html	/^<a name="l00160"><\/a>00160     <span class="comment">\/\/ *** Tree Implementation Object<\/span>$/;"	a
l00160	doxygen-html/a00030_source.html	/^<a name="l00160"><\/a>00160 <span class="keyword">private<\/span>:$/;"	a
l00160	doxygen-html/a00032_source.html	/^<a name="l00160"><\/a>00160 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00160	doxygen-html/a00034_source.html	/^<a name="l00160"><\/a>00160 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00161	doxygen-html/a00026_source.html	/^<a name="l00161"><\/a>00161           <span class="keyword">typename<\/span> _Alloc = std::allocator&lt;_Value&gt;,$/;"	a
l00161	doxygen-html/a00028_source.html	/^<a name="l00161"><\/a>00161 <span class="comment"><\/span>$/;"	a
l00161	doxygen-html/a00030_source.html	/^<a name="l00161"><\/a>00161     <span class="comment">\/\/ *** Tree Implementation Object<\/span>$/;"	a
l00161	doxygen-html/a00032_source.html	/^<a name="l00161"><\/a>00161 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00161	doxygen-html/a00034_source.html	/^<a name="l00161"><\/a><a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996">00161<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_iterator         <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00162	doxygen-html/a00026_source.html	/^<a name="l00162"><\/a>00162           <span class="keywordtype">bool<\/span> _UsedAsSet = <span class="keyword">false<\/span> &gt;$/;"	a
l00162	doxygen-html/a00028_source.html	/^<a name="l00162"><\/a>00162 <span class="comment">    \/\/\/ The contained implementation object<\/span>$/;"	a
l00162	doxygen-html/a00030_source.html	/^<a name="l00162"><\/a>00162 <span class="comment"><\/span>$/;"	a
l00162	doxygen-html/a00032_source.html	/^<a name="l00162"><\/a><a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf">00162<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_iterator         <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00162	doxygen-html/a00034_source.html	/^<a name="l00162"><\/a>00162 <span class="comment"><\/span>$/;"	a
l00163	doxygen-html/a00026_source.html	/^<a name="l00163"><\/a><a class="code" href="a00001.html">00163<\/a> <span class="keyword">class <\/span><a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree<\/a>$/;"	a
l00163	doxygen-html/a00028_source.html	/^<a name="l00163"><\/a><a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69">00163<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html">btree_impl<\/a>  <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>;$/;"	a
l00163	doxygen-html/a00030_source.html	/^<a name="l00163"><\/a>00163 <span class="comment">    \/\/\/ The contained implementation object<\/span>$/;"	a
l00163	doxygen-html/a00032_source.html	/^<a name="l00163"><\/a>00163 <span class="comment"><\/span>$/;"	a
l00163	doxygen-html/a00034_source.html	/^<a name="l00163"><\/a>00163 <span class="comment">    \/\/\/ create mutable reverse iterator by using STL magic<\/span>$/;"	a
l00164	doxygen-html/a00026_source.html	/^<a name="l00164"><\/a>00164 {$/;"	a
l00164	doxygen-html/a00028_source.html	/^<a name="l00164"><\/a>00164 $/;"	a
l00164	doxygen-html/a00030_source.html	/^<a name="l00164"><\/a><a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e">00164<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html">btree_impl<\/a>  <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>;$/;"	a
l00164	doxygen-html/a00032_source.html	/^<a name="l00164"><\/a>00164 <span class="comment">    \/\/\/ create mutable reverse iterator by using STL magic<\/span>$/;"	a
l00164	doxygen-html/a00034_source.html	/^<a name="l00164"><\/a><a class="code" href="a00009.html#afb9918dafdccf1eaffa6b6ddc8de0938">00164<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::reverse_iterator       <a class="code" href="a00009.html#afb9918dafdccf1eaffa6b6ddc8de0938" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a>;$/;"	a
l00165	doxygen-html/a00026_source.html	/^<a name="l00165"><\/a>00165 <span class="keyword">public<\/span>:$/;"	a
l00165	doxygen-html/a00028_source.html	/^<a name="l00165"><\/a>00165 <span class="keyword">public<\/span>:$/;"	a
l00165	doxygen-html/a00030_source.html	/^<a name="l00165"><\/a>00165 $/;"	a
l00165	doxygen-html/a00032_source.html	/^<a name="l00165"><\/a><a class="code" href="a00006.html#aa20cfd7ed6236bc3c51b20d5a77a5286">00165<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::reverse_iterator       <a class="code" href="a00006.html#aa20cfd7ed6236bc3c51b20d5a77a5286" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a>;$/;"	a
l00165	doxygen-html/a00034_source.html	/^<a name="l00165"><\/a>00165 <span class="comment"><\/span>$/;"	a
l00166	doxygen-html/a00026_source.html	/^<a name="l00166"><\/a>00166     <span class="comment">\/\/ *** Template Parameter Types<\/span>$/;"	a
l00166	doxygen-html/a00028_source.html	/^<a name="l00166"><\/a>00166     <span class="comment">\/\/ *** Constructors and Destructor<\/span>$/;"	a
l00166	doxygen-html/a00030_source.html	/^<a name="l00166"><\/a>00166 <span class="keyword">public<\/span>:$/;"	a
l00166	doxygen-html/a00032_source.html	/^<a name="l00166"><\/a>00166 <span class="comment"><\/span>$/;"	a
l00166	doxygen-html/a00034_source.html	/^<a name="l00166"><\/a>00166 <span class="comment">    \/\/\/ create constant reverse iterator by using STL magic<\/span>$/;"	a
l00167	doxygen-html/a00026_source.html	/^<a name="l00167"><\/a>00167 <span class="comment"><\/span>$/;"	a
l00167	doxygen-html/a00028_source.html	/^<a name="l00167"><\/a>00167 <span class="comment"><\/span>$/;"	a
l00167	doxygen-html/a00030_source.html	/^<a name="l00167"><\/a>00167     <span class="comment">\/\/ *** Constructors and Destructor<\/span>$/;"	a
l00167	doxygen-html/a00032_source.html	/^<a name="l00167"><\/a>00167 <span class="comment">    \/\/\/ create constant reverse iterator by using STL magic<\/span>$/;"	a
l00167	doxygen-html/a00034_source.html	/^<a name="l00167"><\/a><a class="code" href="a00009.html#a989d5052f0f73009ad08544bef214038">00167<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_reverse_iterator <a class="code" href="a00009.html#a989d5052f0f73009ad08544bef214038" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a>;$/;"	a
l00168	doxygen-html/a00026_source.html	/^<a name="l00168"><\/a>00168 <span class="comment">    \/\/\/ First template parameter: The key type of the B+ tree. This is stored<\/span>$/;"	a
l00168	doxygen-html/a00028_source.html	/^<a name="l00168"><\/a>00168 <span class="comment">    \/\/\/ Default constructor initializing an empty B+ tree with the standard key<\/span>$/;"	a
l00168	doxygen-html/a00030_source.html	/^<a name="l00168"><\/a>00168 <span class="comment"><\/span>$/;"	a
l00168	doxygen-html/a00032_source.html	/^<a name="l00168"><\/a><a class="code" href="a00006.html#aa137474f07b11232834fc838c96f89b4">00168<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> btree_impl::const_reverse_iterator <a class="code" href="a00006.html#aa137474f07b11232834fc838c96f89b4" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a>;$/;"	a
l00168	doxygen-html/a00034_source.html	/^<a name="l00168"><\/a>00168 $/;"	a
l00169	doxygen-html/a00026_source.html	/^<a name="l00169"><\/a>00169 <span class="comment">    \/\/\/ in inner nodes and leaves<\/span>$/;"	a
l00169	doxygen-html/a00028_source.html	/^<a name="l00169"><\/a>00169 <span class="comment">    \/\/\/ comparison function<\/span>$/;"	a
l00169	doxygen-html/a00030_source.html	/^<a name="l00169"><\/a>00169 <span class="comment">    \/\/\/ Default constructor initializing an empty B+ tree with the standard key<\/span>$/;"	a
l00169	doxygen-html/a00032_source.html	/^<a name="l00169"><\/a>00169 $/;"	a
l00169	doxygen-html/a00034_source.html	/^<a name="l00169"><\/a>00169 <span class="keyword">private<\/span>:$/;"	a
l00170	doxygen-html/a00026_source.html	/^<a name="l00170"><\/a><a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a">00170<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Key                        <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>;$/;"	a
l00170	doxygen-html/a00028_source.html	/^<a name="l00170"><\/a><a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9">00170<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_map<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00170	doxygen-html/a00030_source.html	/^<a name="l00170"><\/a>00170 <span class="comment">    \/\/\/ comparison function<\/span>$/;"	a
l00170	doxygen-html/a00032_source.html	/^<a name="l00170"><\/a>00170 <span class="keyword">private<\/span>:$/;"	a
l00170	doxygen-html/a00034_source.html	/^<a name="l00170"><\/a>00170     <span class="comment">\/\/ *** Tree Implementation Object<\/span>$/;"	a
l00171	doxygen-html/a00026_source.html	/^<a name="l00171"><\/a>00171 <span class="comment"><\/span>$/;"	a
l00171	doxygen-html/a00028_source.html	/^<a name="l00171"><\/a>00171         : <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00171	doxygen-html/a00030_source.html	/^<a name="l00171"><\/a><a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c">00171<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multimap<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00171	doxygen-html/a00032_source.html	/^<a name="l00171"><\/a>00171     <span class="comment">\/\/ *** Tree Implementation Object<\/span>$/;"	a
l00171	doxygen-html/a00034_source.html	/^<a name="l00171"><\/a>00171 <span class="comment"><\/span>$/;"	a
l00172	doxygen-html/a00026_source.html	/^<a name="l00172"><\/a>00172 <span class="comment">    \/\/\/ Second template parameter: The data type associated with each<\/span>$/;"	a
l00172	doxygen-html/a00028_source.html	/^<a name="l00172"><\/a>00172     {$/;"	a
l00172	doxygen-html/a00030_source.html	/^<a name="l00172"><\/a>00172         : <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00172	doxygen-html/a00032_source.html	/^<a name="l00172"><\/a>00172 <span class="comment"><\/span>$/;"	a
l00172	doxygen-html/a00034_source.html	/^<a name="l00172"><\/a>00172 <span class="comment">    \/\/\/ The contained implementation object<\/span>$/;"	a
l00173	doxygen-html/a00026_source.html	/^<a name="l00173"><\/a>00173 <span class="comment">    \/\/\/ key. Stored in the B+ tree&#39;s leaves<\/span>$/;"	a
l00173	doxygen-html/a00028_source.html	/^<a name="l00173"><\/a>00173     }$/;"	a
l00173	doxygen-html/a00030_source.html	/^<a name="l00173"><\/a>00173     {$/;"	a
l00173	doxygen-html/a00032_source.html	/^<a name="l00173"><\/a>00173 <span class="comment">    \/\/\/ The contained implementation object<\/span>$/;"	a
l00173	doxygen-html/a00034_source.html	/^<a name="l00173"><\/a><a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7">00173<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html">btree_impl<\/a>  <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>;$/;"	a
l00174	doxygen-html/a00026_source.html	/^<a name="l00174"><\/a><a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616">00174<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Data                       <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>;$/;"	a
l00174	doxygen-html/a00028_source.html	/^<a name="l00174"><\/a>00174 <span class="comment"><\/span>$/;"	a
l00174	doxygen-html/a00030_source.html	/^<a name="l00174"><\/a>00174     }$/;"	a
l00174	doxygen-html/a00032_source.html	/^<a name="l00174"><\/a><a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2">00174<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html">btree_impl<\/a>  <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>;$/;"	a
l00174	doxygen-html/a00034_source.html	/^<a name="l00174"><\/a>00174 $/;"	a
l00175	doxygen-html/a00026_source.html	/^<a name="l00175"><\/a>00175 <span class="comment"><\/span>$/;"	a
l00175	doxygen-html/a00028_source.html	/^<a name="l00175"><\/a>00175 <span class="comment">    \/\/\/ Constructor initializing an empty B+ tree with a special key<\/span>$/;"	a
l00175	doxygen-html/a00030_source.html	/^<a name="l00175"><\/a>00175 <span class="comment"><\/span>$/;"	a
l00175	doxygen-html/a00032_source.html	/^<a name="l00175"><\/a>00175 $/;"	a
l00175	doxygen-html/a00034_source.html	/^<a name="l00175"><\/a>00175 <span class="keyword">public<\/span>:$/;"	a
l00176	doxygen-html/a00026_source.html	/^<a name="l00176"><\/a>00176 <span class="comment">    \/\/\/ Third template parameter: Composition pair of key and data types, this<\/span>$/;"	a
l00176	doxygen-html/a00028_source.html	/^<a name="l00176"><\/a>00176 <span class="comment">    \/\/\/ comparison object<\/span>$/;"	a
l00176	doxygen-html/a00030_source.html	/^<a name="l00176"><\/a>00176 <span class="comment">    \/\/\/ Constructor initializing an empty B+ tree with a special key<\/span>$/;"	a
l00176	doxygen-html/a00032_source.html	/^<a name="l00176"><\/a>00176 <span class="keyword">public<\/span>:$/;"	a
l00176	doxygen-html/a00034_source.html	/^<a name="l00176"><\/a>00176     <span class="comment">\/\/ *** Constructors and Destructor<\/span>$/;"	a
l00177	doxygen-html/a00026_source.html	/^<a name="l00177"><\/a>00177 <span class="comment">    \/\/\/ is required by the STL standard. The B+ tree does not store key and<\/span>$/;"	a
l00177	doxygen-html/a00028_source.html	/^<a name="l00177"><\/a><a class="code" href="a00004.html#a75fc3cca006f9f80e26738761f5f012b">00177<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_map<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1" title="Third template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00177	doxygen-html/a00030_source.html	/^<a name="l00177"><\/a>00177 <span class="comment">    \/\/\/ comparison object<\/span>$/;"	a
l00177	doxygen-html/a00032_source.html	/^<a name="l00177"><\/a>00177     <span class="comment">\/\/ *** Constructors and Destructor<\/span>$/;"	a
l00177	doxygen-html/a00034_source.html	/^<a name="l00177"><\/a>00177 <span class="comment"><\/span>$/;"	a
l00178	doxygen-html/a00026_source.html	/^<a name="l00178"><\/a>00178 <span class="comment">    \/\/\/ data together. If value_type == key_type then the B+ tree implements a<\/span>$/;"	a
l00178	doxygen-html/a00028_source.html	/^<a name="l00178"><\/a>00178                               <span class="keyword">const<\/span> <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00178	doxygen-html/a00030_source.html	/^<a name="l00178"><\/a><a class="code" href="a00005.html#aa364ef57b237fb7c633346b3b42f9db3">00178<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multimap<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012" title="Third template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00178	doxygen-html/a00032_source.html	/^<a name="l00178"><\/a>00178 <span class="comment"><\/span>$/;"	a
l00178	doxygen-html/a00034_source.html	/^<a name="l00178"><\/a>00178 <span class="comment">    \/\/\/ Default constructor initializing an empty B+ tree with the standard key<\/span>$/;"	a
l00179	doxygen-html/a00026_source.html	/^<a name="l00179"><\/a>00179 <span class="comment">    \/\/\/ set.<\/span>$/;"	a
l00179	doxygen-html/a00028_source.html	/^<a name="l00179"><\/a>00179         : <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00179	doxygen-html/a00030_source.html	/^<a name="l00179"><\/a>00179                                    <span class="keyword">const<\/span> <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00179	doxygen-html/a00032_source.html	/^<a name="l00179"><\/a>00179 <span class="comment">    \/\/\/ Default constructor initializing an empty B+ tree with the standard key<\/span>$/;"	a
l00179	doxygen-html/a00034_source.html	/^<a name="l00179"><\/a>00179 <span class="comment">    \/\/\/ comparison function<\/span>$/;"	a
l00180	doxygen-html/a00026_source.html	/^<a name="l00180"><\/a><a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6">00180<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Value                      <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>;$/;"	a
l00180	doxygen-html/a00028_source.html	/^<a name="l00180"><\/a>00180     {$/;"	a
l00180	doxygen-html/a00030_source.html	/^<a name="l00180"><\/a>00180         : <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00180	doxygen-html/a00032_source.html	/^<a name="l00180"><\/a>00180 <span class="comment">    \/\/\/ comparison function<\/span>$/;"	a
l00180	doxygen-html/a00034_source.html	/^<a name="l00180"><\/a><a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797">00180<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_set<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00181	doxygen-html/a00026_source.html	/^<a name="l00181"><\/a>00181 <span class="comment"><\/span>$/;"	a
l00181	doxygen-html/a00028_source.html	/^<a name="l00181"><\/a>00181     }$/;"	a
l00181	doxygen-html/a00030_source.html	/^<a name="l00181"><\/a>00181     {$/;"	a
l00181	doxygen-html/a00032_source.html	/^<a name="l00181"><\/a><a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d">00181<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multiset<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00181	doxygen-html/a00034_source.html	/^<a name="l00181"><\/a>00181         : <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00182	doxygen-html/a00026_source.html	/^<a name="l00182"><\/a>00182 <span class="comment">    \/\/\/ Fourth template parameter: Key comparison function object<\/span>$/;"	a
l00182	doxygen-html/a00028_source.html	/^<a name="l00182"><\/a>00182 <span class="comment"><\/span>$/;"	a
l00182	doxygen-html/a00030_source.html	/^<a name="l00182"><\/a>00182     }$/;"	a
l00182	doxygen-html/a00032_source.html	/^<a name="l00182"><\/a>00182         : <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00182	doxygen-html/a00034_source.html	/^<a name="l00182"><\/a>00182     {$/;"	a
l00183	doxygen-html/a00026_source.html	/^<a name="l00183"><\/a><a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae">00183<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Compare                    <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a>;$/;"	a
l00183	doxygen-html/a00028_source.html	/^<a name="l00183"><\/a>00183 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last)<\/span>$/;"	a
l00183	doxygen-html/a00030_source.html	/^<a name="l00183"><\/a>00183 <span class="comment"><\/span>$/;"	a
l00183	doxygen-html/a00032_source.html	/^<a name="l00183"><\/a>00183     {$/;"	a
l00183	doxygen-html/a00034_source.html	/^<a name="l00183"><\/a>00183     }$/;"	a
l00184	doxygen-html/a00026_source.html	/^<a name="l00184"><\/a>00184 <span class="comment"><\/span>$/;"	a
l00184	doxygen-html/a00028_source.html	/^<a name="l00184"><\/a>00184 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00184	doxygen-html/a00030_source.html	/^<a name="l00184"><\/a>00184 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last)<\/span>$/;"	a
l00184	doxygen-html/a00032_source.html	/^<a name="l00184"><\/a>00184     }$/;"	a
l00184	doxygen-html/a00034_source.html	/^<a name="l00184"><\/a>00184 <span class="comment"><\/span>$/;"	a
l00185	doxygen-html/a00026_source.html	/^<a name="l00185"><\/a>00185 <span class="comment">    \/\/\/ Fifth template parameter: Traits object used to define more parameters<\/span>$/;"	a
l00185	doxygen-html/a00028_source.html	/^<a name="l00185"><\/a><a class="code" href="a00004.html#a1801d9d4587edf16df5dd97fca4e9d3f">00185<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_map<\/a>(InputIterator first, InputIterator last,$/;"	a
l00185	doxygen-html/a00030_source.html	/^<a name="l00185"><\/a>00185 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00185	doxygen-html/a00032_source.html	/^<a name="l00185"><\/a>00185 <span class="comment"><\/span>$/;"	a
l00185	doxygen-html/a00034_source.html	/^<a name="l00185"><\/a>00185 <span class="comment">    \/\/\/ Constructor initializing an empty B+ tree with a special key<\/span>$/;"	a
l00186	doxygen-html/a00026_source.html	/^<a name="l00186"><\/a>00186 <span class="comment">    \/\/\/ of the B+ tree<\/span>$/;"	a
l00186	doxygen-html/a00028_source.html	/^<a name="l00186"><\/a>00186                      <span class="keyword">const<\/span> <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00186	doxygen-html/a00030_source.html	/^<a name="l00186"><\/a><a class="code" href="a00005.html#a3c52e5b56314500448e3262670ab1e75">00186<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multimap<\/a>(InputIterator first, InputIterator last,$/;"	a
l00186	doxygen-html/a00032_source.html	/^<a name="l00186"><\/a>00186 <span class="comment">    \/\/\/ Constructor initializing an empty B+ tree with a special key<\/span>$/;"	a
l00186	doxygen-html/a00034_source.html	/^<a name="l00186"><\/a>00186 <span class="comment">    \/\/\/ comparison object<\/span>$/;"	a
l00187	doxygen-html/a00026_source.html	/^<a name="l00187"><\/a><a class="code" href="a00001.html#a8b13a0eb2e558d11830d38de21b82319">00187<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Traits                     <a class="code" href="a00001.html#a8b13a0eb2e558d11830d38de21b82319" title="Fifth template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>;$/;"	a
l00187	doxygen-html/a00028_source.html	/^<a name="l00187"><\/a>00187         : <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>(first, last, alloc)$/;"	a
l00187	doxygen-html/a00030_source.html	/^<a name="l00187"><\/a>00187                           <span class="keyword">const<\/span> <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00187	doxygen-html/a00032_source.html	/^<a name="l00187"><\/a>00187 <span class="comment">    \/\/\/ comparison object<\/span>$/;"	a
l00187	doxygen-html/a00034_source.html	/^<a name="l00187"><\/a><a class="code" href="a00009.html#a9b12b35835ef7a7bf7414fed7b572119">00187<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_set<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f" title="Second template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00188	doxygen-html/a00026_source.html	/^<a name="l00188"><\/a>00188 <span class="comment"><\/span>$/;"	a
l00188	doxygen-html/a00028_source.html	/^<a name="l00188"><\/a>00188     {$/;"	a
l00188	doxygen-html/a00030_source.html	/^<a name="l00188"><\/a>00188         : <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>(first, last, alloc)$/;"	a
l00188	doxygen-html/a00032_source.html	/^<a name="l00188"><\/a><a class="code" href="a00006.html#a4411a079d52cdac10490c9f44827ed63">00188<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multiset<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21" title="Second template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00188	doxygen-html/a00034_source.html	/^<a name="l00188"><\/a>00188                               <span class="keyword">const<\/span> <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00189	doxygen-html/a00026_source.html	/^<a name="l00189"><\/a>00189 <span class="comment">    \/\/\/ Sixth template parameter: Allow duplicate keys in the B+ tree. Used to<\/span>$/;"	a
l00189	doxygen-html/a00028_source.html	/^<a name="l00189"><\/a>00189     }$/;"	a
l00189	doxygen-html/a00030_source.html	/^<a name="l00189"><\/a>00189     {$/;"	a
l00189	doxygen-html/a00032_source.html	/^<a name="l00189"><\/a>00189                                    <span class="keyword">const<\/span> <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00189	doxygen-html/a00034_source.html	/^<a name="l00189"><\/a>00189         : <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00190	doxygen-html/a00026_source.html	/^<a name="l00190"><\/a>00190 <span class="comment">    \/\/\/ implement multiset and multimap.<\/span>$/;"	a
l00190	doxygen-html/a00028_source.html	/^<a name="l00190"><\/a>00190 <span class="comment"><\/span>$/;"	a
l00190	doxygen-html/a00030_source.html	/^<a name="l00190"><\/a>00190     }$/;"	a
l00190	doxygen-html/a00032_source.html	/^<a name="l00190"><\/a>00190         : <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00190	doxygen-html/a00034_source.html	/^<a name="l00190"><\/a>00190     {$/;"	a
l00191	doxygen-html/a00026_source.html	/^<a name="l00191"><\/a><a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454">00191<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a> = _Duplicates;$/;"	a
l00191	doxygen-html/a00028_source.html	/^<a name="l00191"><\/a>00191 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last) and a<\/span>$/;"	a
l00191	doxygen-html/a00030_source.html	/^<a name="l00191"><\/a>00191 <span class="comment"><\/span>$/;"	a
l00191	doxygen-html/a00032_source.html	/^<a name="l00191"><\/a>00191     {$/;"	a
l00191	doxygen-html/a00034_source.html	/^<a name="l00191"><\/a>00191     }$/;"	a
l00192	doxygen-html/a00026_source.html	/^<a name="l00192"><\/a>00192 <span class="comment"><\/span>$/;"	a
l00192	doxygen-html/a00028_source.html	/^<a name="l00192"><\/a>00192 <span class="comment">    \/\/\/ special key comparison object<\/span>$/;"	a
l00192	doxygen-html/a00030_source.html	/^<a name="l00192"><\/a>00192 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last) and a<\/span>$/;"	a
l00192	doxygen-html/a00032_source.html	/^<a name="l00192"><\/a>00192     }$/;"	a
l00192	doxygen-html/a00034_source.html	/^<a name="l00192"><\/a>00192 <span class="comment"><\/span>$/;"	a
l00193	doxygen-html/a00026_source.html	/^<a name="l00193"><\/a>00193 <span class="comment">    \/\/\/ Seventh template parameter: STL allocator for tree nodes<\/span>$/;"	a
l00193	doxygen-html/a00028_source.html	/^<a name="l00193"><\/a>00193 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00193	doxygen-html/a00030_source.html	/^<a name="l00193"><\/a>00193 <span class="comment">    \/\/\/ special key comparison object<\/span>$/;"	a
l00193	doxygen-html/a00032_source.html	/^<a name="l00193"><\/a>00193 <span class="comment"><\/span>$/;"	a
l00193	doxygen-html/a00034_source.html	/^<a name="l00193"><\/a>00193 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last)<\/span>$/;"	a
l00194	doxygen-html/a00026_source.html	/^<a name="l00194"><\/a><a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b">00194<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> _Alloc                      <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>;$/;"	a
l00194	doxygen-html/a00028_source.html	/^<a name="l00194"><\/a><a class="code" href="a00004.html#a92d53ace52f64ef0488a3df434bc2483">00194<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_map<\/a>(InputIterator first, InputIterator last, <span class="keyword">const<\/span> <a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1" title="Third template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00194	doxygen-html/a00030_source.html	/^<a name="l00194"><\/a>00194 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00194	doxygen-html/a00032_source.html	/^<a name="l00194"><\/a>00194 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last)<\/span>$/;"	a
l00194	doxygen-html/a00034_source.html	/^<a name="l00194"><\/a>00194 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00195	doxygen-html/a00026_source.html	/^<a name="l00195"><\/a>00195 <span class="comment"><\/span>$/;"	a
l00195	doxygen-html/a00028_source.html	/^<a name="l00195"><\/a>00195                      <span class="keyword">const<\/span> <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00195	doxygen-html/a00030_source.html	/^<a name="l00195"><\/a><a class="code" href="a00005.html#ae32115eb2997acfb493f10421355e953">00195<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multimap<\/a>(InputIterator first, InputIterator last, <span class="keyword">const<\/span> <a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012" title="Third template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00195	doxygen-html/a00032_source.html	/^<a name="l00195"><\/a>00195 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00195	doxygen-html/a00034_source.html	/^<a name="l00195"><\/a><a class="code" href="a00009.html#a158e2ba5a007dcd647928ceb942cdf48">00195<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_set<\/a>(InputIterator first, InputIterator last,$/;"	a
l00196	doxygen-html/a00026_source.html	/^<a name="l00196"><\/a>00196 <span class="comment">    \/\/\/ Eighth template parameter: boolean indicator whether the btree is used<\/span>$/;"	a
l00196	doxygen-html/a00028_source.html	/^<a name="l00196"><\/a>00196         : <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>(first, last, kcf, alloc)$/;"	a
l00196	doxygen-html/a00030_source.html	/^<a name="l00196"><\/a>00196                           <span class="keyword">const<\/span> <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00196	doxygen-html/a00032_source.html	/^<a name="l00196"><\/a><a class="code" href="a00006.html#a6dcabc7e14031cfe33c2e476b1c42e0b">00196<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multiset<\/a>(InputIterator first, InputIterator last,$/;"	a
l00196	doxygen-html/a00034_source.html	/^<a name="l00196"><\/a>00196                      <span class="keyword">const<\/span> <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00197	doxygen-html/a00026_source.html	/^<a name="l00197"><\/a>00197 <span class="comment">    \/\/\/ as a set. In this case all operations on the data arrays are<\/span>$/;"	a
l00197	doxygen-html/a00028_source.html	/^<a name="l00197"><\/a>00197     {$/;"	a
l00197	doxygen-html/a00030_source.html	/^<a name="l00197"><\/a>00197         : <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>(first, last, kcf, alloc)$/;"	a
l00197	doxygen-html/a00032_source.html	/^<a name="l00197"><\/a>00197                           <span class="keyword">const<\/span> <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00197	doxygen-html/a00034_source.html	/^<a name="l00197"><\/a>00197         : <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00198	doxygen-html/a00026_source.html	/^<a name="l00198"><\/a>00198 <span class="comment">    \/\/\/ omitted. This flag is kind of hacky, but required because<\/span>$/;"	a
l00198	doxygen-html/a00028_source.html	/^<a name="l00198"><\/a>00198     }$/;"	a
l00198	doxygen-html/a00030_source.html	/^<a name="l00198"><\/a>00198     {$/;"	a
l00198	doxygen-html/a00032_source.html	/^<a name="l00198"><\/a>00198         : <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>(alloc)$/;"	a
l00198	doxygen-html/a00034_source.html	/^<a name="l00198"><\/a>00198     {$/;"	a
l00199	doxygen-html/a00026_source.html	/^<a name="l00199"><\/a>00199 <span class="comment">    \/\/\/ sizeof(empty_struct) = 1 due to the C standard. Without the flag, lots<\/span>$/;"	a
l00199	doxygen-html/a00028_source.html	/^<a name="l00199"><\/a>00199 <span class="comment"><\/span>$/;"	a
l00199	doxygen-html/a00030_source.html	/^<a name="l00199"><\/a>00199     }$/;"	a
l00199	doxygen-html/a00032_source.html	/^<a name="l00199"><\/a>00199     {$/;"	a
l00199	doxygen-html/a00034_source.html	/^<a name="l00199"><\/a>00199         <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00200	doxygen-html/a00026_source.html	/^<a name="l00200"><\/a>00200 <span class="comment">    \/\/\/ of superfluous copying would occur.<\/span>$/;"	a
l00200	doxygen-html/a00028_source.html	/^<a name="l00200"><\/a>00200 <span class="comment">    \/\/\/ Frees up all used B+ tree memory pages<\/span>$/;"	a
l00200	doxygen-html/a00030_source.html	/^<a name="l00200"><\/a>00200 <span class="comment"><\/span>$/;"	a
l00200	doxygen-html/a00032_source.html	/^<a name="l00200"><\/a>00200         <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00200	doxygen-html/a00034_source.html	/^<a name="l00200"><\/a>00200     }$/;"	a
l00201	doxygen-html/a00026_source.html	/^<a name="l00201"><\/a><a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023">00201<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> = _UsedAsSet;$/;"	a
l00201	doxygen-html/a00028_source.html	/^<a name="l00201"><\/a><a class="code" href="a00004.html#acd6d30ce67dc6d665b29cafc8fdb7221">00201<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#acd6d30ce67dc6d665b29cafc8fdb7221" title="Frees up all used B+ tree memory pages.">~btree_map<\/a>()$/;"	a
l00201	doxygen-html/a00030_source.html	/^<a name="l00201"><\/a>00201 <span class="comment">    \/\/\/ Frees up all used B+ tree memory pages<\/span>$/;"	a
l00201	doxygen-html/a00032_source.html	/^<a name="l00201"><\/a>00201     }$/;"	a
l00201	doxygen-html/a00034_source.html	/^<a name="l00201"><\/a>00201 <span class="comment"><\/span>$/;"	a
l00202	doxygen-html/a00026_source.html	/^<a name="l00202"><\/a>00202 $/;"	a
l00202	doxygen-html/a00028_source.html	/^<a name="l00202"><\/a>00202     {$/;"	a
l00202	doxygen-html/a00030_source.html	/^<a name="l00202"><\/a><a class="code" href="a00005.html#a67e377caa7e95aafe58620dd0687a2ab">00202<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a67e377caa7e95aafe58620dd0687a2ab" title="Frees up all used B+ tree memory pages.">~btree_multimap<\/a>()$/;"	a
l00202	doxygen-html/a00032_source.html	/^<a name="l00202"><\/a>00202 <span class="comment"><\/span>$/;"	a
l00202	doxygen-html/a00034_source.html	/^<a name="l00202"><\/a>00202 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last) and a<\/span>$/;"	a
l00203	doxygen-html/a00026_source.html	/^<a name="l00203"><\/a>00203     <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00203	doxygen-html/a00028_source.html	/^<a name="l00203"><\/a>00203     }$/;"	a
l00203	doxygen-html/a00030_source.html	/^<a name="l00203"><\/a>00203     {$/;"	a
l00203	doxygen-html/a00032_source.html	/^<a name="l00203"><\/a>00203 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last) and a<\/span>$/;"	a
l00203	doxygen-html/a00034_source.html	/^<a name="l00203"><\/a>00203 <span class="comment">    \/\/\/ special key comparison object<\/span>$/;"	a
l00204	doxygen-html/a00026_source.html	/^<a name="l00204"><\/a>00204     <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00204	doxygen-html/a00028_source.html	/^<a name="l00204"><\/a>00204 <span class="comment"><\/span>$/;"	a
l00204	doxygen-html/a00030_source.html	/^<a name="l00204"><\/a>00204     }$/;"	a
l00204	doxygen-html/a00032_source.html	/^<a name="l00204"><\/a>00204 <span class="comment">    \/\/\/ special key comparison object<\/span>$/;"	a
l00204	doxygen-html/a00034_source.html	/^<a name="l00204"><\/a>00204 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00205	doxygen-html/a00026_source.html	/^<a name="l00205"><\/a>00205     <span class="comment">\/\/ tree.<\/span>$/;"	a
l00205	doxygen-html/a00028_source.html	/^<a name="l00205"><\/a>00205 <span class="comment">    \/\/\/ Fast swapping of two identical B+ tree objects.<\/span>$/;"	a
l00205	doxygen-html/a00030_source.html	/^<a name="l00205"><\/a>00205 <span class="comment"><\/span>$/;"	a
l00205	doxygen-html/a00032_source.html	/^<a name="l00205"><\/a>00205 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l00205	doxygen-html/a00034_source.html	/^<a name="l00205"><\/a><a class="code" href="a00009.html#ac949bdeb75eeff239de30007029a7dc4">00205<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_set<\/a>(InputIterator first, InputIterator last, <span class="keyword">const<\/span> <a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f" title="Second template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00206	doxygen-html/a00026_source.html	/^<a name="l00206"><\/a>00206     <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00206	doxygen-html/a00028_source.html	/^<a name="l00206"><\/a><a class="code" href="a00004.html#a5569e8d5495de8db8cd8c51b5797c9b0">00206<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#a5569e8d5495de8db8cd8c51b5797c9b0" title="Fast swapping of two identical B+ tree objects.">swap<\/a>(<span class="keyword">self<\/span>&amp; from)$/;"	a
l00206	doxygen-html/a00030_source.html	/^<a name="l00206"><\/a>00206 <span class="comment">    \/\/\/ Fast swapping of two identical B+ tree objects.<\/span>$/;"	a
l00206	doxygen-html/a00032_source.html	/^<a name="l00206"><\/a><a class="code" href="a00006.html#a850ad8cd4782cf8dd11ef9ec7660dbf1">00206<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multiset<\/a>(InputIterator first, InputIterator last, <span class="keyword">const<\/span> <a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21" title="Second template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l00206	doxygen-html/a00034_source.html	/^<a name="l00206"><\/a>00206                      <span class="keyword">const<\/span> <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00207	doxygen-html/a00026_source.html	/^<a name="l00207"><\/a>00207 $/;"	a
l00207	doxygen-html/a00028_source.html	/^<a name="l00207"><\/a>00207     {$/;"	a
l00207	doxygen-html/a00030_source.html	/^<a name="l00207"><\/a><a class="code" href="a00005.html#a5fedcb02d137aa7c270aa79d67bbe726">00207<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a5fedcb02d137aa7c270aa79d67bbe726" title="Fast swapping of two identical B+ tree objects.">swap<\/a>(<span class="keyword">self<\/span>&amp; from)$/;"	a
l00207	doxygen-html/a00032_source.html	/^<a name="l00207"><\/a>00207                           <span class="keyword">const<\/span> <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a>())$/;"	a
l00207	doxygen-html/a00034_source.html	/^<a name="l00207"><\/a>00207         : <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00208	doxygen-html/a00026_source.html	/^<a name="l00208"><\/a>00208 <span class="keyword">public<\/span>:$/;"	a
l00208	doxygen-html/a00028_source.html	/^<a name="l00208"><\/a>00208         <a class="code" href="a00004.html#a5569e8d5495de8db8cd8c51b5797c9b0" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>, from.tree);$/;"	a
l00208	doxygen-html/a00030_source.html	/^<a name="l00208"><\/a>00208     {$/;"	a
l00208	doxygen-html/a00032_source.html	/^<a name="l00208"><\/a>00208         : <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>(kcf, alloc)$/;"	a
l00208	doxygen-html/a00034_source.html	/^<a name="l00208"><\/a>00208     {$/;"	a
l00209	doxygen-html/a00026_source.html	/^<a name="l00209"><\/a>00209     <span class="comment">\/\/ *** Constructed Types<\/span>$/;"	a
l00209	doxygen-html/a00028_source.html	/^<a name="l00209"><\/a>00209     }$/;"	a
l00209	doxygen-html/a00030_source.html	/^<a name="l00209"><\/a>00209         <a class="code" href="a00005.html#a5fedcb02d137aa7c270aa79d67bbe726" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>, from.tree);$/;"	a
l00209	doxygen-html/a00032_source.html	/^<a name="l00209"><\/a>00209     {$/;"	a
l00209	doxygen-html/a00034_source.html	/^<a name="l00209"><\/a>00209         <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00210	doxygen-html/a00026_source.html	/^<a name="l00210"><\/a>00210 <span class="comment"><\/span>$/;"	a
l00210	doxygen-html/a00028_source.html	/^<a name="l00210"><\/a>00210 $/;"	a
l00210	doxygen-html/a00030_source.html	/^<a name="l00210"><\/a>00210     }$/;"	a
l00210	doxygen-html/a00032_source.html	/^<a name="l00210"><\/a>00210         <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00210	doxygen-html/a00034_source.html	/^<a name="l00210"><\/a>00210     }$/;"	a
l00211	doxygen-html/a00026_source.html	/^<a name="l00211"><\/a>00211 <span class="comment">    \/\/\/ Typedef of our own type<\/span>$/;"	a
l00211	doxygen-html/a00028_source.html	/^<a name="l00211"><\/a>00211 <span class="keyword">public<\/span>:$/;"	a
l00211	doxygen-html/a00030_source.html	/^<a name="l00211"><\/a>00211 $/;"	a
l00211	doxygen-html/a00032_source.html	/^<a name="l00211"><\/a>00211     }$/;"	a
l00211	doxygen-html/a00034_source.html	/^<a name="l00211"><\/a>00211 <span class="comment"><\/span>$/;"	a
l00212	doxygen-html/a00026_source.html	/^<a name="l00212"><\/a>00212 <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree<\/a>&lt;<a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>, <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>, <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>, <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00212	doxygen-html/a00028_source.html	/^<a name="l00212"><\/a>00212     <span class="comment">\/\/ *** Key and Value Comparison Function Objects<\/span>$/;"	a
l00212	doxygen-html/a00030_source.html	/^<a name="l00212"><\/a>00212 <span class="keyword">public<\/span>:$/;"	a
l00212	doxygen-html/a00032_source.html	/^<a name="l00212"><\/a>00212 <span class="comment"><\/span>$/;"	a
l00212	doxygen-html/a00034_source.html	/^<a name="l00212"><\/a>00212 <span class="comment">    \/\/\/ Frees up all used B+ tree memory pages<\/span>$/;"	a
l00213	doxygen-html/a00026_source.html	/^<a name="l00213"><\/a><a class="code" href="a00001.html#ad7844e40add49f90fc9e1f2c888afb14">00213<\/a>                   <a class="code" href="a00001.html#a8b13a0eb2e558d11830d38de21b82319" title="Fifth template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>, <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a>, <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>, <a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>&gt; <a class="code" href="a00001.html#ad7844e40add49f90fc9e1f2c888afb14" title="Typedef of our own type.">btree_self<\/a>;$/;"	a
l00213	doxygen-html/a00028_source.html	/^<a name="l00213"><\/a>00213 <span class="comment"><\/span>$/;"	a
l00213	doxygen-html/a00030_source.html	/^<a name="l00213"><\/a>00213     <span class="comment">\/\/ *** Key and Value Comparison Function Objects<\/span>$/;"	a
l00213	doxygen-html/a00032_source.html	/^<a name="l00213"><\/a>00213 <span class="comment">    \/\/\/ Frees up all used B+ tree memory pages<\/span>$/;"	a
l00213	doxygen-html/a00034_source.html	/^<a name="l00213"><\/a><a class="code" href="a00009.html#a252d6d1027b0d78a1bec9f63fc68cd82">00213<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a252d6d1027b0d78a1bec9f63fc68cd82" title="Frees up all used B+ tree memory pages.">~btree_set<\/a>()$/;"	a
l00214	doxygen-html/a00026_source.html	/^<a name="l00214"><\/a>00214 <span class="comment"><\/span>$/;"	a
l00214	doxygen-html/a00028_source.html	/^<a name="l00214"><\/a>00214 <span class="comment">    \/\/\/ Constant access to the key comparison object sorting the B+ tree<\/span>$/;"	a
l00214	doxygen-html/a00030_source.html	/^<a name="l00214"><\/a>00214 <span class="comment"><\/span>$/;"	a
l00214	doxygen-html/a00032_source.html	/^<a name="l00214"><\/a><a class="code" href="a00006.html#aec3bb61dacff05a504ae53889d8e3bf3">00214<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#aec3bb61dacff05a504ae53889d8e3bf3" title="Frees up all used B+ tree memory pages.">~btree_multiset<\/a>()$/;"	a
l00214	doxygen-html/a00034_source.html	/^<a name="l00214"><\/a>00214     {$/;"	a
l00215	doxygen-html/a00026_source.html	/^<a name="l00215"><\/a>00215 <span class="comment">    \/\/\/ Size type used to count keys<\/span>$/;"	a
l00215	doxygen-html/a00028_source.html	/^<a name="l00215"><\/a><a class="code" href="a00004.html#abab498d7a1a6806b11e9be08558451ec">00215<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a7c428c8ee8f8ec5041739f6bb55089c1" title="Third template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00004.html#abab498d7a1a6806b11e9be08558451ec" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00215	doxygen-html/a00030_source.html	/^<a name="l00215"><\/a>00215 <span class="comment">    \/\/\/ Constant access to the key comparison object sorting the B+ tree<\/span>$/;"	a
l00215	doxygen-html/a00032_source.html	/^<a name="l00215"><\/a>00215     {$/;"	a
l00215	doxygen-html/a00034_source.html	/^<a name="l00215"><\/a>00215     }$/;"	a
l00216	doxygen-html/a00026_source.html	/^<a name="l00216"><\/a><a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da">00216<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> <span class="keywordtype">size_t<\/span>                              <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>;$/;"	a
l00216	doxygen-html/a00028_source.html	/^<a name="l00216"><\/a>00216 <span class="keyword">    <\/span>{$/;"	a
l00216	doxygen-html/a00030_source.html	/^<a name="l00216"><\/a><a class="code" href="a00005.html#abd05c6ac64de9889b2ed8888be6ca3e8">00216<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#abedfcc2e864fadba606bd3c42b278012" title="Third template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00005.html#abd05c6ac64de9889b2ed8888be6ca3e8" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00216	doxygen-html/a00032_source.html	/^<a name="l00216"><\/a>00216     }$/;"	a
l00216	doxygen-html/a00034_source.html	/^<a name="l00216"><\/a>00216 <span class="comment"><\/span>$/;"	a
l00217	doxygen-html/a00026_source.html	/^<a name="l00217"><\/a>00217 <span class="comment"><\/span>$/;"	a
l00217	doxygen-html/a00028_source.html	/^<a name="l00217"><\/a>00217         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>();$/;"	a
l00217	doxygen-html/a00030_source.html	/^<a name="l00217"><\/a>00217 <span class="keyword">    <\/span>{$/;"	a
l00217	doxygen-html/a00032_source.html	/^<a name="l00217"><\/a>00217 <span class="comment"><\/span>$/;"	a
l00217	doxygen-html/a00034_source.html	/^<a name="l00217"><\/a>00217 <span class="comment">    \/\/\/ Fast swapping of two identical B+ tree objects.<\/span>$/;"	a
l00218	doxygen-html/a00026_source.html	/^<a name="l00218"><\/a>00218 <span class="comment">    \/\/\/ The pair of key_type and data_type, this may be different from value_type.<\/span>$/;"	a
l00218	doxygen-html/a00028_source.html	/^<a name="l00218"><\/a>00218     }$/;"	a
l00218	doxygen-html/a00030_source.html	/^<a name="l00218"><\/a>00218         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>();$/;"	a
l00218	doxygen-html/a00032_source.html	/^<a name="l00218"><\/a>00218 <span class="comment">    \/\/\/ Fast swapping of two identical B+ tree objects.<\/span>$/;"	a
l00218	doxygen-html/a00034_source.html	/^<a name="l00218"><\/a><a class="code" href="a00009.html#a24321f7bdae8ffc461e48d6331cf25e3">00218<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#a24321f7bdae8ffc461e48d6331cf25e3" title="Fast swapping of two identical B+ tree objects.">swap<\/a>(<span class="keyword">self<\/span>&amp; from)$/;"	a
l00219	doxygen-html/a00026_source.html	/^<a name="l00219"><\/a><a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31">00219<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> std::pair&lt;key_type, data_type&gt;      <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>;$/;"	a
l00219	doxygen-html/a00028_source.html	/^<a name="l00219"><\/a>00219 <span class="comment"><\/span>$/;"	a
l00219	doxygen-html/a00030_source.html	/^<a name="l00219"><\/a>00219     }$/;"	a
l00219	doxygen-html/a00032_source.html	/^<a name="l00219"><\/a><a class="code" href="a00006.html#aad820bbc85b7beaaca43fbdb1b610b56">00219<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#aad820bbc85b7beaaca43fbdb1b610b56" title="Fast swapping of two identical B+ tree objects.">swap<\/a>(<span class="keyword">self<\/span>&amp; from)$/;"	a
l00219	doxygen-html/a00034_source.html	/^<a name="l00219"><\/a>00219     {$/;"	a
l00220	doxygen-html/a00026_source.html	/^<a name="l00220"><\/a>00220 $/;"	a
l00220	doxygen-html/a00028_source.html	/^<a name="l00220"><\/a>00220 <span class="comment">    \/\/\/ Constant access to a constructed value_type comparison object. required<\/span>$/;"	a
l00220	doxygen-html/a00030_source.html	/^<a name="l00220"><\/a>00220 <span class="comment"><\/span>$/;"	a
l00220	doxygen-html/a00032_source.html	/^<a name="l00220"><\/a>00220     {$/;"	a
l00220	doxygen-html/a00034_source.html	/^<a name="l00220"><\/a>00220         <a class="code" href="a00009.html#a24321f7bdae8ffc461e48d6331cf25e3" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>, from.tree);$/;"	a
l00221	doxygen-html/a00026_source.html	/^<a name="l00221"><\/a>00221 <span class="keyword">public<\/span>:$/;"	a
l00221	doxygen-html/a00028_source.html	/^<a name="l00221"><\/a>00221 <span class="comment">    \/\/\/ by the STL<\/span>$/;"	a
l00221	doxygen-html/a00030_source.html	/^<a name="l00221"><\/a>00221 <span class="comment">    \/\/\/ Constant access to a constructed value_type comparison object. required<\/span>$/;"	a
l00221	doxygen-html/a00032_source.html	/^<a name="l00221"><\/a>00221         <a class="code" href="a00006.html#aad820bbc85b7beaaca43fbdb1b610b56" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>, from.tree);$/;"	a
l00221	doxygen-html/a00034_source.html	/^<a name="l00221"><\/a>00221     }$/;"	a
l00222	doxygen-html/a00026_source.html	/^<a name="l00222"><\/a>00222     <span class="comment">\/\/ *** Static Constant Options and Values of the B+ Tree<\/span>$/;"	a
l00222	doxygen-html/a00028_source.html	/^<a name="l00222"><\/a><a class="code" href="a00004.html#ae4426f6512a95d1cb6e7cb61e23b7248">00222<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a87d20557ff74243cab447f15e75e2cc0" title="Function class comparing two value_type pairs.">value_compare<\/a> <a class="code" href="a00004.html#ae4426f6512a95d1cb6e7cb61e23b7248" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00222	doxygen-html/a00030_source.html	/^<a name="l00222"><\/a>00222 <span class="comment">    \/\/\/ by the STL<\/span>$/;"	a
l00222	doxygen-html/a00032_source.html	/^<a name="l00222"><\/a>00222     }$/;"	a
l00222	doxygen-html/a00034_source.html	/^<a name="l00222"><\/a>00222 $/;"	a
l00223	doxygen-html/a00026_source.html	/^<a name="l00223"><\/a>00223 <span class="comment"><\/span>$/;"	a
l00223	doxygen-html/a00028_source.html	/^<a name="l00223"><\/a>00223 <span class="keyword">    <\/span>{$/;"	a
l00223	doxygen-html/a00030_source.html	/^<a name="l00223"><\/a><a class="code" href="a00005.html#aa5f97381439395bc58d0f1beae6cce59">00223<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#aaf6e0051b191679e462a0f4f8fd49f93" title="Function class comparing two value_type pairs.">value_compare<\/a> <a class="code" href="a00005.html#aa5f97381439395bc58d0f1beae6cce59" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00223	doxygen-html/a00032_source.html	/^<a name="l00223"><\/a>00223 $/;"	a
l00223	doxygen-html/a00034_source.html	/^<a name="l00223"><\/a>00223 <span class="keyword">public<\/span>:$/;"	a
l00224	doxygen-html/a00026_source.html	/^<a name="l00224"><\/a>00224 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key\/data slots in each leaf<\/span>$/;"	a
l00224	doxygen-html/a00028_source.html	/^<a name="l00224"><\/a>00224         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>();$/;"	a
l00224	doxygen-html/a00030_source.html	/^<a name="l00224"><\/a>00224 <span class="keyword">    <\/span>{$/;"	a
l00224	doxygen-html/a00032_source.html	/^<a name="l00224"><\/a>00224 <span class="keyword">public<\/span>:$/;"	a
l00224	doxygen-html/a00034_source.html	/^<a name="l00224"><\/a>00224     <span class="comment">\/\/ *** Key and Value Comparison Function Objects<\/span>$/;"	a
l00225	doxygen-html/a00026_source.html	/^<a name="l00225"><\/a><a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8">00225<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a> =  traits::leafslots;$/;"	a
l00225	doxygen-html/a00028_source.html	/^<a name="l00225"><\/a>00225     }$/;"	a
l00225	doxygen-html/a00030_source.html	/^<a name="l00225"><\/a>00225         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>();$/;"	a
l00225	doxygen-html/a00032_source.html	/^<a name="l00225"><\/a>00225     <span class="comment">\/\/ *** Key and Value Comparison Function Objects<\/span>$/;"	a
l00225	doxygen-html/a00034_source.html	/^<a name="l00225"><\/a>00225 <span class="comment"><\/span>$/;"	a
l00226	doxygen-html/a00026_source.html	/^<a name="l00226"><\/a>00226 <span class="comment"><\/span>$/;"	a
l00226	doxygen-html/a00028_source.html	/^<a name="l00226"><\/a>00226 $/;"	a
l00226	doxygen-html/a00030_source.html	/^<a name="l00226"><\/a>00226     }$/;"	a
l00226	doxygen-html/a00032_source.html	/^<a name="l00226"><\/a>00226 <span class="comment"><\/span>$/;"	a
l00226	doxygen-html/a00034_source.html	/^<a name="l00226"><\/a>00226 <span class="comment">    \/\/\/ Constant access to the key comparison object sorting the B+ tree<\/span>$/;"	a
l00227	doxygen-html/a00026_source.html	/^<a name="l00227"><\/a>00227 <span class="comment">    \/\/\/ Base B+ tree parameter: The number of key slots in each inner node,<\/span>$/;"	a
l00227	doxygen-html/a00028_source.html	/^<a name="l00227"><\/a>00227 <span class="keyword">public<\/span>:$/;"	a
l00227	doxygen-html/a00030_source.html	/^<a name="l00227"><\/a>00227 $/;"	a
l00227	doxygen-html/a00032_source.html	/^<a name="l00227"><\/a>00227 <span class="comment">    \/\/\/ Constant access to the key comparison object sorting the B+ tree<\/span>$/;"	a
l00227	doxygen-html/a00034_source.html	/^<a name="l00227"><\/a><a class="code" href="a00009.html#abd0d44790a5ec381c5137b0dea712894">00227<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#af50de559aebda323728e4fa2452bee5f" title="Second template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00009.html#abd0d44790a5ec381c5137b0dea712894" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00228	doxygen-html/a00026_source.html	/^<a name="l00228"><\/a>00228 <span class="comment">    \/\/\/ this can differ from slots in each leaf.<\/span>$/;"	a
l00228	doxygen-html/a00028_source.html	/^<a name="l00228"><\/a>00228     <span class="comment">\/\/ *** Allocators<\/span>$/;"	a
l00228	doxygen-html/a00030_source.html	/^<a name="l00228"><\/a>00228 <span class="keyword">public<\/span>:$/;"	a
l00228	doxygen-html/a00032_source.html	/^<a name="l00228"><\/a><a class="code" href="a00006.html#a3ecbf097192ab41b7a29db4349ce2d3e">00228<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ab4d81bc53597e88abe6617421837df21" title="Second template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00006.html#a3ecbf097192ab41b7a29db4349ce2d3e" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00228	doxygen-html/a00034_source.html	/^<a name="l00228"><\/a>00228 <span class="keyword">    <\/span>{$/;"	a
l00229	doxygen-html/a00026_source.html	/^<a name="l00229"><\/a><a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0">00229<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>         <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> =  traits::innerslots;$/;"	a
l00229	doxygen-html/a00028_source.html	/^<a name="l00229"><\/a>00229 <span class="comment"><\/span>$/;"	a
l00229	doxygen-html/a00030_source.html	/^<a name="l00229"><\/a>00229     <span class="comment">\/\/ *** Allocators<\/span>$/;"	a
l00229	doxygen-html/a00032_source.html	/^<a name="l00229"><\/a>00229 <span class="keyword">    <\/span>{$/;"	a
l00229	doxygen-html/a00034_source.html	/^<a name="l00229"><\/a>00229         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>();$/;"	a
l00230	doxygen-html/a00026_source.html	/^<a name="l00230"><\/a>00230 <span class="comment"><\/span>$/;"	a
l00230	doxygen-html/a00028_source.html	/^<a name="l00230"><\/a>00230 <span class="comment">    \/\/\/ Return the base node allocator provided during construction.<\/span>$/;"	a
l00230	doxygen-html/a00030_source.html	/^<a name="l00230"><\/a>00230 <span class="comment"><\/span>$/;"	a
l00230	doxygen-html/a00032_source.html	/^<a name="l00230"><\/a>00230         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>();$/;"	a
l00230	doxygen-html/a00034_source.html	/^<a name="l00230"><\/a>00230     }$/;"	a
l00231	doxygen-html/a00026_source.html	/^<a name="l00231"><\/a>00231 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key\/data slots used<\/span>$/;"	a
l00231	doxygen-html/a00028_source.html	/^<a name="l00231"><\/a><a class="code" href="a00004.html#a76fe9e37d2d5c102cc2939a512d441eb">00231<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a5d0f64823a786b0652038b8702ae5343" title="Fifth template parameter: STL allocator.">allocator_type<\/a> <a class="code" href="a00004.html#a76fe9e37d2d5c102cc2939a512d441eb" title="Return the base node allocator provided during construction.">get_allocator<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00231	doxygen-html/a00030_source.html	/^<a name="l00231"><\/a>00231 <span class="comment">    \/\/\/ Return the base node allocator provided during construction.<\/span>$/;"	a
l00231	doxygen-html/a00032_source.html	/^<a name="l00231"><\/a>00231     }$/;"	a
l00231	doxygen-html/a00034_source.html	/^<a name="l00231"><\/a>00231 <span class="comment"><\/span>$/;"	a
l00232	doxygen-html/a00026_source.html	/^<a name="l00232"><\/a>00232 <span class="comment">    \/\/\/ in a leaf. If fewer slots are used, the leaf will be merged or slots<\/span>$/;"	a
l00232	doxygen-html/a00028_source.html	/^<a name="l00232"><\/a>00232 <span class="keyword">    <\/span>{$/;"	a
l00232	doxygen-html/a00030_source.html	/^<a name="l00232"><\/a><a class="code" href="a00005.html#af3b5134ebb847dc69e3faa5e17094ecb">00232<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#abd0de8807a5e19e3610d8f2dcf803568" title="Fifth template parameter: STL allocator.">allocator_type<\/a> <a class="code" href="a00005.html#af3b5134ebb847dc69e3faa5e17094ecb" title="Return the base node allocator provided during construction.">get_allocator<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00232	doxygen-html/a00032_source.html	/^<a name="l00232"><\/a>00232 <span class="comment"><\/span>$/;"	a
l00232	doxygen-html/a00034_source.html	/^<a name="l00232"><\/a>00232 <span class="comment">    \/\/\/ Constant access to a constructed value_type comparison object. required<\/span>$/;"	a
l00233	doxygen-html/a00026_source.html	/^<a name="l00233"><\/a>00233 <span class="comment">    \/\/\/ shifted from it&#39;s siblings.<\/span>$/;"	a
l00233	doxygen-html/a00028_source.html	/^<a name="l00233"><\/a>00233         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>();$/;"	a
l00233	doxygen-html/a00030_source.html	/^<a name="l00233"><\/a>00233 <span class="keyword">    <\/span>{$/;"	a
l00233	doxygen-html/a00032_source.html	/^<a name="l00233"><\/a>00233 <span class="comment">    \/\/\/ Constant access to a constructed value_type comparison object. Required<\/span>$/;"	a
l00233	doxygen-html/a00034_source.html	/^<a name="l00233"><\/a>00233 <span class="comment">    \/\/\/ by the STL<\/span>$/;"	a
l00234	doxygen-html/a00026_source.html	/^<a name="l00234"><\/a><a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0">00234<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">minleafslots<\/a> = (<a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a> \/ 2);$/;"	a
l00234	doxygen-html/a00028_source.html	/^<a name="l00234"><\/a>00234     }$/;"	a
l00234	doxygen-html/a00030_source.html	/^<a name="l00234"><\/a>00234         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>();$/;"	a
l00234	doxygen-html/a00032_source.html	/^<a name="l00234"><\/a>00234 <span class="comment">    \/\/\/ by the STL<\/span>$/;"	a
l00234	doxygen-html/a00034_source.html	/^<a name="l00234"><\/a><a class="code" href="a00009.html#a2e31a7e133791f60117cfa2e0a323819">00234<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a9fc9960504727883e021ed064f831a9b" title="Function class comparing two value_type keys.">value_compare<\/a> <a class="code" href="a00009.html#a2e31a7e133791f60117cfa2e0a323819" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00235	doxygen-html/a00026_source.html	/^<a name="l00235"><\/a>00235 <span class="comment"><\/span>$/;"	a
l00235	doxygen-html/a00028_source.html	/^<a name="l00235"><\/a>00235 $/;"	a
l00235	doxygen-html/a00030_source.html	/^<a name="l00235"><\/a>00235     }$/;"	a
l00235	doxygen-html/a00032_source.html	/^<a name="l00235"><\/a><a class="code" href="a00006.html#a84f47ce04fb5330cb2d766a105b278a2">00235<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#a7ef41640ce62bdd8b1857ae6c3ef1c51" title="Function class comparing two value_type keys.">value_compare<\/a> <a class="code" href="a00006.html#a84f47ce04fb5330cb2d766a105b278a2" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00235	doxygen-html/a00034_source.html	/^<a name="l00235"><\/a>00235 <span class="keyword">    <\/span>{$/;"	a
l00236	doxygen-html/a00026_source.html	/^<a name="l00236"><\/a>00236 <span class="comment">    \/\/\/ Computed B+ tree parameter: The minimum number of key slots used<\/span>$/;"	a
l00236	doxygen-html/a00028_source.html	/^<a name="l00236"><\/a>00236 <span class="keyword">public<\/span>:$/;"	a
l00236	doxygen-html/a00030_source.html	/^<a name="l00236"><\/a>00236 $/;"	a
l00236	doxygen-html/a00032_source.html	/^<a name="l00236"><\/a>00236 <span class="keyword">    <\/span>{$/;"	a
l00236	doxygen-html/a00034_source.html	/^<a name="l00236"><\/a>00236         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>();$/;"	a
l00237	doxygen-html/a00026_source.html	/^<a name="l00237"><\/a>00237 <span class="comment">    \/\/\/ in an inner node. If fewer slots are used, the inner node will be<\/span>$/;"	a
l00237	doxygen-html/a00028_source.html	/^<a name="l00237"><\/a>00237     <span class="comment">\/\/ *** Fast Destruction of the B+ Tree<\/span>$/;"	a
l00237	doxygen-html/a00030_source.html	/^<a name="l00237"><\/a>00237 <span class="keyword">public<\/span>:$/;"	a
l00237	doxygen-html/a00032_source.html	/^<a name="l00237"><\/a>00237         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>();$/;"	a
l00237	doxygen-html/a00034_source.html	/^<a name="l00237"><\/a>00237     }$/;"	a
l00238	doxygen-html/a00026_source.html	/^<a name="l00238"><\/a>00238 <span class="comment">    \/\/\/ merged or slots shifted from it&#39;s siblings.<\/span>$/;"	a
l00238	doxygen-html/a00028_source.html	/^<a name="l00238"><\/a>00238 <span class="comment"><\/span>$/;"	a
l00238	doxygen-html/a00030_source.html	/^<a name="l00238"><\/a>00238     <span class="comment">\/\/ *** Fast Destruction of the B+ Tree<\/span>$/;"	a
l00238	doxygen-html/a00032_source.html	/^<a name="l00238"><\/a>00238     }$/;"	a
l00238	doxygen-html/a00034_source.html	/^<a name="l00238"><\/a>00238 $/;"	a
l00239	doxygen-html/a00026_source.html	/^<a name="l00239"><\/a><a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654">00239<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a> = (<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a> \/ 2);$/;"	a
l00239	doxygen-html/a00028_source.html	/^<a name="l00239"><\/a>00239 <span class="comment">    \/\/\/ Frees all key\/data pairs and all nodes of the tree<\/span>$/;"	a
l00239	doxygen-html/a00030_source.html	/^<a name="l00239"><\/a>00239 <span class="comment"><\/span>$/;"	a
l00239	doxygen-html/a00032_source.html	/^<a name="l00239"><\/a>00239 $/;"	a
l00239	doxygen-html/a00034_source.html	/^<a name="l00239"><\/a>00239 <span class="keyword">public<\/span>:$/;"	a
l00240	doxygen-html/a00026_source.html	/^<a name="l00240"><\/a>00240 <span class="comment"><\/span>$/;"	a
l00240	doxygen-html/a00028_source.html	/^<a name="l00240"><\/a><a class="code" href="a00004.html#ad2795fc102f76c2a130681fa579c3310">00240<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#ad2795fc102f76c2a130681fa579c3310" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>()$/;"	a
l00240	doxygen-html/a00030_source.html	/^<a name="l00240"><\/a>00240 <span class="comment">    \/\/\/ Frees all key\/data pairs and all nodes of the tree<\/span>$/;"	a
l00240	doxygen-html/a00032_source.html	/^<a name="l00240"><\/a>00240 <span class="keyword">public<\/span>:$/;"	a
l00240	doxygen-html/a00034_source.html	/^<a name="l00240"><\/a>00240     <span class="comment">\/\/ *** Allocators<\/span>$/;"	a
l00241	doxygen-html/a00026_source.html	/^<a name="l00241"><\/a>00241 <span class="comment">    \/\/\/ Debug parameter: Enables expensive and thorough checking of the B+ tree<\/span>$/;"	a
l00241	doxygen-html/a00028_source.html	/^<a name="l00241"><\/a>00241     {$/;"	a
l00241	doxygen-html/a00030_source.html	/^<a name="l00241"><\/a><a class="code" href="a00005.html#add3d1d6cad6d331313d1821dbddda9f3">00241<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#add3d1d6cad6d331313d1821dbddda9f3" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>()$/;"	a
l00241	doxygen-html/a00032_source.html	/^<a name="l00241"><\/a>00241     <span class="comment">\/\/ *** Allocators<\/span>$/;"	a
l00241	doxygen-html/a00034_source.html	/^<a name="l00241"><\/a>00241 <span class="comment"><\/span>$/;"	a
l00242	doxygen-html/a00026_source.html	/^<a name="l00242"><\/a>00242 <span class="comment">    \/\/\/ invariants after each insert\/erase operation.<\/span>$/;"	a
l00242	doxygen-html/a00028_source.html	/^<a name="l00242"><\/a>00242         <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l00242	doxygen-html/a00030_source.html	/^<a name="l00242"><\/a>00242     {$/;"	a
l00242	doxygen-html/a00032_source.html	/^<a name="l00242"><\/a>00242 <span class="comment"><\/span>$/;"	a
l00242	doxygen-html/a00034_source.html	/^<a name="l00242"><\/a>00242 <span class="comment">    \/\/\/ Return the base node allocator provided during construction.<\/span>$/;"	a
l00243	doxygen-html/a00026_source.html	/^<a name="l00243"><\/a><a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae">00243<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a> = <a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">traits::selfverify<\/a>;$/;"	a
l00243	doxygen-html/a00028_source.html	/^<a name="l00243"><\/a>00243     }$/;"	a
l00243	doxygen-html/a00030_source.html	/^<a name="l00243"><\/a>00243         <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l00243	doxygen-html/a00032_source.html	/^<a name="l00243"><\/a>00243 <span class="comment">    \/\/\/ Return the base node allocator provided during construction.<\/span>$/;"	a
l00243	doxygen-html/a00034_source.html	/^<a name="l00243"><\/a><a class="code" href="a00009.html#a603ef9ef20b9f7ad05401d5d6eca2ece">00243<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#add9d9415d959dd6280c4c9388463890b" title="Fourth template parameter: STL allocator.">allocator_type<\/a> <a class="code" href="a00009.html#a603ef9ef20b9f7ad05401d5d6eca2ece" title="Return the base node allocator provided during construction.">get_allocator<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00244	doxygen-html/a00026_source.html	/^<a name="l00244"><\/a>00244 <span class="comment"><\/span>$/;"	a
l00244	doxygen-html/a00028_source.html	/^<a name="l00244"><\/a>00244 $/;"	a
l00244	doxygen-html/a00030_source.html	/^<a name="l00244"><\/a>00244     }$/;"	a
l00244	doxygen-html/a00032_source.html	/^<a name="l00244"><\/a><a class="code" href="a00006.html#ac2fc089101a5d6fdf86ee2d09b9eacce">00244<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#a3bd75b696bde37ad47838d8058503799" title="Fourth template parameter: STL allocator.">allocator_type<\/a> <a class="code" href="a00006.html#ac2fc089101a5d6fdf86ee2d09b9eacce" title="Return the base node allocator provided during construction.">get_allocator<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00244	doxygen-html/a00034_source.html	/^<a name="l00244"><\/a>00244 <span class="keyword">    <\/span>{$/;"	a
l00245	doxygen-html/a00026_source.html	/^<a name="l00245"><\/a>00245 <span class="comment">    \/\/\/ Debug parameter: Prints out lots of debug information about how the<\/span>$/;"	a
l00245	doxygen-html/a00028_source.html	/^<a name="l00245"><\/a>00245 <span class="keyword">public<\/span>:$/;"	a
l00245	doxygen-html/a00030_source.html	/^<a name="l00245"><\/a>00245 $/;"	a
l00245	doxygen-html/a00032_source.html	/^<a name="l00245"><\/a>00245 <span class="keyword">    <\/span>{$/;"	a
l00245	doxygen-html/a00034_source.html	/^<a name="l00245"><\/a>00245         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>();$/;"	a
l00246	doxygen-html/a00026_source.html	/^<a name="l00246"><\/a>00246 <span class="comment">    \/\/\/ algorithms change the tree. Requires the header file to be compiled<\/span>$/;"	a
l00246	doxygen-html/a00028_source.html	/^<a name="l00246"><\/a>00246     <span class="comment">\/\/ *** STL Iterator Construction Functions<\/span>$/;"	a
l00246	doxygen-html/a00030_source.html	/^<a name="l00246"><\/a>00246 <span class="keyword">public<\/span>:$/;"	a
l00246	doxygen-html/a00032_source.html	/^<a name="l00246"><\/a>00246         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>();$/;"	a
l00246	doxygen-html/a00034_source.html	/^<a name="l00246"><\/a>00246     }$/;"	a
l00247	doxygen-html/a00026_source.html	/^<a name="l00247"><\/a>00247 <span class="comment">    \/\/\/ with BTREE_DEBUG and the key type must be std::ostream printable.<\/span>$/;"	a
l00247	doxygen-html/a00028_source.html	/^<a name="l00247"><\/a>00247 <span class="comment"><\/span>$/;"	a
l00247	doxygen-html/a00030_source.html	/^<a name="l00247"><\/a>00247     <span class="comment">\/\/ *** STL Iterator Construction Functions<\/span>$/;"	a
l00247	doxygen-html/a00032_source.html	/^<a name="l00247"><\/a>00247     }$/;"	a
l00247	doxygen-html/a00034_source.html	/^<a name="l00247"><\/a>00247 $/;"	a
l00248	doxygen-html/a00026_source.html	/^<a name="l00248"><\/a><a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc">00248<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">bool<\/span>                   <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a> = <a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">traits::debug<\/a>;$/;"	a
l00248	doxygen-html/a00028_source.html	/^<a name="l00248"><\/a>00248 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first slot in<\/span>$/;"	a
l00248	doxygen-html/a00030_source.html	/^<a name="l00248"><\/a>00248 <span class="comment"><\/span>$/;"	a
l00248	doxygen-html/a00032_source.html	/^<a name="l00248"><\/a>00248 $/;"	a
l00248	doxygen-html/a00034_source.html	/^<a name="l00248"><\/a>00248 <span class="keyword">public<\/span>:$/;"	a
l00249	doxygen-html/a00026_source.html	/^<a name="l00249"><\/a>00249 $/;"	a
l00249	doxygen-html/a00028_source.html	/^<a name="l00249"><\/a>00249 <span class="comment">    \/\/\/ the first leaf of the B+ tree.<\/span>$/;"	a
l00249	doxygen-html/a00030_source.html	/^<a name="l00249"><\/a>00249 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first slot in<\/span>$/;"	a
l00249	doxygen-html/a00032_source.html	/^<a name="l00249"><\/a>00249 <span class="keyword">public<\/span>:$/;"	a
l00249	doxygen-html/a00034_source.html	/^<a name="l00249"><\/a>00249     <span class="comment">\/\/ *** Fast Destruction of the B+ Tree<\/span>$/;"	a
l00250	doxygen-html/a00026_source.html	/^<a name="l00250"><\/a>00250 <span class="keyword">private<\/span>:$/;"	a
l00250	doxygen-html/a00028_source.html	/^<a name="l00250"><\/a><a class="code" href="a00004.html#a34d4041f1b3e65a89e73ce9f527b0f41">00250<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#a34d4041f1b3e65a89e73ce9f527b0f41" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()$/;"	a
l00250	doxygen-html/a00030_source.html	/^<a name="l00250"><\/a>00250 <span class="comment">    \/\/\/ the first leaf of the B+ tree.<\/span>$/;"	a
l00250	doxygen-html/a00032_source.html	/^<a name="l00250"><\/a>00250     <span class="comment">\/\/ *** Fast Destruction of the B+ Tree<\/span>$/;"	a
l00250	doxygen-html/a00034_source.html	/^<a name="l00250"><\/a>00250 <span class="comment"><\/span>$/;"	a
l00251	doxygen-html/a00026_source.html	/^<a name="l00251"><\/a>00251     <span class="comment">\/\/ *** Node Classes for In-Memory Nodes<\/span>$/;"	a
l00251	doxygen-html/a00028_source.html	/^<a name="l00251"><\/a>00251     {$/;"	a
l00251	doxygen-html/a00030_source.html	/^<a name="l00251"><\/a><a class="code" href="a00005.html#adf675fbe6c088fd2b210d7c27b48548f">00251<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#adf675fbe6c088fd2b210d7c27b48548f" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()$/;"	a
l00251	doxygen-html/a00032_source.html	/^<a name="l00251"><\/a>00251 <span class="comment"><\/span>$/;"	a
l00251	doxygen-html/a00034_source.html	/^<a name="l00251"><\/a>00251 <span class="comment">    \/\/\/ Frees all keys and all nodes of the tree<\/span>$/;"	a
l00252	doxygen-html/a00026_source.html	/^<a name="l00252"><\/a>00252 <span class="comment"><\/span>$/;"	a
l00252	doxygen-html/a00028_source.html	/^<a name="l00252"><\/a>00252         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00252	doxygen-html/a00030_source.html	/^<a name="l00252"><\/a>00252     {$/;"	a
l00252	doxygen-html/a00032_source.html	/^<a name="l00252"><\/a>00252 <span class="comment">    \/\/\/ Frees all keys and all nodes of the tree<\/span>$/;"	a
l00252	doxygen-html/a00034_source.html	/^<a name="l00252"><\/a><a class="code" href="a00009.html#a52fe59cdd4576d9cc9266e42bca323b2">00252<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#a52fe59cdd4576d9cc9266e42bca323b2" title="Frees all keys and all nodes of the tree.">clear<\/a>()$/;"	a
l00253	doxygen-html/a00026_source.html	/^<a name="l00253"><\/a>00253 <span class="comment">    \/\/\/ The header structure of each node in-memory. This structure is extended<\/span>$/;"	a
l00253	doxygen-html/a00028_source.html	/^<a name="l00253"><\/a>00253     }$/;"	a
l00253	doxygen-html/a00030_source.html	/^<a name="l00253"><\/a>00253         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00253	doxygen-html/a00032_source.html	/^<a name="l00253"><\/a><a class="code" href="a00006.html#a77cc7f5486c5add7feb4c9e601c4d921">00253<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#a77cc7f5486c5add7feb4c9e601c4d921" title="Frees all keys and all nodes of the tree.">clear<\/a>()$/;"	a
l00253	doxygen-html/a00034_source.html	/^<a name="l00253"><\/a>00253     {$/;"	a
l00254	doxygen-html/a00026_source.html	/^<a name="l00254"><\/a>00254 <span class="comment">    \/\/\/ by inner_node or leaf_node.<\/span>$/;"	a
l00254	doxygen-html/a00028_source.html	/^<a name="l00254"><\/a>00254 <span class="comment"><\/span>$/;"	a
l00254	doxygen-html/a00030_source.html	/^<a name="l00254"><\/a>00254     }$/;"	a
l00254	doxygen-html/a00032_source.html	/^<a name="l00254"><\/a>00254     {$/;"	a
l00254	doxygen-html/a00034_source.html	/^<a name="l00254"><\/a>00254         <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l00255	doxygen-html/a00026_source.html	/^<a name="l00255"><\/a><a class="code" href="a00018.html">00255<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00018.html" title="The header structure of each node in-memory.">node<\/a>$/;"	a
l00255	doxygen-html/a00028_source.html	/^<a name="l00255"><\/a>00255 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first invalid<\/span>$/;"	a
l00255	doxygen-html/a00030_source.html	/^<a name="l00255"><\/a>00255 <span class="comment"><\/span>$/;"	a
l00255	doxygen-html/a00032_source.html	/^<a name="l00255"><\/a>00255         <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l00255	doxygen-html/a00034_source.html	/^<a name="l00255"><\/a>00255     }$/;"	a
l00256	doxygen-html/a00026_source.html	/^<a name="l00256"><\/a>00256     {<span class="comment"><\/span>$/;"	a
l00256	doxygen-html/a00028_source.html	/^<a name="l00256"><\/a>00256 <span class="comment">    \/\/\/ slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00256	doxygen-html/a00030_source.html	/^<a name="l00256"><\/a>00256 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first invalid<\/span>$/;"	a
l00256	doxygen-html/a00032_source.html	/^<a name="l00256"><\/a>00256     }$/;"	a
l00256	doxygen-html/a00034_source.html	/^<a name="l00256"><\/a>00256 $/;"	a
l00257	doxygen-html/a00026_source.html	/^<a name="l00257"><\/a>00257 <span class="comment">        \/\/\/ Level in the b-tree, if level == 0 -&gt; leaf node<\/span>$/;"	a
l00257	doxygen-html/a00028_source.html	/^<a name="l00257"><\/a><a class="code" href="a00004.html#ab5c57d291943ba0ca01e5858027e74a0">00257<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#ab5c57d291943ba0ca01e5858027e74a0" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()$/;"	a
l00257	doxygen-html/a00030_source.html	/^<a name="l00257"><\/a>00257 <span class="comment">    \/\/\/ slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00257	doxygen-html/a00032_source.html	/^<a name="l00257"><\/a>00257 $/;"	a
l00257	doxygen-html/a00034_source.html	/^<a name="l00257"><\/a>00257 <span class="keyword">public<\/span>:$/;"	a
l00258	doxygen-html/a00026_source.html	/^<a name="l00258"><\/a><a class="code" href="a00018.html#a9204f647e868560552dddc001aac8a55">00258<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00018.html#a9204f647e868560552dddc001aac8a55" title="Level in the b-tree, if level == 0 -&gt; leaf node.">level<\/a>;$/;"	a
l00258	doxygen-html/a00028_source.html	/^<a name="l00258"><\/a>00258     {$/;"	a
l00258	doxygen-html/a00030_source.html	/^<a name="l00258"><\/a><a class="code" href="a00005.html#a2ac890e6114060f5a40f9651bfc686cf">00258<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a2ac890e6114060f5a40f9651bfc686cf" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()$/;"	a
l00258	doxygen-html/a00032_source.html	/^<a name="l00258"><\/a>00258 <span class="keyword">public<\/span>:$/;"	a
l00258	doxygen-html/a00034_source.html	/^<a name="l00258"><\/a>00258     <span class="comment">\/\/ *** STL Iterator Construction Functions<\/span>$/;"	a
l00259	doxygen-html/a00026_source.html	/^<a name="l00259"><\/a>00259 <span class="comment"><\/span>$/;"	a
l00259	doxygen-html/a00028_source.html	/^<a name="l00259"><\/a>00259         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00259	doxygen-html/a00030_source.html	/^<a name="l00259"><\/a>00259     {$/;"	a
l00259	doxygen-html/a00032_source.html	/^<a name="l00259"><\/a>00259     <span class="comment">\/\/ *** STL Iterator Construction Functions<\/span>$/;"	a
l00259	doxygen-html/a00034_source.html	/^<a name="l00259"><\/a>00259 <span class="comment"><\/span>$/;"	a
l00260	doxygen-html/a00026_source.html	/^<a name="l00260"><\/a>00260 <span class="comment">        \/\/\/ Number of key slotuse use, so number of valid children or data<\/span>$/;"	a
l00260	doxygen-html/a00028_source.html	/^<a name="l00260"><\/a>00260     }$/;"	a
l00260	doxygen-html/a00030_source.html	/^<a name="l00260"><\/a>00260         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00260	doxygen-html/a00032_source.html	/^<a name="l00260"><\/a>00260 <span class="comment"><\/span>$/;"	a
l00260	doxygen-html/a00034_source.html	/^<a name="l00260"><\/a>00260 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first slot in<\/span>$/;"	a
l00261	doxygen-html/a00026_source.html	/^<a name="l00261"><\/a>00261 <span class="comment">        \/\/\/ pointers<\/span>$/;"	a
l00261	doxygen-html/a00028_source.html	/^<a name="l00261"><\/a>00261 <span class="comment"><\/span>$/;"	a
l00261	doxygen-html/a00030_source.html	/^<a name="l00261"><\/a>00261     }$/;"	a
l00261	doxygen-html/a00032_source.html	/^<a name="l00261"><\/a>00261 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first slot in<\/span>$/;"	a
l00261	doxygen-html/a00034_source.html	/^<a name="l00261"><\/a>00261 <span class="comment">    \/\/\/ the first leaf of the B+ tree.<\/span>$/;"	a
l00262	doxygen-html/a00026_source.html	/^<a name="l00262"><\/a><a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903">00262<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00262	doxygen-html/a00028_source.html	/^<a name="l00262"><\/a>00262 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first slot<\/span>$/;"	a
l00262	doxygen-html/a00030_source.html	/^<a name="l00262"><\/a>00262 <span class="comment"><\/span>$/;"	a
l00262	doxygen-html/a00032_source.html	/^<a name="l00262"><\/a>00262 <span class="comment">    \/\/\/ the first leaf of the B+ tree.<\/span>$/;"	a
l00262	doxygen-html/a00034_source.html	/^<a name="l00262"><\/a><a class="code" href="a00009.html#a9521b86ca0d5142a12ae32523c1afb71">00262<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#a9521b86ca0d5142a12ae32523c1afb71" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()$/;"	a
l00263	doxygen-html/a00026_source.html	/^<a name="l00263"><\/a>00263 <span class="comment"><\/span>$/;"	a
l00263	doxygen-html/a00028_source.html	/^<a name="l00263"><\/a>00263 <span class="comment">    \/\/\/ in the first leaf of the B+ tree.<\/span>$/;"	a
l00263	doxygen-html/a00030_source.html	/^<a name="l00263"><\/a>00263 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first slot<\/span>$/;"	a
l00263	doxygen-html/a00032_source.html	/^<a name="l00263"><\/a><a class="code" href="a00006.html#a0c8b01c05f01540fe8e7c87f7e798557">00263<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#a0c8b01c05f01540fe8e7c87f7e798557" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()$/;"	a
l00263	doxygen-html/a00034_source.html	/^<a name="l00263"><\/a>00263     {$/;"	a
l00264	doxygen-html/a00026_source.html	/^<a name="l00264"><\/a>00264 <span class="comment">        \/\/\/ Delayed initialisation of constructed node<\/span>$/;"	a
l00264	doxygen-html/a00028_source.html	/^<a name="l00264"><\/a><a class="code" href="a00004.html#ad25d2a48e92182db08213676181470c0">00264<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00004.html#a34d4041f1b3e65a89e73ce9f527b0f41" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00264	doxygen-html/a00030_source.html	/^<a name="l00264"><\/a>00264 <span class="comment">    \/\/\/ in the first leaf of the B+ tree.<\/span>$/;"	a
l00264	doxygen-html/a00032_source.html	/^<a name="l00264"><\/a>00264     {$/;"	a
l00264	doxygen-html/a00034_source.html	/^<a name="l00264"><\/a>00264         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00265	doxygen-html/a00026_source.html	/^<a name="l00265"><\/a><a class="code" href="a00018.html#a5fdccd9e010dc73398fb0694ed803d38">00265<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00018.html#a5fdccd9e010dc73398fb0694ed803d38" title="Delayed initialisation of constructed node.">initialize<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> l)$/;"	a
l00265	doxygen-html/a00028_source.html	/^<a name="l00265"><\/a>00265 <span class="keyword">    <\/span>{$/;"	a
l00265	doxygen-html/a00030_source.html	/^<a name="l00265"><\/a><a class="code" href="a00005.html#a7c76d3fe4e370b5f7dc2e77deccf61e6">00265<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00005.html#adf675fbe6c088fd2b210d7c27b48548f" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00265	doxygen-html/a00032_source.html	/^<a name="l00265"><\/a>00265         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00265	doxygen-html/a00034_source.html	/^<a name="l00265"><\/a>00265     }$/;"	a
l00266	doxygen-html/a00026_source.html	/^<a name="l00266"><\/a>00266         {$/;"	a
l00266	doxygen-html/a00028_source.html	/^<a name="l00266"><\/a>00266         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00266	doxygen-html/a00030_source.html	/^<a name="l00266"><\/a>00266 <span class="keyword">    <\/span>{$/;"	a
l00266	doxygen-html/a00032_source.html	/^<a name="l00266"><\/a>00266     }$/;"	a
l00266	doxygen-html/a00034_source.html	/^<a name="l00266"><\/a>00266 <span class="comment"><\/span>$/;"	a
l00267	doxygen-html/a00026_source.html	/^<a name="l00267"><\/a>00267             <a class="code" href="a00018.html#a9204f647e868560552dddc001aac8a55" title="Level in the b-tree, if level == 0 -&gt; leaf node.">level<\/a> = l;$/;"	a
l00267	doxygen-html/a00028_source.html	/^<a name="l00267"><\/a>00267     }$/;"	a
l00267	doxygen-html/a00030_source.html	/^<a name="l00267"><\/a>00267         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00267	doxygen-html/a00032_source.html	/^<a name="l00267"><\/a>00267 <span class="comment"><\/span>$/;"	a
l00267	doxygen-html/a00034_source.html	/^<a name="l00267"><\/a>00267 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first invalid<\/span>$/;"	a
l00268	doxygen-html/a00026_source.html	/^<a name="l00268"><\/a>00268             <a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> = 0;$/;"	a
l00268	doxygen-html/a00028_source.html	/^<a name="l00268"><\/a>00268 <span class="comment"><\/span>$/;"	a
l00268	doxygen-html/a00030_source.html	/^<a name="l00268"><\/a>00268     }$/;"	a
l00268	doxygen-html/a00032_source.html	/^<a name="l00268"><\/a>00268 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first invalid<\/span>$/;"	a
l00268	doxygen-html/a00034_source.html	/^<a name="l00268"><\/a>00268 <span class="comment">    \/\/\/ slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00269	doxygen-html/a00026_source.html	/^<a name="l00269"><\/a>00269         }$/;"	a
l00269	doxygen-html/a00028_source.html	/^<a name="l00269"><\/a>00269 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first<\/span>$/;"	a
l00269	doxygen-html/a00030_source.html	/^<a name="l00269"><\/a>00269 <span class="comment"><\/span>$/;"	a
l00269	doxygen-html/a00032_source.html	/^<a name="l00269"><\/a>00269 <span class="comment">    \/\/\/ slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00269	doxygen-html/a00034_source.html	/^<a name="l00269"><\/a><a class="code" href="a00009.html#a8048755a5927b42cce11c19fa8953d93">00269<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#a8048755a5927b42cce11c19fa8953d93" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()$/;"	a
l00270	doxygen-html/a00026_source.html	/^<a name="l00270"><\/a>00270 <span class="comment"><\/span>$/;"	a
l00270	doxygen-html/a00028_source.html	/^<a name="l00270"><\/a>00270 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00270	doxygen-html/a00030_source.html	/^<a name="l00270"><\/a>00270 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first<\/span>$/;"	a
l00270	doxygen-html/a00032_source.html	/^<a name="l00270"><\/a><a class="code" href="a00006.html#a3b3fdd20ed1c32051e6e8e9762789178">00270<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#a3b3fdd20ed1c32051e6e8e9762789178" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()$/;"	a
l00270	doxygen-html/a00034_source.html	/^<a name="l00270"><\/a>00270     {$/;"	a
l00271	doxygen-html/a00026_source.html	/^<a name="l00271"><\/a>00271 <span class="comment">        \/\/\/ True if this is a leaf node<\/span>$/;"	a
l00271	doxygen-html/a00028_source.html	/^<a name="l00271"><\/a><a class="code" href="a00004.html#ab0f8eb359766094f2e8d5128e4daf704">00271<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00004.html#ab5c57d291943ba0ca01e5858027e74a0" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00271	doxygen-html/a00030_source.html	/^<a name="l00271"><\/a>00271 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00271	doxygen-html/a00032_source.html	/^<a name="l00271"><\/a>00271     {$/;"	a
l00271	doxygen-html/a00034_source.html	/^<a name="l00271"><\/a>00271         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00272	doxygen-html/a00026_source.html	/^<a name="l00272"><\/a><a class="code" href="a00018.html#aaf1681ee7b53dffc6a3a7ef0a865f83b">00272<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00018.html#aaf1681ee7b53dffc6a3a7ef0a865f83b" title="True if this is a leaf node.">isleafnode<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00272	doxygen-html/a00028_source.html	/^<a name="l00272"><\/a>00272 <span class="keyword">    <\/span>{$/;"	a
l00272	doxygen-html/a00030_source.html	/^<a name="l00272"><\/a><a class="code" href="a00005.html#ab00f7a57cbb9bb1bce4a7a8bd7a1885b">00272<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00005.html#a2ac890e6114060f5a40f9651bfc686cf" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00272	doxygen-html/a00032_source.html	/^<a name="l00272"><\/a>00272         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00272	doxygen-html/a00034_source.html	/^<a name="l00272"><\/a>00272     }$/;"	a
l00273	doxygen-html/a00026_source.html	/^<a name="l00273"><\/a>00273 <span class="keyword">        <\/span>{$/;"	a
l00273	doxygen-html/a00028_source.html	/^<a name="l00273"><\/a>00273         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00273	doxygen-html/a00030_source.html	/^<a name="l00273"><\/a>00273 <span class="keyword">    <\/span>{$/;"	a
l00273	doxygen-html/a00032_source.html	/^<a name="l00273"><\/a>00273     }$/;"	a
l00273	doxygen-html/a00034_source.html	/^<a name="l00273"><\/a>00273 <span class="comment"><\/span>$/;"	a
l00274	doxygen-html/a00026_source.html	/^<a name="l00274"><\/a>00274             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a9204f647e868560552dddc001aac8a55" title="Level in the b-tree, if level == 0 -&gt; leaf node.">level<\/a> == 0);$/;"	a
l00274	doxygen-html/a00028_source.html	/^<a name="l00274"><\/a>00274     }$/;"	a
l00274	doxygen-html/a00030_source.html	/^<a name="l00274"><\/a>00274         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00274	doxygen-html/a00032_source.html	/^<a name="l00274"><\/a>00274 <span class="comment"><\/span>$/;"	a
l00274	doxygen-html/a00034_source.html	/^<a name="l00274"><\/a>00274 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first slot<\/span>$/;"	a
l00275	doxygen-html/a00026_source.html	/^<a name="l00275"><\/a>00275         }$/;"	a
l00275	doxygen-html/a00028_source.html	/^<a name="l00275"><\/a>00275 <span class="comment"><\/span>$/;"	a
l00275	doxygen-html/a00030_source.html	/^<a name="l00275"><\/a>00275     }$/;"	a
l00275	doxygen-html/a00032_source.html	/^<a name="l00275"><\/a>00275 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first slot<\/span>$/;"	a
l00275	doxygen-html/a00034_source.html	/^<a name="l00275"><\/a>00275 <span class="comment">    \/\/\/ in the first leaf of the B+ tree.<\/span>$/;"	a
l00276	doxygen-html/a00026_source.html	/^<a name="l00276"><\/a>00276     };$/;"	a
l00276	doxygen-html/a00028_source.html	/^<a name="l00276"><\/a>00276 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00276	doxygen-html/a00030_source.html	/^<a name="l00276"><\/a>00276 <span class="comment"><\/span>$/;"	a
l00276	doxygen-html/a00032_source.html	/^<a name="l00276"><\/a>00276 <span class="comment">    \/\/\/ in the first leaf of the B+ tree.<\/span>$/;"	a
l00276	doxygen-html/a00034_source.html	/^<a name="l00276"><\/a><a class="code" href="a00009.html#ad79866f391eff27bb4da840c31f1b4cd">00276<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00009.html#a9521b86ca0d5142a12ae32523c1afb71" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00277	doxygen-html/a00026_source.html	/^<a name="l00277"><\/a>00277 <span class="comment"><\/span>$/;"	a
l00277	doxygen-html/a00028_source.html	/^<a name="l00277"><\/a>00277 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00277	doxygen-html/a00030_source.html	/^<a name="l00277"><\/a>00277 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00277	doxygen-html/a00032_source.html	/^<a name="l00277"><\/a><a class="code" href="a00006.html#acca702924e73cc5df9f8e27f59259f7c">00277<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00006.html#a0c8b01c05f01540fe8e7c87f7e798557" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00277	doxygen-html/a00034_source.html	/^<a name="l00277"><\/a>00277 <span class="keyword">    <\/span>{$/;"	a
l00278	doxygen-html/a00026_source.html	/^<a name="l00278"><\/a>00278 <span class="comment">    \/\/\/ Extended structure of a inner node in-memory. Contains only keys and no<\/span>$/;"	a
l00278	doxygen-html/a00028_source.html	/^<a name="l00278"><\/a><a class="code" href="a00004.html#a7163405774d2a2bada3166d94c6fe5d3">00278<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a204cd4ff4807b9c35605b1ccc3cb597a" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00004.html#a7163405774d2a2bada3166d94c6fe5d3" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()$/;"	a
l00278	doxygen-html/a00030_source.html	/^<a name="l00278"><\/a>00278 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00278	doxygen-html/a00032_source.html	/^<a name="l00278"><\/a>00278 <span class="keyword">    <\/span>{$/;"	a
l00278	doxygen-html/a00034_source.html	/^<a name="l00278"><\/a>00278         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00279	doxygen-html/a00026_source.html	/^<a name="l00279"><\/a>00279 <span class="comment">    \/\/\/ data items.<\/span>$/;"	a
l00279	doxygen-html/a00028_source.html	/^<a name="l00279"><\/a>00279     {$/;"	a
l00279	doxygen-html/a00030_source.html	/^<a name="l00279"><\/a><a class="code" href="a00005.html#a26f25e4676e2e40f775f206d15ec410a">00279<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#aa54a3a740748e22fae3b05f599458863" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00005.html#a26f25e4676e2e40f775f206d15ec410a" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()$/;"	a
l00279	doxygen-html/a00032_source.html	/^<a name="l00279"><\/a>00279         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>();$/;"	a
l00279	doxygen-html/a00034_source.html	/^<a name="l00279"><\/a>00279     }$/;"	a
l00280	doxygen-html/a00026_source.html	/^<a name="l00280"><\/a><a class="code" href="a00015.html">00280<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00015.html" title="Extended structure of a inner node in-memory.">inner_node<\/a> : <span class="keyword">public<\/span> <a class="code" href="a00018.html" title="The header structure of each node in-memory.">node<\/a>$/;"	a
l00280	doxygen-html/a00028_source.html	/^<a name="l00280"><\/a>00280         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00280	doxygen-html/a00030_source.html	/^<a name="l00280"><\/a>00280     {$/;"	a
l00280	doxygen-html/a00032_source.html	/^<a name="l00280"><\/a>00280     }$/;"	a
l00280	doxygen-html/a00034_source.html	/^<a name="l00280"><\/a>00280 <span class="comment"><\/span>$/;"	a
l00281	doxygen-html/a00026_source.html	/^<a name="l00281"><\/a>00281     {<span class="comment"><\/span>$/;"	a
l00281	doxygen-html/a00028_source.html	/^<a name="l00281"><\/a>00281     }$/;"	a
l00281	doxygen-html/a00030_source.html	/^<a name="l00281"><\/a>00281         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00281	doxygen-html/a00032_source.html	/^<a name="l00281"><\/a>00281 <span class="comment"><\/span>$/;"	a
l00281	doxygen-html/a00034_source.html	/^<a name="l00281"><\/a>00281 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first<\/span>$/;"	a
l00282	doxygen-html/a00026_source.html	/^<a name="l00282"><\/a>00282 <span class="comment">        \/\/\/ Define an related allocator for the inner_node structs.<\/span>$/;"	a
l00282	doxygen-html/a00028_source.html	/^<a name="l00282"><\/a>00282 <span class="comment"><\/span>$/;"	a
l00282	doxygen-html/a00030_source.html	/^<a name="l00282"><\/a>00282     }$/;"	a
l00282	doxygen-html/a00032_source.html	/^<a name="l00282"><\/a>00282 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first<\/span>$/;"	a
l00282	doxygen-html/a00034_source.html	/^<a name="l00282"><\/a>00282 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00283	doxygen-html/a00026_source.html	/^<a name="l00283"><\/a><a class="code" href="a00015.html#a0d8b919b9db1069387e966ae4b39c1b5">00283<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> _Alloc::template rebind&lt;inner_node&gt;::other <a class="code" href="a00015.html#a0d8b919b9db1069387e966ae4b39c1b5" title="Define an related allocator for the inner_node structs.">alloc_type<\/a>;$/;"	a
l00283	doxygen-html/a00028_source.html	/^<a name="l00283"><\/a>00283 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00283	doxygen-html/a00030_source.html	/^<a name="l00283"><\/a>00283 <span class="comment"><\/span>$/;"	a
l00283	doxygen-html/a00032_source.html	/^<a name="l00283"><\/a>00283 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree.<\/span>$/;"	a
l00283	doxygen-html/a00034_source.html	/^<a name="l00283"><\/a><a class="code" href="a00009.html#a0e5c8c7a9deff3d2fe75f180d01b911e">00283<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00009.html#a8048755a5927b42cce11c19fa8953d93" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00284	doxygen-html/a00026_source.html	/^<a name="l00284"><\/a>00284 <span class="comment"><\/span>$/;"	a
l00284	doxygen-html/a00028_source.html	/^<a name="l00284"><\/a>00284 <span class="comment">    \/\/\/ slot in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00284	doxygen-html/a00030_source.html	/^<a name="l00284"><\/a>00284 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00284	doxygen-html/a00032_source.html	/^<a name="l00284"><\/a><a class="code" href="a00006.html#a8fa9d5230ddb6f9306b2e941c1448ece">00284<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00006.html#a3b3fdd20ed1c32051e6e8e9762789178" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00284	doxygen-html/a00034_source.html	/^<a name="l00284"><\/a>00284 <span class="keyword">    <\/span>{$/;"	a
l00285	doxygen-html/a00026_source.html	/^<a name="l00285"><\/a>00285 <span class="comment">        \/\/\/ Keys of children or data pointers<\/span>$/;"	a
l00285	doxygen-html/a00028_source.html	/^<a name="l00285"><\/a><a class="code" href="a00004.html#a07e9e77ecd8cd828d32bca22a9f45c2a">00285<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a204cd4ff4807b9c35605b1ccc3cb597a" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00004.html#a07e9e77ecd8cd828d32bca22a9f45c2a" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()$/;"	a
l00285	doxygen-html/a00030_source.html	/^<a name="l00285"><\/a>00285 <span class="comment">    \/\/\/ slot in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00285	doxygen-html/a00032_source.html	/^<a name="l00285"><\/a>00285 <span class="keyword">    <\/span>{$/;"	a
l00285	doxygen-html/a00034_source.html	/^<a name="l00285"><\/a>00285         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00286	doxygen-html/a00026_source.html	/^<a name="l00286"><\/a><a class="code" href="a00015.html#ac78e5fb3be9571b04e97bd89c6aa22ee">00286<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>        <a class="code" href="a00015.html#ac78e5fb3be9571b04e97bd89c6aa22ee" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>];$/;"	a
l00286	doxygen-html/a00028_source.html	/^<a name="l00286"><\/a>00286     {$/;"	a
l00286	doxygen-html/a00030_source.html	/^<a name="l00286"><\/a><a class="code" href="a00005.html#a65869601a55e3f965a847adea7ab48be">00286<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#aa54a3a740748e22fae3b05f599458863" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00005.html#a65869601a55e3f965a847adea7ab48be" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()$/;"	a
l00286	doxygen-html/a00032_source.html	/^<a name="l00286"><\/a>00286         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l00286	doxygen-html/a00034_source.html	/^<a name="l00286"><\/a>00286     }$/;"	a
l00287	doxygen-html/a00026_source.html	/^<a name="l00287"><\/a>00287 <span class="comment"><\/span>$/;"	a
l00287	doxygen-html/a00028_source.html	/^<a name="l00287"><\/a>00287         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00287	doxygen-html/a00030_source.html	/^<a name="l00287"><\/a>00287     {$/;"	a
l00287	doxygen-html/a00032_source.html	/^<a name="l00287"><\/a>00287     }$/;"	a
l00287	doxygen-html/a00034_source.html	/^<a name="l00287"><\/a>00287 <span class="comment"><\/span>$/;"	a
l00288	doxygen-html/a00026_source.html	/^<a name="l00288"><\/a>00288 <span class="comment">        \/\/\/ Pointers to children<\/span>$/;"	a
l00288	doxygen-html/a00028_source.html	/^<a name="l00288"><\/a>00288     }$/;"	a
l00288	doxygen-html/a00030_source.html	/^<a name="l00288"><\/a>00288         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00288	doxygen-html/a00032_source.html	/^<a name="l00288"><\/a>00288 <span class="comment"><\/span>$/;"	a
l00288	doxygen-html/a00034_source.html	/^<a name="l00288"><\/a>00288 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00289	doxygen-html/a00026_source.html	/^<a name="l00289"><\/a><a class="code" href="a00015.html#ab573f6af3036dbc374c8914b61bdd2ec">00289<\/a> <span class="comment"><\/span>        <a class="code" href="a00018.html" title="The header structure of each node in-memory.">node<\/a>*           <a class="code" href="a00015.html#ab573f6af3036dbc374c8914b61bdd2ec" title="Pointers to children.">childid<\/a>[<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>+1];$/;"	a
l00289	doxygen-html/a00028_source.html	/^<a name="l00289"><\/a>00289 <span class="comment"><\/span>$/;"	a
l00289	doxygen-html/a00030_source.html	/^<a name="l00289"><\/a>00289     }$/;"	a
l00289	doxygen-html/a00032_source.html	/^<a name="l00289"><\/a>00289 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00289	doxygen-html/a00034_source.html	/^<a name="l00289"><\/a>00289 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00290	doxygen-html/a00026_source.html	/^<a name="l00290"><\/a>00290 <span class="comment"><\/span>$/;"	a
l00290	doxygen-html/a00028_source.html	/^<a name="l00290"><\/a>00290 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first<\/span>$/;"	a
l00290	doxygen-html/a00030_source.html	/^<a name="l00290"><\/a>00290 <span class="comment"><\/span>$/;"	a
l00290	doxygen-html/a00032_source.html	/^<a name="l00290"><\/a>00290 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00290	doxygen-html/a00034_source.html	/^<a name="l00290"><\/a><a class="code" href="a00009.html#a4f427468ae77255b8f6dfd99f09df632">00290<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#afb9918dafdccf1eaffa6b6ddc8de0938" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00009.html#a4f427468ae77255b8f6dfd99f09df632" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()$/;"	a
l00291	doxygen-html/a00026_source.html	/^<a name="l00291"><\/a>00291 <span class="comment">        \/\/\/ Set variables to initial values<\/span>$/;"	a
l00291	doxygen-html/a00028_source.html	/^<a name="l00291"><\/a>00291 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00291	doxygen-html/a00030_source.html	/^<a name="l00291"><\/a>00291 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first<\/span>$/;"	a
l00291	doxygen-html/a00032_source.html	/^<a name="l00291"><\/a><a class="code" href="a00006.html#ad5ff92256da155cf0a800c0be6d37f10">00291<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#aa20cfd7ed6236bc3c51b20d5a77a5286" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00006.html#ad5ff92256da155cf0a800c0be6d37f10" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()$/;"	a
l00291	doxygen-html/a00034_source.html	/^<a name="l00291"><\/a>00291     {$/;"	a
l00292	doxygen-html/a00026_source.html	/^<a name="l00292"><\/a><a class="code" href="a00015.html#ae10027d02927a1c8c2303a419197078c">00292<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00015.html#ae10027d02927a1c8c2303a419197078c" title="Set variables to initial values.">initialize<\/a>(<span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> l)$/;"	a
l00292	doxygen-html/a00028_source.html	/^<a name="l00292"><\/a><a class="code" href="a00004.html#a0c8ee35fbd098077983ac3b74a20cdd2">00292<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a581abfef3fb0eab26b2833165f7314b7" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00004.html#a7163405774d2a2bada3166d94c6fe5d3" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00292	doxygen-html/a00030_source.html	/^<a name="l00292"><\/a>00292 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00292	doxygen-html/a00032_source.html	/^<a name="l00292"><\/a>00292     {$/;"	a
l00292	doxygen-html/a00034_source.html	/^<a name="l00292"><\/a>00292         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00293	doxygen-html/a00026_source.html	/^<a name="l00293"><\/a>00293         {$/;"	a
l00293	doxygen-html/a00028_source.html	/^<a name="l00293"><\/a>00293 <span class="keyword">    <\/span>{$/;"	a
l00293	doxygen-html/a00030_source.html	/^<a name="l00293"><\/a><a class="code" href="a00005.html#a25803c0b24900806f18ba1c437000b8f">00293<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a0af611010281b93a36b1b0fd3fd2144a" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00005.html#a26f25e4676e2e40f775f206d15ec410a" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00293	doxygen-html/a00032_source.html	/^<a name="l00293"><\/a>00293         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00293	doxygen-html/a00034_source.html	/^<a name="l00293"><\/a>00293     }$/;"	a
l00294	doxygen-html/a00026_source.html	/^<a name="l00294"><\/a>00294             <a class="code" href="a00015.html#ae10027d02927a1c8c2303a419197078c" title="Set variables to initial values.">node::initialize<\/a>(l);$/;"	a
l00294	doxygen-html/a00028_source.html	/^<a name="l00294"><\/a>00294         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00294	doxygen-html/a00030_source.html	/^<a name="l00294"><\/a>00294 <span class="keyword">    <\/span>{$/;"	a
l00294	doxygen-html/a00032_source.html	/^<a name="l00294"><\/a>00294     }$/;"	a
l00294	doxygen-html/a00034_source.html	/^<a name="l00294"><\/a>00294 <span class="comment"><\/span>$/;"	a
l00295	doxygen-html/a00026_source.html	/^<a name="l00295"><\/a>00295         }$/;"	a
l00295	doxygen-html/a00028_source.html	/^<a name="l00295"><\/a>00295     }$/;"	a
l00295	doxygen-html/a00030_source.html	/^<a name="l00295"><\/a>00295         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00295	doxygen-html/a00032_source.html	/^<a name="l00295"><\/a>00295 <span class="comment"><\/span>$/;"	a
l00295	doxygen-html/a00034_source.html	/^<a name="l00295"><\/a>00295 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00296	doxygen-html/a00026_source.html	/^<a name="l00296"><\/a>00296 <span class="comment"><\/span>$/;"	a
l00296	doxygen-html/a00028_source.html	/^<a name="l00296"><\/a>00296 <span class="comment"><\/span>$/;"	a
l00296	doxygen-html/a00030_source.html	/^<a name="l00296"><\/a>00296     }$/;"	a
l00296	doxygen-html/a00032_source.html	/^<a name="l00296"><\/a>00296 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l00296	doxygen-html/a00034_source.html	/^<a name="l00296"><\/a>00296 <span class="comment">    \/\/\/ slot in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00297	doxygen-html/a00026_source.html	/^<a name="l00297"><\/a>00297 <span class="comment">        \/\/\/ True if the node&#39;s slots are full<\/span>$/;"	a
l00297	doxygen-html/a00028_source.html	/^<a name="l00297"><\/a>00297 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first slot<\/span>$/;"	a
l00297	doxygen-html/a00030_source.html	/^<a name="l00297"><\/a>00297 <span class="comment"><\/span>$/;"	a
l00297	doxygen-html/a00032_source.html	/^<a name="l00297"><\/a>00297 <span class="comment">    \/\/\/ slot in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00297	doxygen-html/a00034_source.html	/^<a name="l00297"><\/a><a class="code" href="a00009.html#a9e1eb2e0b1c92cee93524a002456fbaf">00297<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#afb9918dafdccf1eaffa6b6ddc8de0938" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00009.html#a9e1eb2e0b1c92cee93524a002456fbaf" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()$/;"	a
l00298	doxygen-html/a00026_source.html	/^<a name="l00298"><\/a><a class="code" href="a00015.html#ac046992e9d115a4c02079f58f8aff124">00298<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00015.html#ac046992e9d115a4c02079f58f8aff124" title="True if the node&#39;s slots are full.">isfull<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00298	doxygen-html/a00028_source.html	/^<a name="l00298"><\/a>00298 <span class="comment">    \/\/\/ in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00298	doxygen-html/a00030_source.html	/^<a name="l00298"><\/a>00298 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first slot<\/span>$/;"	a
l00298	doxygen-html/a00032_source.html	/^<a name="l00298"><\/a><a class="code" href="a00006.html#accb388873e7a00b1779a27487e4c0200">00298<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#aa20cfd7ed6236bc3c51b20d5a77a5286" title="create mutable reverse iterator by using STL magic">reverse_iterator<\/a> <a class="code" href="a00006.html#accb388873e7a00b1779a27487e4c0200" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()$/;"	a
l00298	doxygen-html/a00034_source.html	/^<a name="l00298"><\/a>00298     {$/;"	a
l00299	doxygen-html/a00026_source.html	/^<a name="l00299"><\/a>00299 <span class="keyword">        <\/span>{$/;"	a
l00299	doxygen-html/a00028_source.html	/^<a name="l00299"><\/a><a class="code" href="a00004.html#a3745c3bc3523e3671269a5f6bf9fd2de">00299<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a581abfef3fb0eab26b2833165f7314b7" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00004.html#a07e9e77ecd8cd828d32bca22a9f45c2a" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00299	doxygen-html/a00030_source.html	/^<a name="l00299"><\/a>00299 <span class="comment">    \/\/\/ in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00299	doxygen-html/a00032_source.html	/^<a name="l00299"><\/a>00299     {$/;"	a
l00299	doxygen-html/a00034_source.html	/^<a name="l00299"><\/a>00299         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00300	doxygen-html/a00026_source.html	/^<a name="l00300"><\/a>00300             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> == <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>);$/;"	a
l00300	doxygen-html/a00028_source.html	/^<a name="l00300"><\/a>00300 <span class="keyword">    <\/span>{$/;"	a
l00300	doxygen-html/a00030_source.html	/^<a name="l00300"><\/a><a class="code" href="a00005.html#af19d878da96d44622a86b9108e87f339">00300<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a0af611010281b93a36b1b0fd3fd2144a" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00005.html#a65869601a55e3f965a847adea7ab48be" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00300	doxygen-html/a00032_source.html	/^<a name="l00300"><\/a>00300         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00300	doxygen-html/a00034_source.html	/^<a name="l00300"><\/a>00300     }$/;"	a
l00301	doxygen-html/a00026_source.html	/^<a name="l00301"><\/a>00301         }$/;"	a
l00301	doxygen-html/a00028_source.html	/^<a name="l00301"><\/a>00301         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00301	doxygen-html/a00030_source.html	/^<a name="l00301"><\/a>00301 <span class="keyword">    <\/span>{$/;"	a
l00301	doxygen-html/a00032_source.html	/^<a name="l00301"><\/a>00301     }$/;"	a
l00301	doxygen-html/a00034_source.html	/^<a name="l00301"><\/a>00301 <span class="comment"><\/span>$/;"	a
l00302	doxygen-html/a00026_source.html	/^<a name="l00302"><\/a>00302 <span class="comment"><\/span>$/;"	a
l00302	doxygen-html/a00028_source.html	/^<a name="l00302"><\/a>00302     }$/;"	a
l00302	doxygen-html/a00030_source.html	/^<a name="l00302"><\/a>00302         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00302	doxygen-html/a00032_source.html	/^<a name="l00302"><\/a>00302 <span class="comment"><\/span>$/;"	a
l00302	doxygen-html/a00034_source.html	/^<a name="l00302"><\/a>00302 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first<\/span>$/;"	a
l00303	doxygen-html/a00026_source.html	/^<a name="l00303"><\/a>00303 <span class="comment">        \/\/\/ True if few used entries, less than half full<\/span>$/;"	a
l00303	doxygen-html/a00028_source.html	/^<a name="l00303"><\/a>00303 $/;"	a
l00303	doxygen-html/a00030_source.html	/^<a name="l00303"><\/a>00303     }$/;"	a
l00303	doxygen-html/a00032_source.html	/^<a name="l00303"><\/a>00303 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first<\/span>$/;"	a
l00303	doxygen-html/a00034_source.html	/^<a name="l00303"><\/a>00303 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00304	doxygen-html/a00026_source.html	/^<a name="l00304"><\/a><a class="code" href="a00015.html#ad1f041a8a15ebbca6d88f4819cc5e179">00304<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00015.html#ad1f041a8a15ebbca6d88f4819cc5e179" title="True if few used entries, less than half full.">isfew<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00304	doxygen-html/a00028_source.html	/^<a name="l00304"><\/a>00304 <span class="keyword">public<\/span>:$/;"	a
l00304	doxygen-html/a00030_source.html	/^<a name="l00304"><\/a>00304 $/;"	a
l00304	doxygen-html/a00032_source.html	/^<a name="l00304"><\/a>00304 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00304	doxygen-html/a00034_source.html	/^<a name="l00304"><\/a><a class="code" href="a00009.html#af6fcf44e17e2c3416228f3f016c46d18">00304<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a989d5052f0f73009ad08544bef214038" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00009.html#a4f427468ae77255b8f6dfd99f09df632" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00305	doxygen-html/a00026_source.html	/^<a name="l00305"><\/a>00305 <span class="keyword">        <\/span>{$/;"	a
l00305	doxygen-html/a00028_source.html	/^<a name="l00305"><\/a>00305     <span class="comment">\/\/ *** Access Functions to the Item Count<\/span>$/;"	a
l00305	doxygen-html/a00030_source.html	/^<a name="l00305"><\/a>00305 <span class="keyword">public<\/span>:$/;"	a
l00305	doxygen-html/a00032_source.html	/^<a name="l00305"><\/a><a class="code" href="a00006.html#aab7bf40d95f5e2e3a6f48ff132e5aa5c">00305<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#aa137474f07b11232834fc838c96f89b4" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00006.html#ad5ff92256da155cf0a800c0be6d37f10" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00305	doxygen-html/a00034_source.html	/^<a name="l00305"><\/a>00305 <span class="keyword">    <\/span>{$/;"	a
l00306	doxygen-html/a00026_source.html	/^<a name="l00306"><\/a>00306             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> &lt;= <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a>);$/;"	a
l00306	doxygen-html/a00028_source.html	/^<a name="l00306"><\/a>00306 <span class="comment"><\/span>$/;"	a
l00306	doxygen-html/a00030_source.html	/^<a name="l00306"><\/a>00306     <span class="comment">\/\/ *** Access Functions to the Item Count<\/span>$/;"	a
l00306	doxygen-html/a00032_source.html	/^<a name="l00306"><\/a>00306 <span class="keyword">    <\/span>{$/;"	a
l00306	doxygen-html/a00034_source.html	/^<a name="l00306"><\/a>00306         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00307	doxygen-html/a00026_source.html	/^<a name="l00307"><\/a>00307         }$/;"	a
l00307	doxygen-html/a00028_source.html	/^<a name="l00307"><\/a>00307 <span class="comment">    \/\/\/ Return the number of key\/data pairs in the B+ tree<\/span>$/;"	a
l00307	doxygen-html/a00030_source.html	/^<a name="l00307"><\/a>00307 <span class="comment"><\/span>$/;"	a
l00307	doxygen-html/a00032_source.html	/^<a name="l00307"><\/a>00307         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>();$/;"	a
l00307	doxygen-html/a00034_source.html	/^<a name="l00307"><\/a>00307     }$/;"	a
l00308	doxygen-html/a00026_source.html	/^<a name="l00308"><\/a>00308 <span class="comment"><\/span>$/;"	a
l00308	doxygen-html/a00028_source.html	/^<a name="l00308"><\/a><a class="code" href="a00004.html#a4816cbf72826412000ffebf49eae033a">00308<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00004.html#a4816cbf72826412000ffebf49eae033a" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00308	doxygen-html/a00030_source.html	/^<a name="l00308"><\/a>00308 <span class="comment">    \/\/\/ Return the number of key\/data pairs in the B+ tree<\/span>$/;"	a
l00308	doxygen-html/a00032_source.html	/^<a name="l00308"><\/a>00308     }$/;"	a
l00308	doxygen-html/a00034_source.html	/^<a name="l00308"><\/a>00308 <span class="comment"><\/span>$/;"	a
l00309	doxygen-html/a00026_source.html	/^<a name="l00309"><\/a>00309 <span class="comment">        \/\/\/ True if node has too few entries<\/span>$/;"	a
l00309	doxygen-html/a00028_source.html	/^<a name="l00309"><\/a>00309 <span class="keyword">    <\/span>{$/;"	a
l00309	doxygen-html/a00030_source.html	/^<a name="l00309"><\/a><a class="code" href="a00005.html#a0b2c9f7d4790b64ea53576e96da76ea0">00309<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00005.html#a0b2c9f7d4790b64ea53576e96da76ea0" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00309	doxygen-html/a00032_source.html	/^<a name="l00309"><\/a>00309 <span class="comment"><\/span>$/;"	a
l00309	doxygen-html/a00034_source.html	/^<a name="l00309"><\/a>00309 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first slot<\/span>$/;"	a
l00310	doxygen-html/a00026_source.html	/^<a name="l00310"><\/a><a class="code" href="a00015.html#aa5aea58745f1e12404802e0dd6863656">00310<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00015.html#aa5aea58745f1e12404802e0dd6863656" title="True if node has too few entries.">isunderflow<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00310	doxygen-html/a00028_source.html	/^<a name="l00310"><\/a>00310         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>();$/;"	a
l00310	doxygen-html/a00030_source.html	/^<a name="l00310"><\/a>00310 <span class="keyword">    <\/span>{$/;"	a
l00310	doxygen-html/a00032_source.html	/^<a name="l00310"><\/a>00310 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first slot<\/span>$/;"	a
l00310	doxygen-html/a00034_source.html	/^<a name="l00310"><\/a>00310 <span class="comment">    \/\/\/ in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00311	doxygen-html/a00026_source.html	/^<a name="l00311"><\/a>00311 <span class="keyword">        <\/span>{$/;"	a
l00311	doxygen-html/a00028_source.html	/^<a name="l00311"><\/a>00311     }$/;"	a
l00311	doxygen-html/a00030_source.html	/^<a name="l00311"><\/a>00311         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>();$/;"	a
l00311	doxygen-html/a00032_source.html	/^<a name="l00311"><\/a>00311 <span class="comment">    \/\/\/ in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l00311	doxygen-html/a00034_source.html	/^<a name="l00311"><\/a><a class="code" href="a00009.html#a054c601b6f1f281868d8426a61e7020d">00311<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a989d5052f0f73009ad08544bef214038" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00009.html#a9e1eb2e0b1c92cee93524a002456fbaf" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00312	doxygen-html/a00026_source.html	/^<a name="l00312"><\/a>00312             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> &lt; <a class="code" href="a00001.html#aefbcc95b60d5bae8dd7ba9c25e5b6654" title="Computed B+ tree parameter: The minimum number of key slots used in an inner node.">mininnerslots<\/a>);$/;"	a
l00312	doxygen-html/a00028_source.html	/^<a name="l00312"><\/a>00312 <span class="comment"><\/span>$/;"	a
l00312	doxygen-html/a00030_source.html	/^<a name="l00312"><\/a>00312     }$/;"	a
l00312	doxygen-html/a00032_source.html	/^<a name="l00312"><\/a><a class="code" href="a00006.html#a01090ac817bc6525160dbee3b2943ad1">00312<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#aa137474f07b11232834fc838c96f89b4" title="create constant reverse iterator by using STL magic">const_reverse_iterator<\/a> <a class="code" href="a00006.html#accb388873e7a00b1779a27487e4c0200" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00312	doxygen-html/a00034_source.html	/^<a name="l00312"><\/a>00312 <span class="keyword">    <\/span>{$/;"	a
l00313	doxygen-html/a00026_source.html	/^<a name="l00313"><\/a>00313         }$/;"	a
l00313	doxygen-html/a00028_source.html	/^<a name="l00313"><\/a>00313 <span class="comment">    \/\/\/ Returns true if there is at least one key\/data pair in the B+ tree<\/span>$/;"	a
l00313	doxygen-html/a00030_source.html	/^<a name="l00313"><\/a>00313 <span class="comment"><\/span>$/;"	a
l00313	doxygen-html/a00032_source.html	/^<a name="l00313"><\/a>00313 <span class="keyword">    <\/span>{$/;"	a
l00313	doxygen-html/a00034_source.html	/^<a name="l00313"><\/a>00313         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00314	doxygen-html/a00026_source.html	/^<a name="l00314"><\/a>00314     };$/;"	a
l00314	doxygen-html/a00028_source.html	/^<a name="l00314"><\/a><a class="code" href="a00004.html#aeae6000acb62e6b13563efe1d1fa1660">00314<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#aeae6000acb62e6b13563efe1d1fa1660" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00314	doxygen-html/a00030_source.html	/^<a name="l00314"><\/a>00314 <span class="comment">    \/\/\/ Returns true if there is at least one key\/data pair in the B+ tree<\/span>$/;"	a
l00314	doxygen-html/a00032_source.html	/^<a name="l00314"><\/a>00314         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>();$/;"	a
l00314	doxygen-html/a00034_source.html	/^<a name="l00314"><\/a>00314     }$/;"	a
l00315	doxygen-html/a00026_source.html	/^<a name="l00315"><\/a>00315 <span class="comment"><\/span>$/;"	a
l00315	doxygen-html/a00028_source.html	/^<a name="l00315"><\/a>00315 <span class="keyword">    <\/span>{$/;"	a
l00315	doxygen-html/a00030_source.html	/^<a name="l00315"><\/a><a class="code" href="a00005.html#a4e48d18f8564ea81d6702398767f05dd">00315<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a4e48d18f8564ea81d6702398767f05dd" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00315	doxygen-html/a00032_source.html	/^<a name="l00315"><\/a>00315     }$/;"	a
l00315	doxygen-html/a00034_source.html	/^<a name="l00315"><\/a>00315 $/;"	a
l00316	doxygen-html/a00026_source.html	/^<a name="l00316"><\/a>00316 <span class="comment">    \/\/\/ Extended structure of a leaf node in memory. Contains pairs of keys and<\/span>$/;"	a
l00316	doxygen-html/a00028_source.html	/^<a name="l00316"><\/a>00316         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>();$/;"	a
l00316	doxygen-html/a00030_source.html	/^<a name="l00316"><\/a>00316 <span class="keyword">    <\/span>{$/;"	a
l00316	doxygen-html/a00032_source.html	/^<a name="l00316"><\/a>00316 $/;"	a
l00316	doxygen-html/a00034_source.html	/^<a name="l00316"><\/a>00316 <span class="keyword">public<\/span>:$/;"	a
l00317	doxygen-html/a00026_source.html	/^<a name="l00317"><\/a>00317 <span class="comment">    \/\/\/ data items. Key and data slots are kept in separate arrays, because the<\/span>$/;"	a
l00317	doxygen-html/a00028_source.html	/^<a name="l00317"><\/a>00317     }$/;"	a
l00317	doxygen-html/a00030_source.html	/^<a name="l00317"><\/a>00317         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>();$/;"	a
l00317	doxygen-html/a00032_source.html	/^<a name="l00317"><\/a>00317 <span class="keyword">public<\/span>:$/;"	a
l00317	doxygen-html/a00034_source.html	/^<a name="l00317"><\/a>00317     <span class="comment">\/\/ *** Access Functions to the Item Count<\/span>$/;"	a
l00318	doxygen-html/a00026_source.html	/^<a name="l00318"><\/a>00318 <span class="comment">    \/\/\/ key array is traversed very often compared to accessing the data items.<\/span>$/;"	a
l00318	doxygen-html/a00028_source.html	/^<a name="l00318"><\/a>00318 <span class="comment"><\/span>$/;"	a
l00318	doxygen-html/a00030_source.html	/^<a name="l00318"><\/a>00318     }$/;"	a
l00318	doxygen-html/a00032_source.html	/^<a name="l00318"><\/a>00318     <span class="comment">\/\/ *** Access Functions to the Item Count<\/span>$/;"	a
l00318	doxygen-html/a00034_source.html	/^<a name="l00318"><\/a>00318 <span class="comment"><\/span>$/;"	a
l00319	doxygen-html/a00026_source.html	/^<a name="l00319"><\/a><a class="code" href="a00017.html">00319<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">leaf_node<\/a> : <span class="keyword">public<\/span> <a class="code" href="a00018.html" title="The header structure of each node in-memory.">node<\/a>$/;"	a
l00319	doxygen-html/a00028_source.html	/^<a name="l00319"><\/a>00319 <span class="comment">    \/\/\/ Returns the largest possible size of the B+ Tree. This is just a<\/span>$/;"	a
l00319	doxygen-html/a00030_source.html	/^<a name="l00319"><\/a>00319 <span class="comment"><\/span>$/;"	a
l00319	doxygen-html/a00032_source.html	/^<a name="l00319"><\/a>00319 <span class="comment"><\/span>$/;"	a
l00319	doxygen-html/a00034_source.html	/^<a name="l00319"><\/a>00319 <span class="comment">    \/\/\/ Return the number of keys in the B+ tree<\/span>$/;"	a
l00320	doxygen-html/a00026_source.html	/^<a name="l00320"><\/a>00320     {<span class="comment"><\/span>$/;"	a
l00320	doxygen-html/a00028_source.html	/^<a name="l00320"><\/a>00320 <span class="comment">    \/\/\/ function required by the STL standard, the B+ Tree can hold more items.<\/span>$/;"	a
l00320	doxygen-html/a00030_source.html	/^<a name="l00320"><\/a>00320 <span class="comment">    \/\/\/ Returns the largest possible size of the B+ Tree. This is just a<\/span>$/;"	a
l00320	doxygen-html/a00032_source.html	/^<a name="l00320"><\/a>00320 <span class="comment">    \/\/\/ Return the number of keys in the B+ tree<\/span>$/;"	a
l00320	doxygen-html/a00034_source.html	/^<a name="l00320"><\/a><a class="code" href="a00009.html#ad00b79874786c1f20cae2b7e765b9e7a">00320<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00009.html#ad00b79874786c1f20cae2b7e765b9e7a" title="Return the number of keys in the B+ tree.">size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00321	doxygen-html/a00026_source.html	/^<a name="l00321"><\/a>00321 <span class="comment">        \/\/\/ Define an related allocator for the leaf_node structs.<\/span>$/;"	a
l00321	doxygen-html/a00028_source.html	/^<a name="l00321"><\/a><a class="code" href="a00004.html#ae0655211e7a2c51312cfaf7b4cd87836">00321<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00004.html#ae0655211e7a2c51312cfaf7b4cd87836" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00321	doxygen-html/a00030_source.html	/^<a name="l00321"><\/a>00321 <span class="comment">    \/\/\/ function required by the STL standard, the B+ Tree can hold more items.<\/span>$/;"	a
l00321	doxygen-html/a00032_source.html	/^<a name="l00321"><\/a><a class="code" href="a00006.html#a9be405a164ded347358ce38599d768bd">00321<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00006.html#a9be405a164ded347358ce38599d768bd" title="Return the number of keys in the B+ tree.">size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00321	doxygen-html/a00034_source.html	/^<a name="l00321"><\/a>00321 <span class="keyword">    <\/span>{$/;"	a
l00322	doxygen-html/a00026_source.html	/^<a name="l00322"><\/a><a class="code" href="a00017.html#a99d5a3d40c5098a75bbcb9404971e4fd">00322<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> _Alloc::template rebind&lt;leaf_node&gt;::other <a class="code" href="a00017.html#a99d5a3d40c5098a75bbcb9404971e4fd" title="Define an related allocator for the leaf_node structs.">alloc_type<\/a>;$/;"	a
l00322	doxygen-html/a00028_source.html	/^<a name="l00322"><\/a>00322 <span class="keyword">    <\/span>{$/;"	a
l00322	doxygen-html/a00030_source.html	/^<a name="l00322"><\/a><a class="code" href="a00005.html#a122b57700263111abc6d8740123e2480">00322<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00005.html#a122b57700263111abc6d8740123e2480" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00322	doxygen-html/a00032_source.html	/^<a name="l00322"><\/a>00322 <span class="keyword">    <\/span>{$/;"	a
l00322	doxygen-html/a00034_source.html	/^<a name="l00322"><\/a>00322         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>();$/;"	a
l00323	doxygen-html/a00026_source.html	/^<a name="l00323"><\/a>00323 <span class="comment"><\/span>$/;"	a
l00323	doxygen-html/a00028_source.html	/^<a name="l00323"><\/a>00323         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>();$/;"	a
l00323	doxygen-html/a00030_source.html	/^<a name="l00323"><\/a>00323 <span class="keyword">    <\/span>{$/;"	a
l00323	doxygen-html/a00032_source.html	/^<a name="l00323"><\/a>00323         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>();$/;"	a
l00323	doxygen-html/a00034_source.html	/^<a name="l00323"><\/a>00323     }$/;"	a
l00324	doxygen-html/a00026_source.html	/^<a name="l00324"><\/a>00324 <span class="comment">        \/\/\/ Double linked list pointers to traverse the leaves<\/span>$/;"	a
l00324	doxygen-html/a00028_source.html	/^<a name="l00324"><\/a>00324     }$/;"	a
l00324	doxygen-html/a00030_source.html	/^<a name="l00324"><\/a>00324         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>();$/;"	a
l00324	doxygen-html/a00032_source.html	/^<a name="l00324"><\/a>00324     }$/;"	a
l00324	doxygen-html/a00034_source.html	/^<a name="l00324"><\/a>00324 <span class="comment"><\/span>$/;"	a
l00325	doxygen-html/a00026_source.html	/^<a name="l00325"><\/a><a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000">00325<\/a> <span class="comment"><\/span>        <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">leaf_node<\/a>       *<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00325	doxygen-html/a00028_source.html	/^<a name="l00325"><\/a>00325 <span class="comment"><\/span>$/;"	a
l00325	doxygen-html/a00030_source.html	/^<a name="l00325"><\/a>00325     }$/;"	a
l00325	doxygen-html/a00032_source.html	/^<a name="l00325"><\/a>00325 <span class="comment"><\/span>$/;"	a
l00325	doxygen-html/a00034_source.html	/^<a name="l00325"><\/a>00325 <span class="comment">    \/\/\/ Returns true if there is at least one key in the B+ tree<\/span>$/;"	a
l00326	doxygen-html/a00026_source.html	/^<a name="l00326"><\/a>00326 <span class="comment"><\/span>$/;"	a
l00326	doxygen-html/a00028_source.html	/^<a name="l00326"><\/a>00326 <span class="comment">    \/\/\/ Return a const reference to the current statistics.<\/span>$/;"	a
l00326	doxygen-html/a00030_source.html	/^<a name="l00326"><\/a>00326 <span class="comment"><\/span>$/;"	a
l00326	doxygen-html/a00032_source.html	/^<a name="l00326"><\/a>00326 <span class="comment">    \/\/\/ Returns true if there is at least one key in the B+ tree<\/span>$/;"	a
l00326	doxygen-html/a00034_source.html	/^<a name="l00326"><\/a><a class="code" href="a00009.html#a763bf123995cf352f7a08bc43fe0597d">00326<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a763bf123995cf352f7a08bc43fe0597d" title="Returns true if there is at least one key in the B+ tree.">empty<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00327	doxygen-html/a00026_source.html	/^<a name="l00327"><\/a>00327 <span class="comment">        \/\/\/ Double linked list pointers to traverse the leaves<\/span>$/;"	a
l00327	doxygen-html/a00028_source.html	/^<a name="l00327"><\/a><a class="code" href="a00004.html#aa5374a517934ddbb6bae7053eeaacad3">00327<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00004.html#a9dd49396431319c3341c4cdcf68385ed" title="Small structure containing statistics about the tree.">tree_stats<\/a>&amp; <a class="code" href="a00004.html#aa5374a517934ddbb6bae7053eeaacad3" title="Return a const reference to the current statistics.">get_stats<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00327	doxygen-html/a00030_source.html	/^<a name="l00327"><\/a>00327 <span class="comment">    \/\/\/ Return a const reference to the current statistics.<\/span>$/;"	a
l00327	doxygen-html/a00032_source.html	/^<a name="l00327"><\/a><a class="code" href="a00006.html#a1943f3a2270fd9a13deb4d98855eb4bc">00327<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a1943f3a2270fd9a13deb4d98855eb4bc" title="Returns true if there is at least one key in the B+ tree.">empty<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00327	doxygen-html/a00034_source.html	/^<a name="l00327"><\/a>00327 <span class="keyword">    <\/span>{$/;"	a
l00328	doxygen-html/a00026_source.html	/^<a name="l00328"><\/a><a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367">00328<\/a> <span class="comment"><\/span>        <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">leaf_node<\/a>       *<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00328	doxygen-html/a00028_source.html	/^<a name="l00328"><\/a>00328 <span class="keyword">    <\/span>{$/;"	a
l00328	doxygen-html/a00030_source.html	/^<a name="l00328"><\/a><a class="code" href="a00005.html#ac6d2b48072e4917eae4db73f21212d09">00328<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00005.html#ac5b2a55d1982b407a1075b9474c0d986" title="Small structure containing statistics about the tree.">tree_stats<\/a>&amp; <a class="code" href="a00005.html#ac6d2b48072e4917eae4db73f21212d09" title="Return a const reference to the current statistics.">get_stats<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00328	doxygen-html/a00032_source.html	/^<a name="l00328"><\/a>00328 <span class="keyword">    <\/span>{$/;"	a
l00328	doxygen-html/a00034_source.html	/^<a name="l00328"><\/a>00328         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>();$/;"	a
l00329	doxygen-html/a00026_source.html	/^<a name="l00329"><\/a>00329 <span class="comment"><\/span>$/;"	a
l00329	doxygen-html/a00028_source.html	/^<a name="l00329"><\/a>00329         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc" title="Return a const reference to the current statistics.">get_stats<\/a>();$/;"	a
l00329	doxygen-html/a00030_source.html	/^<a name="l00329"><\/a>00329 <span class="keyword">    <\/span>{$/;"	a
l00329	doxygen-html/a00032_source.html	/^<a name="l00329"><\/a>00329         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>();$/;"	a
l00329	doxygen-html/a00034_source.html	/^<a name="l00329"><\/a>00329     }$/;"	a
l00330	doxygen-html/a00026_source.html	/^<a name="l00330"><\/a>00330 <span class="comment">        \/\/\/ Keys of children or data pointers<\/span>$/;"	a
l00330	doxygen-html/a00028_source.html	/^<a name="l00330"><\/a>00330     }$/;"	a
l00330	doxygen-html/a00030_source.html	/^<a name="l00330"><\/a>00330         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc" title="Return a const reference to the current statistics.">get_stats<\/a>();$/;"	a
l00330	doxygen-html/a00032_source.html	/^<a name="l00330"><\/a>00330     }$/;"	a
l00330	doxygen-html/a00034_source.html	/^<a name="l00330"><\/a>00330 <span class="comment"><\/span>$/;"	a
l00331	doxygen-html/a00026_source.html	/^<a name="l00331"><\/a><a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8">00331<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>        <a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>];$/;"	a
l00331	doxygen-html/a00028_source.html	/^<a name="l00331"><\/a>00331 $/;"	a
l00331	doxygen-html/a00030_source.html	/^<a name="l00331"><\/a>00331     }$/;"	a
l00331	doxygen-html/a00032_source.html	/^<a name="l00331"><\/a>00331 <span class="comment"><\/span>$/;"	a
l00331	doxygen-html/a00034_source.html	/^<a name="l00331"><\/a>00331 <span class="comment">    \/\/\/ Returns the largest possible size of the B+ Tree. This is just a<\/span>$/;"	a
l00332	doxygen-html/a00026_source.html	/^<a name="l00332"><\/a>00332 <span class="comment"><\/span>$/;"	a
l00332	doxygen-html/a00028_source.html	/^<a name="l00332"><\/a>00332 <span class="keyword">public<\/span>:$/;"	a
l00332	doxygen-html/a00030_source.html	/^<a name="l00332"><\/a>00332 $/;"	a
l00332	doxygen-html/a00032_source.html	/^<a name="l00332"><\/a>00332 <span class="comment">    \/\/\/ Returns the largest possible size of the B+ Tree. This is just a<\/span>$/;"	a
l00332	doxygen-html/a00034_source.html	/^<a name="l00332"><\/a>00332 <span class="comment">    \/\/\/ function required by the STL standard, the B+ Tree can hold more items.<\/span>$/;"	a
l00333	doxygen-html/a00026_source.html	/^<a name="l00333"><\/a>00333 <span class="comment">        \/\/\/ Array of data<\/span>$/;"	a
l00333	doxygen-html/a00028_source.html	/^<a name="l00333"><\/a>00333     <span class="comment">\/\/ *** Standard Access Functions Querying the Tree by Descending to a Leaf<\/span>$/;"	a
l00333	doxygen-html/a00030_source.html	/^<a name="l00333"><\/a>00333 <span class="keyword">public<\/span>:$/;"	a
l00333	doxygen-html/a00032_source.html	/^<a name="l00333"><\/a>00333 <span class="comment">    \/\/\/ function required by the STL standard, the B+ Tree can hold more items.<\/span>$/;"	a
l00333	doxygen-html/a00034_source.html	/^<a name="l00333"><\/a><a class="code" href="a00009.html#ae3338e9685da6924c7be74906b3cf68b">00333<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00009.html#ae3338e9685da6924c7be74906b3cf68b" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00334	doxygen-html/a00026_source.html	/^<a name="l00334"><\/a><a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432">00334<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>       <a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> ? 1 : <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>];$/;"	a
l00334	doxygen-html/a00028_source.html	/^<a name="l00334"><\/a>00334 <span class="comment"><\/span>$/;"	a
l00334	doxygen-html/a00030_source.html	/^<a name="l00334"><\/a>00334     <span class="comment">\/\/ *** Standard Access Functions Querying the Tree by Descending to a Leaf<\/span>$/;"	a
l00334	doxygen-html/a00032_source.html	/^<a name="l00334"><\/a><a class="code" href="a00006.html#a2b0012b20d4bc04d78d1297d78550d8a">00334<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00006.html#a2b0012b20d4bc04d78d1297d78550d8a" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00334	doxygen-html/a00034_source.html	/^<a name="l00334"><\/a>00334 <span class="keyword">    <\/span>{$/;"	a
l00335	doxygen-html/a00026_source.html	/^<a name="l00335"><\/a>00335 <span class="comment"><\/span>$/;"	a
l00335	doxygen-html/a00028_source.html	/^<a name="l00335"><\/a>00335 <span class="comment">    \/\/\/ Non-STL function checking whether a key is in the B+ tree. The same as<\/span>$/;"	a
l00335	doxygen-html/a00030_source.html	/^<a name="l00335"><\/a>00335 <span class="comment"><\/span>$/;"	a
l00335	doxygen-html/a00032_source.html	/^<a name="l00335"><\/a>00335 <span class="keyword">    <\/span>{$/;"	a
l00335	doxygen-html/a00034_source.html	/^<a name="l00335"><\/a>00335         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>();$/;"	a
l00336	doxygen-html/a00026_source.html	/^<a name="l00336"><\/a>00336 <span class="comment">        \/\/\/ Set variables to initial values<\/span>$/;"	a
l00336	doxygen-html/a00028_source.html	/^<a name="l00336"><\/a>00336 <span class="comment">    \/\/\/ (find(k) != end()) or (count() != 0).<\/span>$/;"	a
l00336	doxygen-html/a00030_source.html	/^<a name="l00336"><\/a>00336 <span class="comment">    \/\/\/ Non-STL function checking whether a key is in the B+ tree. The same as<\/span>$/;"	a
l00336	doxygen-html/a00032_source.html	/^<a name="l00336"><\/a>00336         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>();$/;"	a
l00336	doxygen-html/a00034_source.html	/^<a name="l00336"><\/a>00336     }$/;"	a
l00337	doxygen-html/a00026_source.html	/^<a name="l00337"><\/a><a class="code" href="a00017.html#a3db9141d0f1335ebaacb141ab6eef0d1">00337<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00017.html#a3db9141d0f1335ebaacb141ab6eef0d1" title="Set variables to initial values.">initialize<\/a>()$/;"	a
l00337	doxygen-html/a00028_source.html	/^<a name="l00337"><\/a><a class="code" href="a00004.html#a0aa2e7bf016864cb2bfe689a5967abf6">00337<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a0aa2e7bf016864cb2bfe689a5967abf6" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00337	doxygen-html/a00030_source.html	/^<a name="l00337"><\/a>00337 <span class="comment">    \/\/\/ (find(k) != end()) or (count() != 0).<\/span>$/;"	a
l00337	doxygen-html/a00032_source.html	/^<a name="l00337"><\/a>00337     }$/;"	a
l00337	doxygen-html/a00034_source.html	/^<a name="l00337"><\/a>00337 <span class="comment"><\/span>$/;"	a
l00338	doxygen-html/a00026_source.html	/^<a name="l00338"><\/a>00338         {$/;"	a
l00338	doxygen-html/a00028_source.html	/^<a name="l00338"><\/a>00338 <span class="keyword">    <\/span>{$/;"	a
l00338	doxygen-html/a00030_source.html	/^<a name="l00338"><\/a><a class="code" href="a00005.html#ae5a4cbbd44f3c1ac0380814d42227f08">00338<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#ae5a4cbbd44f3c1ac0380814d42227f08" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00338	doxygen-html/a00032_source.html	/^<a name="l00338"><\/a>00338 <span class="comment"><\/span>$/;"	a
l00338	doxygen-html/a00034_source.html	/^<a name="l00338"><\/a>00338 <span class="comment">    \/\/\/ Return a const reference to the current statistics.<\/span>$/;"	a
l00339	doxygen-html/a00026_source.html	/^<a name="l00339"><\/a>00339             <a class="code" href="a00017.html#a3db9141d0f1335ebaacb141ab6eef0d1" title="Set variables to initial values.">node::initialize<\/a>(0);$/;"	a
l00339	doxygen-html/a00028_source.html	/^<a name="l00339"><\/a>00339         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(key);$/;"	a
l00339	doxygen-html/a00030_source.html	/^<a name="l00339"><\/a>00339 <span class="keyword">    <\/span>{$/;"	a
l00339	doxygen-html/a00032_source.html	/^<a name="l00339"><\/a>00339 <span class="comment">    \/\/\/ Return a const reference to the current statistics.<\/span>$/;"	a
l00339	doxygen-html/a00034_source.html	/^<a name="l00339"><\/a><a class="code" href="a00009.html#ae085f7427a2cb614b5a44c0b545fb86b">00339<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00009.html#acb76d4594a31ed8906a25d08f5830f5e" title="Small structure containing statistics about the tree.">tree_stats<\/a>&amp; <a class="code" href="a00009.html#ae085f7427a2cb614b5a44c0b545fb86b" title="Return a const reference to the current statistics.">get_stats<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00340	doxygen-html/a00026_source.html	/^<a name="l00340"><\/a>00340             <a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = <a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> = NULL;$/;"	a
l00340	doxygen-html/a00028_source.html	/^<a name="l00340"><\/a>00340     }$/;"	a
l00340	doxygen-html/a00030_source.html	/^<a name="l00340"><\/a>00340         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(key);$/;"	a
l00340	doxygen-html/a00032_source.html	/^<a name="l00340"><\/a><a class="code" href="a00006.html#a926c5bb8fbf409b1371c1ca211ba2bde">00340<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00006.html#a268704f56c398ed05b600262f8c1d558" title="Small structure containing statistics about the tree.">tree_stats<\/a>&amp; <a class="code" href="a00006.html#a926c5bb8fbf409b1371c1ca211ba2bde" title="Return a const reference to the current statistics.">get_stats<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00340	doxygen-html/a00034_source.html	/^<a name="l00340"><\/a>00340 <span class="keyword">    <\/span>{$/;"	a
l00341	doxygen-html/a00026_source.html	/^<a name="l00341"><\/a>00341         }$/;"	a
l00341	doxygen-html/a00028_source.html	/^<a name="l00341"><\/a>00341 <span class="comment"><\/span>$/;"	a
l00341	doxygen-html/a00030_source.html	/^<a name="l00341"><\/a>00341     }$/;"	a
l00341	doxygen-html/a00032_source.html	/^<a name="l00341"><\/a>00341 <span class="keyword">    <\/span>{$/;"	a
l00341	doxygen-html/a00034_source.html	/^<a name="l00341"><\/a>00341         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc" title="Return a const reference to the current statistics.">get_stats<\/a>();$/;"	a
l00342	doxygen-html/a00026_source.html	/^<a name="l00342"><\/a>00342 <span class="comment"><\/span>$/;"	a
l00342	doxygen-html/a00028_source.html	/^<a name="l00342"><\/a>00342 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an iterator to the<\/span>$/;"	a
l00342	doxygen-html/a00030_source.html	/^<a name="l00342"><\/a>00342 <span class="comment"><\/span>$/;"	a
l00342	doxygen-html/a00032_source.html	/^<a name="l00342"><\/a>00342         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc" title="Return a const reference to the current statistics.">get_stats<\/a>();$/;"	a
l00342	doxygen-html/a00034_source.html	/^<a name="l00342"><\/a>00342     }$/;"	a
l00343	doxygen-html/a00026_source.html	/^<a name="l00343"><\/a>00343 <span class="comment">        \/\/\/ True if the node&#39;s slots are full<\/span>$/;"	a
l00343	doxygen-html/a00028_source.html	/^<a name="l00343"><\/a>00343 <span class="comment">    \/\/\/ key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00343	doxygen-html/a00030_source.html	/^<a name="l00343"><\/a>00343 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an iterator to the<\/span>$/;"	a
l00343	doxygen-html/a00032_source.html	/^<a name="l00343"><\/a>00343     }$/;"	a
l00343	doxygen-html/a00034_source.html	/^<a name="l00343"><\/a>00343 $/;"	a
l00344	doxygen-html/a00026_source.html	/^<a name="l00344"><\/a><a class="code" href="a00017.html#a5f6015492b1e10183eef8a60a33680f4">00344<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00017.html#a5f6015492b1e10183eef8a60a33680f4" title="True if the node&#39;s slots are full.">isfull<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00344	doxygen-html/a00028_source.html	/^<a name="l00344"><\/a><a class="code" href="a00004.html#a8db4682cc1dc34e2dd95d6ded2e2af65">00344<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#a8db4682cc1dc34e2dd95d6ded2e2af65" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00344	doxygen-html/a00030_source.html	/^<a name="l00344"><\/a>00344 <span class="comment">    \/\/\/ key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00344	doxygen-html/a00032_source.html	/^<a name="l00344"><\/a>00344 $/;"	a
l00344	doxygen-html/a00034_source.html	/^<a name="l00344"><\/a>00344 <span class="keyword">public<\/span>:$/;"	a
l00345	doxygen-html/a00026_source.html	/^<a name="l00345"><\/a>00345 <span class="keyword">        <\/span>{$/;"	a
l00345	doxygen-html/a00028_source.html	/^<a name="l00345"><\/a>00345     {$/;"	a
l00345	doxygen-html/a00030_source.html	/^<a name="l00345"><\/a><a class="code" href="a00005.html#a34e793de6eed772651697e23e8adaf9c">00345<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a34e793de6eed772651697e23e8adaf9c" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00345	doxygen-html/a00032_source.html	/^<a name="l00345"><\/a>00345 <span class="keyword">public<\/span>:$/;"	a
l00345	doxygen-html/a00034_source.html	/^<a name="l00345"><\/a>00345     <span class="comment">\/\/ *** Standard Access Functions Querying the Tree by Descending to a Leaf<\/span>$/;"	a
l00346	doxygen-html/a00026_source.html	/^<a name="l00346"><\/a>00346             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> == <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>);$/;"	a
l00346	doxygen-html/a00028_source.html	/^<a name="l00346"><\/a>00346         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00346	doxygen-html/a00030_source.html	/^<a name="l00346"><\/a>00346     {$/;"	a
l00346	doxygen-html/a00032_source.html	/^<a name="l00346"><\/a>00346     <span class="comment">\/\/ *** Standard Access Functions Querying the Tree by Descending to a Leaf<\/span>$/;"	a
l00346	doxygen-html/a00034_source.html	/^<a name="l00346"><\/a>00346 <span class="comment"><\/span>$/;"	a
l00347	doxygen-html/a00026_source.html	/^<a name="l00347"><\/a>00347         }$/;"	a
l00347	doxygen-html/a00028_source.html	/^<a name="l00347"><\/a>00347     }$/;"	a
l00347	doxygen-html/a00030_source.html	/^<a name="l00347"><\/a>00347         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00347	doxygen-html/a00032_source.html	/^<a name="l00347"><\/a>00347 <span class="comment"><\/span>$/;"	a
l00347	doxygen-html/a00034_source.html	/^<a name="l00347"><\/a>00347 <span class="comment">    \/\/\/ Non-STL function checking whether a key is in the B+ tree. The same as<\/span>$/;"	a
l00348	doxygen-html/a00026_source.html	/^<a name="l00348"><\/a>00348 <span class="comment"><\/span>$/;"	a
l00348	doxygen-html/a00028_source.html	/^<a name="l00348"><\/a>00348 <span class="comment"><\/span>$/;"	a
l00348	doxygen-html/a00030_source.html	/^<a name="l00348"><\/a>00348     }$/;"	a
l00348	doxygen-html/a00032_source.html	/^<a name="l00348"><\/a>00348 <span class="comment">    \/\/\/ Non-STL function checking whether a key is in the B+ tree. The same as<\/span>$/;"	a
l00348	doxygen-html/a00034_source.html	/^<a name="l00348"><\/a>00348 <span class="comment">    \/\/\/ (find(k) != end()) or (count() != 0).<\/span>$/;"	a
l00349	doxygen-html/a00026_source.html	/^<a name="l00349"><\/a>00349 <span class="comment">        \/\/\/ True if few used entries, less than half full<\/span>$/;"	a
l00349	doxygen-html/a00028_source.html	/^<a name="l00349"><\/a>00349 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an constant iterator<\/span>$/;"	a
l00349	doxygen-html/a00030_source.html	/^<a name="l00349"><\/a>00349 <span class="comment"><\/span>$/;"	a
l00349	doxygen-html/a00032_source.html	/^<a name="l00349"><\/a>00349 <span class="comment">    \/\/\/ (find(k) != end()) or (count() != 0).<\/span>$/;"	a
l00349	doxygen-html/a00034_source.html	/^<a name="l00349"><\/a><a class="code" href="a00009.html#ac76905f0dc9369d4bb460f6e24bf7363">00349<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#ac76905f0dc9369d4bb460f6e24bf7363" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00350	doxygen-html/a00026_source.html	/^<a name="l00350"><\/a><a class="code" href="a00017.html#a5dd4c34fed677676beaf1782ee4a873f">00350<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00017.html#a5dd4c34fed677676beaf1782ee4a873f" title="True if few used entries, less than half full.">isfew<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00350	doxygen-html/a00028_source.html	/^<a name="l00350"><\/a>00350 <span class="comment">    \/\/\/ to the key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00350	doxygen-html/a00030_source.html	/^<a name="l00350"><\/a>00350 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an constant iterator<\/span>$/;"	a
l00350	doxygen-html/a00032_source.html	/^<a name="l00350"><\/a><a class="code" href="a00006.html#a1438934e738862154bbcfa1314b485bb">00350<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a1438934e738862154bbcfa1314b485bb" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00350	doxygen-html/a00034_source.html	/^<a name="l00350"><\/a>00350 <span class="keyword">    <\/span>{$/;"	a
l00351	doxygen-html/a00026_source.html	/^<a name="l00351"><\/a>00351 <span class="keyword">        <\/span>{$/;"	a
l00351	doxygen-html/a00028_source.html	/^<a name="l00351"><\/a><a class="code" href="a00004.html#a9c5ac09e4fbd11e6b1c106c5d1340281">00351<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00004.html#a8db4682cc1dc34e2dd95d6ded2e2af65" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00351	doxygen-html/a00030_source.html	/^<a name="l00351"><\/a>00351 <span class="comment">    \/\/\/ to the key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00351	doxygen-html/a00032_source.html	/^<a name="l00351"><\/a>00351 <span class="keyword">    <\/span>{$/;"	a
l00351	doxygen-html/a00034_source.html	/^<a name="l00351"><\/a>00351         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(key);$/;"	a
l00352	doxygen-html/a00026_source.html	/^<a name="l00352"><\/a>00352             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> &lt;= <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">minleafslots<\/a>);$/;"	a
l00352	doxygen-html/a00028_source.html	/^<a name="l00352"><\/a>00352 <span class="keyword">    <\/span>{$/;"	a
l00352	doxygen-html/a00030_source.html	/^<a name="l00352"><\/a><a class="code" href="a00005.html#a8e1f92f877b124becd55debded93392a">00352<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00005.html#a34e793de6eed772651697e23e8adaf9c" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00352	doxygen-html/a00032_source.html	/^<a name="l00352"><\/a>00352         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(key);$/;"	a
l00352	doxygen-html/a00034_source.html	/^<a name="l00352"><\/a>00352     }$/;"	a
l00353	doxygen-html/a00026_source.html	/^<a name="l00353"><\/a>00353         }$/;"	a
l00353	doxygen-html/a00028_source.html	/^<a name="l00353"><\/a>00353         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00353	doxygen-html/a00030_source.html	/^<a name="l00353"><\/a>00353 <span class="keyword">    <\/span>{$/;"	a
l00353	doxygen-html/a00032_source.html	/^<a name="l00353"><\/a>00353     }$/;"	a
l00353	doxygen-html/a00034_source.html	/^<a name="l00353"><\/a>00353 <span class="comment"><\/span>$/;"	a
l00354	doxygen-html/a00026_source.html	/^<a name="l00354"><\/a>00354 <span class="comment"><\/span>$/;"	a
l00354	doxygen-html/a00028_source.html	/^<a name="l00354"><\/a>00354     }$/;"	a
l00354	doxygen-html/a00030_source.html	/^<a name="l00354"><\/a>00354         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00354	doxygen-html/a00032_source.html	/^<a name="l00354"><\/a>00354 <span class="comment"><\/span>$/;"	a
l00354	doxygen-html/a00034_source.html	/^<a name="l00354"><\/a>00354 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an iterator to the<\/span>$/;"	a
l00355	doxygen-html/a00026_source.html	/^<a name="l00355"><\/a>00355 <span class="comment">        \/\/\/ True if node has too few entries<\/span>$/;"	a
l00355	doxygen-html/a00028_source.html	/^<a name="l00355"><\/a>00355 <span class="comment"><\/span>$/;"	a
l00355	doxygen-html/a00030_source.html	/^<a name="l00355"><\/a>00355     }$/;"	a
l00355	doxygen-html/a00032_source.html	/^<a name="l00355"><\/a>00355 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an iterator to the<\/span>$/;"	a
l00355	doxygen-html/a00034_source.html	/^<a name="l00355"><\/a>00355 <span class="comment">    \/\/\/ key slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00356	doxygen-html/a00026_source.html	/^<a name="l00356"><\/a><a class="code" href="a00017.html#acb0129f5abf7dafb3d802b7ea25b418c">00356<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00017.html#acb0129f5abf7dafb3d802b7ea25b418c" title="True if node has too few entries.">isunderflow<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00356	doxygen-html/a00028_source.html	/^<a name="l00356"><\/a>00356 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns the number of<\/span>$/;"	a
l00356	doxygen-html/a00030_source.html	/^<a name="l00356"><\/a>00356 <span class="comment"><\/span>$/;"	a
l00356	doxygen-html/a00032_source.html	/^<a name="l00356"><\/a>00356 <span class="comment">    \/\/\/ key slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00356	doxygen-html/a00034_source.html	/^<a name="l00356"><\/a><a class="code" href="a00009.html#a7ed6ed0ae9f3993cedca7b7d8755be85">00356<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#a7ed6ed0ae9f3993cedca7b7d8755be85" title="Tries to locate a key in the B+ tree and returns an iterator to the key slot if found.">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l00357	doxygen-html/a00026_source.html	/^<a name="l00357"><\/a>00357 <span class="keyword">        <\/span>{$/;"	a
l00357	doxygen-html/a00028_source.html	/^<a name="l00357"><\/a>00357 <span class="comment">    \/\/\/ identical key entries found. Since this is a unique map, count()<\/span>$/;"	a
l00357	doxygen-html/a00030_source.html	/^<a name="l00357"><\/a>00357 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns the number of<\/span>$/;"	a
l00357	doxygen-html/a00032_source.html	/^<a name="l00357"><\/a><a class="code" href="a00006.html#a130a3b87e39b1d9ff8be6df80b942737">00357<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#a130a3b87e39b1d9ff8be6df80b942737" title="Tries to locate a key in the B+ tree and returns an iterator to the key slot if found.">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00357	doxygen-html/a00034_source.html	/^<a name="l00357"><\/a>00357     {$/;"	a
l00358	doxygen-html/a00026_source.html	/^<a name="l00358"><\/a>00358             <span class="keywordflow">return<\/span> (<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a> &lt; <a class="code" href="a00001.html#ad8525611bf3b079ca4ab13dbab9b23c0" title="Computed B+ tree parameter: The minimum number of key\/data slots used in a leaf.">minleafslots<\/a>);$/;"	a
l00358	doxygen-html/a00028_source.html	/^<a name="l00358"><\/a>00358 <span class="comment">    \/\/\/ returns either 0 or 1.<\/span>$/;"	a
l00358	doxygen-html/a00030_source.html	/^<a name="l00358"><\/a>00358 <span class="comment">    \/\/\/ identical key entries found.<\/span>$/;"	a
l00358	doxygen-html/a00032_source.html	/^<a name="l00358"><\/a>00358     {$/;"	a
l00358	doxygen-html/a00034_source.html	/^<a name="l00358"><\/a>00358         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00359	doxygen-html/a00026_source.html	/^<a name="l00359"><\/a>00359         }$/;"	a
l00359	doxygen-html/a00028_source.html	/^<a name="l00359"><\/a><a class="code" href="a00004.html#a96abb2181dae3af81233717c33bcb0e1">00359<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00004.html#a96abb2181dae3af81233717c33bcb0e1" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00359	doxygen-html/a00030_source.html	/^<a name="l00359"><\/a><a class="code" href="a00005.html#a6c0afdca1eb33639f5e8a2a7c939de9a">00359<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00005.html#a6c0afdca1eb33639f5e8a2a7c939de9a" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00359	doxygen-html/a00032_source.html	/^<a name="l00359"><\/a>00359         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00359	doxygen-html/a00034_source.html	/^<a name="l00359"><\/a>00359     }$/;"	a
l00360	doxygen-html/a00026_source.html	/^<a name="l00360"><\/a>00360 <span class="comment"><\/span>$/;"	a
l00360	doxygen-html/a00028_source.html	/^<a name="l00360"><\/a>00360 <span class="keyword">    <\/span>{$/;"	a
l00360	doxygen-html/a00030_source.html	/^<a name="l00360"><\/a>00360 <span class="keyword">    <\/span>{$/;"	a
l00360	doxygen-html/a00032_source.html	/^<a name="l00360"><\/a>00360     }$/;"	a
l00360	doxygen-html/a00034_source.html	/^<a name="l00360"><\/a>00360 <span class="comment"><\/span>$/;"	a
l00361	doxygen-html/a00026_source.html	/^<a name="l00361"><\/a>00361 <span class="comment">        \/\/\/ Set the (key,data) pair in slot. Overloaded function used by<\/span>$/;"	a
l00361	doxygen-html/a00028_source.html	/^<a name="l00361"><\/a>00361         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(key);$/;"	a
l00361	doxygen-html/a00030_source.html	/^<a name="l00361"><\/a>00361         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(key);$/;"	a
l00361	doxygen-html/a00032_source.html	/^<a name="l00361"><\/a>00361 <span class="comment"><\/span>$/;"	a
l00361	doxygen-html/a00034_source.html	/^<a name="l00361"><\/a>00361 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an constant iterator<\/span>$/;"	a
l00362	doxygen-html/a00026_source.html	/^<a name="l00362"><\/a>00362 <span class="comment">        \/\/\/ bulk_load().<\/span>$/;"	a
l00362	doxygen-html/a00028_source.html	/^<a name="l00362"><\/a>00362     }$/;"	a
l00362	doxygen-html/a00030_source.html	/^<a name="l00362"><\/a>00362     }$/;"	a
l00362	doxygen-html/a00032_source.html	/^<a name="l00362"><\/a>00362 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an constant iterator<\/span>$/;"	a
l00362	doxygen-html/a00034_source.html	/^<a name="l00362"><\/a>00362 <span class="comment">    \/\/\/ to the key slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00363	doxygen-html/a00026_source.html	/^<a name="l00363"><\/a><a class="code" href="a00017.html#ab93769e06b9644f7f4c47416d59d312c">00363<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00017.html#ab93769e06b9644f7f4c47416d59d312c" title="Set the (key,data) pair in slot.">set_slot<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; value)$/;"	a
l00363	doxygen-html/a00028_source.html	/^<a name="l00363"><\/a>00363 <span class="comment"><\/span>$/;"	a
l00363	doxygen-html/a00030_source.html	/^<a name="l00363"><\/a>00363 <span class="comment"><\/span>$/;"	a
l00363	doxygen-html/a00032_source.html	/^<a name="l00363"><\/a>00363 <span class="comment">    \/\/\/ to the key slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l00363	doxygen-html/a00034_source.html	/^<a name="l00363"><\/a><a class="code" href="a00009.html#a4f4474b05a7a87b0ce0e9a451b25741d">00363<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00009.html#a7ed6ed0ae9f3993cedca7b7d8755be85" title="Tries to locate a key in the B+ tree and returns an iterator to the key slot if found.">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00364	doxygen-html/a00026_source.html	/^<a name="l00364"><\/a>00364         {$/;"	a
l00364	doxygen-html/a00028_source.html	/^<a name="l00364"><\/a>00364 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00364	doxygen-html/a00030_source.html	/^<a name="l00364"><\/a>00364 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00364	doxygen-html/a00032_source.html	/^<a name="l00364"><\/a><a class="code" href="a00006.html#ac3bf82364b3392aa056b866a012ac0d8">00364<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00006.html#a130a3b87e39b1d9ff8be6df80b942737" title="Tries to locate a key in the B+ tree and returns an iterator to the key slot if found.">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00364	doxygen-html/a00034_source.html	/^<a name="l00364"><\/a>00364 <span class="keyword">    <\/span>{$/;"	a
l00365	doxygen-html/a00026_source.html	/^<a name="l00365"><\/a>00365             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> == <span class="keyword">false<\/span>);$/;"	a
l00365	doxygen-html/a00028_source.html	/^<a name="l00365"><\/a>00365 <span class="comment">    \/\/\/ equal to or greater than key, or end() if all keys are smaller.<\/span>$/;"	a
l00365	doxygen-html/a00030_source.html	/^<a name="l00365"><\/a>00365 <span class="comment">    \/\/\/ equal to or greater than key, or end() if all keys are smaller.<\/span>$/;"	a
l00365	doxygen-html/a00032_source.html	/^<a name="l00365"><\/a>00365 <span class="keyword">    <\/span>{$/;"	a
l00365	doxygen-html/a00034_source.html	/^<a name="l00365"><\/a>00365         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00366	doxygen-html/a00026_source.html	/^<a name="l00366"><\/a>00366             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(slot &lt; <a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a>);$/;"	a
l00366	doxygen-html/a00028_source.html	/^<a name="l00366"><\/a><a class="code" href="a00004.html#a534cf90439e766792a48ff2ab73ddaf6">00366<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#a534cf90439e766792a48ff2ab73ddaf6" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00366	doxygen-html/a00030_source.html	/^<a name="l00366"><\/a><a class="code" href="a00005.html#a966752ba450e4fc9e373482569d6a2d4">00366<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a966752ba450e4fc9e373482569d6a2d4" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00366	doxygen-html/a00032_source.html	/^<a name="l00366"><\/a>00366         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(key);$/;"	a
l00366	doxygen-html/a00034_source.html	/^<a name="l00366"><\/a>00366     }$/;"	a
l00367	doxygen-html/a00026_source.html	/^<a name="l00367"><\/a>00367             <a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[slot] = value.first;$/;"	a
l00367	doxygen-html/a00028_source.html	/^<a name="l00367"><\/a>00367     {$/;"	a
l00367	doxygen-html/a00030_source.html	/^<a name="l00367"><\/a>00367     {$/;"	a
l00367	doxygen-html/a00032_source.html	/^<a name="l00367"><\/a>00367     }$/;"	a
l00367	doxygen-html/a00034_source.html	/^<a name="l00367"><\/a>00367 <span class="comment"><\/span>$/;"	a
l00368	doxygen-html/a00026_source.html	/^<a name="l00368"><\/a>00368             <a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[slot] = value.second;$/;"	a
l00368	doxygen-html/a00028_source.html	/^<a name="l00368"><\/a>00368         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00368	doxygen-html/a00030_source.html	/^<a name="l00368"><\/a>00368         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00368	doxygen-html/a00032_source.html	/^<a name="l00368"><\/a>00368 <span class="comment"><\/span>$/;"	a
l00368	doxygen-html/a00034_source.html	/^<a name="l00368"><\/a>00368 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns the number of<\/span>$/;"	a
l00369	doxygen-html/a00026_source.html	/^<a name="l00369"><\/a>00369         }$/;"	a
l00369	doxygen-html/a00028_source.html	/^<a name="l00369"><\/a>00369     }$/;"	a
l00369	doxygen-html/a00030_source.html	/^<a name="l00369"><\/a>00369     }$/;"	a
l00369	doxygen-html/a00032_source.html	/^<a name="l00369"><\/a>00369 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns the number of<\/span>$/;"	a
l00369	doxygen-html/a00034_source.html	/^<a name="l00369"><\/a>00369 <span class="comment">    \/\/\/ identical key entries found. As this is a unique set, count() returns<\/span>$/;"	a
l00370	doxygen-html/a00026_source.html	/^<a name="l00370"><\/a>00370 <span class="comment"><\/span>$/;"	a
l00370	doxygen-html/a00028_source.html	/^<a name="l00370"><\/a>00370 <span class="comment"><\/span>$/;"	a
l00370	doxygen-html/a00030_source.html	/^<a name="l00370"><\/a>00370 <span class="comment"><\/span>$/;"	a
l00370	doxygen-html/a00032_source.html	/^<a name="l00370"><\/a>00370 <span class="comment">    \/\/\/ identical key entries found.<\/span>$/;"	a
l00370	doxygen-html/a00034_source.html	/^<a name="l00370"><\/a>00370 <span class="comment">    \/\/\/ either 0 or 1.<\/span>$/;"	a
l00371	doxygen-html/a00026_source.html	/^<a name="l00371"><\/a>00371 <span class="comment">        \/\/\/ Set the key pair in slot. Overloaded function used by<\/span>$/;"	a
l00371	doxygen-html/a00028_source.html	/^<a name="l00371"><\/a>00371 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00371	doxygen-html/a00030_source.html	/^<a name="l00371"><\/a>00371 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00371	doxygen-html/a00032_source.html	/^<a name="l00371"><\/a><a class="code" href="a00006.html#ab2ae64a7de25306d48798d502de46b6c">00371<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00006.html#ab2ae64a7de25306d48798d502de46b6c" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00371	doxygen-html/a00034_source.html	/^<a name="l00371"><\/a><a class="code" href="a00009.html#a1dbbf865a4ad5a740419de17946b4a4c">00371<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00009.html#a1dbbf865a4ad5a740419de17946b4a4c" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l00372	doxygen-html/a00026_source.html	/^<a name="l00372"><\/a>00372 <span class="comment">        \/\/\/ bulk_load().<\/span>$/;"	a
l00372	doxygen-html/a00028_source.html	/^<a name="l00372"><\/a>00372 <span class="comment">    \/\/\/ first pair equal to or greater than key, or end() if all keys<\/span>$/;"	a
l00372	doxygen-html/a00030_source.html	/^<a name="l00372"><\/a>00372 <span class="comment">    \/\/\/ first pair equal to or greater than key, or end() if all keys<\/span>$/;"	a
l00372	doxygen-html/a00032_source.html	/^<a name="l00372"><\/a>00372 <span class="keyword">    <\/span>{$/;"	a
l00372	doxygen-html/a00034_source.html	/^<a name="l00372"><\/a>00372 <span class="keyword">    <\/span>{$/;"	a
l00373	doxygen-html/a00026_source.html	/^<a name="l00373"><\/a><a class="code" href="a00017.html#a3b2b782408d619ef8d0496930343015d">00373<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00017.html#ab93769e06b9644f7f4c47416d59d312c" title="Set the (key,data) pair in slot.">set_slot<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l00373	doxygen-html/a00028_source.html	/^<a name="l00373"><\/a>00373 <span class="comment">    \/\/\/ are smaller.<\/span>$/;"	a
l00373	doxygen-html/a00030_source.html	/^<a name="l00373"><\/a>00373 <span class="comment">    \/\/\/ are smaller.<\/span>$/;"	a
l00373	doxygen-html/a00032_source.html	/^<a name="l00373"><\/a>00373         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(key);$/;"	a
l00373	doxygen-html/a00034_source.html	/^<a name="l00373"><\/a>00373         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(key);$/;"	a
l00374	doxygen-html/a00026_source.html	/^<a name="l00374"><\/a>00374         {$/;"	a
l00374	doxygen-html/a00028_source.html	/^<a name="l00374"><\/a><a class="code" href="a00004.html#acdf38e14fcd031d9f315e2bb4d4feff3">00374<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00004.html#a534cf90439e766792a48ff2ab73ddaf6" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00374	doxygen-html/a00030_source.html	/^<a name="l00374"><\/a><a class="code" href="a00005.html#abe98b44e72292ab38b1894a892c7db0e">00374<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00005.html#a966752ba450e4fc9e373482569d6a2d4" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00374	doxygen-html/a00032_source.html	/^<a name="l00374"><\/a>00374     }$/;"	a
l00374	doxygen-html/a00034_source.html	/^<a name="l00374"><\/a>00374     }$/;"	a
l00375	doxygen-html/a00026_source.html	/^<a name="l00375"><\/a>00375             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> == <span class="keyword">true<\/span>);$/;"	a
l00375	doxygen-html/a00028_source.html	/^<a name="l00375"><\/a>00375 <span class="keyword">    <\/span>{$/;"	a
l00375	doxygen-html/a00030_source.html	/^<a name="l00375"><\/a>00375 <span class="keyword">    <\/span>{$/;"	a
l00375	doxygen-html/a00032_source.html	/^<a name="l00375"><\/a>00375 <span class="comment"><\/span>$/;"	a
l00375	doxygen-html/a00034_source.html	/^<a name="l00375"><\/a>00375 <span class="comment"><\/span>$/;"	a
l00376	doxygen-html/a00026_source.html	/^<a name="l00376"><\/a>00376             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(slot &lt; <a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">node::slotuse<\/a>);$/;"	a
l00376	doxygen-html/a00028_source.html	/^<a name="l00376"><\/a>00376         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00376	doxygen-html/a00030_source.html	/^<a name="l00376"><\/a>00376         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00376	doxygen-html/a00032_source.html	/^<a name="l00376"><\/a>00376 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00376	doxygen-html/a00034_source.html	/^<a name="l00376"><\/a>00376 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00377	doxygen-html/a00026_source.html	/^<a name="l00377"><\/a>00377             <a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[slot] = key;$/;"	a
l00377	doxygen-html/a00028_source.html	/^<a name="l00377"><\/a>00377     }$/;"	a
l00377	doxygen-html/a00030_source.html	/^<a name="l00377"><\/a>00377     }$/;"	a
l00377	doxygen-html/a00032_source.html	/^<a name="l00377"><\/a>00377 <span class="comment">    \/\/\/ equal to or greater than key, or end() if all keys are smaller.<\/span>$/;"	a
l00377	doxygen-html/a00034_source.html	/^<a name="l00377"><\/a>00377 <span class="comment">    \/\/\/ equal to or greater than key, or end() if all keys are smaller.<\/span>$/;"	a
l00378	doxygen-html/a00026_source.html	/^<a name="l00378"><\/a>00378         }$/;"	a
l00378	doxygen-html/a00028_source.html	/^<a name="l00378"><\/a>00378 <span class="comment"><\/span>$/;"	a
l00378	doxygen-html/a00030_source.html	/^<a name="l00378"><\/a>00378 <span class="comment"><\/span>$/;"	a
l00378	doxygen-html/a00032_source.html	/^<a name="l00378"><\/a><a class="code" href="a00006.html#acf1949d71f9c83184c98d084d66c56a4">00378<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#acf1949d71f9c83184c98d084d66c56a4" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00378	doxygen-html/a00034_source.html	/^<a name="l00378"><\/a><a class="code" href="a00009.html#ab9bce6f24080308ab099b2ea41adbba7">00378<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#ab9bce6f24080308ab099b2ea41adbba7" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l00379	doxygen-html/a00026_source.html	/^<a name="l00379"><\/a>00379     };$/;"	a
l00379	doxygen-html/a00028_source.html	/^<a name="l00379"><\/a>00379 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00379	doxygen-html/a00030_source.html	/^<a name="l00379"><\/a>00379 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00379	doxygen-html/a00032_source.html	/^<a name="l00379"><\/a>00379     {$/;"	a
l00379	doxygen-html/a00034_source.html	/^<a name="l00379"><\/a>00379     {$/;"	a
l00380	doxygen-html/a00026_source.html	/^<a name="l00380"><\/a>00380 $/;"	a
l00380	doxygen-html/a00028_source.html	/^<a name="l00380"><\/a>00380 <span class="comment">    \/\/\/ greater than key, or end() if all keys are smaller or equal.<\/span>$/;"	a
l00380	doxygen-html/a00030_source.html	/^<a name="l00380"><\/a>00380 <span class="comment">    \/\/\/ greater than key, or end() if all keys are smaller or equal.<\/span>$/;"	a
l00380	doxygen-html/a00032_source.html	/^<a name="l00380"><\/a>00380         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00380	doxygen-html/a00034_source.html	/^<a name="l00380"><\/a>00380         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00381	doxygen-html/a00026_source.html	/^<a name="l00381"><\/a>00381 <span class="keyword">private<\/span>:$/;"	a
l00381	doxygen-html/a00028_source.html	/^<a name="l00381"><\/a><a class="code" href="a00004.html#af9f856c49318bfc313306f19f1eaf017">00381<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#af9f856c49318bfc313306f19f1eaf017" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00381	doxygen-html/a00030_source.html	/^<a name="l00381"><\/a><a class="code" href="a00005.html#a383fe4dc086b012197acbae9ded8d35f">00381<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a383fe4dc086b012197acbae9ded8d35f" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00381	doxygen-html/a00032_source.html	/^<a name="l00381"><\/a>00381     }$/;"	a
l00381	doxygen-html/a00034_source.html	/^<a name="l00381"><\/a>00381     }$/;"	a
l00382	doxygen-html/a00026_source.html	/^<a name="l00382"><\/a>00382     <span class="comment">\/\/ *** Template Magic to Convert a pair or key\/data types to a value_type<\/span>$/;"	a
l00382	doxygen-html/a00028_source.html	/^<a name="l00382"><\/a>00382     {$/;"	a
l00382	doxygen-html/a00030_source.html	/^<a name="l00382"><\/a>00382     {$/;"	a
l00382	doxygen-html/a00032_source.html	/^<a name="l00382"><\/a>00382 <span class="comment"><\/span>$/;"	a
l00382	doxygen-html/a00034_source.html	/^<a name="l00382"><\/a>00382 <span class="comment"><\/span>$/;"	a
l00383	doxygen-html/a00026_source.html	/^<a name="l00383"><\/a>00383 <span class="comment"><\/span>$/;"	a
l00383	doxygen-html/a00028_source.html	/^<a name="l00383"><\/a>00383         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00383	doxygen-html/a00030_source.html	/^<a name="l00383"><\/a>00383         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00383	doxygen-html/a00032_source.html	/^<a name="l00383"><\/a>00383 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00383	doxygen-html/a00034_source.html	/^<a name="l00383"><\/a>00383 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00384	doxygen-html/a00026_source.html	/^<a name="l00384"><\/a>00384 <span class="comment">    \/\/\/ For sets the second pair_type is an empty struct, so the value_type<\/span>$/;"	a
l00384	doxygen-html/a00028_source.html	/^<a name="l00384"><\/a>00384     }$/;"	a
l00384	doxygen-html/a00030_source.html	/^<a name="l00384"><\/a>00384     }$/;"	a
l00384	doxygen-html/a00032_source.html	/^<a name="l00384"><\/a>00384 <span class="comment">    \/\/\/ first pair equal to or greater than key, or end() if all keys<\/span>$/;"	a
l00384	doxygen-html/a00034_source.html	/^<a name="l00384"><\/a>00384 <span class="comment">    \/\/\/ first pair equal to or greater than key, or end() if all keys<\/span>$/;"	a
l00385	doxygen-html/a00026_source.html	/^<a name="l00385"><\/a>00385 <span class="comment">    \/\/\/ should only be the first.<\/span>$/;"	a
l00385	doxygen-html/a00028_source.html	/^<a name="l00385"><\/a>00385 <span class="comment"><\/span>$/;"	a
l00385	doxygen-html/a00030_source.html	/^<a name="l00385"><\/a>00385 <span class="comment"><\/span>$/;"	a
l00385	doxygen-html/a00032_source.html	/^<a name="l00385"><\/a>00385 <span class="comment">    \/\/\/ are smaller.<\/span>$/;"	a
l00385	doxygen-html/a00034_source.html	/^<a name="l00385"><\/a>00385 <span class="comment">    \/\/\/ are smaller.<\/span>$/;"	a
l00386	doxygen-html/a00026_source.html	/^<a name="l00386"><\/a>00386 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> value_type, <span class="keyword">typename<\/span> pair_type&gt;$/;"	a
l00386	doxygen-html/a00028_source.html	/^<a name="l00386"><\/a>00386 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00386	doxygen-html/a00030_source.html	/^<a name="l00386"><\/a>00386 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00386	doxygen-html/a00032_source.html	/^<a name="l00386"><\/a><a class="code" href="a00006.html#afb5c018e2dd2c9f53a148ddf0781921d">00386<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00006.html#acf1949d71f9c83184c98d084d66c56a4" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00386	doxygen-html/a00034_source.html	/^<a name="l00386"><\/a><a class="code" href="a00009.html#a555d7bf9ca80b37707ed8a2f2427bd10">00386<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00009.html#ab9bce6f24080308ab099b2ea41adbba7" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00387	doxygen-html/a00026_source.html	/^<a name="l00387"><\/a><a class="code" href="a00007.html">00387<\/a>     <span class="keyword">struct <\/span><a class="code" href="a00007.html" title="For sets the second pair_type is an empty struct, so the value_type should only be the first...">btree_pair_to_value<\/a>$/;"	a
l00387	doxygen-html/a00028_source.html	/^<a name="l00387"><\/a>00387 <span class="comment">    \/\/\/ first pair greater than key, or end() if all keys are smaller<\/span>$/;"	a
l00387	doxygen-html/a00030_source.html	/^<a name="l00387"><\/a>00387 <span class="comment">    \/\/\/ first pair greater than key, or end() if all keys are smaller<\/span>$/;"	a
l00387	doxygen-html/a00032_source.html	/^<a name="l00387"><\/a>00387 <span class="keyword">    <\/span>{$/;"	a
l00387	doxygen-html/a00034_source.html	/^<a name="l00387"><\/a>00387 <span class="keyword">    <\/span>{$/;"	a
l00388	doxygen-html/a00026_source.html	/^<a name="l00388"><\/a>00388     {<span class="comment"><\/span>$/;"	a
l00388	doxygen-html/a00028_source.html	/^<a name="l00388"><\/a>00388 <span class="comment">    \/\/\/ or equal.<\/span>$/;"	a
l00388	doxygen-html/a00030_source.html	/^<a name="l00388"><\/a>00388 <span class="comment">    \/\/\/ or equal.<\/span>$/;"	a
l00388	doxygen-html/a00032_source.html	/^<a name="l00388"><\/a>00388         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00388	doxygen-html/a00034_source.html	/^<a name="l00388"><\/a>00388         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key);$/;"	a
l00389	doxygen-html/a00026_source.html	/^<a name="l00389"><\/a>00389 <span class="comment">        \/\/\/ Convert a fake pair type to just the first component<\/span>$/;"	a
l00389	doxygen-html/a00028_source.html	/^<a name="l00389"><\/a><a class="code" href="a00004.html#abc8bb5938b3b290089e668c1352625d3">00389<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a267163dd98f108686cf17f2604d2bf81" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00004.html#af9f856c49318bfc313306f19f1eaf017" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00389	doxygen-html/a00030_source.html	/^<a name="l00389"><\/a><a class="code" href="a00005.html#a9c40897d0188187c253cccb186042876">00389<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#a8994ae561b750a09e636040be65c5246" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00005.html#a383fe4dc086b012197acbae9ded8d35f" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00389	doxygen-html/a00032_source.html	/^<a name="l00389"><\/a>00389     }$/;"	a
l00389	doxygen-html/a00034_source.html	/^<a name="l00389"><\/a>00389     }$/;"	a
l00390	doxygen-html/a00026_source.html	/^<a name="l00390"><\/a><a class="code" href="a00007.html#adf06d39520a423a4a5de3982753025c3">00390<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a> <a class="code" href="a00007.html#adf06d39520a423a4a5de3982753025c3" title="Convert a fake pair type to just the first component.">operator()<\/a>(<a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; p)<span class="keyword"> const <\/span>{$/;"	a
l00390	doxygen-html/a00028_source.html	/^<a name="l00390"><\/a>00390 <span class="keyword">    <\/span>{$/;"	a
l00390	doxygen-html/a00030_source.html	/^<a name="l00390"><\/a>00390 <span class="keyword">    <\/span>{$/;"	a
l00390	doxygen-html/a00032_source.html	/^<a name="l00390"><\/a>00390 <span class="comment"><\/span>$/;"	a
l00390	doxygen-html/a00034_source.html	/^<a name="l00390"><\/a>00390 <span class="comment"><\/span>$/;"	a
l00391	doxygen-html/a00026_source.html	/^<a name="l00391"><\/a>00391             <span class="keywordflow">return<\/span> p.first;$/;"	a
l00391	doxygen-html/a00028_source.html	/^<a name="l00391"><\/a>00391         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00391	doxygen-html/a00030_source.html	/^<a name="l00391"><\/a>00391         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00391	doxygen-html/a00032_source.html	/^<a name="l00391"><\/a>00391 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00391	doxygen-html/a00034_source.html	/^<a name="l00391"><\/a>00391 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l00392	doxygen-html/a00026_source.html	/^<a name="l00392"><\/a>00392         }<span class="comment"><\/span>$/;"	a
l00392	doxygen-html/a00028_source.html	/^<a name="l00392"><\/a>00392     }$/;"	a
l00392	doxygen-html/a00030_source.html	/^<a name="l00392"><\/a>00392     }$/;"	a
l00392	doxygen-html/a00032_source.html	/^<a name="l00392"><\/a>00392 <span class="comment">    \/\/\/ greater than key, or end() if all keys are smaller or equal.<\/span>$/;"	a
l00392	doxygen-html/a00034_source.html	/^<a name="l00392"><\/a>00392 <span class="comment">    \/\/\/ greater than key, or end() if all keys are smaller or equal.<\/span>$/;"	a
l00393	doxygen-html/a00026_source.html	/^<a name="l00393"><\/a>00393 <span class="comment">        \/\/\/ Convert a fake pair type to just the first component<\/span>$/;"	a
l00393	doxygen-html/a00028_source.html	/^<a name="l00393"><\/a>00393 <span class="comment"><\/span>$/;"	a
l00393	doxygen-html/a00030_source.html	/^<a name="l00393"><\/a>00393 <span class="comment"><\/span>$/;"	a
l00393	doxygen-html/a00032_source.html	/^<a name="l00393"><\/a><a class="code" href="a00006.html#a5e1197bbc27c927ebe4087541d601f20">00393<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#a5e1197bbc27c927ebe4087541d601f20" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00393	doxygen-html/a00034_source.html	/^<a name="l00393"><\/a><a class="code" href="a00009.html#ab135d588af2fbdf1631a722b9014c524">00393<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#ab135d588af2fbdf1631a722b9014c524" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l00394	doxygen-html/a00026_source.html	/^<a name="l00394"><\/a><a class="code" href="a00007.html#a1cac939fc310be496b995ae11d7056d8">00394<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a> <a class="code" href="a00007.html#a1cac939fc310be496b995ae11d7056d8" title="Convert a fake pair type to just the first component.">operator()<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; p)<span class="keyword"> const <\/span>{$/;"	a
l00394	doxygen-html/a00028_source.html	/^<a name="l00394"><\/a>00394 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00394	doxygen-html/a00030_source.html	/^<a name="l00394"><\/a>00394 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00394	doxygen-html/a00032_source.html	/^<a name="l00394"><\/a>00394     {$/;"	a
l00394	doxygen-html/a00034_source.html	/^<a name="l00394"><\/a>00394     {$/;"	a
l00395	doxygen-html/a00026_source.html	/^<a name="l00395"><\/a>00395             <span class="keywordflow">return<\/span> p.first;$/;"	a
l00395	doxygen-html/a00028_source.html	/^<a name="l00395"><\/a><a class="code" href="a00004.html#afd2d85bdaf138d241147f99ea4e02d19">00395<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, iterator&gt; <a class="code" href="a00004.html#afd2d85bdaf138d241147f99ea4e02d19" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00395	doxygen-html/a00030_source.html	/^<a name="l00395"><\/a><a class="code" href="a00005.html#a2cea662bd204a5d6cd5a994636368a08">00395<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, iterator&gt; <a class="code" href="a00005.html#a2cea662bd204a5d6cd5a994636368a08" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00395	doxygen-html/a00032_source.html	/^<a name="l00395"><\/a>00395         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00395	doxygen-html/a00034_source.html	/^<a name="l00395"><\/a>00395         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00396	doxygen-html/a00026_source.html	/^<a name="l00396"><\/a>00396         }$/;"	a
l00396	doxygen-html/a00028_source.html	/^<a name="l00396"><\/a>00396     {$/;"	a
l00396	doxygen-html/a00030_source.html	/^<a name="l00396"><\/a>00396     {$/;"	a
l00396	doxygen-html/a00032_source.html	/^<a name="l00396"><\/a>00396     }$/;"	a
l00396	doxygen-html/a00034_source.html	/^<a name="l00396"><\/a>00396     }$/;"	a
l00397	doxygen-html/a00026_source.html	/^<a name="l00397"><\/a>00397     };$/;"	a
l00397	doxygen-html/a00028_source.html	/^<a name="l00397"><\/a>00397         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00397	doxygen-html/a00030_source.html	/^<a name="l00397"><\/a>00397         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00397	doxygen-html/a00032_source.html	/^<a name="l00397"><\/a>00397 <span class="comment"><\/span>$/;"	a
l00397	doxygen-html/a00034_source.html	/^<a name="l00397"><\/a>00397 <span class="comment"><\/span>$/;"	a
l00398	doxygen-html/a00026_source.html	/^<a name="l00398"><\/a>00398 <span class="comment"><\/span>$/;"	a
l00398	doxygen-html/a00028_source.html	/^<a name="l00398"><\/a>00398     }$/;"	a
l00398	doxygen-html/a00030_source.html	/^<a name="l00398"><\/a>00398     }$/;"	a
l00398	doxygen-html/a00032_source.html	/^<a name="l00398"><\/a>00398 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00398	doxygen-html/a00034_source.html	/^<a name="l00398"><\/a>00398 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l00399	doxygen-html/a00026_source.html	/^<a name="l00399"><\/a>00399 <span class="comment">    \/\/\/ For maps value_type is the same as the pair_type<\/span>$/;"	a
l00399	doxygen-html/a00028_source.html	/^<a name="l00399"><\/a>00399 <span class="comment"><\/span>$/;"	a
l00399	doxygen-html/a00030_source.html	/^<a name="l00399"><\/a>00399 <span class="comment"><\/span>$/;"	a
l00399	doxygen-html/a00032_source.html	/^<a name="l00399"><\/a>00399 <span class="comment">    \/\/\/ first pair greater than key, or end() if all keys are smaller<\/span>$/;"	a
l00399	doxygen-html/a00034_source.html	/^<a name="l00399"><\/a>00399 <span class="comment">    \/\/\/ first pair greater than key, or end() if all keys are smaller<\/span>$/;"	a
l00400	doxygen-html/a00026_source.html	/^<a name="l00400"><\/a>00400 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> value_type&gt;$/;"	a
l00400	doxygen-html/a00028_source.html	/^<a name="l00400"><\/a>00400 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00400	doxygen-html/a00030_source.html	/^<a name="l00400"><\/a>00400 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00400	doxygen-html/a00032_source.html	/^<a name="l00400"><\/a>00400 <span class="comment">    \/\/\/ or equal.<\/span>$/;"	a
l00400	doxygen-html/a00034_source.html	/^<a name="l00400"><\/a>00400 <span class="comment">    \/\/\/ or equal.<\/span>$/;"	a
l00401	doxygen-html/a00026_source.html	/^<a name="l00401"><\/a><a class="code" href="a00008.html">00401<\/a>     <span class="keyword">struct <\/span><a class="code" href="a00007.html" title="For sets the second pair_type is an empty struct, so the value_type should only be the first...">btree_pair_to_value<\/a>&lt;<a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>, <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>&gt;$/;"	a
l00401	doxygen-html/a00028_source.html	/^<a name="l00401"><\/a><a class="code" href="a00004.html#aefa6fc135b3f91255e868560461e524d">00401<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;const_iterator, const_iterator&gt; <a class="code" href="a00004.html#afd2d85bdaf138d241147f99ea4e02d19" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00401	doxygen-html/a00030_source.html	/^<a name="l00401"><\/a><a class="code" href="a00005.html#a0f4f44a5553b3b0afe077e15e2204c18">00401<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;const_iterator, const_iterator&gt; <a class="code" href="a00005.html#a2cea662bd204a5d6cd5a994636368a08" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00401	doxygen-html/a00032_source.html	/^<a name="l00401"><\/a><a class="code" href="a00006.html#a5833bec011824d4b54b716b685ae74ca">00401<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#ac3b6e263ec2f54cab4e541b02e2156bf" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00006.html#a5e1197bbc27c927ebe4087541d601f20" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00401	doxygen-html/a00034_source.html	/^<a name="l00401"><\/a><a class="code" href="a00009.html#a8cccc9b19e58b5c37f3f40ffd8ae3978">00401<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#aa5d3d9c7b1218e5680f653fd8f9d8996" title="STL-like iterator object for B+ tree items.">const_iterator<\/a> <a class="code" href="a00009.html#ab135d588af2fbdf1631a722b9014c524" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00402	doxygen-html/a00026_source.html	/^<a name="l00402"><\/a>00402     {<span class="comment"><\/span>$/;"	a
l00402	doxygen-html/a00028_source.html	/^<a name="l00402"><\/a>00402 <span class="keyword">    <\/span>{$/;"	a
l00402	doxygen-html/a00030_source.html	/^<a name="l00402"><\/a>00402 <span class="keyword">    <\/span>{$/;"	a
l00402	doxygen-html/a00032_source.html	/^<a name="l00402"><\/a>00402 <span class="keyword">    <\/span>{$/;"	a
l00402	doxygen-html/a00034_source.html	/^<a name="l00402"><\/a>00402 <span class="keyword">    <\/span>{$/;"	a
l00403	doxygen-html/a00026_source.html	/^<a name="l00403"><\/a>00403 <span class="comment">        \/\/\/ Identity &quot;convert&quot; a real pair type to just the first component<\/span>$/;"	a
l00403	doxygen-html/a00028_source.html	/^<a name="l00403"><\/a>00403         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00403	doxygen-html/a00030_source.html	/^<a name="l00403"><\/a>00403         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00403	doxygen-html/a00032_source.html	/^<a name="l00403"><\/a>00403         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00403	doxygen-html/a00034_source.html	/^<a name="l00403"><\/a>00403         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key);$/;"	a
l00404	doxygen-html/a00026_source.html	/^<a name="l00404"><\/a><a class="code" href="a00008.html#a95aefcd10d430360cbdeb2cddb04bfcd">00404<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a> <a class="code" href="a00008.html#a95aefcd10d430360cbdeb2cddb04bfcd" title="Identity &quot;convert&quot; a real pair type to just the first component.">operator()<\/a>(<a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; p)<span class="keyword"> const <\/span>{$/;"	a
l00404	doxygen-html/a00028_source.html	/^<a name="l00404"><\/a>00404     }$/;"	a
l00404	doxygen-html/a00030_source.html	/^<a name="l00404"><\/a>00404     }$/;"	a
l00404	doxygen-html/a00032_source.html	/^<a name="l00404"><\/a>00404     }$/;"	a
l00404	doxygen-html/a00034_source.html	/^<a name="l00404"><\/a>00404     }$/;"	a
l00405	doxygen-html/a00026_source.html	/^<a name="l00405"><\/a>00405             <span class="keywordflow">return<\/span> p;$/;"	a
l00405	doxygen-html/a00028_source.html	/^<a name="l00405"><\/a>00405 $/;"	a
l00405	doxygen-html/a00030_source.html	/^<a name="l00405"><\/a>00405 $/;"	a
l00405	doxygen-html/a00032_source.html	/^<a name="l00405"><\/a>00405 <span class="comment"><\/span>$/;"	a
l00405	doxygen-html/a00034_source.html	/^<a name="l00405"><\/a>00405 <span class="comment"><\/span>$/;"	a
l00406	doxygen-html/a00026_source.html	/^<a name="l00406"><\/a>00406         }<span class="comment"><\/span>$/;"	a
l00406	doxygen-html/a00028_source.html	/^<a name="l00406"><\/a>00406 <span class="keyword">public<\/span>:$/;"	a
l00406	doxygen-html/a00030_source.html	/^<a name="l00406"><\/a>00406 <span class="keyword">public<\/span>:$/;"	a
l00406	doxygen-html/a00032_source.html	/^<a name="l00406"><\/a>00406 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00406	doxygen-html/a00034_source.html	/^<a name="l00406"><\/a>00406 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00407	doxygen-html/a00026_source.html	/^<a name="l00407"><\/a>00407 <span class="comment">        \/\/\/ Identity &quot;convert&quot; a real pair type to just the first component<\/span>$/;"	a
l00407	doxygen-html/a00028_source.html	/^<a name="l00407"><\/a>00407     <span class="comment">\/\/ *** B+ Tree Object Comparison Functions<\/span>$/;"	a
l00407	doxygen-html/a00030_source.html	/^<a name="l00407"><\/a>00407     <span class="comment">\/\/ *** B+ Tree Object Comparison Functions<\/span>$/;"	a
l00407	doxygen-html/a00032_source.html	/^<a name="l00407"><\/a><a class="code" href="a00006.html#a405388c6589746b4a01af6ab8a4b4321">00407<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, iterator&gt; <a class="code" href="a00006.html#a405388c6589746b4a01af6ab8a4b4321" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00407	doxygen-html/a00034_source.html	/^<a name="l00407"><\/a><a class="code" href="a00009.html#af023de2dd94f574e312e8e9f5515bd8c">00407<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, iterator&gt; <a class="code" href="a00009.html#af023de2dd94f574e312e8e9f5515bd8c" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l00408	doxygen-html/a00026_source.html	/^<a name="l00408"><\/a><a class="code" href="a00008.html#a0d3e61d7f25f9de525f295ad24a85140">00408<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a> <a class="code" href="a00008.html#a0d3e61d7f25f9de525f295ad24a85140" title="Identity &quot;convert&quot; a real pair type to just the first component.">operator()<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; p)<span class="keyword"> const <\/span>{$/;"	a
l00408	doxygen-html/a00028_source.html	/^<a name="l00408"><\/a>00408 <span class="comment"><\/span>$/;"	a
l00408	doxygen-html/a00030_source.html	/^<a name="l00408"><\/a>00408 <span class="comment"><\/span>$/;"	a
l00408	doxygen-html/a00032_source.html	/^<a name="l00408"><\/a>00408     {$/;"	a
l00408	doxygen-html/a00034_source.html	/^<a name="l00408"><\/a>00408     {$/;"	a
l00409	doxygen-html/a00026_source.html	/^<a name="l00409"><\/a>00409             <span class="keywordflow">return<\/span> p;$/;"	a
l00409	doxygen-html/a00028_source.html	/^<a name="l00409"><\/a>00409 <span class="comment">    \/\/\/ Equality relation of B+ trees of the same type. B+ trees of the same<\/span>$/;"	a
l00409	doxygen-html/a00030_source.html	/^<a name="l00409"><\/a>00409 <span class="comment">    \/\/\/ Equality relation of B+ trees of the same type. B+ trees of the same<\/span>$/;"	a
l00409	doxygen-html/a00032_source.html	/^<a name="l00409"><\/a>00409         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00409	doxygen-html/a00034_source.html	/^<a name="l00409"><\/a>00409         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00410	doxygen-html/a00026_source.html	/^<a name="l00410"><\/a>00410         }$/;"	a
l00410	doxygen-html/a00028_source.html	/^<a name="l00410"><\/a>00410 <span class="comment">    \/\/\/ size and equal elements (both key and data) are considered<\/span>$/;"	a
l00410	doxygen-html/a00030_source.html	/^<a name="l00410"><\/a>00410 <span class="comment">    \/\/\/ size and equal elements (both key and data) are considered<\/span>$/;"	a
l00410	doxygen-html/a00032_source.html	/^<a name="l00410"><\/a>00410     }$/;"	a
l00410	doxygen-html/a00034_source.html	/^<a name="l00410"><\/a>00410     }$/;"	a
l00411	doxygen-html/a00026_source.html	/^<a name="l00411"><\/a>00411     };$/;"	a
l00411	doxygen-html/a00028_source.html	/^<a name="l00411"><\/a>00411 <span class="comment">    \/\/\/ equal.<\/span>$/;"	a
l00411	doxygen-html/a00030_source.html	/^<a name="l00411"><\/a>00411 <span class="comment">    \/\/\/ equal. Beware of the random ordering of duplicate keys.<\/span>$/;"	a
l00411	doxygen-html/a00032_source.html	/^<a name="l00411"><\/a>00411 <span class="comment"><\/span>$/;"	a
l00411	doxygen-html/a00034_source.html	/^<a name="l00411"><\/a>00411 <span class="comment"><\/span>$/;"	a
l00412	doxygen-html/a00026_source.html	/^<a name="l00412"><\/a>00412 <span class="comment"><\/span>$/;"	a
l00412	doxygen-html/a00028_source.html	/^<a name="l00412"><\/a><a class="code" href="a00004.html#a2fdda35a2a822e8fe45cda8f5f02dd3f">00412<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a2fdda35a2a822e8fe45cda8f5f02dd3f" title="Equality relation of B+ trees of the same type.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00412	doxygen-html/a00030_source.html	/^<a name="l00412"><\/a><a class="code" href="a00005.html#a28eb83b95a403ae4e22e857a53f1c312">00412<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a28eb83b95a403ae4e22e857a53f1c312" title="Equality relation of B+ trees of the same type.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00412	doxygen-html/a00032_source.html	/^<a name="l00412"><\/a>00412 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00412	doxygen-html/a00034_source.html	/^<a name="l00412"><\/a>00412 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l00413	doxygen-html/a00026_source.html	/^<a name="l00413"><\/a>00413 <span class="comment">    \/\/\/ Using template specialization select the correct converter used by the<\/span>$/;"	a
l00413	doxygen-html/a00028_source.html	/^<a name="l00413"><\/a>00413 <span class="keyword">    <\/span>{$/;"	a
l00413	doxygen-html/a00030_source.html	/^<a name="l00413"><\/a>00413 <span class="keyword">    <\/span>{$/;"	a
l00413	doxygen-html/a00032_source.html	/^<a name="l00413"><\/a><a class="code" href="a00006.html#aeffb8c7205996ac1a5ac40976f47a96f">00413<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;const_iterator, const_iterator&gt; <a class="code" href="a00006.html#a405388c6589746b4a01af6ab8a4b4321" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00413	doxygen-html/a00034_source.html	/^<a name="l00413"><\/a><a class="code" href="a00009.html#ac9dc81052691280fb5fd0b091c08ea0a">00413<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;const_iterator, const_iterator&gt; <a class="code" href="a00009.html#af023de2dd94f574e312e8e9f5515bd8c" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l00414	doxygen-html/a00026_source.html	/^<a name="l00414"><\/a>00414 <span class="comment">    \/\/\/ iterators<\/span>$/;"	a
l00414	doxygen-html/a00028_source.html	/^<a name="l00414"><\/a>00414         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> == other.tree);$/;"	a
l00414	doxygen-html/a00030_source.html	/^<a name="l00414"><\/a>00414         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> == other.tree);$/;"	a
l00414	doxygen-html/a00032_source.html	/^<a name="l00414"><\/a>00414 <span class="keyword">    <\/span>{$/;"	a
l00414	doxygen-html/a00034_source.html	/^<a name="l00414"><\/a>00414 <span class="keyword">    <\/span>{$/;"	a
l00415	doxygen-html/a00026_source.html	/^<a name="l00415"><\/a><a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce">00415<\/a> <span class="comment"><\/span>    <span class="keyword">typedef<\/span> btree_pair_to_value&lt;value_type, pair_type&gt; <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>;$/;"	a
l00415	doxygen-html/a00028_source.html	/^<a name="l00415"><\/a>00415     }$/;"	a
l00415	doxygen-html/a00030_source.html	/^<a name="l00415"><\/a>00415     }$/;"	a
l00415	doxygen-html/a00032_source.html	/^<a name="l00415"><\/a>00415         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00415	doxygen-html/a00034_source.html	/^<a name="l00415"><\/a>00415         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(key);$/;"	a
l00416	doxygen-html/a00026_source.html	/^<a name="l00416"><\/a>00416 $/;"	a
l00416	doxygen-html/a00028_source.html	/^<a name="l00416"><\/a>00416 <span class="comment"><\/span>$/;"	a
l00416	doxygen-html/a00030_source.html	/^<a name="l00416"><\/a>00416 <span class="comment"><\/span>$/;"	a
l00416	doxygen-html/a00032_source.html	/^<a name="l00416"><\/a>00416     }$/;"	a
l00416	doxygen-html/a00034_source.html	/^<a name="l00416"><\/a>00416     }$/;"	a
l00417	doxygen-html/a00026_source.html	/^<a name="l00417"><\/a>00417 <span class="keyword">public<\/span>:$/;"	a
l00417	doxygen-html/a00028_source.html	/^<a name="l00417"><\/a>00417 <span class="comment">    \/\/\/ Inequality relation. Based on operator==.<\/span>$/;"	a
l00417	doxygen-html/a00030_source.html	/^<a name="l00417"><\/a>00417 <span class="comment">    \/\/\/ Inequality relation. Based on operator==.<\/span>$/;"	a
l00417	doxygen-html/a00032_source.html	/^<a name="l00417"><\/a>00417 $/;"	a
l00417	doxygen-html/a00034_source.html	/^<a name="l00417"><\/a>00417 $/;"	a
l00418	doxygen-html/a00026_source.html	/^<a name="l00418"><\/a>00418     <span class="comment">\/\/ *** Iterators and Reverse Iterators<\/span>$/;"	a
l00418	doxygen-html/a00028_source.html	/^<a name="l00418"><\/a><a class="code" href="a00004.html#a5246dc846558507311336980cc81ddcb">00418<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a5246dc846558507311336980cc81ddcb" title="Inequality relation. Based on operator==.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00418	doxygen-html/a00030_source.html	/^<a name="l00418"><\/a><a class="code" href="a00005.html#a776810538e2694bb322d7acbfe1d40bb">00418<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a776810538e2694bb322d7acbfe1d40bb" title="Inequality relation. Based on operator==.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00418	doxygen-html/a00032_source.html	/^<a name="l00418"><\/a>00418 <span class="keyword">public<\/span>:$/;"	a
l00418	doxygen-html/a00034_source.html	/^<a name="l00418"><\/a>00418 <span class="keyword">public<\/span>:$/;"	a
l00419	doxygen-html/a00026_source.html	/^<a name="l00419"><\/a>00419 $/;"	a
l00419	doxygen-html/a00028_source.html	/^<a name="l00419"><\/a>00419 <span class="keyword">    <\/span>{$/;"	a
l00419	doxygen-html/a00030_source.html	/^<a name="l00419"><\/a>00419 <span class="keyword">    <\/span>{$/;"	a
l00419	doxygen-html/a00032_source.html	/^<a name="l00419"><\/a>00419     <span class="comment">\/\/ *** B+ Tree Object Comparison Functions<\/span>$/;"	a
l00419	doxygen-html/a00034_source.html	/^<a name="l00419"><\/a>00419     <span class="comment">\/\/ *** B+ Tree Object Comparison Functions<\/span>$/;"	a
l00420	doxygen-html/a00026_source.html	/^<a name="l00420"><\/a>00420     <span class="keyword">class <\/span>iterator;$/;"	a
l00420	doxygen-html/a00028_source.html	/^<a name="l00420"><\/a>00420         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> != other.tree);$/;"	a
l00420	doxygen-html/a00030_source.html	/^<a name="l00420"><\/a>00420         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> != other.tree);$/;"	a
l00420	doxygen-html/a00032_source.html	/^<a name="l00420"><\/a>00420 <span class="comment"><\/span>$/;"	a
l00420	doxygen-html/a00034_source.html	/^<a name="l00420"><\/a>00420 <span class="comment"><\/span>$/;"	a
l00421	doxygen-html/a00026_source.html	/^<a name="l00421"><\/a>00421     <span class="keyword">class <\/span>const_iterator;$/;"	a
l00421	doxygen-html/a00028_source.html	/^<a name="l00421"><\/a>00421     }$/;"	a
l00421	doxygen-html/a00030_source.html	/^<a name="l00421"><\/a>00421     }$/;"	a
l00421	doxygen-html/a00032_source.html	/^<a name="l00421"><\/a>00421 <span class="comment">    \/\/\/ Equality relation of B+ trees of the same type. B+ trees of the same<\/span>$/;"	a
l00421	doxygen-html/a00034_source.html	/^<a name="l00421"><\/a>00421 <span class="comment">    \/\/\/ Equality relation of B+ trees of the same type. B+ trees of the same<\/span>$/;"	a
l00422	doxygen-html/a00026_source.html	/^<a name="l00422"><\/a>00422     <span class="keyword">class <\/span>reverse_iterator;$/;"	a
l00422	doxygen-html/a00028_source.html	/^<a name="l00422"><\/a>00422 <span class="comment"><\/span>$/;"	a
l00422	doxygen-html/a00030_source.html	/^<a name="l00422"><\/a>00422 <span class="comment"><\/span>$/;"	a
l00422	doxygen-html/a00032_source.html	/^<a name="l00422"><\/a>00422 <span class="comment">    \/\/\/ size and equal key (counts) are considered equal.<\/span>$/;"	a
l00422	doxygen-html/a00034_source.html	/^<a name="l00422"><\/a>00422 <span class="comment">    \/\/\/ size and equal elements are considered equal.<\/span>$/;"	a
l00423	doxygen-html/a00026_source.html	/^<a name="l00423"><\/a>00423     <span class="keyword">class <\/span>const_reverse_iterator;$/;"	a
l00423	doxygen-html/a00028_source.html	/^<a name="l00423"><\/a>00423 <span class="comment">    \/\/\/ Total ordering relation of B+ trees of the same type. It uses<\/span>$/;"	a
l00423	doxygen-html/a00030_source.html	/^<a name="l00423"><\/a>00423 <span class="comment">    \/\/\/ Total ordering relation of B+ trees of the same type. It uses<\/span>$/;"	a
l00423	doxygen-html/a00032_source.html	/^<a name="l00423"><\/a><a class="code" href="a00006.html#a8151cc2608a7a0634d5a94e3824f8e34">00423<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a8151cc2608a7a0634d5a94e3824f8e34" title="Equality relation of B+ trees of the same type.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00423	doxygen-html/a00034_source.html	/^<a name="l00423"><\/a><a class="code" href="a00009.html#a7151704256c80cf7bc413b48bea52b75">00423<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a7151704256c80cf7bc413b48bea52b75" title="Equality relation of B+ trees of the same type.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00424	doxygen-html/a00026_source.html	/^<a name="l00424"><\/a>00424 <span class="comment"><\/span>$/;"	a
l00424	doxygen-html/a00028_source.html	/^<a name="l00424"><\/a>00424 <span class="comment">    \/\/\/ std::lexicographical_compare() for the actual comparison of elements.<\/span>$/;"	a
l00424	doxygen-html/a00030_source.html	/^<a name="l00424"><\/a>00424 <span class="comment">    \/\/\/ std::lexicographical_compare() for the actual comparison of elements.<\/span>$/;"	a
l00424	doxygen-html/a00032_source.html	/^<a name="l00424"><\/a>00424 <span class="keyword">    <\/span>{$/;"	a
l00424	doxygen-html/a00034_source.html	/^<a name="l00424"><\/a>00424 <span class="keyword">    <\/span>{$/;"	a
l00425	doxygen-html/a00026_source.html	/^<a name="l00425"><\/a>00425 <span class="comment">    \/\/\/ STL-like iterator object for B+ tree items. The iterator points to a<\/span>$/;"	a
l00425	doxygen-html/a00028_source.html	/^<a name="l00425"><\/a><a class="code" href="a00004.html#aa9045db3cfebd6e60b0000531a5fdeb6">00425<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#aa9045db3cfebd6e60b0000531a5fdeb6" title="Total ordering relation of B+ trees of the same type.">operator&lt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00425	doxygen-html/a00030_source.html	/^<a name="l00425"><\/a><a class="code" href="a00005.html#a6a5db9c99ef0795047d9830ca874835b">00425<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a6a5db9c99ef0795047d9830ca874835b" title="Total ordering relation of B+ trees of the same type.">operator&lt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00425	doxygen-html/a00032_source.html	/^<a name="l00425"><\/a>00425         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> == other.tree);$/;"	a
l00425	doxygen-html/a00034_source.html	/^<a name="l00425"><\/a>00425         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> == other.tree);$/;"	a
l00426	doxygen-html/a00026_source.html	/^<a name="l00426"><\/a>00426 <span class="comment">    \/\/\/ specific slot number in a leaf.<\/span>$/;"	a
l00426	doxygen-html/a00028_source.html	/^<a name="l00426"><\/a>00426 <span class="keyword">    <\/span>{$/;"	a
l00426	doxygen-html/a00030_source.html	/^<a name="l00426"><\/a>00426 <span class="keyword">    <\/span>{$/;"	a
l00426	doxygen-html/a00032_source.html	/^<a name="l00426"><\/a>00426     }$/;"	a
l00426	doxygen-html/a00034_source.html	/^<a name="l00426"><\/a>00426     }$/;"	a
l00427	doxygen-html/a00026_source.html	/^<a name="l00427"><\/a><a class="code" href="a00016.html">00427<\/a> <span class="comment"><\/span>    <span class="keyword">class <\/span><a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a>$/;"	a
l00427	doxygen-html/a00028_source.html	/^<a name="l00427"><\/a>00427         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> &lt; other.tree);$/;"	a
l00427	doxygen-html/a00030_source.html	/^<a name="l00427"><\/a>00427         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> &lt; other.tree);$/;"	a
l00427	doxygen-html/a00032_source.html	/^<a name="l00427"><\/a>00427 <span class="comment"><\/span>$/;"	a
l00427	doxygen-html/a00034_source.html	/^<a name="l00427"><\/a>00427 <span class="comment"><\/span>$/;"	a
l00428	doxygen-html/a00026_source.html	/^<a name="l00428"><\/a>00428     {$/;"	a
l00428	doxygen-html/a00028_source.html	/^<a name="l00428"><\/a>00428     }$/;"	a
l00428	doxygen-html/a00030_source.html	/^<a name="l00428"><\/a>00428     }$/;"	a
l00428	doxygen-html/a00032_source.html	/^<a name="l00428"><\/a>00428 <span class="comment">    \/\/\/ Inequality relation. Based on operator==.<\/span>$/;"	a
l00428	doxygen-html/a00034_source.html	/^<a name="l00428"><\/a>00428 <span class="comment">    \/\/\/ Inequality relation. Based on operator==.<\/span>$/;"	a
l00429	doxygen-html/a00026_source.html	/^<a name="l00429"><\/a>00429     <span class="keyword">public<\/span>:$/;"	a
l00429	doxygen-html/a00028_source.html	/^<a name="l00429"><\/a>00429 <span class="comment"><\/span>$/;"	a
l00429	doxygen-html/a00030_source.html	/^<a name="l00429"><\/a>00429 <span class="comment"><\/span>$/;"	a
l00429	doxygen-html/a00032_source.html	/^<a name="l00429"><\/a><a class="code" href="a00006.html#ae9ad03cbc3be10a4a972b06ec9abedec">00429<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#ae9ad03cbc3be10a4a972b06ec9abedec" title="Inequality relation. Based on operator==.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00429	doxygen-html/a00034_source.html	/^<a name="l00429"><\/a><a class="code" href="a00009.html#a164d435a3f3c3ba2a00a4f4c8f1a91b2">00429<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a164d435a3f3c3ba2a00a4f4c8f1a91b2" title="Inequality relation. Based on operator==.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00430	doxygen-html/a00026_source.html	/^<a name="l00430"><\/a>00430         <span class="comment">\/\/ *** Types<\/span>$/;"	a
l00430	doxygen-html/a00028_source.html	/^<a name="l00430"><\/a>00430 <span class="comment">    \/\/\/ Greater relation. Based on operator&lt;.<\/span>$/;"	a
l00430	doxygen-html/a00030_source.html	/^<a name="l00430"><\/a>00430 <span class="comment">    \/\/\/ Greater relation. Based on operator&lt;.<\/span>$/;"	a
l00430	doxygen-html/a00032_source.html	/^<a name="l00430"><\/a>00430 <span class="keyword">    <\/span>{$/;"	a
l00430	doxygen-html/a00034_source.html	/^<a name="l00430"><\/a>00430 <span class="keyword">    <\/span>{$/;"	a
l00431	doxygen-html/a00026_source.html	/^<a name="l00431"><\/a>00431 <span class="comment"><\/span>$/;"	a
l00431	doxygen-html/a00028_source.html	/^<a name="l00431"><\/a><a class="code" href="a00004.html#a4b4a740ce7e953d1010fcbb6634a0df8">00431<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a4b4a740ce7e953d1010fcbb6634a0df8" title="Greater relation. Based on operator&lt;.">operator&gt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00431	doxygen-html/a00030_source.html	/^<a name="l00431"><\/a><a class="code" href="a00005.html#adee49a9016375954653fb9e636b34fd4">00431<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#adee49a9016375954653fb9e636b34fd4" title="Greater relation. Based on operator&lt;.">operator&gt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00431	doxygen-html/a00032_source.html	/^<a name="l00431"><\/a>00431         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> != other.tree);$/;"	a
l00431	doxygen-html/a00034_source.html	/^<a name="l00431"><\/a>00431         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> != other.tree);$/;"	a
l00432	doxygen-html/a00026_source.html	/^<a name="l00432"><\/a>00432 <span class="comment">        \/\/\/ The key type of the btree. Returned by key().<\/span>$/;"	a
l00432	doxygen-html/a00028_source.html	/^<a name="l00432"><\/a>00432 <span class="keyword">    <\/span>{$/;"	a
l00432	doxygen-html/a00030_source.html	/^<a name="l00432"><\/a>00432 <span class="keyword">    <\/span>{$/;"	a
l00432	doxygen-html/a00032_source.html	/^<a name="l00432"><\/a>00432     }$/;"	a
l00432	doxygen-html/a00034_source.html	/^<a name="l00432"><\/a>00432     }$/;"	a
l00433	doxygen-html/a00026_source.html	/^<a name="l00433"><\/a><a class="code" href="a00016.html#a8b03fc63a85738411711197143596475">00433<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">btree::key_type<\/a>                <a class="code" href="a00016.html#a8b03fc63a85738411711197143596475" title="The key type of the btree. Returned by key().">key_type<\/a>;$/;"	a
l00433	doxygen-html/a00028_source.html	/^<a name="l00433"><\/a>00433         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> &gt; other.tree);$/;"	a
l00433	doxygen-html/a00030_source.html	/^<a name="l00433"><\/a>00433         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> &gt; other.tree);$/;"	a
l00433	doxygen-html/a00032_source.html	/^<a name="l00433"><\/a>00433 <span class="comment"><\/span>$/;"	a
l00433	doxygen-html/a00034_source.html	/^<a name="l00433"><\/a>00433 <span class="comment"><\/span>$/;"	a
l00434	doxygen-html/a00026_source.html	/^<a name="l00434"><\/a>00434 <span class="comment"><\/span>$/;"	a
l00434	doxygen-html/a00028_source.html	/^<a name="l00434"><\/a>00434     }$/;"	a
l00434	doxygen-html/a00030_source.html	/^<a name="l00434"><\/a>00434     }$/;"	a
l00434	doxygen-html/a00032_source.html	/^<a name="l00434"><\/a>00434 <span class="comment">    \/\/\/ Total ordering relation of B+ trees of the same type. It uses<\/span>$/;"	a
l00434	doxygen-html/a00034_source.html	/^<a name="l00434"><\/a>00434 <span class="comment">    \/\/\/ Total ordering relation of B+ trees of the same type. It uses<\/span>$/;"	a
l00435	doxygen-html/a00026_source.html	/^<a name="l00435"><\/a>00435 <span class="comment">        \/\/\/ The data type of the btree. Returned by data().<\/span>$/;"	a
l00435	doxygen-html/a00028_source.html	/^<a name="l00435"><\/a>00435 <span class="comment"><\/span>$/;"	a
l00435	doxygen-html/a00030_source.html	/^<a name="l00435"><\/a>00435 <span class="comment"><\/span>$/;"	a
l00435	doxygen-html/a00032_source.html	/^<a name="l00435"><\/a>00435 <span class="comment">    \/\/\/ std::lexicographical_compare() for the actual comparison of elements.<\/span>$/;"	a
l00435	doxygen-html/a00034_source.html	/^<a name="l00435"><\/a>00435 <span class="comment">    \/\/\/ std::lexicographical_compare() for the actual comparison of elements.<\/span>$/;"	a
l00436	doxygen-html/a00026_source.html	/^<a name="l00436"><\/a><a class="code" href="a00016.html#ac28707a6e23e871cb85c7ff7f8119c73">00436<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">btree::data_type<\/a>               <a class="code" href="a00016.html#ac28707a6e23e871cb85c7ff7f8119c73" title="The data type of the btree. Returned by data().">data_type<\/a>;$/;"	a
l00436	doxygen-html/a00028_source.html	/^<a name="l00436"><\/a>00436 <span class="comment">    \/\/\/ Less-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00436	doxygen-html/a00030_source.html	/^<a name="l00436"><\/a>00436 <span class="comment">    \/\/\/ Less-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00436	doxygen-html/a00032_source.html	/^<a name="l00436"><\/a><a class="code" href="a00006.html#a2dcdf9bb9c5e2eea56e9308388b07349">00436<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a2dcdf9bb9c5e2eea56e9308388b07349" title="Total ordering relation of B+ trees of the same type.">operator&lt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00436	doxygen-html/a00034_source.html	/^<a name="l00436"><\/a><a class="code" href="a00009.html#a9e637bfa9b10589da6af42ac17048976">00436<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a9e637bfa9b10589da6af42ac17048976" title="Total ordering relation of B+ trees of the same type.">operator&lt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00437	doxygen-html/a00026_source.html	/^<a name="l00437"><\/a>00437 <span class="comment"><\/span>$/;"	a
l00437	doxygen-html/a00028_source.html	/^<a name="l00437"><\/a><a class="code" href="a00004.html#a34082a4270e0f5de6a6c3ba06bd3476a">00437<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a34082a4270e0f5de6a6c3ba06bd3476a" title="Less-equal relation. Based on operator&lt;.">operator&lt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00437	doxygen-html/a00030_source.html	/^<a name="l00437"><\/a><a class="code" href="a00005.html#a3307b73ee5b14e6b9448e8d015d6f6ca">00437<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a3307b73ee5b14e6b9448e8d015d6f6ca" title="Less-equal relation. Based on operator&lt;.">operator&lt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00437	doxygen-html/a00032_source.html	/^<a name="l00437"><\/a>00437 <span class="keyword">    <\/span>{$/;"	a
l00437	doxygen-html/a00034_source.html	/^<a name="l00437"><\/a>00437 <span class="keyword">    <\/span>{$/;"	a
l00438	doxygen-html/a00026_source.html	/^<a name="l00438"><\/a>00438 <span class="comment">        \/\/\/ The value type of the btree. Returned by operator*().<\/span>$/;"	a
l00438	doxygen-html/a00028_source.html	/^<a name="l00438"><\/a>00438 <span class="keyword">    <\/span>{$/;"	a
l00438	doxygen-html/a00030_source.html	/^<a name="l00438"><\/a>00438 <span class="keyword">    <\/span>{$/;"	a
l00438	doxygen-html/a00032_source.html	/^<a name="l00438"><\/a>00438         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> &lt; other.tree);$/;"	a
l00438	doxygen-html/a00034_source.html	/^<a name="l00438"><\/a>00438         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> &lt; other.tree);$/;"	a
l00439	doxygen-html/a00026_source.html	/^<a name="l00439"><\/a><a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f">00439<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">btree::value_type<\/a>              <a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f" title="The value type of the btree. Returned by operator*().">value_type<\/a>;$/;"	a
l00439	doxygen-html/a00028_source.html	/^<a name="l00439"><\/a>00439         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> &lt;= other.tree);$/;"	a
l00439	doxygen-html/a00030_source.html	/^<a name="l00439"><\/a>00439         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> &lt;= other.tree);$/;"	a
l00439	doxygen-html/a00032_source.html	/^<a name="l00439"><\/a>00439     }$/;"	a
l00439	doxygen-html/a00034_source.html	/^<a name="l00439"><\/a>00439     }$/;"	a
l00440	doxygen-html/a00026_source.html	/^<a name="l00440"><\/a>00440 <span class="comment"><\/span>$/;"	a
l00440	doxygen-html/a00028_source.html	/^<a name="l00440"><\/a>00440     }$/;"	a
l00440	doxygen-html/a00030_source.html	/^<a name="l00440"><\/a>00440     }$/;"	a
l00440	doxygen-html/a00032_source.html	/^<a name="l00440"><\/a>00440 <span class="comment"><\/span>$/;"	a
l00440	doxygen-html/a00034_source.html	/^<a name="l00440"><\/a>00440 <span class="comment"><\/span>$/;"	a
l00441	doxygen-html/a00026_source.html	/^<a name="l00441"><\/a>00441 <span class="comment">        \/\/\/ The pair type of the btree.<\/span>$/;"	a
l00441	doxygen-html/a00028_source.html	/^<a name="l00441"><\/a>00441 <span class="comment"><\/span>$/;"	a
l00441	doxygen-html/a00030_source.html	/^<a name="l00441"><\/a>00441 <span class="comment"><\/span>$/;"	a
l00441	doxygen-html/a00032_source.html	/^<a name="l00441"><\/a>00441 <span class="comment">    \/\/\/ Greater relation. Based on operator&lt;.<\/span>$/;"	a
l00441	doxygen-html/a00034_source.html	/^<a name="l00441"><\/a>00441 <span class="comment">    \/\/\/ Greater relation. Based on operator&lt;.<\/span>$/;"	a
l00442	doxygen-html/a00026_source.html	/^<a name="l00442"><\/a><a class="code" href="a00016.html#a2b722e1077949a356115387bfd606d63">00442<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">btree::pair_type<\/a>               <a class="code" href="a00016.html#a2b722e1077949a356115387bfd606d63" title="The pair type of the btree.">pair_type<\/a>;$/;"	a
l00442	doxygen-html/a00028_source.html	/^<a name="l00442"><\/a>00442 <span class="comment">    \/\/\/ Greater-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00442	doxygen-html/a00030_source.html	/^<a name="l00442"><\/a>00442 <span class="comment">    \/\/\/ Greater-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00442	doxygen-html/a00032_source.html	/^<a name="l00442"><\/a><a class="code" href="a00006.html#a7c85cec4d55431ea5e057602ba8fe5a0">00442<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a7c85cec4d55431ea5e057602ba8fe5a0" title="Greater relation. Based on operator&lt;.">operator&gt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00442	doxygen-html/a00034_source.html	/^<a name="l00442"><\/a><a class="code" href="a00009.html#a201df2577f43d59328a442f38bbb6e30">00442<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a201df2577f43d59328a442f38bbb6e30" title="Greater relation. Based on operator&lt;.">operator&gt;<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00443	doxygen-html/a00026_source.html	/^<a name="l00443"><\/a>00443 <span class="comment"><\/span>$/;"	a
l00443	doxygen-html/a00028_source.html	/^<a name="l00443"><\/a><a class="code" href="a00004.html#a04fdaf66979b5191d70d0dfacb601c0b">00443<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a04fdaf66979b5191d70d0dfacb601c0b" title="Greater-equal relation. Based on operator&lt;.">operator&gt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00443	doxygen-html/a00030_source.html	/^<a name="l00443"><\/a><a class="code" href="a00005.html#aa6feaadc9209791ac4b324b9fbaec951">00443<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#aa6feaadc9209791ac4b324b9fbaec951" title="Greater-equal relation. Based on operator&lt;.">operator&gt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00443	doxygen-html/a00032_source.html	/^<a name="l00443"><\/a>00443 <span class="keyword">    <\/span>{$/;"	a
l00443	doxygen-html/a00034_source.html	/^<a name="l00443"><\/a>00443 <span class="keyword">    <\/span>{$/;"	a
l00444	doxygen-html/a00026_source.html	/^<a name="l00444"><\/a>00444 <span class="comment">        \/\/\/ Reference to the value_type. STL required.<\/span>$/;"	a
l00444	doxygen-html/a00028_source.html	/^<a name="l00444"><\/a>00444 <span class="keyword">    <\/span>{$/;"	a
l00444	doxygen-html/a00030_source.html	/^<a name="l00444"><\/a>00444 <span class="keyword">    <\/span>{$/;"	a
l00444	doxygen-html/a00032_source.html	/^<a name="l00444"><\/a>00444         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> &gt; other.tree);$/;"	a
l00444	doxygen-html/a00034_source.html	/^<a name="l00444"><\/a>00444         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> &gt; other.tree);$/;"	a
l00445	doxygen-html/a00026_source.html	/^<a name="l00445"><\/a><a class="code" href="a00016.html#ae1af55705fdbcf4a78144fbd6b3df028">00445<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f" title="The value type of the btree. Returned by operator*().">value_type<\/a>&amp;             <a class="code" href="a00016.html#ae1af55705fdbcf4a78144fbd6b3df028" title="Reference to the value_type. STL required.">reference<\/a>;$/;"	a
l00445	doxygen-html/a00028_source.html	/^<a name="l00445"><\/a>00445         <span class="keywordflow">return<\/span> (<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> &gt;= other.tree);$/;"	a
l00445	doxygen-html/a00030_source.html	/^<a name="l00445"><\/a>00445         <span class="keywordflow">return<\/span> (<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> &gt;= other.tree);$/;"	a
l00445	doxygen-html/a00032_source.html	/^<a name="l00445"><\/a>00445     }$/;"	a
l00445	doxygen-html/a00034_source.html	/^<a name="l00445"><\/a>00445     }$/;"	a
l00446	doxygen-html/a00026_source.html	/^<a name="l00446"><\/a>00446 <span class="comment"><\/span>$/;"	a
l00446	doxygen-html/a00028_source.html	/^<a name="l00446"><\/a>00446     }$/;"	a
l00446	doxygen-html/a00030_source.html	/^<a name="l00446"><\/a>00446     }$/;"	a
l00446	doxygen-html/a00032_source.html	/^<a name="l00446"><\/a>00446 <span class="comment"><\/span>$/;"	a
l00446	doxygen-html/a00034_source.html	/^<a name="l00446"><\/a>00446 <span class="comment"><\/span>$/;"	a
l00447	doxygen-html/a00026_source.html	/^<a name="l00447"><\/a>00447 <span class="comment">        \/\/\/ Pointer to the value_type. STL required.<\/span>$/;"	a
l00447	doxygen-html/a00028_source.html	/^<a name="l00447"><\/a>00447 $/;"	a
l00447	doxygen-html/a00030_source.html	/^<a name="l00447"><\/a>00447 $/;"	a
l00447	doxygen-html/a00032_source.html	/^<a name="l00447"><\/a>00447 <span class="comment">    \/\/\/ Less-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00447	doxygen-html/a00034_source.html	/^<a name="l00447"><\/a>00447 <span class="comment">    \/\/\/ Less-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00448	doxygen-html/a00026_source.html	/^<a name="l00448"><\/a><a class="code" href="a00016.html#adfe951a60a834784653dac6d883f73a8">00448<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f" title="The value type of the btree. Returned by operator*().">value_type<\/a>*             <a class="code" href="a00016.html#adfe951a60a834784653dac6d883f73a8" title="Pointer to the value_type. STL required.">pointer<\/a>;$/;"	a
l00448	doxygen-html/a00028_source.html	/^<a name="l00448"><\/a>00448 <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l00448	doxygen-html/a00030_source.html	/^<a name="l00448"><\/a>00448 <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l00448	doxygen-html/a00032_source.html	/^<a name="l00448"><\/a><a class="code" href="a00006.html#a35de24d784f61ae794c1fa56fa9c6673">00448<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a35de24d784f61ae794c1fa56fa9c6673" title="Less-equal relation. Based on operator&lt;.">operator&lt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00448	doxygen-html/a00034_source.html	/^<a name="l00448"><\/a><a class="code" href="a00009.html#a9ce20587b88f126796b6e3784680f66e">00448<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a9ce20587b88f126796b6e3784680f66e" title="Less-equal relation. Based on operator&lt;.">operator&lt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00449	doxygen-html/a00026_source.html	/^<a name="l00449"><\/a>00449 <span class="comment"><\/span>$/;"	a
l00449	doxygen-html/a00028_source.html	/^<a name="l00449"><\/a>00449 <span class="comment">    \/\/\/ *** Fast Copy: Assign Operator and Copy Constructors<\/span>$/;"	a
l00449	doxygen-html/a00030_source.html	/^<a name="l00449"><\/a>00449 <span class="comment">    \/\/\/ *** Fast Copy: Assign Operator and Copy Constructors<\/span>$/;"	a
l00449	doxygen-html/a00032_source.html	/^<a name="l00449"><\/a>00449 <span class="keyword">    <\/span>{$/;"	a
l00449	doxygen-html/a00034_source.html	/^<a name="l00449"><\/a>00449 <span class="keyword">    <\/span>{$/;"	a
l00450	doxygen-html/a00026_source.html	/^<a name="l00450"><\/a>00450 <span class="comment">        \/\/\/ STL-magic iterator category<\/span>$/;"	a
l00450	doxygen-html/a00028_source.html	/^<a name="l00450"><\/a>00450 <span class="comment"><\/span><span class="comment"><\/span>$/;"	a
l00450	doxygen-html/a00030_source.html	/^<a name="l00450"><\/a>00450 <span class="comment"><\/span><span class="comment"><\/span>$/;"	a
l00450	doxygen-html/a00032_source.html	/^<a name="l00450"><\/a>00450         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> &lt;= other.tree);$/;"	a
l00450	doxygen-html/a00034_source.html	/^<a name="l00450"><\/a>00450         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> &lt;= other.tree);$/;"	a
l00451	doxygen-html/a00026_source.html	/^<a name="l00451"><\/a><a class="code" href="a00016.html#ac67229e1e4649f4b77a27dcbd0beb41d">00451<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> std::bidirectional_iterator_tag <a class="code" href="a00016.html#ac67229e1e4649f4b77a27dcbd0beb41d" title="STL-magic iterator category.">iterator_category<\/a>;$/;"	a
l00451	doxygen-html/a00028_source.html	/^<a name="l00451"><\/a>00451 <span class="comment">    \/\/\/ Assignment operator. All the key\/data pairs are copied<\/span>$/;"	a
l00451	doxygen-html/a00030_source.html	/^<a name="l00451"><\/a>00451 <span class="comment">    \/\/\/ Assignment operator. All the key\/data pairs are copied<\/span>$/;"	a
l00451	doxygen-html/a00032_source.html	/^<a name="l00451"><\/a>00451     }$/;"	a
l00451	doxygen-html/a00034_source.html	/^<a name="l00451"><\/a>00451     }$/;"	a
l00452	doxygen-html/a00026_source.html	/^<a name="l00452"><\/a>00452 <span class="comment"><\/span>$/;"	a
l00452	doxygen-html/a00028_source.html	/^<a name="l00452"><\/a><a class="code" href="a00004.html#a77317e7900903cd29f67b548a8d3ed46">00452<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00004.html#a77317e7900903cd29f67b548a8d3ed46" title="*** Fast Copy: Assign Operator and Copy Constructors">operator= <\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00452	doxygen-html/a00030_source.html	/^<a name="l00452"><\/a><a class="code" href="a00005.html#ac46186ae3adf35e4ed2a2f3146294f2a">00452<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00005.html#ac46186ae3adf35e4ed2a2f3146294f2a" title="*** Fast Copy: Assign Operator and Copy Constructors">operator= <\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00452	doxygen-html/a00032_source.html	/^<a name="l00452"><\/a>00452 <span class="comment"><\/span>$/;"	a
l00452	doxygen-html/a00034_source.html	/^<a name="l00452"><\/a>00452 <span class="comment"><\/span>$/;"	a
l00453	doxygen-html/a00026_source.html	/^<a name="l00453"><\/a>00453 <span class="comment">        \/\/\/ STL-magic<\/span>$/;"	a
l00453	doxygen-html/a00028_source.html	/^<a name="l00453"><\/a>00453     {$/;"	a
l00453	doxygen-html/a00030_source.html	/^<a name="l00453"><\/a>00453     {$/;"	a
l00453	doxygen-html/a00032_source.html	/^<a name="l00453"><\/a>00453 <span class="comment">    \/\/\/ Greater-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00453	doxygen-html/a00034_source.html	/^<a name="l00453"><\/a>00453 <span class="comment">    \/\/\/ Greater-equal relation. Based on operator&lt;.<\/span>$/;"	a
l00454	doxygen-html/a00026_source.html	/^<a name="l00454"><\/a><a class="code" href="a00016.html#a7a8fd55d12a4cb472bcae87285737d77">00454<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> ptrdiff_t               <a class="code" href="a00016.html#a7a8fd55d12a4cb472bcae87285737d77" title="STL-magic.">difference_type<\/a>;$/;"	a
l00454	doxygen-html/a00028_source.html	/^<a name="l00454"><\/a>00454         <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> != &amp;other)$/;"	a
l00454	doxygen-html/a00030_source.html	/^<a name="l00454"><\/a>00454         <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> != &amp;other)$/;"	a
l00454	doxygen-html/a00032_source.html	/^<a name="l00454"><\/a><a class="code" href="a00006.html#a603b031718fb9bb00d0edefc58d560c3">00454<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a603b031718fb9bb00d0edefc58d560c3" title="Greater-equal relation. Based on operator&lt;.">operator&gt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00454	doxygen-html/a00034_source.html	/^<a name="l00454"><\/a><a class="code" href="a00009.html#afefedc35ea11d982c716860a921f2a24">00454<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#afefedc35ea11d982c716860a921f2a24" title="Greater-equal relation. Based on operator&lt;.">operator&gt;=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l00455	doxygen-html/a00026_source.html	/^<a name="l00455"><\/a>00455 <span class="comment"><\/span>$/;"	a
l00455	doxygen-html/a00028_source.html	/^<a name="l00455"><\/a>00455         {$/;"	a
l00455	doxygen-html/a00030_source.html	/^<a name="l00455"><\/a>00455         {$/;"	a
l00455	doxygen-html/a00032_source.html	/^<a name="l00455"><\/a>00455 <span class="keyword">    <\/span>{$/;"	a
l00455	doxygen-html/a00034_source.html	/^<a name="l00455"><\/a>00455 <span class="keyword">    <\/span>{$/;"	a
l00456	doxygen-html/a00026_source.html	/^<a name="l00456"><\/a>00456 <span class="comment">        \/\/\/ Our own type<\/span>$/;"	a
l00456	doxygen-html/a00028_source.html	/^<a name="l00456"><\/a>00456             <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a> = other.tree;$/;"	a
l00456	doxygen-html/a00030_source.html	/^<a name="l00456"><\/a>00456             <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a> = other.tree;$/;"	a
l00456	doxygen-html/a00032_source.html	/^<a name="l00456"><\/a>00456         <span class="keywordflow">return<\/span> (<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> &gt;= other.tree);$/;"	a
l00456	doxygen-html/a00034_source.html	/^<a name="l00456"><\/a>00456         <span class="keywordflow">return<\/span> (<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> &gt;= other.tree);$/;"	a
l00457	doxygen-html/a00026_source.html	/^<a name="l00457"><\/a><a class="code" href="a00016.html#a88e3dfff3f3d4601b35cfd4e7f477960">00457<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a>                <span class="keyword">self<\/span>;$/;"	a
l00457	doxygen-html/a00028_source.html	/^<a name="l00457"><\/a>00457         }$/;"	a
l00457	doxygen-html/a00030_source.html	/^<a name="l00457"><\/a>00457         }$/;"	a
l00457	doxygen-html/a00032_source.html	/^<a name="l00457"><\/a>00457     }$/;"	a
l00457	doxygen-html/a00034_source.html	/^<a name="l00457"><\/a>00457     }$/;"	a
l00458	doxygen-html/a00026_source.html	/^<a name="l00458"><\/a>00458 $/;"	a
l00458	doxygen-html/a00028_source.html	/^<a name="l00458"><\/a>00458         <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00458	doxygen-html/a00030_source.html	/^<a name="l00458"><\/a>00458         <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00458	doxygen-html/a00032_source.html	/^<a name="l00458"><\/a>00458 $/;"	a
l00458	doxygen-html/a00034_source.html	/^<a name="l00458"><\/a>00458 $/;"	a
l00459	doxygen-html/a00026_source.html	/^<a name="l00459"><\/a>00459     <span class="keyword">private<\/span>:$/;"	a
l00459	doxygen-html/a00028_source.html	/^<a name="l00459"><\/a>00459     }$/;"	a
l00459	doxygen-html/a00030_source.html	/^<a name="l00459"><\/a>00459     }$/;"	a
l00459	doxygen-html/a00032_source.html	/^<a name="l00459"><\/a>00459 <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l00459	doxygen-html/a00034_source.html	/^<a name="l00459"><\/a>00459 <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l00460	doxygen-html/a00026_source.html	/^<a name="l00460"><\/a>00460         <span class="comment">\/\/ *** Members<\/span>$/;"	a
l00460	doxygen-html/a00028_source.html	/^<a name="l00460"><\/a>00460 <span class="comment"><\/span>$/;"	a
l00460	doxygen-html/a00030_source.html	/^<a name="l00460"><\/a>00460 <span class="comment"><\/span>$/;"	a
l00460	doxygen-html/a00032_source.html	/^<a name="l00460"><\/a>00460 <span class="comment">    \/\/\/ *** Fast Copy: Assign Operator and Copy Constructors<\/span>$/;"	a
l00460	doxygen-html/a00034_source.html	/^<a name="l00460"><\/a>00460 <span class="comment">    \/\/\/ *** Fast Copy: Assign Operator and Copy Constructors<\/span>$/;"	a
l00461	doxygen-html/a00026_source.html	/^<a name="l00461"><\/a>00461 <span class="comment"><\/span>$/;"	a
l00461	doxygen-html/a00028_source.html	/^<a name="l00461"><\/a>00461 <span class="comment">    \/\/\/ Copy constructor. The newly initialized B+ tree object will contain a<\/span>$/;"	a
l00461	doxygen-html/a00030_source.html	/^<a name="l00461"><\/a>00461 <span class="comment">    \/\/\/ Copy constructor. The newly initialized B+ tree object will contain a<\/span>$/;"	a
l00461	doxygen-html/a00032_source.html	/^<a name="l00461"><\/a>00461 <span class="comment"><\/span><span class="comment"><\/span>$/;"	a
l00461	doxygen-html/a00034_source.html	/^<a name="l00461"><\/a>00461 <span class="comment"><\/span><span class="comment"><\/span>$/;"	a
l00462	doxygen-html/a00026_source.html	/^<a name="l00462"><\/a>00462 <span class="comment">        \/\/\/ The currently referenced leaf node of the tree<\/span>$/;"	a
l00462	doxygen-html/a00028_source.html	/^<a name="l00462"><\/a>00462 <span class="comment">    \/\/\/ copy of all key\/data pairs.<\/span>$/;"	a
l00462	doxygen-html/a00030_source.html	/^<a name="l00462"><\/a>00462 <span class="comment">    \/\/\/ copy or all key\/data pairs.<\/span>$/;"	a
l00462	doxygen-html/a00032_source.html	/^<a name="l00462"><\/a>00462 <span class="comment">    \/\/\/ Assignment operator. All the keys are copied<\/span>$/;"	a
l00462	doxygen-html/a00034_source.html	/^<a name="l00462"><\/a>00462 <span class="comment">    \/\/\/ Assignment operator. All the keys are copied<\/span>$/;"	a
l00463	doxygen-html/a00026_source.html	/^<a name="l00463"><\/a><a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4">00463<\/a> <span class="comment"><\/span>        <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a>*      <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>;$/;"	a
l00463	doxygen-html/a00028_source.html	/^<a name="l00463"><\/a><a class="code" href="a00004.html#a27d93017393e732c42e73bb1762815af">00463<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#aa00c6e1abb83866bb9c96098808677c9" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_map<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00463	doxygen-html/a00030_source.html	/^<a name="l00463"><\/a><a class="code" href="a00005.html#a52cd4e7dd5a8d75e71292985de7837af">00463<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#af5437efbbc9ea35223ac6bfbcfbaf05c" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multimap<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00463	doxygen-html/a00032_source.html	/^<a name="l00463"><\/a><a class="code" href="a00006.html#a3e8081765077002a2cbc04e20506f03d">00463<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00006.html#a3e8081765077002a2cbc04e20506f03d" title="*** Fast Copy: Assign Operator and Copy Constructors">operator= <\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00463	doxygen-html/a00034_source.html	/^<a name="l00463"><\/a><a class="code" href="a00009.html#a36ba21d19bf0aa1bc6b2ffb8e4ea8cfc">00463<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00009.html#a36ba21d19bf0aa1bc6b2ffb8e4ea8cfc" title="*** Fast Copy: Assign Operator and Copy Constructors">operator= <\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00464	doxygen-html/a00026_source.html	/^<a name="l00464"><\/a>00464 <span class="comment"><\/span>$/;"	a
l00464	doxygen-html/a00028_source.html	/^<a name="l00464"><\/a>00464         : <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>(other.<a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>)$/;"	a
l00464	doxygen-html/a00030_source.html	/^<a name="l00464"><\/a>00464         : <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>(other.<a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>)$/;"	a
l00464	doxygen-html/a00032_source.html	/^<a name="l00464"><\/a>00464     {$/;"	a
l00464	doxygen-html/a00034_source.html	/^<a name="l00464"><\/a>00464     {$/;"	a
l00465	doxygen-html/a00026_source.html	/^<a name="l00465"><\/a>00465 <span class="comment">        \/\/\/ Current key\/data slot referenced<\/span>$/;"	a
l00465	doxygen-html/a00028_source.html	/^<a name="l00465"><\/a>00465     {$/;"	a
l00465	doxygen-html/a00030_source.html	/^<a name="l00465"><\/a>00465     {$/;"	a
l00465	doxygen-html/a00032_source.html	/^<a name="l00465"><\/a>00465         <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> != &amp;other)$/;"	a
l00465	doxygen-html/a00034_source.html	/^<a name="l00465"><\/a>00465         <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> != &amp;other)$/;"	a
l00466	doxygen-html/a00026_source.html	/^<a name="l00466"><\/a><a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8">00466<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>          <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00466	doxygen-html/a00028_source.html	/^<a name="l00466"><\/a>00466     }$/;"	a
l00466	doxygen-html/a00030_source.html	/^<a name="l00466"><\/a>00466     }$/;"	a
l00466	doxygen-html/a00032_source.html	/^<a name="l00466"><\/a>00466         {$/;"	a
l00466	doxygen-html/a00034_source.html	/^<a name="l00466"><\/a>00466         {$/;"	a
l00467	doxygen-html/a00026_source.html	/^<a name="l00467"><\/a>00467 <span class="comment"><\/span>$/;"	a
l00467	doxygen-html/a00028_source.html	/^<a name="l00467"><\/a>00467 $/;"	a
l00467	doxygen-html/a00030_source.html	/^<a name="l00467"><\/a>00467 $/;"	a
l00467	doxygen-html/a00032_source.html	/^<a name="l00467"><\/a>00467             <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a> = other.tree;$/;"	a
l00467	doxygen-html/a00034_source.html	/^<a name="l00467"><\/a>00467             <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a> = other.tree;$/;"	a
l00468	doxygen-html/a00026_source.html	/^<a name="l00468"><\/a>00468 <span class="comment">        \/\/\/ Friendly to the const_iterator, so it may access the two data items<\/span>$/;"	a
l00468	doxygen-html/a00028_source.html	/^<a name="l00468"><\/a>00468 <span class="keyword">public<\/span>:$/;"	a
l00468	doxygen-html/a00030_source.html	/^<a name="l00468"><\/a>00468 <span class="keyword">public<\/span>:$/;"	a
l00468	doxygen-html/a00032_source.html	/^<a name="l00468"><\/a>00468         }$/;"	a
l00468	doxygen-html/a00034_source.html	/^<a name="l00468"><\/a>00468         }$/;"	a
l00469	doxygen-html/a00026_source.html	/^<a name="l00469"><\/a>00469 <span class="comment">        \/\/\/ directly.<\/span>$/;"	a
l00469	doxygen-html/a00028_source.html	/^<a name="l00469"><\/a>00469     <span class="comment">\/\/ *** Public Insertion Functions<\/span>$/;"	a
l00469	doxygen-html/a00030_source.html	/^<a name="l00469"><\/a>00469     <span class="comment">\/\/ *** Public Insertion Functions<\/span>$/;"	a
l00469	doxygen-html/a00032_source.html	/^<a name="l00469"><\/a>00469         <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00469	doxygen-html/a00034_source.html	/^<a name="l00469"><\/a>00469         <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00470	doxygen-html/a00026_source.html	/^<a name="l00470"><\/a><a class="code" href="a00016.html#ac220ce1c155db1ac44146c12d178056f">00470<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00010.html" title="STL-like read-only iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00470	doxygen-html/a00028_source.html	/^<a name="l00470"><\/a>00470 <span class="comment"><\/span>$/;"	a
l00470	doxygen-html/a00030_source.html	/^<a name="l00470"><\/a>00470 <span class="comment"><\/span>$/;"	a
l00470	doxygen-html/a00032_source.html	/^<a name="l00470"><\/a>00470     }$/;"	a
l00470	doxygen-html/a00034_source.html	/^<a name="l00470"><\/a>00470     }$/;"	a
l00471	doxygen-html/a00026_source.html	/^<a name="l00471"><\/a>00471 <span class="comment"><\/span>$/;"	a
l00471	doxygen-html/a00028_source.html	/^<a name="l00471"><\/a>00471 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. Fails if the pair<\/span>$/;"	a
l00471	doxygen-html/a00030_source.html	/^<a name="l00471"><\/a>00471 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. As this tree allows<\/span>$/;"	a
l00471	doxygen-html/a00032_source.html	/^<a name="l00471"><\/a>00471 <span class="comment"><\/span>$/;"	a
l00471	doxygen-html/a00034_source.html	/^<a name="l00471"><\/a>00471 <span class="comment"><\/span>$/;"	a
l00472	doxygen-html/a00026_source.html	/^<a name="l00472"><\/a>00472 <span class="comment">        \/\/\/ Also friendly to the reverse_iterator, so it may access the two<\/span>$/;"	a
l00472	doxygen-html/a00028_source.html	/^<a name="l00472"><\/a>00472 <span class="comment">    \/\/\/ is already present.<\/span>$/;"	a
l00472	doxygen-html/a00030_source.html	/^<a name="l00472"><\/a>00472 <span class="comment">    \/\/\/ duplicates insertion never fails.<\/span>$/;"	a
l00472	doxygen-html/a00032_source.html	/^<a name="l00472"><\/a>00472 <span class="comment">    \/\/\/ Copy constructor. The newly initialized B+ tree object will contain a<\/span>$/;"	a
l00472	doxygen-html/a00034_source.html	/^<a name="l00472"><\/a>00472 <span class="comment">    \/\/\/ Copy constructor. The newly initialized B+ tree object will contain a<\/span>$/;"	a
l00473	doxygen-html/a00026_source.html	/^<a name="l00473"><\/a>00473 <span class="comment">        \/\/\/ data items directly.<\/span>$/;"	a
l00473	doxygen-html/a00028_source.html	/^<a name="l00473"><\/a><a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1">00473<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>&amp; x)$/;"	a
l00473	doxygen-html/a00030_source.html	/^<a name="l00473"><\/a><a class="code" href="a00005.html#ae333d92079886a0c0b2a2d32201b712f">00473<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#ae333d92079886a0c0b2a2d32201b712f" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#aa9c86e804b95247c742db5ad7b9351fe" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>&amp; x)$/;"	a
l00473	doxygen-html/a00032_source.html	/^<a name="l00473"><\/a>00473 <span class="comment">    \/\/\/ copy of all keys.<\/span>$/;"	a
l00473	doxygen-html/a00034_source.html	/^<a name="l00473"><\/a>00473 <span class="comment">    \/\/\/ copy of all keys.<\/span>$/;"	a
l00474	doxygen-html/a00026_source.html	/^<a name="l00474"><\/a><a class="code" href="a00016.html#af0a70641f2216cc31420487a62dd3b0d">00474<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a>;$/;"	a
l00474	doxygen-html/a00028_source.html	/^<a name="l00474"><\/a>00474     {$/;"	a
l00474	doxygen-html/a00030_source.html	/^<a name="l00474"><\/a>00474     {$/;"	a
l00474	doxygen-html/a00032_source.html	/^<a name="l00474"><\/a><a class="code" href="a00006.html#a988a8fc330955bc3e74976865c841904">00474<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#ae51979526a758ca48dff71269509d30d" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_multiset<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00474	doxygen-html/a00034_source.html	/^<a name="l00474"><\/a><a class="code" href="a00009.html#af37409eb0e66f7d3e80b8ad29470118b">00474<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a45a3f6e426f588acd351b258413e2797" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree_set<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span> &amp;other)$/;"	a
l00475	doxygen-html/a00026_source.html	/^<a name="l00475"><\/a>00475 <span class="comment"><\/span>$/;"	a
l00475	doxygen-html/a00028_source.html	/^<a name="l00475"><\/a>00475         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(x.first, x.second);$/;"	a
l00475	doxygen-html/a00030_source.html	/^<a name="l00475"><\/a>00475         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(x.first, x.second).first;$/;"	a
l00475	doxygen-html/a00032_source.html	/^<a name="l00475"><\/a>00475         : <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>(other.<a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>)$/;"	a
l00475	doxygen-html/a00034_source.html	/^<a name="l00475"><\/a>00475         : <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>(other.<a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>)$/;"	a
l00476	doxygen-html/a00026_source.html	/^<a name="l00476"><\/a>00476 <span class="comment">        \/\/\/ Also friendly to the const_reverse_iterator, so it may access the<\/span>$/;"	a
l00476	doxygen-html/a00028_source.html	/^<a name="l00476"><\/a>00476     }$/;"	a
l00476	doxygen-html/a00030_source.html	/^<a name="l00476"><\/a>00476     }$/;"	a
l00476	doxygen-html/a00032_source.html	/^<a name="l00476"><\/a>00476     {$/;"	a
l00476	doxygen-html/a00034_source.html	/^<a name="l00476"><\/a>00476     {$/;"	a
l00477	doxygen-html/a00026_source.html	/^<a name="l00477"><\/a>00477 <span class="comment">        \/\/\/ two data items directly.<\/span>$/;"	a
l00477	doxygen-html/a00028_source.html	/^<a name="l00477"><\/a>00477 <span class="comment"><\/span>$/;"	a
l00477	doxygen-html/a00030_source.html	/^<a name="l00477"><\/a>00477 <span class="comment"><\/span>$/;"	a
l00477	doxygen-html/a00032_source.html	/^<a name="l00477"><\/a>00477     }$/;"	a
l00477	doxygen-html/a00034_source.html	/^<a name="l00477"><\/a>00477     }$/;"	a
l00478	doxygen-html/a00026_source.html	/^<a name="l00478"><\/a><a class="code" href="a00016.html#a776e261b45ef26d713a4d105a8d7c240">00478<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a>;$/;"	a
l00478	doxygen-html/a00028_source.html	/^<a name="l00478"><\/a>00478 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. Beware that if<\/span>$/;"	a
l00478	doxygen-html/a00030_source.html	/^<a name="l00478"><\/a>00478 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. Beware that if<\/span>$/;"	a
l00478	doxygen-html/a00032_source.html	/^<a name="l00478"><\/a>00478 $/;"	a
l00478	doxygen-html/a00034_source.html	/^<a name="l00478"><\/a>00478 $/;"	a
l00479	doxygen-html/a00026_source.html	/^<a name="l00479"><\/a>00479 <span class="comment"><\/span>$/;"	a
l00479	doxygen-html/a00028_source.html	/^<a name="l00479"><\/a>00479 <span class="comment">    \/\/\/ key_type == data_type, then the template iterator insert() is called<\/span>$/;"	a
l00479	doxygen-html/a00030_source.html	/^<a name="l00479"><\/a>00479 <span class="comment">    \/\/\/ key_type == data_type, then the template iterator insert() is called<\/span>$/;"	a
l00479	doxygen-html/a00032_source.html	/^<a name="l00479"><\/a>00479 <span class="keyword">public<\/span>:$/;"	a
l00479	doxygen-html/a00034_source.html	/^<a name="l00479"><\/a>00479 <span class="keyword">public<\/span>:$/;"	a
l00480	doxygen-html/a00026_source.html	/^<a name="l00480"><\/a>00480 <span class="comment">        \/\/\/ Also friendly to the base btree class, because erase_iter() needs<\/span>$/;"	a
l00480	doxygen-html/a00028_source.html	/^<a name="l00480"><\/a>00480 <span class="comment">    \/\/\/ instead. Fails if the inserted pair is already present.<\/span>$/;"	a
l00480	doxygen-html/a00030_source.html	/^<a name="l00480"><\/a>00480 <span class="comment">    \/\/\/ instead. As this tree allows duplicates insertion never fails.<\/span>$/;"	a
l00480	doxygen-html/a00032_source.html	/^<a name="l00480"><\/a>00480     <span class="comment">\/\/ *** Public Insertion Functions<\/span>$/;"	a
l00480	doxygen-html/a00034_source.html	/^<a name="l00480"><\/a>00480     <span class="comment">\/\/ *** Public Insertion Functions<\/span>$/;"	a
l00481	doxygen-html/a00026_source.html	/^<a name="l00481"><\/a>00481 <span class="comment">        \/\/\/ to read the currnode and currslot values directly.<\/span>$/;"	a
l00481	doxygen-html/a00028_source.html	/^<a name="l00481"><\/a><a class="code" href="a00004.html#a851a1e09834069a0554ecdff08796d51">00481<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00481	doxygen-html/a00030_source.html	/^<a name="l00481"><\/a><a class="code" href="a00005.html#a21efd634ae0900fa4255933e41d1fc55">00481<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#ae333d92079886a0c0b2a2d32201b712f" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00481	doxygen-html/a00032_source.html	/^<a name="l00481"><\/a>00481 <span class="comment"><\/span>$/;"	a
l00481	doxygen-html/a00034_source.html	/^<a name="l00481"><\/a>00481 <span class="comment"><\/span>$/;"	a
l00482	doxygen-html/a00026_source.html	/^<a name="l00482"><\/a>00482 <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree<\/a>&lt;<a class="code" href="a00016.html#a8b03fc63a85738411711197143596475" title="The key type of the btree. Returned by key().">key_type<\/a>, <a class="code" href="a00016.html#ac28707a6e23e871cb85c7ff7f8119c73" title="The data type of the btree. Returned by data().">data_type<\/a>, <a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f" title="The value type of the btree. Returned by operator*().">value_type<\/a>, <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l00482	doxygen-html/a00028_source.html	/^<a name="l00482"><\/a>00482     {$/;"	a
l00482	doxygen-html/a00030_source.html	/^<a name="l00482"><\/a>00482     {$/;"	a
l00482	doxygen-html/a00032_source.html	/^<a name="l00482"><\/a>00482 <span class="comment">    \/\/\/ Attempt to insert a key into the B+ tree. As this set allows<\/span>$/;"	a
l00482	doxygen-html/a00034_source.html	/^<a name="l00482"><\/a>00482 <span class="comment">    \/\/\/ Attempt to insert a key into the B+ tree. The insert will fail if it is<\/span>$/;"	a
l00483	doxygen-html/a00026_source.html	/^<a name="l00483"><\/a><a class="code" href="a00016.html#a1de115e86b32c4ed13649b6760f1da28">00483<\/a>                            <a class="code" href="a00001.html#a8b13a0eb2e558d11830d38de21b82319" title="Fifth template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>, <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a>, <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>, <a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>&gt;;$/;"	a
l00483	doxygen-html/a00028_source.html	/^<a name="l00483"><\/a>00483         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(key, data);$/;"	a
l00483	doxygen-html/a00030_source.html	/^<a name="l00483"><\/a>00483         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(key, data).first;$/;"	a
l00483	doxygen-html/a00032_source.html	/^<a name="l00483"><\/a>00483 <span class="comment">    \/\/\/ duplicates, this function never fails.<\/span>$/;"	a
l00483	doxygen-html/a00034_source.html	/^<a name="l00483"><\/a>00483 <span class="comment">    \/\/\/ already present.<\/span>$/;"	a
l00484	doxygen-html/a00026_source.html	/^<a name="l00484"><\/a>00484 <span class="comment"><\/span>$/;"	a
l00484	doxygen-html/a00028_source.html	/^<a name="l00484"><\/a>00484     }$/;"	a
l00484	doxygen-html/a00030_source.html	/^<a name="l00484"><\/a>00484     }$/;"	a
l00484	doxygen-html/a00032_source.html	/^<a name="l00484"><\/a><a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af">00484<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; x)$/;"	a
l00484	doxygen-html/a00034_source.html	/^<a name="l00484"><\/a><a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0">00484<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; x)$/;"	a
l00485	doxygen-html/a00026_source.html	/^<a name="l00485"><\/a>00485 <span class="comment">        \/\/\/ Evil! A temporary value_type to STL-correctly deliver operator* and<\/span>$/;"	a
l00485	doxygen-html/a00028_source.html	/^<a name="l00485"><\/a>00485 <span class="comment"><\/span>$/;"	a
l00485	doxygen-html/a00030_source.html	/^<a name="l00485"><\/a>00485 <span class="comment"><\/span>$/;"	a
l00485	doxygen-html/a00032_source.html	/^<a name="l00485"><\/a>00485     {$/;"	a
l00485	doxygen-html/a00034_source.html	/^<a name="l00485"><\/a>00485     {$/;"	a
l00486	doxygen-html/a00026_source.html	/^<a name="l00486"><\/a>00486 <span class="comment">        \/\/\/ operator-&gt;<\/span>$/;"	a
l00486	doxygen-html/a00028_source.html	/^<a name="l00486"><\/a>00486 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. This function is the<\/span>$/;"	a
l00486	doxygen-html/a00030_source.html	/^<a name="l00486"><\/a>00486 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. This function is the<\/span>$/;"	a
l00486	doxygen-html/a00032_source.html	/^<a name="l00486"><\/a>00486         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(x, <a class="code" href="a00006.html#a4797d9899509ebbd391f6478f85fefd9" title="The empty data_type.">data_type<\/a>()).first;$/;"	a
l00486	doxygen-html/a00034_source.html	/^<a name="l00486"><\/a>00486         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(x, <a class="code" href="a00009.html#a00bbef593d8ccf4068c327a83ec63284" title="The empty data_type.">data_type<\/a>());$/;"	a
l00487	doxygen-html/a00026_source.html	/^<a name="l00487"><\/a><a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f">00487<\/a> <span class="comment"><\/span>        <span class="keyword">mutable<\/span> <a class="code" href="a00016.html#a3ca0d6f7760b4aa78ff47e53e82d7e1f" title="The value type of the btree. Returned by operator*().">value_type<\/a>              <a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00487	doxygen-html/a00028_source.html	/^<a name="l00487"><\/a>00487 <span class="comment">    \/\/\/ same as the other insert, however if key_type == data_type then the<\/span>$/;"	a
l00487	doxygen-html/a00030_source.html	/^<a name="l00487"><\/a>00487 <span class="comment">    \/\/\/ same as the other insert, however if key_type == data_type then the<\/span>$/;"	a
l00487	doxygen-html/a00032_source.html	/^<a name="l00487"><\/a>00487     }$/;"	a
l00487	doxygen-html/a00034_source.html	/^<a name="l00487"><\/a>00487     }$/;"	a
l00488	doxygen-html/a00026_source.html	/^<a name="l00488"><\/a>00488 $/;"	a
l00488	doxygen-html/a00028_source.html	/^<a name="l00488"><\/a>00488 <span class="comment">    \/\/\/ non-template function cannot be called. Fails if the inserted pair is<\/span>$/;"	a
l00488	doxygen-html/a00030_source.html	/^<a name="l00488"><\/a>00488 <span class="comment">    \/\/\/ non-template function cannot be called.  As this tree allows duplicates<\/span>$/;"	a
l00488	doxygen-html/a00032_source.html	/^<a name="l00488"><\/a>00488 <span class="comment"><\/span>$/;"	a
l00488	doxygen-html/a00034_source.html	/^<a name="l00488"><\/a>00488 <span class="comment"><\/span>$/;"	a
l00489	doxygen-html/a00026_source.html	/^<a name="l00489"><\/a>00489         <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00489	doxygen-html/a00028_source.html	/^<a name="l00489"><\/a>00489 <span class="comment">    \/\/\/ already present.<\/span>$/;"	a
l00489	doxygen-html/a00030_source.html	/^<a name="l00489"><\/a>00489 <span class="comment">    \/\/\/ insertion never fails.<\/span>$/;"	a
l00489	doxygen-html/a00032_source.html	/^<a name="l00489"><\/a>00489 <span class="comment">    \/\/\/ Attempt to insert a key into the B+ tree. The iterator hint is<\/span>$/;"	a
l00489	doxygen-html/a00034_source.html	/^<a name="l00489"><\/a>00489 <span class="comment">    \/\/\/ Attempt to insert a key into the B+ tree. The iterator hint is<\/span>$/;"	a
l00490	doxygen-html/a00026_source.html	/^<a name="l00490"><\/a>00490         <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00490	doxygen-html/a00028_source.html	/^<a name="l00490"><\/a><a class="code" href="a00004.html#a4468eab4a560f8e59130caf052fe2940">00490<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00004.html#a4468eab4a560f8e59130caf052fe2940" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00490	doxygen-html/a00030_source.html	/^<a name="l00490"><\/a><a class="code" href="a00005.html#a73db5a4a7d48733d515319436935ae5c">00490<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a73db5a4a7d48733d515319436935ae5c" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00490	doxygen-html/a00032_source.html	/^<a name="l00490"><\/a>00490 <span class="comment">    \/\/\/ currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00490	doxygen-html/a00034_source.html	/^<a name="l00490"><\/a>00490 <span class="comment">    \/\/\/ currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00491	doxygen-html/a00026_source.html	/^<a name="l00491"><\/a>00491         <span class="comment">\/\/ tree.<\/span>$/;"	a
l00491	doxygen-html/a00028_source.html	/^<a name="l00491"><\/a>00491     {$/;"	a
l00491	doxygen-html/a00030_source.html	/^<a name="l00491"><\/a>00491     {$/;"	a
l00491	doxygen-html/a00032_source.html	/^<a name="l00491"><\/a><a class="code" href="a00006.html#a0075140c2d21fe08b68f00e16630cff1">00491<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(<a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;x)$/;"	a
l00491	doxygen-html/a00034_source.html	/^<a name="l00491"><\/a><a class="code" href="a00009.html#a9f6d35bf91f3c3c8721a73ce7ebba710">00491<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(<a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;x)$/;"	a
l00492	doxygen-html/a00026_source.html	/^<a name="l00492"><\/a>00492         <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00492	doxygen-html/a00028_source.html	/^<a name="l00492"><\/a>00492         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(key, data);$/;"	a
l00492	doxygen-html/a00030_source.html	/^<a name="l00492"><\/a>00492         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(key, data).first;$/;"	a
l00492	doxygen-html/a00032_source.html	/^<a name="l00492"><\/a>00492     {$/;"	a
l00492	doxygen-html/a00034_source.html	/^<a name="l00492"><\/a>00492     {$/;"	a
l00493	doxygen-html/a00026_source.html	/^<a name="l00493"><\/a>00493 $/;"	a
l00493	doxygen-html/a00028_source.html	/^<a name="l00493"><\/a>00493     }$/;"	a
l00493	doxygen-html/a00030_source.html	/^<a name="l00493"><\/a>00493     }$/;"	a
l00493	doxygen-html/a00032_source.html	/^<a name="l00493"><\/a>00493         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, x, <a class="code" href="a00006.html#a4797d9899509ebbd391f6478f85fefd9" title="The empty data_type.">data_type<\/a>());$/;"	a
l00493	doxygen-html/a00034_source.html	/^<a name="l00493"><\/a>00493         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, x, <a class="code" href="a00009.html#a00bbef593d8ccf4068c327a83ec63284" title="The empty data_type.">data_type<\/a>());$/;"	a
l00494	doxygen-html/a00026_source.html	/^<a name="l00494"><\/a>00494     <span class="keyword">public<\/span>:$/;"	a
l00494	doxygen-html/a00028_source.html	/^<a name="l00494"><\/a>00494 <span class="comment"><\/span>$/;"	a
l00494	doxygen-html/a00030_source.html	/^<a name="l00494"><\/a>00494 <span class="comment"><\/span>$/;"	a
l00494	doxygen-html/a00032_source.html	/^<a name="l00494"><\/a>00494     }$/;"	a
l00494	doxygen-html/a00034_source.html	/^<a name="l00494"><\/a>00494     }$/;"	a
l00495	doxygen-html/a00026_source.html	/^<a name="l00495"><\/a>00495         <span class="comment">\/\/ *** Methods<\/span>$/;"	a
l00495	doxygen-html/a00028_source.html	/^<a name="l00495"><\/a>00495 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint<\/span>$/;"	a
l00495	doxygen-html/a00030_source.html	/^<a name="l00495"><\/a>00495 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint<\/span>$/;"	a
l00495	doxygen-html/a00032_source.html	/^<a name="l00495"><\/a>00495 <span class="comment"><\/span>$/;"	a
l00495	doxygen-html/a00034_source.html	/^<a name="l00495"><\/a>00495 <span class="comment"><\/span>$/;"	a
l00496	doxygen-html/a00026_source.html	/^<a name="l00496"><\/a>00496 <span class="comment"><\/span>$/;"	a
l00496	doxygen-html/a00028_source.html	/^<a name="l00496"><\/a>00496 <span class="comment">    \/\/\/ is currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00496	doxygen-html/a00030_source.html	/^<a name="l00496"><\/a>00496 <span class="comment">    \/\/\/ is currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00496	doxygen-html/a00032_source.html	/^<a name="l00496"><\/a>00496 <span class="comment">    \/\/\/ Attempt to insert the range [first,last) of key_type into the B+<\/span>$/;"	a
l00496	doxygen-html/a00034_source.html	/^<a name="l00496"><\/a>00496 <span class="comment">    \/\/\/ Attempt to insert the range [first,last) of iterators dereferencing to<\/span>$/;"	a
l00497	doxygen-html/a00026_source.html	/^<a name="l00497"><\/a>00497 <span class="comment">        \/\/\/ Default-Constructor of a mutable iterator<\/span>$/;"	a
l00497	doxygen-html/a00028_source.html	/^<a name="l00497"><\/a><a class="code" href="a00004.html#a1c2f94f844ca4193cd4e9dd0f4c89610">00497<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a> &amp;x)$/;"	a
l00497	doxygen-html/a00030_source.html	/^<a name="l00497"><\/a><a class="code" href="a00005.html#a29e267a1e4178dca1f954d12aaff5cee">00497<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#ae333d92079886a0c0b2a2d32201b712f" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00005.html#aa9c86e804b95247c742db5ad7b9351fe" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a> &amp;x)$/;"	a
l00497	doxygen-html/a00032_source.html	/^<a name="l00497"><\/a>00497 <span class="comment">    \/\/\/ tree. Each key is inserted individually.<\/span>$/;"	a
l00497	doxygen-html/a00034_source.html	/^<a name="l00497"><\/a>00497 <span class="comment">    \/\/\/ key_type into the B+ tree. Each key\/data pair is inserted individually.<\/span>$/;"	a
l00498	doxygen-html/a00026_source.html	/^<a name="l00498"><\/a><a class="code" href="a00016.html#a18c4fa1f457e6b7c14cbb610d60e4fdf">00498<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#a18c4fa1f457e6b7c14cbb610d60e4fdf" title="Default-Constructor of a mutable iterator.">iterator<\/a>()$/;"	a
l00498	doxygen-html/a00028_source.html	/^<a name="l00498"><\/a>00498     {$/;"	a
l00498	doxygen-html/a00030_source.html	/^<a name="l00498"><\/a>00498     {$/;"	a
l00498	doxygen-html/a00032_source.html	/^<a name="l00498"><\/a>00498 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> InputIterator&gt;$/;"	a
l00498	doxygen-html/a00034_source.html	/^<a name="l00498"><\/a>00498 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> InputIterator&gt;$/;"	a
l00499	doxygen-html/a00026_source.html	/^<a name="l00499"><\/a>00499             : <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>(NULL), <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>(0)$/;"	a
l00499	doxygen-html/a00028_source.html	/^<a name="l00499"><\/a>00499         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, x.first, x.second);$/;"	a
l00499	doxygen-html/a00030_source.html	/^<a name="l00499"><\/a>00499         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, x.first, x.second);$/;"	a
l00499	doxygen-html/a00032_source.html	/^<a name="l00499"><\/a><a class="code" href="a00006.html#a75db73a6c739f8515ab508d3241feb88">00499<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(InputIterator first, InputIterator last)$/;"	a
l00499	doxygen-html/a00034_source.html	/^<a name="l00499"><\/a><a class="code" href="a00009.html#a4e7317f32d2855d50b2dd18df22c2f96">00499<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(InputIterator first, InputIterator last)$/;"	a
l00500	doxygen-html/a00026_source.html	/^<a name="l00500"><\/a>00500         { }$/;"	a
l00500	doxygen-html/a00028_source.html	/^<a name="l00500"><\/a>00500     }$/;"	a
l00500	doxygen-html/a00030_source.html	/^<a name="l00500"><\/a>00500     }$/;"	a
l00500	doxygen-html/a00032_source.html	/^<a name="l00500"><\/a>00500     {$/;"	a
l00500	doxygen-html/a00034_source.html	/^<a name="l00500"><\/a>00500     {$/;"	a
l00501	doxygen-html/a00026_source.html	/^<a name="l00501"><\/a>00501 <span class="comment"><\/span>$/;"	a
l00501	doxygen-html/a00028_source.html	/^<a name="l00501"><\/a>00501 <span class="comment"><\/span>$/;"	a
l00501	doxygen-html/a00030_source.html	/^<a name="l00501"><\/a>00501 <span class="comment"><\/span>$/;"	a
l00501	doxygen-html/a00032_source.html	/^<a name="l00501"><\/a>00501         InputIterator iter = first;$/;"	a
l00501	doxygen-html/a00034_source.html	/^<a name="l00501"><\/a>00501         InputIterator iter = first;$/;"	a
l00502	doxygen-html/a00026_source.html	/^<a name="l00502"><\/a>00502 <span class="comment">        \/\/\/ Initializing-Constructor of a mutable iterator<\/span>$/;"	a
l00502	doxygen-html/a00028_source.html	/^<a name="l00502"><\/a>00502 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint is<\/span>$/;"	a
l00502	doxygen-html/a00030_source.html	/^<a name="l00502"><\/a>00502 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint is<\/span>$/;"	a
l00502	doxygen-html/a00032_source.html	/^<a name="l00502"><\/a>00502         <span class="keywordflow">while<\/span>(iter != last)$/;"	a
l00502	doxygen-html/a00034_source.html	/^<a name="l00502"><\/a>00502         <span class="keywordflow">while<\/span>(iter != last)$/;"	a
l00503	doxygen-html/a00026_source.html	/^<a name="l00503"><\/a><a class="code" href="a00016.html#aafad7b45ec60a4466a4695638ed369a4">00503<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#a18c4fa1f457e6b7c14cbb610d60e4fdf" title="Default-Constructor of a mutable iterator.">iterator<\/a>(<span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a> *l, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s)$/;"	a
l00503	doxygen-html/a00028_source.html	/^<a name="l00503"><\/a>00503 <span class="comment">    \/\/\/ currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00503	doxygen-html/a00030_source.html	/^<a name="l00503"><\/a>00503 <span class="comment">    \/\/\/ currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l00503	doxygen-html/a00032_source.html	/^<a name="l00503"><\/a>00503         {$/;"	a
l00503	doxygen-html/a00034_source.html	/^<a name="l00503"><\/a>00503         {$/;"	a
l00504	doxygen-html/a00026_source.html	/^<a name="l00504"><\/a>00504             : <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>(l), <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>(s)$/;"	a
l00504	doxygen-html/a00028_source.html	/^<a name="l00504"><\/a><a class="code" href="a00004.html#a68f8b720b175c03ea28d9248dbc7fee5">00504<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00004.html#a4468eab4a560f8e59130caf052fe2940" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(<a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00504	doxygen-html/a00030_source.html	/^<a name="l00504"><\/a><a class="code" href="a00005.html#afbb8f4655de73accf1fefdb14a71c755">00504<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <a class="code" href="a00005.html#a73db5a4a7d48733d515319436935ae5c" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(<a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> hint, <span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00005.html#acd5f5ea401940bfc91c52571e0a27299" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l00504	doxygen-html/a00032_source.html	/^<a name="l00504"><\/a>00504             <a class="code" href="a00006.html#ad35b00f9ff7f148dbb5cfee7ac8102af" title="Attempt to insert a key into the B+ tree.">insert<\/a>(*iter);$/;"	a
l00504	doxygen-html/a00034_source.html	/^<a name="l00504"><\/a>00504             <a class="code" href="a00009.html#aea42997e9d00ecaabe5e868196c5e8f0" title="Attempt to insert a key into the B+ tree.">insert<\/a>(*iter);$/;"	a
l00505	doxygen-html/a00026_source.html	/^<a name="l00505"><\/a>00505         { }$/;"	a
l00505	doxygen-html/a00028_source.html	/^<a name="l00505"><\/a>00505     {$/;"	a
l00505	doxygen-html/a00030_source.html	/^<a name="l00505"><\/a>00505     {$/;"	a
l00505	doxygen-html/a00032_source.html	/^<a name="l00505"><\/a>00505             ++iter;$/;"	a
l00505	doxygen-html/a00034_source.html	/^<a name="l00505"><\/a>00505             ++iter;$/;"	a
l00506	doxygen-html/a00026_source.html	/^<a name="l00506"><\/a>00506 <span class="comment"><\/span>$/;"	a
l00506	doxygen-html/a00028_source.html	/^<a name="l00506"><\/a>00506         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, key, data);$/;"	a
l00506	doxygen-html/a00030_source.html	/^<a name="l00506"><\/a>00506         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(hint, key, data);$/;"	a
l00506	doxygen-html/a00032_source.html	/^<a name="l00506"><\/a>00506         }$/;"	a
l00506	doxygen-html/a00034_source.html	/^<a name="l00506"><\/a>00506         }$/;"	a
l00507	doxygen-html/a00026_source.html	/^<a name="l00507"><\/a>00507 <span class="comment">        \/\/\/ Copy-constructor from a reverse iterator<\/span>$/;"	a
l00507	doxygen-html/a00028_source.html	/^<a name="l00507"><\/a>00507     }$/;"	a
l00507	doxygen-html/a00030_source.html	/^<a name="l00507"><\/a>00507     }$/;"	a
l00507	doxygen-html/a00032_source.html	/^<a name="l00507"><\/a>00507     }$/;"	a
l00507	doxygen-html/a00034_source.html	/^<a name="l00507"><\/a>00507     }$/;"	a
l00508	doxygen-html/a00026_source.html	/^<a name="l00508"><\/a><a class="code" href="a00016.html#addb909f2f9d3b008d43e962b3bc0ef01">00508<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#a18c4fa1f457e6b7c14cbb610d60e4fdf" title="Default-Constructor of a mutable iterator.">iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a> &amp;it)$/;"	a
l00508	doxygen-html/a00028_source.html	/^<a name="l00508"><\/a>00508 <span class="comment"><\/span>$/;"	a
l00508	doxygen-html/a00030_source.html	/^<a name="l00508"><\/a>00508 <span class="comment"><\/span>$/;"	a
l00508	doxygen-html/a00032_source.html	/^<a name="l00508"><\/a>00508 <span class="comment"><\/span>$/;"	a
l00508	doxygen-html/a00034_source.html	/^<a name="l00508"><\/a>00508 <span class="comment"><\/span>$/;"	a
l00509	doxygen-html/a00026_source.html	/^<a name="l00509"><\/a>00509             : <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>)$/;"	a
l00509	doxygen-html/a00028_source.html	/^<a name="l00509"><\/a>00509 <span class="comment">    \/\/\/ Returns a reference to the object that is associated with a particular<\/span>$/;"	a
l00509	doxygen-html/a00030_source.html	/^<a name="l00509"><\/a>00509 <span class="comment">    \/\/\/ Attempt to insert the range [first,last) of value_type pairs into the B+<\/span>$/;"	a
l00509	doxygen-html/a00032_source.html	/^<a name="l00509"><\/a>00509 <span class="comment">    \/\/\/ Bulk load a sorted range [first,last). Loads items into leaves and<\/span>$/;"	a
l00509	doxygen-html/a00034_source.html	/^<a name="l00509"><\/a>00509 <span class="comment">    \/\/\/ Bulk load a sorted range [first,last). Loads items into leaves and<\/span>$/;"	a
l00510	doxygen-html/a00026_source.html	/^<a name="l00510"><\/a>00510         { }$/;"	a
l00510	doxygen-html/a00028_source.html	/^<a name="l00510"><\/a>00510 <span class="comment">    \/\/\/ key. If the map does not already contain such an object, operator[]<\/span>$/;"	a
l00510	doxygen-html/a00030_source.html	/^<a name="l00510"><\/a>00510 <span class="comment">    \/\/\/ tree. Each key\/data pair is inserted individually.<\/span>$/;"	a
l00510	doxygen-html/a00032_source.html	/^<a name="l00510"><\/a>00510 <span class="comment">    \/\/\/ constructs a B-tree above them. The tree must be empty when calling<\/span>$/;"	a
l00510	doxygen-html/a00034_source.html	/^<a name="l00510"><\/a>00510 <span class="comment">    \/\/\/ constructs a B-tree above them. The tree must be empty when calling<\/span>$/;"	a
l00511	doxygen-html/a00026_source.html	/^<a name="l00511"><\/a>00511 <span class="comment"><\/span>$/;"	a
l00511	doxygen-html/a00028_source.html	/^<a name="l00511"><\/a>00511 <span class="comment">    \/\/\/ inserts the default object data_type().<\/span>$/;"	a
l00511	doxygen-html/a00030_source.html	/^<a name="l00511"><\/a>00511 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> InputIterator&gt;$/;"	a
l00511	doxygen-html/a00032_source.html	/^<a name="l00511"><\/a>00511 <span class="comment">    \/\/\/ this function.<\/span>$/;"	a
l00511	doxygen-html/a00034_source.html	/^<a name="l00511"><\/a>00511 <span class="comment">    \/\/\/ this function.<\/span>$/;"	a
l00512	doxygen-html/a00026_source.html	/^<a name="l00512"><\/a>00512 <span class="comment">        \/\/\/ Dereference the iterator, this is not a value_type&amp; because key and<\/span>$/;"	a
l00512	doxygen-html/a00028_source.html	/^<a name="l00512"><\/a><a class="code" href="a00004.html#ab3268177427359a66c11b7f641bb99ae">00512<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; <a class="code" href="a00004.html#ab3268177427359a66c11b7f641bb99ae" title="Returns a reference to the object that is associated with a particular key.">operator[]<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a>&amp; key)$/;"	a
l00512	doxygen-html/a00030_source.html	/^<a name="l00512"><\/a><a class="code" href="a00005.html#ad1d876c4c9afe1c8ecf3a28d23be5049">00512<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#ae333d92079886a0c0b2a2d32201b712f" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(InputIterator first, InputIterator last)$/;"	a
l00512	doxygen-html/a00032_source.html	/^<a name="l00512"><\/a>00512 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Iterator&gt;$/;"	a
l00512	doxygen-html/a00034_source.html	/^<a name="l00512"><\/a>00512 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Iterator&gt;$/;"	a
l00513	doxygen-html/a00026_source.html	/^<a name="l00513"><\/a>00513 <span class="comment">        \/\/\/ value are not stored together<\/span>$/;"	a
l00513	doxygen-html/a00028_source.html	/^<a name="l00513"><\/a>00513     {$/;"	a
l00513	doxygen-html/a00030_source.html	/^<a name="l00513"><\/a>00513     {$/;"	a
l00513	doxygen-html/a00032_source.html	/^<a name="l00513"><\/a><a class="code" href="a00006.html#ac0ce2f8dad3a95fe6c276437abdacbc1">00513<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#ac0ce2f8dad3a95fe6c276437abdacbc1" title="Bulk load a sorted range [first,last).">bulk_load<\/a>(Iterator first, Iterator last)$/;"	a
l00513	doxygen-html/a00034_source.html	/^<a name="l00513"><\/a><a class="code" href="a00009.html#a51c3a4976f4bd78315a3c25ab2da5c33">00513<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#a51c3a4976f4bd78315a3c25ab2da5c33" title="Bulk load a sorted range [first,last).">bulk_load<\/a>(Iterator first, Iterator last)$/;"	a
l00514	doxygen-html/a00026_source.html	/^<a name="l00514"><\/a><a class="code" href="a00016.html#ae3399c4dbeb9f3d1cb69f03b0717ef08">00514<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#ae1af55705fdbcf4a78144fbd6b3df028" title="Reference to the value_type. STL required.">reference<\/a> <a class="code" href="a00016.html#ae3399c4dbeb9f3d1cb69f03b0717ef08" title="Dereference the iterator, this is not a value_type&amp; because key and value are not stored together...">operator*<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00514	doxygen-html/a00028_source.html	/^<a name="l00514"><\/a>00514         <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> i = <a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>( <a class="code" href="a00004.html#abdb0354081cf05ed114f76b09630001e" title="Construct the STL-required value_type as a composition pair of key and data types.">value_type<\/a>(key, <a class="code" href="a00004.html#a76d4185d0ff8a2b0fbb572aad2ee93bb" title="Second template parameter: The data type associated with each key.">data_type<\/a>()) ).first;$/;"	a
l00514	doxygen-html/a00030_source.html	/^<a name="l00514"><\/a>00514         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00514	doxygen-html/a00032_source.html	/^<a name="l00514"><\/a>00514     {$/;"	a
l00514	doxygen-html/a00034_source.html	/^<a name="l00514"><\/a>00514     {$/;"	a
l00515	doxygen-html/a00026_source.html	/^<a name="l00515"><\/a>00515 <span class="keyword">        <\/span>{$/;"	a
l00515	doxygen-html/a00028_source.html	/^<a name="l00515"><\/a>00515         <span class="keywordflow">return<\/span> i.data();$/;"	a
l00515	doxygen-html/a00030_source.html	/^<a name="l00515"><\/a>00515     }$/;"	a
l00515	doxygen-html/a00032_source.html	/^<a name="l00515"><\/a>00515         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656" title="Bulk load a sorted range.">bulk_load<\/a>(first, last);$/;"	a
l00515	doxygen-html/a00034_source.html	/^<a name="l00515"><\/a>00515         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656" title="Bulk load a sorted range.">bulk_load<\/a>(first, last);$/;"	a
l00516	doxygen-html/a00026_source.html	/^<a name="l00516"><\/a>00516             <a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00016.html#a2b722e1077949a356115387bfd606d63" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00016.html#a58add29a798f555f30dc83b75bdc8c46" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00016.html#a374ee1815c28dcef298e20c36cfc8dbc" title="Writable reference to the current data object.">data<\/a>()) );$/;"	a
l00516	doxygen-html/a00028_source.html	/^<a name="l00516"><\/a>00516     }$/;"	a
l00516	doxygen-html/a00030_source.html	/^<a name="l00516"><\/a>00516 <span class="comment"><\/span>$/;"	a
l00516	doxygen-html/a00032_source.html	/^<a name="l00516"><\/a>00516     }$/;"	a
l00516	doxygen-html/a00034_source.html	/^<a name="l00516"><\/a>00516     }$/;"	a
l00517	doxygen-html/a00026_source.html	/^<a name="l00517"><\/a>00517             <span class="keywordflow">return<\/span> <a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00517	doxygen-html/a00028_source.html	/^<a name="l00517"><\/a>00517 <span class="comment"><\/span>$/;"	a
l00517	doxygen-html/a00030_source.html	/^<a name="l00517"><\/a>00517 <span class="comment">    \/\/\/ Bulk load a sorted range [first,last). Loads items into leaves and<\/span>$/;"	a
l00517	doxygen-html/a00032_source.html	/^<a name="l00517"><\/a>00517 $/;"	a
l00517	doxygen-html/a00034_source.html	/^<a name="l00517"><\/a>00517 $/;"	a
l00518	doxygen-html/a00026_source.html	/^<a name="l00518"><\/a>00518         }$/;"	a
l00518	doxygen-html/a00028_source.html	/^<a name="l00518"><\/a>00518 <span class="comment">    \/\/\/ Attempt to insert the range [first,last) of value_type pairs into the B+<\/span>$/;"	a
l00518	doxygen-html/a00030_source.html	/^<a name="l00518"><\/a>00518 <span class="comment">    \/\/\/ constructs a B-tree above them. The tree must be empty when calling<\/span>$/;"	a
l00518	doxygen-html/a00032_source.html	/^<a name="l00518"><\/a>00518 <span class="keyword">public<\/span>:$/;"	a
l00518	doxygen-html/a00034_source.html	/^<a name="l00518"><\/a>00518 <span class="keyword">public<\/span>:$/;"	a
l00519	doxygen-html/a00026_source.html	/^<a name="l00519"><\/a>00519 <span class="comment"><\/span>$/;"	a
l00519	doxygen-html/a00028_source.html	/^<a name="l00519"><\/a>00519 <span class="comment">    \/\/\/ tree. Each key\/data pair is inserted individually.<\/span>$/;"	a
l00519	doxygen-html/a00030_source.html	/^<a name="l00519"><\/a>00519 <span class="comment">    \/\/\/ this function.<\/span>$/;"	a
l00519	doxygen-html/a00032_source.html	/^<a name="l00519"><\/a>00519     <span class="comment">\/\/ *** Public Erase Functions<\/span>$/;"	a
l00519	doxygen-html/a00034_source.html	/^<a name="l00519"><\/a>00519     <span class="comment">\/\/ *** Public Erase Functions<\/span>$/;"	a
l00520	doxygen-html/a00026_source.html	/^<a name="l00520"><\/a>00520 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l00520	doxygen-html/a00028_source.html	/^<a name="l00520"><\/a>00520 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> InputIterator&gt;$/;"	a
l00520	doxygen-html/a00030_source.html	/^<a name="l00520"><\/a>00520 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Iterator&gt;$/;"	a
l00520	doxygen-html/a00032_source.html	/^<a name="l00520"><\/a>00520 <span class="comment"><\/span>$/;"	a
l00520	doxygen-html/a00034_source.html	/^<a name="l00520"><\/a>00520 <span class="comment"><\/span>$/;"	a
l00521	doxygen-html/a00026_source.html	/^<a name="l00521"><\/a>00521 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l00521	doxygen-html/a00028_source.html	/^<a name="l00521"><\/a><a class="code" href="a00004.html#a783db2843544f7f9f3c3fb498c283d4c">00521<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#ac2c8fb3774e84115b1bf403f24afa4b1" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(InputIterator first, InputIterator last)$/;"	a
l00521	doxygen-html/a00030_source.html	/^<a name="l00521"><\/a><a class="code" href="a00005.html#a03c07294f0b9bfbcd17f15ba23669dca">00521<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a03c07294f0b9bfbcd17f15ba23669dca" title="Bulk load a sorted range [first,last).">bulk_load<\/a>(Iterator first, Iterator last)$/;"	a
l00521	doxygen-html/a00032_source.html	/^<a name="l00521"><\/a>00521 <span class="comment">    \/\/\/ Erases one (the first) entry of the given key.<\/span>$/;"	a
l00521	doxygen-html/a00034_source.html	/^<a name="l00521"><\/a>00521 <span class="comment">    \/\/\/ Erases the key from the set. As this is a unique set, there is no<\/span>$/;"	a
l00522	doxygen-html/a00026_source.html	/^<a name="l00522"><\/a>00522 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l00522	doxygen-html/a00028_source.html	/^<a name="l00522"><\/a>00522     {$/;"	a
l00522	doxygen-html/a00030_source.html	/^<a name="l00522"><\/a>00522     {$/;"	a
l00522	doxygen-html/a00032_source.html	/^<a name="l00522"><\/a><a class="code" href="a00006.html#aa4e4cd44265e4c5fb8617ca3d17dd843">00522<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#aa4e4cd44265e4c5fb8617ca3d17dd843" title="Erases one (the first) entry of the given key.">erase_one<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00522	doxygen-html/a00034_source.html	/^<a name="l00522"><\/a>00522 <span class="comment">    \/\/\/ difference to erase().<\/span>$/;"	a
l00523	doxygen-html/a00026_source.html	/^<a name="l00523"><\/a><a class="code" href="a00016.html#a8a59d09fca6bbea43b096ea75048551a">00523<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#adfe951a60a834784653dac6d883f73a8" title="Pointer to the value_type. STL required.">pointer<\/a> <a class="code" href="a00016.html#a8a59d09fca6bbea43b096ea75048551a" title="Dereference the iterator.">operator-&gt;<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00523	doxygen-html/a00028_source.html	/^<a name="l00523"><\/a>00523         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(first, last);$/;"	a
l00523	doxygen-html/a00030_source.html	/^<a name="l00523"><\/a>00523         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656" title="Bulk load a sorted range.">bulk_load<\/a>(first, last);$/;"	a
l00523	doxygen-html/a00032_source.html	/^<a name="l00523"><\/a>00523     {$/;"	a
l00523	doxygen-html/a00034_source.html	/^<a name="l00523"><\/a><a class="code" href="a00009.html#a0cf2d6744a938d3249f58263f68f4802">00523<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a0cf2d6744a938d3249f58263f68f4802" title="Erases the key from the set.">erase_one<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l00524	doxygen-html/a00026_source.html	/^<a name="l00524"><\/a>00524 <span class="keyword">        <\/span>{$/;"	a
l00524	doxygen-html/a00028_source.html	/^<a name="l00524"><\/a>00524     }$/;"	a
l00524	doxygen-html/a00030_source.html	/^<a name="l00524"><\/a>00524     }$/;"	a
l00524	doxygen-html/a00032_source.html	/^<a name="l00524"><\/a>00524         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(key);$/;"	a
l00524	doxygen-html/a00034_source.html	/^<a name="l00524"><\/a>00524     {$/;"	a
l00525	doxygen-html/a00026_source.html	/^<a name="l00525"><\/a>00525             <a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00016.html#a2b722e1077949a356115387bfd606d63" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00016.html#a58add29a798f555f30dc83b75bdc8c46" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00016.html#a374ee1815c28dcef298e20c36cfc8dbc" title="Writable reference to the current data object.">data<\/a>()) );$/;"	a
l00525	doxygen-html/a00028_source.html	/^<a name="l00525"><\/a>00525 <span class="comment"><\/span>$/;"	a
l00525	doxygen-html/a00030_source.html	/^<a name="l00525"><\/a>00525 $/;"	a
l00525	doxygen-html/a00032_source.html	/^<a name="l00525"><\/a>00525     }$/;"	a
l00525	doxygen-html/a00034_source.html	/^<a name="l00525"><\/a>00525         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(key);$/;"	a
l00526	doxygen-html/a00026_source.html	/^<a name="l00526"><\/a>00526             <span class="keywordflow">return<\/span> &amp;<a class="code" href="a00016.html#a3853bb0ba23d1149d7d3e90d08a74e7f" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00526	doxygen-html/a00028_source.html	/^<a name="l00526"><\/a>00526 <span class="comment">    \/\/\/ Bulk load a sorted range [first,last). Loads items into leaves and<\/span>$/;"	a
l00526	doxygen-html/a00030_source.html	/^<a name="l00526"><\/a>00526 <span class="keyword">public<\/span>:$/;"	a
l00526	doxygen-html/a00032_source.html	/^<a name="l00526"><\/a>00526 <span class="comment"><\/span>$/;"	a
l00526	doxygen-html/a00034_source.html	/^<a name="l00526"><\/a>00526     }$/;"	a
l00527	doxygen-html/a00026_source.html	/^<a name="l00527"><\/a>00527         }$/;"	a
l00527	doxygen-html/a00028_source.html	/^<a name="l00527"><\/a>00527 <span class="comment">    \/\/\/ constructs a B-tree above them. The tree must be empty when calling<\/span>$/;"	a
l00527	doxygen-html/a00030_source.html	/^<a name="l00527"><\/a>00527     <span class="comment">\/\/ *** Public Erase Functions<\/span>$/;"	a
l00527	doxygen-html/a00032_source.html	/^<a name="l00527"><\/a>00527 <span class="comment">    \/\/\/ Erases all the entries of the given key. This is implemented using<\/span>$/;"	a
l00527	doxygen-html/a00034_source.html	/^<a name="l00527"><\/a>00527 <span class="comment"><\/span>$/;"	a
l00528	doxygen-html/a00026_source.html	/^<a name="l00528"><\/a>00528 <span class="comment"><\/span>$/;"	a
l00528	doxygen-html/a00028_source.html	/^<a name="l00528"><\/a>00528 <span class="comment">    \/\/\/ this function.<\/span>$/;"	a
l00528	doxygen-html/a00030_source.html	/^<a name="l00528"><\/a>00528 <span class="comment"><\/span>$/;"	a
l00528	doxygen-html/a00032_source.html	/^<a name="l00528"><\/a>00528 <span class="comment">    \/\/\/ erase_one() and thus not very efficient.<\/span>$/;"	a
l00528	doxygen-html/a00034_source.html	/^<a name="l00528"><\/a>00528 <span class="comment">    \/\/\/ Erases all the key\/data pairs associated with the given key.<\/span>$/;"	a
l00529	doxygen-html/a00026_source.html	/^<a name="l00529"><\/a>00529 <span class="comment">        \/\/\/ Key of the current slot<\/span>$/;"	a
l00529	doxygen-html/a00028_source.html	/^<a name="l00529"><\/a>00529 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Iterator&gt;$/;"	a
l00529	doxygen-html/a00030_source.html	/^<a name="l00529"><\/a>00529 <span class="comment">    \/\/\/ Erases one (the first) of the key\/data pairs associated with the given<\/span>$/;"	a
l00529	doxygen-html/a00032_source.html	/^<a name="l00529"><\/a><a class="code" href="a00006.html#afe2a42873c3a97234668e2feabc5191d">00529<\/a> <span class="comment"><\/span>    <a class="code" href="a00006.html#acb308af84d816e44d6fcaaf075b08a22" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00006.html#afe2a42873c3a97234668e2feabc5191d" title="Erases all the entries of the given key.">erase<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00006.html#adaf86bdcdf48a7d4ed87ae020436287e" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00529	doxygen-html/a00034_source.html	/^<a name="l00529"><\/a><a class="code" href="a00009.html#a0b4f57f1b268095b0c33c5623280c4e4">00529<\/a> <span class="comment"><\/span>    <a class="code" href="a00009.html#ab2cb644afc7271107dcceb53e9a86f45" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00009.html#a0b4f57f1b268095b0c33c5623280c4e4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00009.html#a30048df0132910557b9fc6eef098c260" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l00530	doxygen-html/a00026_source.html	/^<a name="l00530"><\/a><a class="code" href="a00016.html#a58add29a798f555f30dc83b75bdc8c46">00530<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00016.html#a8b03fc63a85738411711197143596475" title="The key type of the btree. Returned by key().">key_type<\/a>&amp; <a class="code" href="a00016.html#a58add29a798f555f30dc83b75bdc8c46" title="Key of the current slot.">key<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00530	doxygen-html/a00028_source.html	/^<a name="l00530"><\/a><a class="code" href="a00004.html#adb1b413f25e7d25afe782955aeafc66a">00530<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#adb1b413f25e7d25afe782955aeafc66a" title="Bulk load a sorted range [first,last).">bulk_load<\/a>(Iterator first, Iterator last)$/;"	a
l00530	doxygen-html/a00030_source.html	/^<a name="l00530"><\/a>00530 <span class="comment">    \/\/\/ key.<\/span>$/;"	a
l00530	doxygen-html/a00032_source.html	/^<a name="l00530"><\/a>00530     {$/;"	a
l00530	doxygen-html/a00034_source.html	/^<a name="l00530"><\/a>00530     {$/;"	a
l00531	doxygen-html/a00026_source.html	/^<a name="l00531"><\/a>00531 <span class="keyword">        <\/span>{$/;"	a
l00531	doxygen-html/a00028_source.html	/^<a name="l00531"><\/a>00531     {$/;"	a
l00531	doxygen-html/a00030_source.html	/^<a name="l00531"><\/a><a class="code" href="a00005.html#a63e0ea7673d9a512feb86c990f28cca0">00531<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a63e0ea7673d9a512feb86c990f28cca0" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00531	doxygen-html/a00032_source.html	/^<a name="l00531"><\/a>00531         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(key);$/;"	a
l00531	doxygen-html/a00034_source.html	/^<a name="l00531"><\/a>00531         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(key);$/;"	a
l00532	doxygen-html/a00026_source.html	/^<a name="l00532"><\/a>00532             <span class="keywordflow">return<\/span> <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>];$/;"	a
l00532	doxygen-html/a00028_source.html	/^<a name="l00532"><\/a>00532         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656" title="Bulk load a sorted range.">bulk_load<\/a>(first, last);$/;"	a
l00532	doxygen-html/a00030_source.html	/^<a name="l00532"><\/a>00532     {$/;"	a
l00532	doxygen-html/a00032_source.html	/^<a name="l00532"><\/a>00532     }$/;"	a
l00532	doxygen-html/a00034_source.html	/^<a name="l00532"><\/a>00532     }$/;"	a
l00533	doxygen-html/a00026_source.html	/^<a name="l00533"><\/a>00533         }$/;"	a
l00533	doxygen-html/a00028_source.html	/^<a name="l00533"><\/a>00533     }$/;"	a
l00533	doxygen-html/a00030_source.html	/^<a name="l00533"><\/a>00533         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(key);$/;"	a
l00533	doxygen-html/a00032_source.html	/^<a name="l00533"><\/a>00533 <span class="comment"><\/span>$/;"	a
l00533	doxygen-html/a00034_source.html	/^<a name="l00533"><\/a>00533 <span class="comment"><\/span>$/;"	a
l00534	doxygen-html/a00026_source.html	/^<a name="l00534"><\/a>00534 <span class="comment"><\/span>$/;"	a
l00534	doxygen-html/a00028_source.html	/^<a name="l00534"><\/a>00534 $/;"	a
l00534	doxygen-html/a00030_source.html	/^<a name="l00534"><\/a>00534     }$/;"	a
l00534	doxygen-html/a00032_source.html	/^<a name="l00534"><\/a>00534 <span class="comment">    \/\/\/ Erase the key\/data pair referenced by the iterator.<\/span>$/;"	a
l00534	doxygen-html/a00034_source.html	/^<a name="l00534"><\/a>00534 <span class="comment">    \/\/\/ Erase the key\/data pair referenced by the iterator.<\/span>$/;"	a
l00535	doxygen-html/a00026_source.html	/^<a name="l00535"><\/a>00535 <span class="comment">        \/\/\/ Writable reference to the current data object<\/span>$/;"	a
l00535	doxygen-html/a00028_source.html	/^<a name="l00535"><\/a>00535 <span class="keyword">public<\/span>:$/;"	a
l00535	doxygen-html/a00030_source.html	/^<a name="l00535"><\/a>00535 <span class="comment"><\/span>$/;"	a
l00535	doxygen-html/a00032_source.html	/^<a name="l00535"><\/a><a class="code" href="a00006.html#ac174897bad297d88927e6abe4056a3b8">00535<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#afe2a42873c3a97234668e2feabc5191d" title="Erases all the entries of the given key.">erase<\/a>(<a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> iter)$/;"	a
l00535	doxygen-html/a00034_source.html	/^<a name="l00535"><\/a><a class="code" href="a00009.html#aea8d759b037157313042df5b6cad4b5b">00535<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#a0b4f57f1b268095b0c33c5623280c4e4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> iter)$/;"	a
l00536	doxygen-html/a00026_source.html	/^<a name="l00536"><\/a><a class="code" href="a00016.html#a374ee1815c28dcef298e20c36cfc8dbc">00536<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00016.html#ac28707a6e23e871cb85c7ff7f8119c73" title="The data type of the btree. Returned by data().">data_type<\/a>&amp; <a class="code" href="a00016.html#a374ee1815c28dcef298e20c36cfc8dbc" title="Writable reference to the current data object.">data<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00536	doxygen-html/a00028_source.html	/^<a name="l00536"><\/a>00536     <span class="comment">\/\/ *** Public Erase Functions<\/span>$/;"	a
l00536	doxygen-html/a00030_source.html	/^<a name="l00536"><\/a>00536 <span class="comment">    \/\/\/ Erases all the key\/data pairs associated with the given key. This is<\/span>$/;"	a
l00536	doxygen-html/a00032_source.html	/^<a name="l00536"><\/a>00536     {$/;"	a
l00536	doxygen-html/a00034_source.html	/^<a name="l00536"><\/a>00536     {$/;"	a
l00537	doxygen-html/a00026_source.html	/^<a name="l00537"><\/a>00537 <span class="keyword">        <\/span>{$/;"	a
l00537	doxygen-html/a00028_source.html	/^<a name="l00537"><\/a>00537 <span class="comment"><\/span>$/;"	a
l00537	doxygen-html/a00030_source.html	/^<a name="l00537"><\/a>00537 <span class="comment">    \/\/\/ implemented using erase_one() and thus not very efficient.<\/span>$/;"	a
l00537	doxygen-html/a00032_source.html	/^<a name="l00537"><\/a>00537         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iter);$/;"	a
l00537	doxygen-html/a00034_source.html	/^<a name="l00537"><\/a>00537         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iter);$/;"	a
l00538	doxygen-html/a00026_source.html	/^<a name="l00538"><\/a>00538             <span class="keywordflow">return<\/span> <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> ? 0 : <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>];$/;"	a
l00538	doxygen-html/a00028_source.html	/^<a name="l00538"><\/a>00538 <span class="comment">    \/\/\/ Erases the key\/data pairs associated with the given key. For this<\/span>$/;"	a
l00538	doxygen-html/a00030_source.html	/^<a name="l00538"><\/a><a class="code" href="a00005.html#af53814c6408f8708d5c755e3277b92d4">00538<\/a> <span class="comment"><\/span>    <a class="code" href="a00005.html#abd83889e9697c609bffd95ec4548ddb4" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00005.html#af53814c6408f8708d5c755e3277b92d4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00005.html#adb607d4142977e7e6ca36ff38c42ace8" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00538	doxygen-html/a00032_source.html	/^<a name="l00538"><\/a>00538     }$/;"	a
l00538	doxygen-html/a00034_source.html	/^<a name="l00538"><\/a>00538     }$/;"	a
l00539	doxygen-html/a00026_source.html	/^<a name="l00539"><\/a>00539         }$/;"	a
l00539	doxygen-html/a00028_source.html	/^<a name="l00539"><\/a>00539 <span class="comment">    \/\/\/ unique-associative map there is no difference to erase().<\/span>$/;"	a
l00539	doxygen-html/a00030_source.html	/^<a name="l00539"><\/a>00539     {$/;"	a
l00539	doxygen-html/a00032_source.html	/^<a name="l00539"><\/a>00539 $/;"	a
l00539	doxygen-html/a00034_source.html	/^<a name="l00539"><\/a>00539 $/;"	a
l00540	doxygen-html/a00026_source.html	/^<a name="l00540"><\/a>00540 <span class="comment"><\/span>$/;"	a
l00540	doxygen-html/a00028_source.html	/^<a name="l00540"><\/a><a class="code" href="a00004.html#a4e44c51baca9a5959bacfe9f78fa3d44">00540<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a4e44c51baca9a5959bacfe9f78fa3d44" title="Erases the key\/data pairs associated with the given key.">erase_one<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00540	doxygen-html/a00030_source.html	/^<a name="l00540"><\/a>00540         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(key);$/;"	a
l00540	doxygen-html/a00032_source.html	/^<a name="l00540"><\/a>00540 <span class="preprocessor">#ifdef BTREE_TODO<\/span>$/;"	a
l00540	doxygen-html/a00034_source.html	/^<a name="l00540"><\/a>00540 <span class="preprocessor">#ifdef BTREE_TODO<\/span>$/;"	a
l00541	doxygen-html/a00026_source.html	/^<a name="l00541"><\/a>00541 <span class="comment">        \/\/\/ Prefix++ advance the iterator to the next slot<\/span>$/;"	a
l00541	doxygen-html/a00028_source.html	/^<a name="l00541"><\/a>00541     {$/;"	a
l00541	doxygen-html/a00030_source.html	/^<a name="l00541"><\/a>00541     }$/;"	a
l00541	doxygen-html/a00032_source.html	/^<a name="l00541"><\/a>00541 <span class="preprocessor"><\/span><span class="comment">    \/\/\/ Erase all keys in the range [first,last). This function is currently<\/span>$/;"	a
l00541	doxygen-html/a00034_source.html	/^<a name="l00541"><\/a>00541 <span class="preprocessor"><\/span><span class="comment">    \/\/\/ Erase all keys in the range [first,last). This function is currently<\/span>$/;"	a
l00542	doxygen-html/a00026_source.html	/^<a name="l00542"><\/a><a class="code" href="a00016.html#affd98a29650798f84818a1de2a0dbc35">00542<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00016.html#affd98a29650798f84818a1de2a0dbc35" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>()$/;"	a
l00542	doxygen-html/a00028_source.html	/^<a name="l00542"><\/a>00542         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(key);$/;"	a
l00542	doxygen-html/a00030_source.html	/^<a name="l00542"><\/a>00542 <span class="comment"><\/span>$/;"	a
l00542	doxygen-html/a00032_source.html	/^<a name="l00542"><\/a>00542 <span class="comment"><\/span><span class="comment">    \/\/\/ not implemented by the B+ Tree.<\/span>$/;"	a
l00542	doxygen-html/a00034_source.html	/^<a name="l00542"><\/a>00542 <span class="comment"><\/span><span class="comment">    \/\/\/ not implemented by the B+ Tree.<\/span>$/;"	a
l00543	doxygen-html/a00026_source.html	/^<a name="l00543"><\/a>00543         {$/;"	a
l00543	doxygen-html/a00028_source.html	/^<a name="l00543"><\/a>00543     }$/;"	a
l00543	doxygen-html/a00030_source.html	/^<a name="l00543"><\/a>00543 <span class="comment">    \/\/\/ Erase the key\/data pair referenced by the iterator.<\/span>$/;"	a
l00543	doxygen-html/a00032_source.html	/^<a name="l00543"><\/a><a class="code" href="a00006.html#aa5c867534e27a06c07baa2c17fbccfd1">00543<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#afe2a42873c3a97234668e2feabc5191d" title="Erases all the entries of the given key.">erase<\/a>(<a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* first *\/<\/span>, <a class="code" href="a00006.html#a0d0c6764234271152a77643d5f160889" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* last *\/<\/span>)$/;"	a
l00543	doxygen-html/a00034_source.html	/^<a name="l00543"><\/a><a class="code" href="a00009.html#ad0bf46d5da971b9abef66a69bab86b33">00543<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#a0b4f57f1b268095b0c33c5623280c4e4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* first *\/<\/span>, <a class="code" href="a00009.html#a7d77049f9bbaaf25ba9edc0635c4627f" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* last *\/<\/span>)$/;"	a
l00544	doxygen-html/a00026_source.html	/^<a name="l00544"><\/a>00544             <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> + 1 &lt; <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>) {$/;"	a
l00544	doxygen-html/a00028_source.html	/^<a name="l00544"><\/a>00544 <span class="comment"><\/span>$/;"	a
l00544	doxygen-html/a00030_source.html	/^<a name="l00544"><\/a><a class="code" href="a00005.html#a2e1cd81a36b44a74d3602c9cca2fc07d">00544<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#af53814c6408f8708d5c755e3277b92d4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> iter)$/;"	a
l00544	doxygen-html/a00032_source.html	/^<a name="l00544"><\/a>00544     {$/;"	a
l00544	doxygen-html/a00034_source.html	/^<a name="l00544"><\/a>00544     {$/;"	a
l00545	doxygen-html/a00026_source.html	/^<a name="l00545"><\/a>00545                 ++<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00545	doxygen-html/a00028_source.html	/^<a name="l00545"><\/a>00545 <span class="comment">    \/\/\/ Erases all the key\/data pairs associated with the given key. This is<\/span>$/;"	a
l00545	doxygen-html/a00030_source.html	/^<a name="l00545"><\/a>00545     {$/;"	a
l00545	doxygen-html/a00032_source.html	/^<a name="l00545"><\/a>00545         abort();$/;"	a
l00545	doxygen-html/a00034_source.html	/^<a name="l00545"><\/a>00545         abort();$/;"	a
l00546	doxygen-html/a00026_source.html	/^<a name="l00546"><\/a>00546             }$/;"	a
l00546	doxygen-html/a00028_source.html	/^<a name="l00546"><\/a>00546 <span class="comment">    \/\/\/ implemented using erase_one().<\/span>$/;"	a
l00546	doxygen-html/a00030_source.html	/^<a name="l00546"><\/a>00546         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iter);$/;"	a
l00546	doxygen-html/a00032_source.html	/^<a name="l00546"><\/a>00546     }$/;"	a
l00546	doxygen-html/a00034_source.html	/^<a name="l00546"><\/a>00546     }$/;"	a
l00547	doxygen-html/a00026_source.html	/^<a name="l00547"><\/a>00547             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l00547	doxygen-html/a00028_source.html	/^<a name="l00547"><\/a><a class="code" href="a00004.html#ad61de6ba3d5a99517d5b36e5024f8fe7">00547<\/a> <span class="comment"><\/span>    <a class="code" href="a00004.html#a4a2f9618a073d016e89cd8f1628caae1" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00004.html#ad61de6ba3d5a99517d5b36e5024f8fe7" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00004.html#aa0687761c2d71344ad754a98a8650a92" title="First template parameter: The key type of the btree.">key_type<\/a> &amp;key)$/;"	a
l00547	doxygen-html/a00030_source.html	/^<a name="l00547"><\/a>00547     }$/;"	a
l00547	doxygen-html/a00032_source.html	/^<a name="l00547"><\/a>00547 <span class="preprocessor">#endif<\/span>$/;"	a
l00547	doxygen-html/a00034_source.html	/^<a name="l00547"><\/a>00547 <span class="preprocessor">#endif<\/span>$/;"	a
l00548	doxygen-html/a00026_source.html	/^<a name="l00548"><\/a>00548                 <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00548	doxygen-html/a00028_source.html	/^<a name="l00548"><\/a>00548     {$/;"	a
l00548	doxygen-html/a00030_source.html	/^<a name="l00548"><\/a>00548 $/;"	a
l00548	doxygen-html/a00032_source.html	/^<a name="l00548"><\/a>00548 <span class="preprocessor"><\/span>$/;"	a
l00548	doxygen-html/a00034_source.html	/^<a name="l00548"><\/a>00548 <span class="preprocessor"><\/span>$/;"	a
l00549	doxygen-html/a00026_source.html	/^<a name="l00549"><\/a>00549                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00549	doxygen-html/a00028_source.html	/^<a name="l00549"><\/a>00549         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(key);$/;"	a
l00549	doxygen-html/a00030_source.html	/^<a name="l00549"><\/a>00549 <span class="preprocessor">#ifdef BTREE_TODO<\/span>$/;"	a
l00549	doxygen-html/a00032_source.html	/^<a name="l00549"><\/a>00549 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l00549	doxygen-html/a00034_source.html	/^<a name="l00549"><\/a>00549 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l00550	doxygen-html/a00026_source.html	/^<a name="l00550"><\/a>00550             }$/;"	a
l00550	doxygen-html/a00028_source.html	/^<a name="l00550"><\/a>00550     }$/;"	a
l00550	doxygen-html/a00030_source.html	/^<a name="l00550"><\/a>00550 <span class="preprocessor"><\/span><span class="comment">    \/\/\/ Erase all key\/data pairs in the range [first,last). This function is<\/span>$/;"	a
l00550	doxygen-html/a00032_source.html	/^<a name="l00550"><\/a>00550 <span class="preprocessor"><\/span><span class="keyword">public<\/span>:$/;"	a
l00550	doxygen-html/a00034_source.html	/^<a name="l00550"><\/a>00550 <span class="preprocessor"><\/span><span class="keyword">public<\/span>:$/;"	a
l00551	doxygen-html/a00026_source.html	/^<a name="l00551"><\/a>00551             <span class="keywordflow">else<\/span> {$/;"	a
l00551	doxygen-html/a00028_source.html	/^<a name="l00551"><\/a>00551 <span class="comment"><\/span>$/;"	a
l00551	doxygen-html/a00030_source.html	/^<a name="l00551"><\/a>00551 <span class="comment"><\/span><span class="comment">    \/\/\/ currently not implemented by the B+ Tree.<\/span>$/;"	a
l00551	doxygen-html/a00032_source.html	/^<a name="l00551"><\/a>00551     <span class="comment">\/\/ *** Debug Printing<\/span>$/;"	a
l00551	doxygen-html/a00034_source.html	/^<a name="l00551"><\/a>00551     <span class="comment">\/\/ *** Debug Printing<\/span>$/;"	a
l00552	doxygen-html/a00026_source.html	/^<a name="l00552"><\/a>00552                 <span class="comment">\/\/ this is end()<\/span>$/;"	a
l00552	doxygen-html/a00028_source.html	/^<a name="l00552"><\/a>00552 <span class="comment">    \/\/\/ Erase the key\/data pair referenced by the iterator.<\/span>$/;"	a
l00552	doxygen-html/a00030_source.html	/^<a name="l00552"><\/a><a class="code" href="a00005.html#a213de9620ab9ecee3286769bb4415030">00552<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#af53814c6408f8708d5c755e3277b92d4" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* first *\/<\/span>, <a class="code" href="a00005.html#a979a7cd352bd12f3fdd4554f65e56322" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* last *\/<\/span>)$/;"	a
l00552	doxygen-html/a00032_source.html	/^<a name="l00552"><\/a>00552 <span class="comment"><\/span>$/;"	a
l00552	doxygen-html/a00034_source.html	/^<a name="l00552"><\/a>00552 <span class="comment"><\/span>$/;"	a
l00553	doxygen-html/a00026_source.html	/^<a name="l00553"><\/a>00553                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00553	doxygen-html/a00028_source.html	/^<a name="l00553"><\/a><a class="code" href="a00004.html#a23f1f270183e77c1035b829081ebc8c9">00553<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#ad61de6ba3d5a99517d5b36e5024f8fe7" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> iter)$/;"	a
l00553	doxygen-html/a00030_source.html	/^<a name="l00553"><\/a>00553     {$/;"	a
l00553	doxygen-html/a00032_source.html	/^<a name="l00553"><\/a>00553 <span class="comment">    \/\/\/ Print out the B+ tree structure with keys onto the given ostream. This function<\/span>$/;"	a
l00553	doxygen-html/a00034_source.html	/^<a name="l00553"><\/a>00553 <span class="comment">    \/\/\/ Print out the B+ tree structure with keys onto the given ostream. This function<\/span>$/;"	a
l00554	doxygen-html/a00026_source.html	/^<a name="l00554"><\/a>00554             }$/;"	a
l00554	doxygen-html/a00028_source.html	/^<a name="l00554"><\/a>00554     {$/;"	a
l00554	doxygen-html/a00030_source.html	/^<a name="l00554"><\/a>00554         abort();$/;"	a
l00554	doxygen-html/a00032_source.html	/^<a name="l00554"><\/a>00554 <span class="comment">    \/\/\/ requires that the header is compiled with BTREE_DEBUG and that key_type<\/span>$/;"	a
l00554	doxygen-html/a00034_source.html	/^<a name="l00554"><\/a>00554 <span class="comment">    \/\/\/ requires that the header is compiled with BTREE_DEBUG and that key_type<\/span>$/;"	a
l00555	doxygen-html/a00026_source.html	/^<a name="l00555"><\/a>00555 $/;"	a
l00555	doxygen-html/a00028_source.html	/^<a name="l00555"><\/a>00555         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iter);$/;"	a
l00555	doxygen-html/a00030_source.html	/^<a name="l00555"><\/a>00555     }$/;"	a
l00555	doxygen-html/a00032_source.html	/^<a name="l00555"><\/a>00555 <span class="comment">    \/\/\/ is printable via std::ostream.<\/span>$/;"	a
l00555	doxygen-html/a00034_source.html	/^<a name="l00555"><\/a>00555 <span class="comment">    \/\/\/ is printable via std::ostream.<\/span>$/;"	a
l00556	doxygen-html/a00026_source.html	/^<a name="l00556"><\/a>00556             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00556	doxygen-html/a00028_source.html	/^<a name="l00556"><\/a>00556     }$/;"	a
l00556	doxygen-html/a00030_source.html	/^<a name="l00556"><\/a>00556 <span class="preprocessor">#endif<\/span>$/;"	a
l00556	doxygen-html/a00032_source.html	/^<a name="l00556"><\/a><a class="code" href="a00006.html#a6aaf291909c709ea33419940352288b3">00556<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#a6aaf291909c709ea33419940352288b3" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00556	doxygen-html/a00034_source.html	/^<a name="l00556"><\/a><a class="code" href="a00009.html#ab52f7877dc24a1ada22eb093346926ad">00556<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#ab52f7877dc24a1ada22eb093346926ad" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00557	doxygen-html/a00026_source.html	/^<a name="l00557"><\/a>00557         }$/;"	a
l00557	doxygen-html/a00028_source.html	/^<a name="l00557"><\/a>00557 $/;"	a
l00557	doxygen-html/a00030_source.html	/^<a name="l00557"><\/a>00557 <span class="preprocessor"><\/span>$/;"	a
l00557	doxygen-html/a00032_source.html	/^<a name="l00557"><\/a>00557 <span class="keyword">    <\/span>{$/;"	a
l00557	doxygen-html/a00034_source.html	/^<a name="l00557"><\/a>00557 <span class="keyword">    <\/span>{$/;"	a
l00558	doxygen-html/a00026_source.html	/^<a name="l00558"><\/a>00558 <span class="comment"><\/span>$/;"	a
l00558	doxygen-html/a00028_source.html	/^<a name="l00558"><\/a>00558 <span class="preprocessor">#ifdef BTREE_TODO<\/span>$/;"	a
l00558	doxygen-html/a00030_source.html	/^<a name="l00558"><\/a>00558 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l00558	doxygen-html/a00032_source.html	/^<a name="l00558"><\/a>00558         <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(os);$/;"	a
l00558	doxygen-html/a00034_source.html	/^<a name="l00558"><\/a>00558         <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(os);$/;"	a
l00559	doxygen-html/a00026_source.html	/^<a name="l00559"><\/a>00559 <span class="comment">        \/\/\/ Postfix++ advance the iterator to the next slot<\/span>$/;"	a
l00559	doxygen-html/a00028_source.html	/^<a name="l00559"><\/a>00559 <span class="preprocessor"><\/span><span class="comment">    \/\/\/ Erase all key\/data pairs in the range [first,last). This function is<\/span>$/;"	a
l00559	doxygen-html/a00030_source.html	/^<a name="l00559"><\/a>00559 <span class="preprocessor"><\/span><span class="keyword">public<\/span>:$/;"	a
l00559	doxygen-html/a00032_source.html	/^<a name="l00559"><\/a>00559     }$/;"	a
l00559	doxygen-html/a00034_source.html	/^<a name="l00559"><\/a>00559     }$/;"	a
l00560	doxygen-html/a00026_source.html	/^<a name="l00560"><\/a><a class="code" href="a00016.html#a1367882a6316d3e4d9075ece22ea77bf">00560<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00016.html#affd98a29650798f84818a1de2a0dbc35" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l00560	doxygen-html/a00028_source.html	/^<a name="l00560"><\/a>00560 <span class="comment"><\/span><span class="comment">    \/\/\/ currently not implemented by the B+ Tree.<\/span>$/;"	a
l00560	doxygen-html/a00030_source.html	/^<a name="l00560"><\/a>00560     <span class="comment">\/\/ *** Debug Printing<\/span>$/;"	a
l00560	doxygen-html/a00032_source.html	/^<a name="l00560"><\/a>00560 <span class="comment"><\/span>$/;"	a
l00560	doxygen-html/a00034_source.html	/^<a name="l00560"><\/a>00560 <span class="comment"><\/span>$/;"	a
l00561	doxygen-html/a00026_source.html	/^<a name="l00561"><\/a>00561         {$/;"	a
l00561	doxygen-html/a00028_source.html	/^<a name="l00561"><\/a><a class="code" href="a00004.html#a99a3bccbdfef9c34596275e3da4da018">00561<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#ad61de6ba3d5a99517d5b36e5024f8fe7" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* first *\/<\/span>, <a class="code" href="a00004.html#a2568bb45a7daa093f6e0c1869c693597" title="STL-like iterator object for B+ tree items.">iterator<\/a> <span class="comment">\/* last *\/<\/span>)$/;"	a
l00561	doxygen-html/a00030_source.html	/^<a name="l00561"><\/a>00561 <span class="comment"><\/span>$/;"	a
l00561	doxygen-html/a00032_source.html	/^<a name="l00561"><\/a>00561 <span class="comment">    \/\/\/ Print out only the leaves via the double linked list.<\/span>$/;"	a
l00561	doxygen-html/a00034_source.html	/^<a name="l00561"><\/a>00561 <span class="comment">    \/\/\/ Print out only the leaves via the double linked list.<\/span>$/;"	a
l00562	doxygen-html/a00026_source.html	/^<a name="l00562"><\/a>00562             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l00562	doxygen-html/a00028_source.html	/^<a name="l00562"><\/a>00562     {$/;"	a
l00562	doxygen-html/a00030_source.html	/^<a name="l00562"><\/a>00562 <span class="comment">    \/\/\/ Print out the B+ tree structure with keys onto the given ostream. This function<\/span>$/;"	a
l00562	doxygen-html/a00032_source.html	/^<a name="l00562"><\/a><a class="code" href="a00006.html#a8818ff27dd8b2275d4b6a68d728c6d77">00562<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#a8818ff27dd8b2275d4b6a68d728c6d77" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00562	doxygen-html/a00034_source.html	/^<a name="l00562"><\/a><a class="code" href="a00009.html#ab4f43a518a8294478c0a635e6cb822f4">00562<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#ab4f43a518a8294478c0a635e6cb822f4" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00563	doxygen-html/a00026_source.html	/^<a name="l00563"><\/a>00563 $/;"	a
l00563	doxygen-html/a00028_source.html	/^<a name="l00563"><\/a>00563         abort();$/;"	a
l00563	doxygen-html/a00030_source.html	/^<a name="l00563"><\/a>00563 <span class="comment">    \/\/\/ requires that the header is compiled with BTREE_DEBUG and that key_type<\/span>$/;"	a
l00563	doxygen-html/a00032_source.html	/^<a name="l00563"><\/a>00563 <span class="keyword">    <\/span>{$/;"	a
l00563	doxygen-html/a00034_source.html	/^<a name="l00563"><\/a>00563 <span class="keyword">    <\/span>{$/;"	a
l00564	doxygen-html/a00026_source.html	/^<a name="l00564"><\/a>00564             <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> + 1 &lt; <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>) {$/;"	a
l00564	doxygen-html/a00028_source.html	/^<a name="l00564"><\/a>00564     }$/;"	a
l00564	doxygen-html/a00030_source.html	/^<a name="l00564"><\/a>00564 <span class="comment">    \/\/\/ is printable via std::ostream.<\/span>$/;"	a
l00564	doxygen-html/a00032_source.html	/^<a name="l00564"><\/a>00564         <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(os);$/;"	a
l00564	doxygen-html/a00034_source.html	/^<a name="l00564"><\/a>00564         <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(os);$/;"	a
l00565	doxygen-html/a00026_source.html	/^<a name="l00565"><\/a>00565                 ++<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00565	doxygen-html/a00028_source.html	/^<a name="l00565"><\/a>00565 <span class="preprocessor">#endif<\/span>$/;"	a
l00565	doxygen-html/a00030_source.html	/^<a name="l00565"><\/a><a class="code" href="a00005.html#a1beb6a5071999014c38504e595e39138">00565<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a1beb6a5071999014c38504e595e39138" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00565	doxygen-html/a00032_source.html	/^<a name="l00565"><\/a>00565     }$/;"	a
l00565	doxygen-html/a00034_source.html	/^<a name="l00565"><\/a>00565     }$/;"	a
l00566	doxygen-html/a00026_source.html	/^<a name="l00566"><\/a>00566             }$/;"	a
l00566	doxygen-html/a00028_source.html	/^<a name="l00566"><\/a>00566 <span class="preprocessor"><\/span>$/;"	a
l00566	doxygen-html/a00030_source.html	/^<a name="l00566"><\/a>00566 <span class="keyword">    <\/span>{$/;"	a
l00566	doxygen-html/a00032_source.html	/^<a name="l00566"><\/a>00566 <span class="preprocessor">#endif<\/span>$/;"	a
l00566	doxygen-html/a00034_source.html	/^<a name="l00566"><\/a>00566 $/;"	a
l00567	doxygen-html/a00026_source.html	/^<a name="l00567"><\/a>00567             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l00567	doxygen-html/a00028_source.html	/^<a name="l00567"><\/a>00567 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l00567	doxygen-html/a00030_source.html	/^<a name="l00567"><\/a>00567         <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(os);$/;"	a
l00567	doxygen-html/a00032_source.html	/^<a name="l00567"><\/a>00567 <span class="preprocessor"><\/span>$/;"	a
l00567	doxygen-html/a00034_source.html	/^<a name="l00567"><\/a>00567 <span class="preprocessor">#endif<\/span>$/;"	a
l00568	doxygen-html/a00026_source.html	/^<a name="l00568"><\/a>00568                 <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00568	doxygen-html/a00028_source.html	/^<a name="l00568"><\/a>00568 <span class="preprocessor"><\/span><span class="keyword">public<\/span>:$/;"	a
l00568	doxygen-html/a00030_source.html	/^<a name="l00568"><\/a>00568     }$/;"	a
l00568	doxygen-html/a00032_source.html	/^<a name="l00568"><\/a>00568 <span class="keyword">public<\/span>:$/;"	a
l00568	doxygen-html/a00034_source.html	/^<a name="l00568"><\/a>00568 <span class="preprocessor"><\/span>$/;"	a
l00569	doxygen-html/a00026_source.html	/^<a name="l00569"><\/a>00569                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00569	doxygen-html/a00028_source.html	/^<a name="l00569"><\/a>00569     <span class="comment">\/\/ *** Debug Printing<\/span>$/;"	a
l00569	doxygen-html/a00030_source.html	/^<a name="l00569"><\/a>00569 <span class="comment"><\/span>$/;"	a
l00569	doxygen-html/a00032_source.html	/^<a name="l00569"><\/a>00569     <span class="comment">\/\/ *** Verification of B+ Tree Invariants<\/span>$/;"	a
l00569	doxygen-html/a00034_source.html	/^<a name="l00569"><\/a>00569 <span class="keyword">public<\/span>:$/;"	a
l00570	doxygen-html/a00026_source.html	/^<a name="l00570"><\/a>00570             }$/;"	a
l00570	doxygen-html/a00028_source.html	/^<a name="l00570"><\/a>00570 <span class="comment"><\/span>$/;"	a
l00570	doxygen-html/a00030_source.html	/^<a name="l00570"><\/a>00570 <span class="comment">    \/\/\/ Print out only the leaves via the double linked list.<\/span>$/;"	a
l00570	doxygen-html/a00032_source.html	/^<a name="l00570"><\/a>00570 <span class="comment"><\/span>$/;"	a
l00570	doxygen-html/a00034_source.html	/^<a name="l00570"><\/a>00570     <span class="comment">\/\/ *** Verification of B+ Tree Invariants<\/span>$/;"	a
l00571	doxygen-html/a00026_source.html	/^<a name="l00571"><\/a>00571             <span class="keywordflow">else<\/span> {$/;"	a
l00571	doxygen-html/a00028_source.html	/^<a name="l00571"><\/a>00571 <span class="comment">    \/\/\/ Print out the B+ tree structure with keys onto the given ostream. This function<\/span>$/;"	a
l00571	doxygen-html/a00030_source.html	/^<a name="l00571"><\/a><a class="code" href="a00005.html#a57515b3f833998d01408a65a92a8edf2">00571<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a57515b3f833998d01408a65a92a8edf2" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00571	doxygen-html/a00032_source.html	/^<a name="l00571"><\/a>00571 <span class="comment">    \/\/\/ Run a thorough verification of all B+ tree invariants. The program<\/span>$/;"	a
l00571	doxygen-html/a00034_source.html	/^<a name="l00571"><\/a>00571 <span class="comment"><\/span>$/;"	a
l00572	doxygen-html/a00026_source.html	/^<a name="l00572"><\/a>00572                 <span class="comment">\/\/ this is end()<\/span>$/;"	a
l00572	doxygen-html/a00028_source.html	/^<a name="l00572"><\/a>00572 <span class="comment">    \/\/\/ requires that the header is compiled with BTREE_DEBUG and that key_type<\/span>$/;"	a
l00572	doxygen-html/a00030_source.html	/^<a name="l00572"><\/a>00572 <span class="keyword">    <\/span>{$/;"	a
l00572	doxygen-html/a00032_source.html	/^<a name="l00572"><\/a>00572 <span class="comment">    \/\/\/ aborts via BTREE_ASSERT() if something is wrong.<\/span>$/;"	a
l00572	doxygen-html/a00034_source.html	/^<a name="l00572"><\/a>00572 <span class="comment">    \/\/\/ Run a thorough verification of all B+ tree invariants. The program<\/span>$/;"	a
l00573	doxygen-html/a00026_source.html	/^<a name="l00573"><\/a>00573                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00573	doxygen-html/a00028_source.html	/^<a name="l00573"><\/a>00573 <span class="comment">    \/\/\/ is printable via std::ostream.<\/span>$/;"	a
l00573	doxygen-html/a00030_source.html	/^<a name="l00573"><\/a>00573         <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(os);$/;"	a
l00573	doxygen-html/a00032_source.html	/^<a name="l00573"><\/a><a class="code" href="a00006.html#a862c504ed632b8591756c45273087e5a">00573<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#a862c504ed632b8591756c45273087e5a" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00573	doxygen-html/a00034_source.html	/^<a name="l00573"><\/a>00573 <span class="comment">    \/\/\/ aborts via BTREE_ASSERT() if something is wrong.<\/span>$/;"	a
l00574	doxygen-html/a00026_source.html	/^<a name="l00574"><\/a>00574             }$/;"	a
l00574	doxygen-html/a00028_source.html	/^<a name="l00574"><\/a><a class="code" href="a00004.html#a2ca47ab7ffcd8ee2940c3fdd8690d002">00574<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#a2ca47ab7ffcd8ee2940c3fdd8690d002" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00574	doxygen-html/a00030_source.html	/^<a name="l00574"><\/a>00574     }$/;"	a
l00574	doxygen-html/a00032_source.html	/^<a name="l00574"><\/a>00574 <span class="keyword">    <\/span>{$/;"	a
l00574	doxygen-html/a00034_source.html	/^<a name="l00574"><\/a><a class="code" href="a00009.html#af88455baba68554522a181ad2a8dc8fc">00574<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#af88455baba68554522a181ad2a8dc8fc" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00575	doxygen-html/a00026_source.html	/^<a name="l00575"><\/a>00575 $/;"	a
l00575	doxygen-html/a00028_source.html	/^<a name="l00575"><\/a>00575 <span class="keyword">    <\/span>{$/;"	a
l00575	doxygen-html/a00030_source.html	/^<a name="l00575"><\/a>00575 <span class="preprocessor">#endif<\/span>$/;"	a
l00575	doxygen-html/a00032_source.html	/^<a name="l00575"><\/a>00575         <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l00575	doxygen-html/a00034_source.html	/^<a name="l00575"><\/a>00575 <span class="keyword">    <\/span>{$/;"	a
l00576	doxygen-html/a00026_source.html	/^<a name="l00576"><\/a>00576             <span class="keywordflow">return<\/span> tmp;$/;"	a
l00576	doxygen-html/a00028_source.html	/^<a name="l00576"><\/a>00576         <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(os);$/;"	a
l00576	doxygen-html/a00030_source.html	/^<a name="l00576"><\/a>00576 <span class="preprocessor"><\/span>$/;"	a
l00576	doxygen-html/a00032_source.html	/^<a name="l00576"><\/a>00576     }$/;"	a
l00576	doxygen-html/a00034_source.html	/^<a name="l00576"><\/a>00576         <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l00577	doxygen-html/a00026_source.html	/^<a name="l00577"><\/a>00577         }$/;"	a
l00577	doxygen-html/a00028_source.html	/^<a name="l00577"><\/a>00577     }$/;"	a
l00577	doxygen-html/a00030_source.html	/^<a name="l00577"><\/a>00577 <span class="keyword">public<\/span>:$/;"	a
l00577	doxygen-html/a00032_source.html	/^<a name="l00577"><\/a>00577 $/;"	a
l00577	doxygen-html/a00034_source.html	/^<a name="l00577"><\/a>00577     }$/;"	a
l00578	doxygen-html/a00026_source.html	/^<a name="l00578"><\/a>00578 <span class="comment"><\/span>$/;"	a
l00578	doxygen-html/a00028_source.html	/^<a name="l00578"><\/a>00578 <span class="comment"><\/span>$/;"	a
l00578	doxygen-html/a00030_source.html	/^<a name="l00578"><\/a>00578     <span class="comment">\/\/ *** Verification of B+ Tree Invariants<\/span>$/;"	a
l00578	doxygen-html/a00032_source.html	/^<a name="l00578"><\/a>00578 <span class="keyword">public<\/span>:$/;"	a
l00578	doxygen-html/a00034_source.html	/^<a name="l00578"><\/a>00578 $/;"	a
l00579	doxygen-html/a00026_source.html	/^<a name="l00579"><\/a>00579 <span class="comment">        \/\/\/ Prefix-- backstep the iterator to the last slot<\/span>$/;"	a
l00579	doxygen-html/a00028_source.html	/^<a name="l00579"><\/a>00579 <span class="comment">    \/\/\/ Print out only the leaves via the double linked list.<\/span>$/;"	a
l00579	doxygen-html/a00030_source.html	/^<a name="l00579"><\/a>00579 <span class="comment"><\/span>$/;"	a
l00579	doxygen-html/a00032_source.html	/^<a name="l00579"><\/a>00579 <span class="comment"><\/span>$/;"	a
l00579	doxygen-html/a00034_source.html	/^<a name="l00579"><\/a>00579 <span class="keyword">public<\/span>:$/;"	a
l00580	doxygen-html/a00026_source.html	/^<a name="l00580"><\/a><a class="code" href="a00016.html#a5807472b2a7f185f65de62b650545f0b">00580<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00016.html#a5807472b2a7f185f65de62b650545f0b" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>()$/;"	a
l00580	doxygen-html/a00028_source.html	/^<a name="l00580"><\/a><a class="code" href="a00004.html#a0170dc9ca200e9e7a91d7a311b22ef0c">00580<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#a0170dc9ca200e9e7a91d7a311b22ef0c" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00580	doxygen-html/a00030_source.html	/^<a name="l00580"><\/a>00580 <span class="comment">    \/\/\/ Run a thorough verification of all B+ tree invariants. The program<\/span>$/;"	a
l00580	doxygen-html/a00032_source.html	/^<a name="l00580"><\/a>00580 <span class="comment">    \/\/\/ Dump the contents of the B+ tree out onto an ostream as a binary<\/span>$/;"	a
l00580	doxygen-html/a00034_source.html	/^<a name="l00580"><\/a>00580 <span class="comment"><\/span>$/;"	a
l00581	doxygen-html/a00026_source.html	/^<a name="l00581"><\/a>00581         {$/;"	a
l00581	doxygen-html/a00028_source.html	/^<a name="l00581"><\/a>00581 <span class="keyword">    <\/span>{$/;"	a
l00581	doxygen-html/a00030_source.html	/^<a name="l00581"><\/a>00581 <span class="comment">    \/\/\/ aborts via BTREE_ASSERT() if something is wrong.<\/span>$/;"	a
l00581	doxygen-html/a00032_source.html	/^<a name="l00581"><\/a>00581 <span class="comment">    \/\/\/ image. The image contains memory pointers which will be fixed when the<\/span>$/;"	a
l00581	doxygen-html/a00034_source.html	/^<a name="l00581"><\/a>00581 <span class="comment">    \/\/\/ Dump the contents of the B+ tree out onto an ostream as a binary<\/span>$/;"	a
l00582	doxygen-html/a00026_source.html	/^<a name="l00582"><\/a>00582             <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> &gt; 0) {$/;"	a
l00582	doxygen-html/a00028_source.html	/^<a name="l00582"><\/a>00582         <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(os);$/;"	a
l00582	doxygen-html/a00030_source.html	/^<a name="l00582"><\/a><a class="code" href="a00005.html#a4bebd9c9a9b8d33f120a65ee74358e4e">00582<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a4bebd9c9a9b8d33f120a65ee74358e4e" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00582	doxygen-html/a00032_source.html	/^<a name="l00582"><\/a>00582 <span class="comment">    \/\/\/ image is restored. For this to work your key_type must be an integral<\/span>$/;"	a
l00582	doxygen-html/a00034_source.html	/^<a name="l00582"><\/a>00582 <span class="comment">    \/\/\/ image. The image contains memory pointers which will be fixed when the<\/span>$/;"	a
l00583	doxygen-html/a00026_source.html	/^<a name="l00583"><\/a>00583                 --<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00583	doxygen-html/a00028_source.html	/^<a name="l00583"><\/a>00583     }$/;"	a
l00583	doxygen-html/a00030_source.html	/^<a name="l00583"><\/a>00583 <span class="keyword">    <\/span>{$/;"	a
l00583	doxygen-html/a00032_source.html	/^<a name="l00583"><\/a>00583 <span class="comment">    \/\/\/ type and contain no pointers or references.<\/span>$/;"	a
l00583	doxygen-html/a00034_source.html	/^<a name="l00583"><\/a>00583 <span class="comment">    \/\/\/ image is restored. For this to work your key_type must be an integral<\/span>$/;"	a
l00584	doxygen-html/a00026_source.html	/^<a name="l00584"><\/a>00584             }$/;"	a
l00584	doxygen-html/a00028_source.html	/^<a name="l00584"><\/a>00584 <span class="preprocessor">#endif<\/span>$/;"	a
l00584	doxygen-html/a00030_source.html	/^<a name="l00584"><\/a>00584         <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l00584	doxygen-html/a00032_source.html	/^<a name="l00584"><\/a><a class="code" href="a00006.html#af443508ecb8fd77f32f01709f2f9d666">00584<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00006.html#af443508ecb8fd77f32f01709f2f9d666" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00584	doxygen-html/a00034_source.html	/^<a name="l00584"><\/a>00584 <span class="comment">    \/\/\/ type and contain no pointers or references.<\/span>$/;"	a
l00585	doxygen-html/a00026_source.html	/^<a name="l00585"><\/a>00585             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00585	doxygen-html/a00028_source.html	/^<a name="l00585"><\/a>00585 <span class="preprocessor"><\/span>$/;"	a
l00585	doxygen-html/a00030_source.html	/^<a name="l00585"><\/a>00585     }$/;"	a
l00585	doxygen-html/a00032_source.html	/^<a name="l00585"><\/a>00585 <span class="keyword">    <\/span>{$/;"	a
l00585	doxygen-html/a00034_source.html	/^<a name="l00585"><\/a><a class="code" href="a00009.html#ab482ba64445f71f2c088f0c5ee981ea5">00585<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00009.html#ab482ba64445f71f2c088f0c5ee981ea5" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00586	doxygen-html/a00026_source.html	/^<a name="l00586"><\/a>00586                 <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00586	doxygen-html/a00028_source.html	/^<a name="l00586"><\/a>00586 <span class="keyword">public<\/span>:$/;"	a
l00586	doxygen-html/a00030_source.html	/^<a name="l00586"><\/a>00586 $/;"	a
l00586	doxygen-html/a00032_source.html	/^<a name="l00586"><\/a>00586         <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(os);$/;"	a
l00586	doxygen-html/a00034_source.html	/^<a name="l00586"><\/a>00586 <span class="keyword">    <\/span>{$/;"	a
l00587	doxygen-html/a00026_source.html	/^<a name="l00587"><\/a>00587                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> - 1;$/;"	a
l00587	doxygen-html/a00028_source.html	/^<a name="l00587"><\/a>00587     <span class="comment">\/\/ *** Verification of B+ Tree Invariants<\/span>$/;"	a
l00587	doxygen-html/a00030_source.html	/^<a name="l00587"><\/a>00587 <span class="keyword">public<\/span>:$/;"	a
l00587	doxygen-html/a00032_source.html	/^<a name="l00587"><\/a>00587     }$/;"	a
l00587	doxygen-html/a00034_source.html	/^<a name="l00587"><\/a>00587         <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(os);$/;"	a
l00588	doxygen-html/a00026_source.html	/^<a name="l00588"><\/a>00588             }$/;"	a
l00588	doxygen-html/a00028_source.html	/^<a name="l00588"><\/a>00588 <span class="comment"><\/span>$/;"	a
l00588	doxygen-html/a00030_source.html	/^<a name="l00588"><\/a>00588 <span class="comment"><\/span>$/;"	a
l00588	doxygen-html/a00032_source.html	/^<a name="l00588"><\/a>00588 <span class="comment"><\/span>$/;"	a
l00588	doxygen-html/a00034_source.html	/^<a name="l00588"><\/a>00588     }$/;"	a
l00589	doxygen-html/a00026_source.html	/^<a name="l00589"><\/a>00589             <span class="keywordflow">else<\/span> {$/;"	a
l00589	doxygen-html/a00028_source.html	/^<a name="l00589"><\/a>00589 <span class="comment">    \/\/\/ Run a thorough verification of all B+ tree invariants. The program<\/span>$/;"	a
l00589	doxygen-html/a00030_source.html	/^<a name="l00589"><\/a>00589 <span class="comment">    \/\/\/ Dump the contents of the B+ tree out onto an ostream as a binary<\/span>$/;"	a
l00589	doxygen-html/a00032_source.html	/^<a name="l00589"><\/a>00589 <span class="comment">    \/\/\/ Restore a binary image of a dumped B+ tree from an istream. The B+ tree<\/span>$/;"	a
l00589	doxygen-html/a00034_source.html	/^<a name="l00589"><\/a>00589 <span class="comment"><\/span>$/;"	a
l00590	doxygen-html/a00026_source.html	/^<a name="l00590"><\/a>00590                 <span class="comment">\/\/ this is begin()<\/span>$/;"	a
l00590	doxygen-html/a00028_source.html	/^<a name="l00590"><\/a>00590 <span class="comment">    \/\/\/ aborts via BTREE_ASSERT() if something is wrong.<\/span>$/;"	a
l00590	doxygen-html/a00030_source.html	/^<a name="l00590"><\/a>00590 <span class="comment">    \/\/\/ image. The image contains memory pointers which will be fixed when the<\/span>$/;"	a
l00590	doxygen-html/a00032_source.html	/^<a name="l00590"><\/a>00590 <span class="comment">    \/\/\/ pointers are fixed using the dump order. For dump and restore to work<\/span>$/;"	a
l00590	doxygen-html/a00034_source.html	/^<a name="l00590"><\/a>00590 <span class="comment">    \/\/\/ Restore a binary image of a dumped B+ tree from an istream. The B+ tree<\/span>$/;"	a
l00591	doxygen-html/a00026_source.html	/^<a name="l00591"><\/a>00591                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00591	doxygen-html/a00028_source.html	/^<a name="l00591"><\/a><a class="code" href="a00004.html#a5001888f16d9f8fdc634cec05c67f961">00591<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#a5001888f16d9f8fdc634cec05c67f961" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00591	doxygen-html/a00030_source.html	/^<a name="l00591"><\/a>00591 <span class="comment">    \/\/\/ image is restored. For this to work your key_type and data_type must be<\/span>$/;"	a
l00591	doxygen-html/a00032_source.html	/^<a name="l00591"><\/a>00591 <span class="comment">    \/\/\/ your key_type must be an integral type and contain no pointers or<\/span>$/;"	a
l00591	doxygen-html/a00034_source.html	/^<a name="l00591"><\/a>00591 <span class="comment">    \/\/\/ pointers are fixed using the dump order. For dump and restore to work<\/span>$/;"	a
l00592	doxygen-html/a00026_source.html	/^<a name="l00592"><\/a>00592             }$/;"	a
l00592	doxygen-html/a00028_source.html	/^<a name="l00592"><\/a>00592 <span class="keyword">    <\/span>{$/;"	a
l00592	doxygen-html/a00030_source.html	/^<a name="l00592"><\/a>00592 <span class="comment">    \/\/\/ integral types and contain no pointers or references.<\/span>$/;"	a
l00592	doxygen-html/a00032_source.html	/^<a name="l00592"><\/a>00592 <span class="comment">    \/\/\/ references. Returns true if the restore was successful.<\/span>$/;"	a
l00592	doxygen-html/a00034_source.html	/^<a name="l00592"><\/a>00592 <span class="comment">    \/\/\/ your key_type must be an integral type and contain no pointers or<\/span>$/;"	a
l00593	doxygen-html/a00026_source.html	/^<a name="l00593"><\/a>00593 $/;"	a
l00593	doxygen-html/a00028_source.html	/^<a name="l00593"><\/a>00593         <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l00593	doxygen-html/a00030_source.html	/^<a name="l00593"><\/a><a class="code" href="a00005.html#a99f1ed0f5efa8232ed7b7e0c870c0865">00593<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00005.html#a99f1ed0f5efa8232ed7b7e0c870c0865" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00593	doxygen-html/a00032_source.html	/^<a name="l00593"><\/a><a class="code" href="a00006.html#a7f6dd7739f76cf5d1a31507ca3d80197">00593<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00006.html#a7f6dd7739f76cf5d1a31507ca3d80197" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(std::istream &amp;is)$/;"	a
l00593	doxygen-html/a00034_source.html	/^<a name="l00593"><\/a>00593 <span class="comment">    \/\/\/ references. Returns true if the restore was successful.<\/span>$/;"	a
l00594	doxygen-html/a00026_source.html	/^<a name="l00594"><\/a>00594             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00594	doxygen-html/a00028_source.html	/^<a name="l00594"><\/a>00594     }$/;"	a
l00594	doxygen-html/a00030_source.html	/^<a name="l00594"><\/a>00594 <span class="keyword">    <\/span>{$/;"	a
l00594	doxygen-html/a00032_source.html	/^<a name="l00594"><\/a>00594     {$/;"	a
l00594	doxygen-html/a00034_source.html	/^<a name="l00594"><\/a><a class="code" href="a00009.html#a2f73e4b0a1d3ed2f6e73ef33dea0ac46">00594<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00009.html#a2f73e4b0a1d3ed2f6e73ef33dea0ac46" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(std::istream &amp;is)$/;"	a
l00595	doxygen-html/a00026_source.html	/^<a name="l00595"><\/a>00595         }$/;"	a
l00595	doxygen-html/a00028_source.html	/^<a name="l00595"><\/a>00595 $/;"	a
l00595	doxygen-html/a00030_source.html	/^<a name="l00595"><\/a>00595         <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(os);$/;"	a
l00595	doxygen-html/a00032_source.html	/^<a name="l00595"><\/a>00595         <span class="keywordflow">return<\/span> <a class="code" href="a00006.html#aa78a74c628ee6ef25c5bffce7a9aacb2" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(is);$/;"	a
l00595	doxygen-html/a00034_source.html	/^<a name="l00595"><\/a>00595     {$/;"	a
l00596	doxygen-html/a00026_source.html	/^<a name="l00596"><\/a>00596 <span class="comment"><\/span>$/;"	a
l00596	doxygen-html/a00028_source.html	/^<a name="l00596"><\/a>00596 <span class="keyword">public<\/span>:$/;"	a
l00596	doxygen-html/a00030_source.html	/^<a name="l00596"><\/a>00596     }$/;"	a
l00596	doxygen-html/a00032_source.html	/^<a name="l00596"><\/a>00596     }$/;"	a
l00596	doxygen-html/a00034_source.html	/^<a name="l00596"><\/a>00596         <span class="keywordflow">return<\/span> <a class="code" href="a00009.html#a352435bb00a9126a4c72b565553d13b7" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(is);$/;"	a
l00597	doxygen-html/a00026_source.html	/^<a name="l00597"><\/a>00597 <span class="comment">        \/\/\/ Postfix-- backstep the iterator to the last slot<\/span>$/;"	a
l00597	doxygen-html/a00028_source.html	/^<a name="l00597"><\/a>00597 <span class="comment"><\/span>$/;"	a
l00597	doxygen-html/a00030_source.html	/^<a name="l00597"><\/a>00597 <span class="comment"><\/span>$/;"	a
l00597	doxygen-html/a00032_source.html	/^<a name="l00597"><\/a>00597 };$/;"	a
l00597	doxygen-html/a00034_source.html	/^<a name="l00597"><\/a>00597     }$/;"	a
l00598	doxygen-html/a00026_source.html	/^<a name="l00598"><\/a><a class="code" href="a00016.html#a234e0d078e0373687db74565ad23275b">00598<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00016.html#a5807472b2a7f185f65de62b650545f0b" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l00598	doxygen-html/a00028_source.html	/^<a name="l00598"><\/a>00598 <span class="comment">    \/\/\/ Dump the contents of the B+ tree out onto an ostream as a binary<\/span>$/;"	a
l00598	doxygen-html/a00030_source.html	/^<a name="l00598"><\/a>00598 <span class="comment">    \/\/\/ Restore a binary image of a dumped B+ tree from an istream. The B+ tree<\/span>$/;"	a
l00598	doxygen-html/a00032_source.html	/^<a name="l00598"><\/a>00598 $/;"	a
l00598	doxygen-html/a00034_source.html	/^<a name="l00598"><\/a>00598 };$/;"	a
l00599	doxygen-html/a00026_source.html	/^<a name="l00599"><\/a>00599         {$/;"	a
l00599	doxygen-html/a00028_source.html	/^<a name="l00599"><\/a>00599 <span class="comment">    \/\/\/ image. The image contains memory pointers which will be fixed when the<\/span>$/;"	a
l00599	doxygen-html/a00030_source.html	/^<a name="l00599"><\/a>00599 <span class="comment">    \/\/\/ pointers are fixed using the dump order. For dump and restore to work<\/span>$/;"	a
l00599	doxygen-html/a00032_source.html	/^<a name="l00599"><\/a>00599 } <span class="comment">\/\/ namespace stx<\/span>$/;"	a
l00599	doxygen-html/a00034_source.html	/^<a name="l00599"><\/a>00599 $/;"	a
l00600	doxygen-html/a00026_source.html	/^<a name="l00600"><\/a>00600             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l00600	doxygen-html/a00028_source.html	/^<a name="l00600"><\/a>00600 <span class="comment">    \/\/\/ image is restored. For this to work your key_type and data_type must be<\/span>$/;"	a
l00600	doxygen-html/a00030_source.html	/^<a name="l00600"><\/a>00600 <span class="comment">    \/\/\/ your key_type and data_type must be integral types and contain no<\/span>$/;"	a
l00600	doxygen-html/a00032_source.html	/^<a name="l00600"><\/a>00600 $/;"	a
l00600	doxygen-html/a00034_source.html	/^<a name="l00600"><\/a>00600 } <span class="comment">\/\/ namespace stx<\/span>$/;"	a
l00601	doxygen-html/a00026_source.html	/^<a name="l00601"><\/a>00601 $/;"	a
l00601	doxygen-html/a00028_source.html	/^<a name="l00601"><\/a>00601 <span class="comment">    \/\/\/ integral types and contain no pointers or references.<\/span>$/;"	a
l00601	doxygen-html/a00030_source.html	/^<a name="l00601"><\/a>00601 <span class="comment">    \/\/\/ pointers or references. Returns true if the restore was successful.<\/span>$/;"	a
l00601	doxygen-html/a00032_source.html	/^<a name="l00601"><\/a>00601 <span class="preprocessor">#endif \/\/ _STX_BTREE_MULTISET_H_<\/span>$/;"	a
l00601	doxygen-html/a00034_source.html	/^<a name="l00601"><\/a>00601 $/;"	a
l00602	doxygen-html/a00026_source.html	/^<a name="l00602"><\/a>00602             <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> &gt; 0) {$/;"	a
l00602	doxygen-html/a00028_source.html	/^<a name="l00602"><\/a><a class="code" href="a00004.html#a8794673d23f9ae4525d84dc01f651309">00602<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00004.html#a8794673d23f9ae4525d84dc01f651309" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l00602	doxygen-html/a00030_source.html	/^<a name="l00602"><\/a><a class="code" href="a00005.html#a16bc358a14546c2f83da80108041993c">00602<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00005.html#a16bc358a14546c2f83da80108041993c" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(std::istream &amp;is)$/;"	a
l00602	doxygen-html/a00034_source.html	/^<a name="l00602"><\/a>00602 <span class="preprocessor">#endif \/\/ _STX_BTREE_SET_H_<\/span>$/;"	a
l00603	doxygen-html/a00026_source.html	/^<a name="l00603"><\/a>00603                 --<a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00603	doxygen-html/a00028_source.html	/^<a name="l00603"><\/a>00603 <span class="keyword">    <\/span>{$/;"	a
l00603	doxygen-html/a00030_source.html	/^<a name="l00603"><\/a>00603     {$/;"	a
l00604	doxygen-html/a00026_source.html	/^<a name="l00604"><\/a>00604             }$/;"	a
l00604	doxygen-html/a00028_source.html	/^<a name="l00604"><\/a>00604         <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(os);$/;"	a
l00604	doxygen-html/a00030_source.html	/^<a name="l00604"><\/a>00604         <span class="keywordflow">return<\/span> <a class="code" href="a00005.html#a4fff5ab80801d04325bb5528bfdc4e1e" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(is);$/;"	a
l00605	doxygen-html/a00026_source.html	/^<a name="l00605"><\/a>00605             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00605	doxygen-html/a00028_source.html	/^<a name="l00605"><\/a>00605     }$/;"	a
l00605	doxygen-html/a00030_source.html	/^<a name="l00605"><\/a>00605     }$/;"	a
l00606	doxygen-html/a00026_source.html	/^<a name="l00606"><\/a>00606                 <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00606	doxygen-html/a00028_source.html	/^<a name="l00606"><\/a>00606 <span class="comment"><\/span>$/;"	a
l00606	doxygen-html/a00030_source.html	/^<a name="l00606"><\/a>00606 };$/;"	a
l00607	doxygen-html/a00026_source.html	/^<a name="l00607"><\/a>00607                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> - 1;$/;"	a
l00607	doxygen-html/a00028_source.html	/^<a name="l00607"><\/a>00607 <span class="comment">    \/\/\/ Restore a binary image of a dumped B+ tree from an istream. The B+ tree<\/span>$/;"	a
l00607	doxygen-html/a00030_source.html	/^<a name="l00607"><\/a>00607 $/;"	a
l00608	doxygen-html/a00026_source.html	/^<a name="l00608"><\/a>00608             }$/;"	a
l00608	doxygen-html/a00028_source.html	/^<a name="l00608"><\/a>00608 <span class="comment">    \/\/\/ pointers are fixed using the dump order. For dump and restore to work<\/span>$/;"	a
l00608	doxygen-html/a00030_source.html	/^<a name="l00608"><\/a>00608 } <span class="comment">\/\/ namespace stx<\/span>$/;"	a
l00609	doxygen-html/a00026_source.html	/^<a name="l00609"><\/a>00609             <span class="keywordflow">else<\/span> {$/;"	a
l00609	doxygen-html/a00028_source.html	/^<a name="l00609"><\/a>00609 <span class="comment">    \/\/\/ your key_type and data_type must be integral types and contain no<\/span>$/;"	a
l00609	doxygen-html/a00030_source.html	/^<a name="l00609"><\/a>00609 $/;"	a
l00610	doxygen-html/a00026_source.html	/^<a name="l00610"><\/a>00610                 <span class="comment">\/\/ this is begin()<\/span>$/;"	a
l00610	doxygen-html/a00028_source.html	/^<a name="l00610"><\/a>00610 <span class="comment">    \/\/\/ pointers or references. Returns true if the restore was successful.<\/span>$/;"	a
l00610	doxygen-html/a00030_source.html	/^<a name="l00610"><\/a>00610 <span class="preprocessor">#endif \/\/ _STX_BTREE_MULTIMAP_H_<\/span>$/;"	a
l00611	doxygen-html/a00026_source.html	/^<a name="l00611"><\/a>00611                 <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00611	doxygen-html/a00028_source.html	/^<a name="l00611"><\/a><a class="code" href="a00004.html#a40d04b8ae97fae9e0a91d75f022a8000">00611<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00004.html#a40d04b8ae97fae9e0a91d75f022a8000" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(std::istream &amp;is)$/;"	a
l00612	doxygen-html/a00026_source.html	/^<a name="l00612"><\/a>00612             }$/;"	a
l00612	doxygen-html/a00028_source.html	/^<a name="l00612"><\/a>00612     {$/;"	a
l00613	doxygen-html/a00026_source.html	/^<a name="l00613"><\/a>00613 $/;"	a
l00613	doxygen-html/a00028_source.html	/^<a name="l00613"><\/a>00613         <span class="keywordflow">return<\/span> <a class="code" href="a00004.html#a71462634691fd4ab38cde89991dd8d69" title="The contained implementation object.">tree<\/a>.<a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(is);$/;"	a
l00614	doxygen-html/a00026_source.html	/^<a name="l00614"><\/a>00614             <span class="keywordflow">return<\/span> tmp;$/;"	a
l00614	doxygen-html/a00028_source.html	/^<a name="l00614"><\/a>00614     }$/;"	a
l00615	doxygen-html/a00026_source.html	/^<a name="l00615"><\/a>00615         }$/;"	a
l00615	doxygen-html/a00028_source.html	/^<a name="l00615"><\/a>00615 };$/;"	a
l00616	doxygen-html/a00026_source.html	/^<a name="l00616"><\/a>00616 <span class="comment"><\/span>$/;"	a
l00616	doxygen-html/a00028_source.html	/^<a name="l00616"><\/a>00616 $/;"	a
l00617	doxygen-html/a00026_source.html	/^<a name="l00617"><\/a>00617 <span class="comment">        \/\/\/ Equality of iterators<\/span>$/;"	a
l00617	doxygen-html/a00028_source.html	/^<a name="l00617"><\/a>00617 } <span class="comment">\/\/ namespace stx<\/span>$/;"	a
l00618	doxygen-html/a00026_source.html	/^<a name="l00618"><\/a><a class="code" href="a00016.html#a219e56b7da3e108394d14707f1b05da3">00618<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00016.html#a219e56b7da3e108394d14707f1b05da3" title="Equality of iterators.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l00618	doxygen-html/a00028_source.html	/^<a name="l00618"><\/a>00618 $/;"	a
l00619	doxygen-html/a00026_source.html	/^<a name="l00619"><\/a>00619 <span class="keyword">        <\/span>{$/;"	a
l00619	doxygen-html/a00028_source.html	/^<a name="l00619"><\/a>00619 <span class="preprocessor">#endif \/\/ _STX_BTREE_MAP_H_<\/span>$/;"	a
l00620	doxygen-html/a00026_source.html	/^<a name="l00620"><\/a>00620             <span class="keywordflow">return<\/span> (x.currnode == <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>) &amp;&amp; (x.currslot == <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>);$/;"	a
l00621	doxygen-html/a00026_source.html	/^<a name="l00621"><\/a>00621         }$/;"	a
l00622	doxygen-html/a00026_source.html	/^<a name="l00622"><\/a>00622 <span class="comment"><\/span>$/;"	a
l00623	doxygen-html/a00026_source.html	/^<a name="l00623"><\/a>00623 <span class="comment">        \/\/\/ Inequality of iterators<\/span>$/;"	a
l00624	doxygen-html/a00026_source.html	/^<a name="l00624"><\/a><a class="code" href="a00016.html#ae8b63ca7ab4ca95783fcff9d7381f65d">00624<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00016.html#ae8b63ca7ab4ca95783fcff9d7381f65d" title="Inequality of iterators.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l00625	doxygen-html/a00026_source.html	/^<a name="l00625"><\/a>00625 <span class="keyword">        <\/span>{$/;"	a
l00626	doxygen-html/a00026_source.html	/^<a name="l00626"><\/a>00626             <span class="keywordflow">return<\/span> (x.currnode != <a class="code" href="a00016.html#a2342904be584a159fa07a1fe280428b4" title="The currently referenced leaf node of the tree.">currnode<\/a>) || (x.currslot != <a class="code" href="a00016.html#a7a8172193bcc54048fbc4d38a9b0dde8" title="Current key\/data slot referenced.">currslot<\/a>);$/;"	a
l00627	doxygen-html/a00026_source.html	/^<a name="l00627"><\/a>00627         }$/;"	a
l00628	doxygen-html/a00026_source.html	/^<a name="l00628"><\/a>00628     };$/;"	a
l00629	doxygen-html/a00026_source.html	/^<a name="l00629"><\/a>00629 <span class="comment"><\/span>$/;"	a
l00630	doxygen-html/a00026_source.html	/^<a name="l00630"><\/a>00630 <span class="comment">    \/\/\/ STL-like read-only iterator object for B+ tree items. The iterator<\/span>$/;"	a
l00631	doxygen-html/a00026_source.html	/^<a name="l00631"><\/a>00631 <span class="comment">    \/\/\/ points to a specific slot number in a leaf.<\/span>$/;"	a
l00632	doxygen-html/a00026_source.html	/^<a name="l00632"><\/a><a class="code" href="a00010.html">00632<\/a> <span class="comment"><\/span>    <span class="keyword">class <\/span><a class="code" href="a00010.html" title="STL-like read-only iterator object for B+ tree items.">const_iterator<\/a>$/;"	a
l00633	doxygen-html/a00026_source.html	/^<a name="l00633"><\/a>00633     {$/;"	a
l00634	doxygen-html/a00026_source.html	/^<a name="l00634"><\/a>00634     <span class="keyword">public<\/span>:$/;"	a
l00635	doxygen-html/a00026_source.html	/^<a name="l00635"><\/a>00635         <span class="comment">\/\/ *** Types<\/span>$/;"	a
l00636	doxygen-html/a00026_source.html	/^<a name="l00636"><\/a>00636 <span class="comment"><\/span>$/;"	a
l00637	doxygen-html/a00026_source.html	/^<a name="l00637"><\/a>00637 <span class="comment">        \/\/\/ The key type of the btree. Returned by key().<\/span>$/;"	a
l00638	doxygen-html/a00026_source.html	/^<a name="l00638"><\/a><a class="code" href="a00010.html#af9bd869933413977b355edecdad03826">00638<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">btree::key_type<\/a>                <a class="code" href="a00010.html#af9bd869933413977b355edecdad03826" title="The key type of the btree. Returned by key().">key_type<\/a>;$/;"	a
l00639	doxygen-html/a00026_source.html	/^<a name="l00639"><\/a>00639 <span class="comment"><\/span>$/;"	a
l00640	doxygen-html/a00026_source.html	/^<a name="l00640"><\/a>00640 <span class="comment">        \/\/\/ The data type of the btree. Returned by data().<\/span>$/;"	a
l00641	doxygen-html/a00026_source.html	/^<a name="l00641"><\/a><a class="code" href="a00010.html#a3e9bc58f428c88258f0f6dae0d1b262f">00641<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">btree::data_type<\/a>               <a class="code" href="a00010.html#a3e9bc58f428c88258f0f6dae0d1b262f" title="The data type of the btree. Returned by data().">data_type<\/a>;$/;"	a
l00642	doxygen-html/a00026_source.html	/^<a name="l00642"><\/a>00642 <span class="comment"><\/span>$/;"	a
l00643	doxygen-html/a00026_source.html	/^<a name="l00643"><\/a>00643 <span class="comment">        \/\/\/ The value type of the btree. Returned by operator*().<\/span>$/;"	a
l00644	doxygen-html/a00026_source.html	/^<a name="l00644"><\/a><a class="code" href="a00010.html#a35215b1458e16ce11dd75678d50e10f2">00644<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">btree::value_type<\/a>              <a class="code" href="a00010.html#a35215b1458e16ce11dd75678d50e10f2" title="The value type of the btree. Returned by operator*().">value_type<\/a>;$/;"	a
l00645	doxygen-html/a00026_source.html	/^<a name="l00645"><\/a>00645 <span class="comment"><\/span>$/;"	a
l00646	doxygen-html/a00026_source.html	/^<a name="l00646"><\/a>00646 <span class="comment">        \/\/\/ The pair type of the btree.<\/span>$/;"	a
l00647	doxygen-html/a00026_source.html	/^<a name="l00647"><\/a><a class="code" href="a00010.html#ad5418a87bffde41e783a232e6304d690">00647<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">btree::pair_type<\/a>               <a class="code" href="a00010.html#ad5418a87bffde41e783a232e6304d690" title="The pair type of the btree.">pair_type<\/a>;$/;"	a
l00648	doxygen-html/a00026_source.html	/^<a name="l00648"><\/a>00648 <span class="comment"><\/span>$/;"	a
l00649	doxygen-html/a00026_source.html	/^<a name="l00649"><\/a>00649 <span class="comment">        \/\/\/ Reference to the value_type. STL required.<\/span>$/;"	a
l00650	doxygen-html/a00026_source.html	/^<a name="l00650"><\/a><a class="code" href="a00010.html#a419752bbbda4094865f8d8e13d16b2ba">00650<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> <a class="code" href="a00010.html#a35215b1458e16ce11dd75678d50e10f2" title="The value type of the btree. Returned by operator*().">value_type<\/a>&amp;               <a class="code" href="a00010.html#a419752bbbda4094865f8d8e13d16b2ba" title="Reference to the value_type. STL required.">reference<\/a>;$/;"	a
l00651	doxygen-html/a00026_source.html	/^<a name="l00651"><\/a>00651 <span class="comment"><\/span>$/;"	a
l00652	doxygen-html/a00026_source.html	/^<a name="l00652"><\/a>00652 <span class="comment">        \/\/\/ Pointer to the value_type. STL required.<\/span>$/;"	a
l00653	doxygen-html/a00026_source.html	/^<a name="l00653"><\/a><a class="code" href="a00010.html#ae6ef73c30bc2db3e007309f4f5791ce1">00653<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> <a class="code" href="a00010.html#a35215b1458e16ce11dd75678d50e10f2" title="The value type of the btree. Returned by operator*().">value_type<\/a>*               <a class="code" href="a00010.html#ae6ef73c30bc2db3e007309f4f5791ce1" title="Pointer to the value_type. STL required.">pointer<\/a>;$/;"	a
l00654	doxygen-html/a00026_source.html	/^<a name="l00654"><\/a>00654 <span class="comment"><\/span>$/;"	a
l00655	doxygen-html/a00026_source.html	/^<a name="l00655"><\/a>00655 <span class="comment">        \/\/\/ STL-magic iterator category<\/span>$/;"	a
l00656	doxygen-html/a00026_source.html	/^<a name="l00656"><\/a><a class="code" href="a00010.html#a2fd7333035de59a5c83df70a96a53b7c">00656<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> std::bidirectional_iterator_tag         <a class="code" href="a00010.html#a2fd7333035de59a5c83df70a96a53b7c" title="STL-magic iterator category.">iterator_category<\/a>;$/;"	a
l00657	doxygen-html/a00026_source.html	/^<a name="l00657"><\/a>00657 <span class="comment"><\/span>$/;"	a
l00658	doxygen-html/a00026_source.html	/^<a name="l00658"><\/a>00658 <span class="comment">        \/\/\/ STL-magic<\/span>$/;"	a
l00659	doxygen-html/a00026_source.html	/^<a name="l00659"><\/a><a class="code" href="a00010.html#a3259e576dca916415ada01c0b579c6fb">00659<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> ptrdiff_t               <a class="code" href="a00010.html#a3259e576dca916415ada01c0b579c6fb" title="STL-magic.">difference_type<\/a>;$/;"	a
l00660	doxygen-html/a00026_source.html	/^<a name="l00660"><\/a>00660 <span class="comment"><\/span>$/;"	a
l00661	doxygen-html/a00026_source.html	/^<a name="l00661"><\/a>00661 <span class="comment">        \/\/\/ Our own type<\/span>$/;"	a
l00662	doxygen-html/a00026_source.html	/^<a name="l00662"><\/a><a class="code" href="a00010.html#af6590c93be7bee1df834d22122d703a1">00662<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00010.html" title="STL-like read-only iterator object for B+ tree items.">const_iterator<\/a>          <span class="keyword">self<\/span>;$/;"	a
l00663	doxygen-html/a00026_source.html	/^<a name="l00663"><\/a>00663 $/;"	a
l00664	doxygen-html/a00026_source.html	/^<a name="l00664"><\/a>00664     <span class="keyword">private<\/span>:$/;"	a
l00665	doxygen-html/a00026_source.html	/^<a name="l00665"><\/a>00665         <span class="comment">\/\/ *** Members<\/span>$/;"	a
l00666	doxygen-html/a00026_source.html	/^<a name="l00666"><\/a>00666 <span class="comment"><\/span>$/;"	a
l00667	doxygen-html/a00026_source.html	/^<a name="l00667"><\/a>00667 <span class="comment">        \/\/\/ The currently referenced leaf node of the tree<\/span>$/;"	a
l00668	doxygen-html/a00026_source.html	/^<a name="l00668"><\/a><a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46">00668<\/a> <span class="comment"><\/span>        <span class="keyword">const<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a>*        <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>;$/;"	a
l00669	doxygen-html/a00026_source.html	/^<a name="l00669"><\/a>00669 <span class="comment"><\/span>$/;"	a
l00670	doxygen-html/a00026_source.html	/^<a name="l00670"><\/a>00670 <span class="comment">        \/\/\/ Current key\/data slot referenced<\/span>$/;"	a
l00671	doxygen-html/a00026_source.html	/^<a name="l00671"><\/a><a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde">00671<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>                  <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00672	doxygen-html/a00026_source.html	/^<a name="l00672"><\/a>00672 <span class="comment"><\/span>$/;"	a
l00673	doxygen-html/a00026_source.html	/^<a name="l00673"><\/a>00673 <span class="comment">        \/\/\/ Friendly to the reverse_const_iterator, so it may access the two<\/span>$/;"	a
l00674	doxygen-html/a00026_source.html	/^<a name="l00674"><\/a>00674 <span class="comment">        \/\/\/ data items directly<\/span>$/;"	a
l00675	doxygen-html/a00026_source.html	/^<a name="l00675"><\/a><a class="code" href="a00010.html#a776e261b45ef26d713a4d105a8d7c240">00675<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a>;$/;"	a
l00676	doxygen-html/a00026_source.html	/^<a name="l00676"><\/a>00676 <span class="comment"><\/span>$/;"	a
l00677	doxygen-html/a00026_source.html	/^<a name="l00677"><\/a>00677 <span class="comment">        \/\/\/ Evil! A temporary value_type to STL-correctly deliver operator* and<\/span>$/;"	a
l00678	doxygen-html/a00026_source.html	/^<a name="l00678"><\/a>00678 <span class="comment">        \/\/\/ operator-&gt;<\/span>$/;"	a
l00679	doxygen-html/a00026_source.html	/^<a name="l00679"><\/a><a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5">00679<\/a> <span class="comment"><\/span>        <span class="keyword">mutable<\/span> <a class="code" href="a00010.html#a35215b1458e16ce11dd75678d50e10f2" title="The value type of the btree. Returned by operator*().">value_type<\/a>              <a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00680	doxygen-html/a00026_source.html	/^<a name="l00680"><\/a>00680 $/;"	a
l00681	doxygen-html/a00026_source.html	/^<a name="l00681"><\/a>00681         <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00682	doxygen-html/a00026_source.html	/^<a name="l00682"><\/a>00682         <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00683	doxygen-html/a00026_source.html	/^<a name="l00683"><\/a>00683         <span class="comment">\/\/ tree.<\/span>$/;"	a
l00684	doxygen-html/a00026_source.html	/^<a name="l00684"><\/a>00684         <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00685	doxygen-html/a00026_source.html	/^<a name="l00685"><\/a>00685 $/;"	a
l00686	doxygen-html/a00026_source.html	/^<a name="l00686"><\/a>00686     <span class="keyword">public<\/span>:$/;"	a
l00687	doxygen-html/a00026_source.html	/^<a name="l00687"><\/a>00687         <span class="comment">\/\/ *** Methods<\/span>$/;"	a
l00688	doxygen-html/a00026_source.html	/^<a name="l00688"><\/a>00688 <span class="comment"><\/span>$/;"	a
l00689	doxygen-html/a00026_source.html	/^<a name="l00689"><\/a>00689 <span class="comment">        \/\/\/ Default-Constructor of a const iterator<\/span>$/;"	a
l00690	doxygen-html/a00026_source.html	/^<a name="l00690"><\/a><a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504">00690<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504" title="Default-Constructor of a const iterator.">const_iterator<\/a>()$/;"	a
l00691	doxygen-html/a00026_source.html	/^<a name="l00691"><\/a>00691             : <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>(NULL), <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>(0)$/;"	a
l00692	doxygen-html/a00026_source.html	/^<a name="l00692"><\/a>00692         { }$/;"	a
l00693	doxygen-html/a00026_source.html	/^<a name="l00693"><\/a>00693 <span class="comment"><\/span>$/;"	a
l00694	doxygen-html/a00026_source.html	/^<a name="l00694"><\/a>00694 <span class="comment">        \/\/\/ Initializing-Constructor of a const iterator<\/span>$/;"	a
l00695	doxygen-html/a00026_source.html	/^<a name="l00695"><\/a><a class="code" href="a00010.html#a56aba66f521f1a397d380921437fb689">00695<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504" title="Default-Constructor of a const iterator.">const_iterator<\/a>(<span class="keyword">const<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a> *l, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s)$/;"	a
l00696	doxygen-html/a00026_source.html	/^<a name="l00696"><\/a>00696             : <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>(l), <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>(s)$/;"	a
l00697	doxygen-html/a00026_source.html	/^<a name="l00697"><\/a>00697         { }$/;"	a
l00698	doxygen-html/a00026_source.html	/^<a name="l00698"><\/a>00698 <span class="comment"><\/span>$/;"	a
l00699	doxygen-html/a00026_source.html	/^<a name="l00699"><\/a>00699 <span class="comment">        \/\/\/ Copy-constructor from a mutable iterator<\/span>$/;"	a
l00700	doxygen-html/a00026_source.html	/^<a name="l00700"><\/a><a class="code" href="a00010.html#a8eeaa8f21a999eb9ceba7445a5f2249c">00700<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504" title="Default-Constructor of a const iterator.">const_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a> &amp;it)$/;"	a
l00701	doxygen-html/a00026_source.html	/^<a name="l00701"><\/a>00701             : <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>)$/;"	a
l00702	doxygen-html/a00026_source.html	/^<a name="l00702"><\/a>00702         { }$/;"	a
l00703	doxygen-html/a00026_source.html	/^<a name="l00703"><\/a>00703 <span class="comment"><\/span>$/;"	a
l00704	doxygen-html/a00026_source.html	/^<a name="l00704"><\/a>00704 <span class="comment">        \/\/\/ Copy-constructor from a mutable reverse iterator<\/span>$/;"	a
l00705	doxygen-html/a00026_source.html	/^<a name="l00705"><\/a><a class="code" href="a00010.html#a804b6134629b6005947bb53896593dc2">00705<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504" title="Default-Constructor of a const iterator.">const_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a> &amp;it)$/;"	a
l00706	doxygen-html/a00026_source.html	/^<a name="l00706"><\/a>00706             : <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>)$/;"	a
l00707	doxygen-html/a00026_source.html	/^<a name="l00707"><\/a>00707         { }$/;"	a
l00708	doxygen-html/a00026_source.html	/^<a name="l00708"><\/a>00708 <span class="comment"><\/span>$/;"	a
l00709	doxygen-html/a00026_source.html	/^<a name="l00709"><\/a>00709 <span class="comment">        \/\/\/ Copy-constructor from a const reverse iterator<\/span>$/;"	a
l00710	doxygen-html/a00026_source.html	/^<a name="l00710"><\/a><a class="code" href="a00010.html#adf2a0a9f38ed9d19fc35a29e7ca9f501">00710<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#aa398e6e926d38251e31e4448328ee504" title="Default-Constructor of a const iterator.">const_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a> &amp;it)$/;"	a
l00711	doxygen-html/a00026_source.html	/^<a name="l00711"><\/a>00711             : <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>)$/;"	a
l00712	doxygen-html/a00026_source.html	/^<a name="l00712"><\/a>00712         { }$/;"	a
l00713	doxygen-html/a00026_source.html	/^<a name="l00713"><\/a>00713 <span class="comment"><\/span>$/;"	a
l00714	doxygen-html/a00026_source.html	/^<a name="l00714"><\/a>00714 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l00715	doxygen-html/a00026_source.html	/^<a name="l00715"><\/a>00715 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l00716	doxygen-html/a00026_source.html	/^<a name="l00716"><\/a>00716 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l00717	doxygen-html/a00026_source.html	/^<a name="l00717"><\/a><a class="code" href="a00010.html#a07b48aa4ca141c1f1d53c150f33e591b">00717<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#a419752bbbda4094865f8d8e13d16b2ba" title="Reference to the value_type. STL required.">reference<\/a> <a class="code" href="a00010.html#a07b48aa4ca141c1f1d53c150f33e591b" title="Dereference the iterator.">operator*<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00718	doxygen-html/a00026_source.html	/^<a name="l00718"><\/a>00718 <span class="keyword">        <\/span>{$/;"	a
l00719	doxygen-html/a00026_source.html	/^<a name="l00719"><\/a>00719             <a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00010.html#ad5418a87bffde41e783a232e6304d690" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00010.html#a9b700cfcf53b89ce178833f9bed1df2f" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00010.html#a0c38df0d4e1f83c33c52c63b2ca6edd9" title="Read-only reference to the current data object.">data<\/a>()) );$/;"	a
l00720	doxygen-html/a00026_source.html	/^<a name="l00720"><\/a>00720             <span class="keywordflow">return<\/span> <a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00721	doxygen-html/a00026_source.html	/^<a name="l00721"><\/a>00721         }$/;"	a
l00722	doxygen-html/a00026_source.html	/^<a name="l00722"><\/a>00722 <span class="comment"><\/span>$/;"	a
l00723	doxygen-html/a00026_source.html	/^<a name="l00723"><\/a>00723 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l00724	doxygen-html/a00026_source.html	/^<a name="l00724"><\/a>00724 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l00725	doxygen-html/a00026_source.html	/^<a name="l00725"><\/a>00725 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l00726	doxygen-html/a00026_source.html	/^<a name="l00726"><\/a><a class="code" href="a00010.html#a670a87d8fccf4c9aab90f5a6b2a22d75">00726<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00010.html#ae6ef73c30bc2db3e007309f4f5791ce1" title="Pointer to the value_type. STL required.">pointer<\/a> <a class="code" href="a00010.html#a670a87d8fccf4c9aab90f5a6b2a22d75" title="Dereference the iterator.">operator-&gt;<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00727	doxygen-html/a00026_source.html	/^<a name="l00727"><\/a>00727 <span class="keyword">        <\/span>{$/;"	a
l00728	doxygen-html/a00026_source.html	/^<a name="l00728"><\/a>00728             <a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00010.html#ad5418a87bffde41e783a232e6304d690" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00010.html#a9b700cfcf53b89ce178833f9bed1df2f" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00010.html#a0c38df0d4e1f83c33c52c63b2ca6edd9" title="Read-only reference to the current data object.">data<\/a>()) );$/;"	a
l00729	doxygen-html/a00026_source.html	/^<a name="l00729"><\/a>00729             <span class="keywordflow">return<\/span> &amp;<a class="code" href="a00010.html#a390bd1c0e4146b53df1c725a9c52dfa5" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00730	doxygen-html/a00026_source.html	/^<a name="l00730"><\/a>00730         }$/;"	a
l00731	doxygen-html/a00026_source.html	/^<a name="l00731"><\/a>00731 <span class="comment"><\/span>$/;"	a
l00732	doxygen-html/a00026_source.html	/^<a name="l00732"><\/a>00732 <span class="comment">        \/\/\/ Key of the current slot<\/span>$/;"	a
l00733	doxygen-html/a00026_source.html	/^<a name="l00733"><\/a><a class="code" href="a00010.html#a9b700cfcf53b89ce178833f9bed1df2f">00733<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00010.html#af9bd869933413977b355edecdad03826" title="The key type of the btree. Returned by key().">key_type<\/a>&amp; <a class="code" href="a00010.html#a9b700cfcf53b89ce178833f9bed1df2f" title="Key of the current slot.">key<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00734	doxygen-html/a00026_source.html	/^<a name="l00734"><\/a>00734 <span class="keyword">        <\/span>{$/;"	a
l00735	doxygen-html/a00026_source.html	/^<a name="l00735"><\/a>00735             <span class="keywordflow">return<\/span> <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>];$/;"	a
l00736	doxygen-html/a00026_source.html	/^<a name="l00736"><\/a>00736         }$/;"	a
l00737	doxygen-html/a00026_source.html	/^<a name="l00737"><\/a>00737 <span class="comment"><\/span>$/;"	a
l00738	doxygen-html/a00026_source.html	/^<a name="l00738"><\/a>00738 <span class="comment">        \/\/\/ Read-only reference to the current data object<\/span>$/;"	a
l00739	doxygen-html/a00026_source.html	/^<a name="l00739"><\/a><a class="code" href="a00010.html#a0c38df0d4e1f83c33c52c63b2ca6edd9">00739<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00010.html#a3e9bc58f428c88258f0f6dae0d1b262f" title="The data type of the btree. Returned by data().">data_type<\/a>&amp; <a class="code" href="a00010.html#a0c38df0d4e1f83c33c52c63b2ca6edd9" title="Read-only reference to the current data object.">data<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00740	doxygen-html/a00026_source.html	/^<a name="l00740"><\/a>00740 <span class="keyword">        <\/span>{$/;"	a
l00741	doxygen-html/a00026_source.html	/^<a name="l00741"><\/a>00741             <span class="keywordflow">return<\/span> <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> ? 0 : <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>];$/;"	a
l00742	doxygen-html/a00026_source.html	/^<a name="l00742"><\/a>00742         }$/;"	a
l00743	doxygen-html/a00026_source.html	/^<a name="l00743"><\/a>00743 <span class="comment"><\/span>$/;"	a
l00744	doxygen-html/a00026_source.html	/^<a name="l00744"><\/a>00744 <span class="comment">        \/\/\/ Prefix++ advance the iterator to the next slot<\/span>$/;"	a
l00745	doxygen-html/a00026_source.html	/^<a name="l00745"><\/a><a class="code" href="a00010.html#a70dced9b01dbb9ea963e072c837eff09">00745<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00010.html#a70dced9b01dbb9ea963e072c837eff09" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>()$/;"	a
l00746	doxygen-html/a00026_source.html	/^<a name="l00746"><\/a>00746         {$/;"	a
l00747	doxygen-html/a00026_source.html	/^<a name="l00747"><\/a>00747             <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> + 1 &lt; <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>) {$/;"	a
l00748	doxygen-html/a00026_source.html	/^<a name="l00748"><\/a>00748                 ++<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00749	doxygen-html/a00026_source.html	/^<a name="l00749"><\/a>00749             }$/;"	a
l00750	doxygen-html/a00026_source.html	/^<a name="l00750"><\/a>00750             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l00751	doxygen-html/a00026_source.html	/^<a name="l00751"><\/a>00751                 <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00752	doxygen-html/a00026_source.html	/^<a name="l00752"><\/a>00752                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00753	doxygen-html/a00026_source.html	/^<a name="l00753"><\/a>00753             }$/;"	a
l00754	doxygen-html/a00026_source.html	/^<a name="l00754"><\/a>00754             <span class="keywordflow">else<\/span> {$/;"	a
l00755	doxygen-html/a00026_source.html	/^<a name="l00755"><\/a>00755                 <span class="comment">\/\/ this is end()<\/span>$/;"	a
l00756	doxygen-html/a00026_source.html	/^<a name="l00756"><\/a>00756                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00757	doxygen-html/a00026_source.html	/^<a name="l00757"><\/a>00757             }$/;"	a
l00758	doxygen-html/a00026_source.html	/^<a name="l00758"><\/a>00758 $/;"	a
l00759	doxygen-html/a00026_source.html	/^<a name="l00759"><\/a>00759             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00760	doxygen-html/a00026_source.html	/^<a name="l00760"><\/a>00760         }$/;"	a
l00761	doxygen-html/a00026_source.html	/^<a name="l00761"><\/a>00761 <span class="comment"><\/span>$/;"	a
l00762	doxygen-html/a00026_source.html	/^<a name="l00762"><\/a>00762 <span class="comment">        \/\/\/ Postfix++ advance the iterator to the next slot<\/span>$/;"	a
l00763	doxygen-html/a00026_source.html	/^<a name="l00763"><\/a><a class="code" href="a00010.html#a18c993a3ff60f293e9a3f37adda41ddb">00763<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00010.html#a70dced9b01dbb9ea963e072c837eff09" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l00764	doxygen-html/a00026_source.html	/^<a name="l00764"><\/a>00764         {$/;"	a
l00765	doxygen-html/a00026_source.html	/^<a name="l00765"><\/a>00765             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l00766	doxygen-html/a00026_source.html	/^<a name="l00766"><\/a>00766 $/;"	a
l00767	doxygen-html/a00026_source.html	/^<a name="l00767"><\/a>00767             <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> + 1 &lt; <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>) {$/;"	a
l00768	doxygen-html/a00026_source.html	/^<a name="l00768"><\/a>00768                 ++<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00769	doxygen-html/a00026_source.html	/^<a name="l00769"><\/a>00769             }$/;"	a
l00770	doxygen-html/a00026_source.html	/^<a name="l00770"><\/a>00770             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l00771	doxygen-html/a00026_source.html	/^<a name="l00771"><\/a>00771                 <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00772	doxygen-html/a00026_source.html	/^<a name="l00772"><\/a>00772                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00773	doxygen-html/a00026_source.html	/^<a name="l00773"><\/a>00773             }$/;"	a
l00774	doxygen-html/a00026_source.html	/^<a name="l00774"><\/a>00774             <span class="keywordflow">else<\/span> {$/;"	a
l00775	doxygen-html/a00026_source.html	/^<a name="l00775"><\/a>00775                 <span class="comment">\/\/ this is end()<\/span>$/;"	a
l00776	doxygen-html/a00026_source.html	/^<a name="l00776"><\/a>00776                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00777	doxygen-html/a00026_source.html	/^<a name="l00777"><\/a>00777             }$/;"	a
l00778	doxygen-html/a00026_source.html	/^<a name="l00778"><\/a>00778 $/;"	a
l00779	doxygen-html/a00026_source.html	/^<a name="l00779"><\/a>00779             <span class="keywordflow">return<\/span> tmp;$/;"	a
l00780	doxygen-html/a00026_source.html	/^<a name="l00780"><\/a>00780         }$/;"	a
l00781	doxygen-html/a00026_source.html	/^<a name="l00781"><\/a>00781 <span class="comment"><\/span>$/;"	a
l00782	doxygen-html/a00026_source.html	/^<a name="l00782"><\/a>00782 <span class="comment">        \/\/\/ Prefix-- backstep the iterator to the last slot<\/span>$/;"	a
l00783	doxygen-html/a00026_source.html	/^<a name="l00783"><\/a><a class="code" href="a00010.html#a5ec18e7ef4ca59cd65992fc37e86582b">00783<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00010.html#a5ec18e7ef4ca59cd65992fc37e86582b" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>()$/;"	a
l00784	doxygen-html/a00026_source.html	/^<a name="l00784"><\/a>00784         {$/;"	a
l00785	doxygen-html/a00026_source.html	/^<a name="l00785"><\/a>00785             <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> &gt; 0) {$/;"	a
l00786	doxygen-html/a00026_source.html	/^<a name="l00786"><\/a>00786                 --<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00787	doxygen-html/a00026_source.html	/^<a name="l00787"><\/a>00787             }$/;"	a
l00788	doxygen-html/a00026_source.html	/^<a name="l00788"><\/a>00788             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00789	doxygen-html/a00026_source.html	/^<a name="l00789"><\/a>00789                 <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00790	doxygen-html/a00026_source.html	/^<a name="l00790"><\/a>00790                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> - 1;$/;"	a
l00791	doxygen-html/a00026_source.html	/^<a name="l00791"><\/a>00791             }$/;"	a
l00792	doxygen-html/a00026_source.html	/^<a name="l00792"><\/a>00792             <span class="keywordflow">else<\/span> {$/;"	a
l00793	doxygen-html/a00026_source.html	/^<a name="l00793"><\/a>00793                 <span class="comment">\/\/ this is begin()<\/span>$/;"	a
l00794	doxygen-html/a00026_source.html	/^<a name="l00794"><\/a>00794                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00795	doxygen-html/a00026_source.html	/^<a name="l00795"><\/a>00795             }$/;"	a
l00796	doxygen-html/a00026_source.html	/^<a name="l00796"><\/a>00796 $/;"	a
l00797	doxygen-html/a00026_source.html	/^<a name="l00797"><\/a>00797             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00798	doxygen-html/a00026_source.html	/^<a name="l00798"><\/a>00798         }$/;"	a
l00799	doxygen-html/a00026_source.html	/^<a name="l00799"><\/a>00799 <span class="comment"><\/span>$/;"	a
l00800	doxygen-html/a00026_source.html	/^<a name="l00800"><\/a>00800 <span class="comment">        \/\/\/ Postfix-- backstep the iterator to the last slot<\/span>$/;"	a
l00801	doxygen-html/a00026_source.html	/^<a name="l00801"><\/a><a class="code" href="a00010.html#a625efcb27c39904ffa30e9476262d234">00801<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00010.html#a5ec18e7ef4ca59cd65992fc37e86582b" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l00802	doxygen-html/a00026_source.html	/^<a name="l00802"><\/a>00802         {$/;"	a
l00803	doxygen-html/a00026_source.html	/^<a name="l00803"><\/a>00803             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l00804	doxygen-html/a00026_source.html	/^<a name="l00804"><\/a>00804 $/;"	a
l00805	doxygen-html/a00026_source.html	/^<a name="l00805"><\/a>00805             <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> &gt; 0) {$/;"	a
l00806	doxygen-html/a00026_source.html	/^<a name="l00806"><\/a>00806                 --<a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00807	doxygen-html/a00026_source.html	/^<a name="l00807"><\/a>00807             }$/;"	a
l00808	doxygen-html/a00026_source.html	/^<a name="l00808"><\/a>00808             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00809	doxygen-html/a00026_source.html	/^<a name="l00809"><\/a>00809                 <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00810	doxygen-html/a00026_source.html	/^<a name="l00810"><\/a>00810                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> - 1;$/;"	a
l00811	doxygen-html/a00026_source.html	/^<a name="l00811"><\/a>00811             }$/;"	a
l00812	doxygen-html/a00026_source.html	/^<a name="l00812"><\/a>00812             <span class="keywordflow">else<\/span> {$/;"	a
l00813	doxygen-html/a00026_source.html	/^<a name="l00813"><\/a>00813                 <span class="comment">\/\/ this is begin()<\/span>$/;"	a
l00814	doxygen-html/a00026_source.html	/^<a name="l00814"><\/a>00814                 <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00815	doxygen-html/a00026_source.html	/^<a name="l00815"><\/a>00815             }$/;"	a
l00816	doxygen-html/a00026_source.html	/^<a name="l00816"><\/a>00816 $/;"	a
l00817	doxygen-html/a00026_source.html	/^<a name="l00817"><\/a>00817             <span class="keywordflow">return<\/span> tmp;$/;"	a
l00818	doxygen-html/a00026_source.html	/^<a name="l00818"><\/a>00818         }$/;"	a
l00819	doxygen-html/a00026_source.html	/^<a name="l00819"><\/a>00819 <span class="comment"><\/span>$/;"	a
l00820	doxygen-html/a00026_source.html	/^<a name="l00820"><\/a>00820 <span class="comment">        \/\/\/ Equality of iterators<\/span>$/;"	a
l00821	doxygen-html/a00026_source.html	/^<a name="l00821"><\/a><a class="code" href="a00010.html#acb7975fe9086511b129da9bc6c579b7f">00821<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00010.html#acb7975fe9086511b129da9bc6c579b7f" title="Equality of iterators.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l00822	doxygen-html/a00026_source.html	/^<a name="l00822"><\/a>00822 <span class="keyword">        <\/span>{$/;"	a
l00823	doxygen-html/a00026_source.html	/^<a name="l00823"><\/a>00823             <span class="keywordflow">return<\/span> (x.currnode == <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>) &amp;&amp; (x.currslot == <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>);$/;"	a
l00824	doxygen-html/a00026_source.html	/^<a name="l00824"><\/a>00824         }$/;"	a
l00825	doxygen-html/a00026_source.html	/^<a name="l00825"><\/a>00825 <span class="comment"><\/span>$/;"	a
l00826	doxygen-html/a00026_source.html	/^<a name="l00826"><\/a>00826 <span class="comment">        \/\/\/ Inequality of iterators<\/span>$/;"	a
l00827	doxygen-html/a00026_source.html	/^<a name="l00827"><\/a><a class="code" href="a00010.html#afe4bead48fa24df2c42b6cff6be9c8fb">00827<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00010.html#afe4bead48fa24df2c42b6cff6be9c8fb" title="Inequality of iterators.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l00828	doxygen-html/a00026_source.html	/^<a name="l00828"><\/a>00828 <span class="keyword">        <\/span>{$/;"	a
l00829	doxygen-html/a00026_source.html	/^<a name="l00829"><\/a>00829             <span class="keywordflow">return<\/span> (x.currnode != <a class="code" href="a00010.html#aaf41fc7558a241186e7aeb4fd4c26d46" title="The currently referenced leaf node of the tree.">currnode<\/a>) || (x.currslot != <a class="code" href="a00010.html#a384e9365c13f059943588447ab9aefde" title="Current key\/data slot referenced.">currslot<\/a>);$/;"	a
l00830	doxygen-html/a00026_source.html	/^<a name="l00830"><\/a>00830         }$/;"	a
l00831	doxygen-html/a00026_source.html	/^<a name="l00831"><\/a>00831     };$/;"	a
l00832	doxygen-html/a00026_source.html	/^<a name="l00832"><\/a>00832 <span class="comment"><\/span>$/;"	a
l00833	doxygen-html/a00026_source.html	/^<a name="l00833"><\/a>00833 <span class="comment">    \/\/\/ STL-like mutable reverse iterator object for B+ tree items. The<\/span>$/;"	a
l00834	doxygen-html/a00026_source.html	/^<a name="l00834"><\/a>00834 <span class="comment">    \/\/\/ iterator points to a specific slot number in a leaf.<\/span>$/;"	a
l00835	doxygen-html/a00026_source.html	/^<a name="l00835"><\/a><a class="code" href="a00020.html">00835<\/a> <span class="comment"><\/span>    <span class="keyword">class <\/span><a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a>$/;"	a
l00836	doxygen-html/a00026_source.html	/^<a name="l00836"><\/a>00836     {$/;"	a
l00837	doxygen-html/a00026_source.html	/^<a name="l00837"><\/a>00837     <span class="keyword">public<\/span>:$/;"	a
l00838	doxygen-html/a00026_source.html	/^<a name="l00838"><\/a>00838         <span class="comment">\/\/ *** Types<\/span>$/;"	a
l00839	doxygen-html/a00026_source.html	/^<a name="l00839"><\/a>00839 <span class="comment"><\/span>$/;"	a
l00840	doxygen-html/a00026_source.html	/^<a name="l00840"><\/a>00840 <span class="comment">        \/\/\/ The key type of the btree. Returned by key().<\/span>$/;"	a
l00841	doxygen-html/a00026_source.html	/^<a name="l00841"><\/a><a class="code" href="a00020.html#a6c51c511a728641235b1b766d370d947">00841<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">btree::key_type<\/a>                <a class="code" href="a00020.html#a6c51c511a728641235b1b766d370d947" title="The key type of the btree. Returned by key().">key_type<\/a>;$/;"	a
l00842	doxygen-html/a00026_source.html	/^<a name="l00842"><\/a>00842 <span class="comment"><\/span>$/;"	a
l00843	doxygen-html/a00026_source.html	/^<a name="l00843"><\/a>00843 <span class="comment">        \/\/\/ The data type of the btree. Returned by data().<\/span>$/;"	a
l00844	doxygen-html/a00026_source.html	/^<a name="l00844"><\/a><a class="code" href="a00020.html#adbbb473dc39aa6939320a775270db73b">00844<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">btree::data_type<\/a>               <a class="code" href="a00020.html#adbbb473dc39aa6939320a775270db73b" title="The data type of the btree. Returned by data().">data_type<\/a>;$/;"	a
l00845	doxygen-html/a00026_source.html	/^<a name="l00845"><\/a>00845 <span class="comment"><\/span>$/;"	a
l00846	doxygen-html/a00026_source.html	/^<a name="l00846"><\/a>00846 <span class="comment">        \/\/\/ The value type of the btree. Returned by operator*().<\/span>$/;"	a
l00847	doxygen-html/a00026_source.html	/^<a name="l00847"><\/a><a class="code" href="a00020.html#a4d5aa6d6f89994af073ed8de8023b702">00847<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">btree::value_type<\/a>              <a class="code" href="a00020.html#a4d5aa6d6f89994af073ed8de8023b702" title="The value type of the btree. Returned by operator*().">value_type<\/a>;$/;"	a
l00848	doxygen-html/a00026_source.html	/^<a name="l00848"><\/a>00848 <span class="comment"><\/span>$/;"	a
l00849	doxygen-html/a00026_source.html	/^<a name="l00849"><\/a>00849 <span class="comment">        \/\/\/ The pair type of the btree.<\/span>$/;"	a
l00850	doxygen-html/a00026_source.html	/^<a name="l00850"><\/a><a class="code" href="a00020.html#a29586b9555247c18a0bbc963077277cc">00850<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">btree::pair_type<\/a>               <a class="code" href="a00020.html#a29586b9555247c18a0bbc963077277cc" title="The pair type of the btree.">pair_type<\/a>;$/;"	a
l00851	doxygen-html/a00026_source.html	/^<a name="l00851"><\/a>00851 <span class="comment"><\/span>$/;"	a
l00852	doxygen-html/a00026_source.html	/^<a name="l00852"><\/a>00852 <span class="comment">        \/\/\/ Reference to the value_type. STL required.<\/span>$/;"	a
l00853	doxygen-html/a00026_source.html	/^<a name="l00853"><\/a><a class="code" href="a00020.html#aafabdbb26269c865eff146d29d106d95">00853<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00020.html#a4d5aa6d6f89994af073ed8de8023b702" title="The value type of the btree. Returned by operator*().">value_type<\/a>&amp;             <a class="code" href="a00020.html#aafabdbb26269c865eff146d29d106d95" title="Reference to the value_type. STL required.">reference<\/a>;$/;"	a
l00854	doxygen-html/a00026_source.html	/^<a name="l00854"><\/a>00854 <span class="comment"><\/span>$/;"	a
l00855	doxygen-html/a00026_source.html	/^<a name="l00855"><\/a>00855 <span class="comment">        \/\/\/ Pointer to the value_type. STL required.<\/span>$/;"	a
l00856	doxygen-html/a00026_source.html	/^<a name="l00856"><\/a><a class="code" href="a00020.html#abec59d5ad25b0caaa3dbd19cb1e5c1b4">00856<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00020.html#a4d5aa6d6f89994af073ed8de8023b702" title="The value type of the btree. Returned by operator*().">value_type<\/a>*             <a class="code" href="a00020.html#abec59d5ad25b0caaa3dbd19cb1e5c1b4" title="Pointer to the value_type. STL required.">pointer<\/a>;$/;"	a
l00857	doxygen-html/a00026_source.html	/^<a name="l00857"><\/a>00857 <span class="comment"><\/span>$/;"	a
l00858	doxygen-html/a00026_source.html	/^<a name="l00858"><\/a>00858 <span class="comment">        \/\/\/ STL-magic iterator category<\/span>$/;"	a
l00859	doxygen-html/a00026_source.html	/^<a name="l00859"><\/a><a class="code" href="a00020.html#aedcdafaa9eadd4eadb05e09b44aa17f9">00859<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> std::bidirectional_iterator_tag <a class="code" href="a00020.html#aedcdafaa9eadd4eadb05e09b44aa17f9" title="STL-magic iterator category.">iterator_category<\/a>;$/;"	a
l00860	doxygen-html/a00026_source.html	/^<a name="l00860"><\/a>00860 <span class="comment"><\/span>$/;"	a
l00861	doxygen-html/a00026_source.html	/^<a name="l00861"><\/a>00861 <span class="comment">        \/\/\/ STL-magic<\/span>$/;"	a
l00862	doxygen-html/a00026_source.html	/^<a name="l00862"><\/a><a class="code" href="a00020.html#a1821d9cc06d632bfb5d2fcc277413c79">00862<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> ptrdiff_t               <a class="code" href="a00020.html#a1821d9cc06d632bfb5d2fcc277413c79" title="STL-magic.">difference_type<\/a>;$/;"	a
l00863	doxygen-html/a00026_source.html	/^<a name="l00863"><\/a>00863 <span class="comment"><\/span>$/;"	a
l00864	doxygen-html/a00026_source.html	/^<a name="l00864"><\/a>00864 <span class="comment">        \/\/\/ Our own type<\/span>$/;"	a
l00865	doxygen-html/a00026_source.html	/^<a name="l00865"><\/a><a class="code" href="a00020.html#a7730c375657891e38202c564487c5249">00865<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a>        <span class="keyword">self<\/span>;$/;"	a
l00866	doxygen-html/a00026_source.html	/^<a name="l00866"><\/a>00866 $/;"	a
l00867	doxygen-html/a00026_source.html	/^<a name="l00867"><\/a>00867     <span class="keyword">private<\/span>:$/;"	a
l00868	doxygen-html/a00026_source.html	/^<a name="l00868"><\/a>00868         <span class="comment">\/\/ *** Members<\/span>$/;"	a
l00869	doxygen-html/a00026_source.html	/^<a name="l00869"><\/a>00869 <span class="comment"><\/span>$/;"	a
l00870	doxygen-html/a00026_source.html	/^<a name="l00870"><\/a>00870 <span class="comment">        \/\/\/ The currently referenced leaf node of the tree<\/span>$/;"	a
l00871	doxygen-html/a00026_source.html	/^<a name="l00871"><\/a><a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd">00871<\/a> <span class="comment"><\/span>        <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a>*      <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>;$/;"	a
l00872	doxygen-html/a00026_source.html	/^<a name="l00872"><\/a>00872 <span class="comment"><\/span>$/;"	a
l00873	doxygen-html/a00026_source.html	/^<a name="l00873"><\/a>00873 <span class="comment">        \/\/\/ One slot past the current key\/data slot referenced.<\/span>$/;"	a
l00874	doxygen-html/a00026_source.html	/^<a name="l00874"><\/a><a class="code" href="a00020.html#a18093d258964badd66e623908a699774">00874<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>          <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00875	doxygen-html/a00026_source.html	/^<a name="l00875"><\/a>00875 <span class="comment"><\/span>$/;"	a
l00876	doxygen-html/a00026_source.html	/^<a name="l00876"><\/a>00876 <span class="comment">        \/\/\/ Friendly to the const_iterator, so it may access the two data items<\/span>$/;"	a
l00877	doxygen-html/a00026_source.html	/^<a name="l00877"><\/a>00877 <span class="comment">        \/\/\/ directly<\/span>$/;"	a
l00878	doxygen-html/a00026_source.html	/^<a name="l00878"><\/a><a class="code" href="a00020.html#a67171474c4da6cc8efe0c7fafefd2b2d">00878<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a>;$/;"	a
l00879	doxygen-html/a00026_source.html	/^<a name="l00879"><\/a>00879 <span class="comment"><\/span>$/;"	a
l00880	doxygen-html/a00026_source.html	/^<a name="l00880"><\/a>00880 <span class="comment">        \/\/\/ Also friendly to the const_iterator, so it may access the two data<\/span>$/;"	a
l00881	doxygen-html/a00026_source.html	/^<a name="l00881"><\/a>00881 <span class="comment">        \/\/\/ items directly<\/span>$/;"	a
l00882	doxygen-html/a00026_source.html	/^<a name="l00882"><\/a><a class="code" href="a00020.html#ac220ce1c155db1ac44146c12d178056f">00882<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00010.html" title="STL-like read-only iterator object for B+ tree items.">const_iterator<\/a>;$/;"	a
l00883	doxygen-html/a00026_source.html	/^<a name="l00883"><\/a>00883 <span class="comment"><\/span>$/;"	a
l00884	doxygen-html/a00026_source.html	/^<a name="l00884"><\/a>00884 <span class="comment">        \/\/\/ Also friendly to the const_iterator, so it may access the two data<\/span>$/;"	a
l00885	doxygen-html/a00026_source.html	/^<a name="l00885"><\/a>00885 <span class="comment">        \/\/\/ items directly<\/span>$/;"	a
l00886	doxygen-html/a00026_source.html	/^<a name="l00886"><\/a><a class="code" href="a00020.html#a776e261b45ef26d713a4d105a8d7c240">00886<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a>;$/;"	a
l00887	doxygen-html/a00026_source.html	/^<a name="l00887"><\/a>00887 <span class="comment"><\/span>$/;"	a
l00888	doxygen-html/a00026_source.html	/^<a name="l00888"><\/a>00888 <span class="comment">        \/\/\/ Evil! A temporary value_type to STL-correctly deliver operator* and<\/span>$/;"	a
l00889	doxygen-html/a00026_source.html	/^<a name="l00889"><\/a>00889 <span class="comment">        \/\/\/ operator-&gt;<\/span>$/;"	a
l00890	doxygen-html/a00026_source.html	/^<a name="l00890"><\/a><a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c">00890<\/a> <span class="comment"><\/span>        <span class="keyword">mutable<\/span> <a class="code" href="a00020.html#a4d5aa6d6f89994af073ed8de8023b702" title="The value type of the btree. Returned by operator*().">value_type<\/a>              <a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00891	doxygen-html/a00026_source.html	/^<a name="l00891"><\/a>00891 $/;"	a
l00892	doxygen-html/a00026_source.html	/^<a name="l00892"><\/a>00892         <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l00893	doxygen-html/a00026_source.html	/^<a name="l00893"><\/a>00893         <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l00894	doxygen-html/a00026_source.html	/^<a name="l00894"><\/a>00894         <span class="comment">\/\/ tree.<\/span>$/;"	a
l00895	doxygen-html/a00026_source.html	/^<a name="l00895"><\/a>00895         <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l00896	doxygen-html/a00026_source.html	/^<a name="l00896"><\/a>00896 $/;"	a
l00897	doxygen-html/a00026_source.html	/^<a name="l00897"><\/a>00897     <span class="keyword">public<\/span>:$/;"	a
l00898	doxygen-html/a00026_source.html	/^<a name="l00898"><\/a>00898         <span class="comment">\/\/ *** Methods<\/span>$/;"	a
l00899	doxygen-html/a00026_source.html	/^<a name="l00899"><\/a>00899 <span class="comment"><\/span>$/;"	a
l00900	doxygen-html/a00026_source.html	/^<a name="l00900"><\/a>00900 <span class="comment">        \/\/\/ Default-Constructor of a reverse iterator<\/span>$/;"	a
l00901	doxygen-html/a00026_source.html	/^<a name="l00901"><\/a><a class="code" href="a00020.html#a037a981f590f5cf648a66f84a37a8e01">00901<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#a037a981f590f5cf648a66f84a37a8e01" title="Default-Constructor of a reverse iterator.">reverse_iterator<\/a>()$/;"	a
l00902	doxygen-html/a00026_source.html	/^<a name="l00902"><\/a>00902             : <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>(NULL), <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>(0)$/;"	a
l00903	doxygen-html/a00026_source.html	/^<a name="l00903"><\/a>00903         { }$/;"	a
l00904	doxygen-html/a00026_source.html	/^<a name="l00904"><\/a>00904 <span class="comment"><\/span>$/;"	a
l00905	doxygen-html/a00026_source.html	/^<a name="l00905"><\/a>00905 <span class="comment">        \/\/\/ Initializing-Constructor of a mutable reverse iterator<\/span>$/;"	a
l00906	doxygen-html/a00026_source.html	/^<a name="l00906"><\/a><a class="code" href="a00020.html#af9450ea2c4aa1326fb62099d9a15f10c">00906<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#a037a981f590f5cf648a66f84a37a8e01" title="Default-Constructor of a reverse iterator.">reverse_iterator<\/a>(<span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a> *l, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s)$/;"	a
l00907	doxygen-html/a00026_source.html	/^<a name="l00907"><\/a>00907             : <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>(l), <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>(s)$/;"	a
l00908	doxygen-html/a00026_source.html	/^<a name="l00908"><\/a>00908         { }$/;"	a
l00909	doxygen-html/a00026_source.html	/^<a name="l00909"><\/a>00909 <span class="comment"><\/span>$/;"	a
l00910	doxygen-html/a00026_source.html	/^<a name="l00910"><\/a>00910 <span class="comment">        \/\/\/ Copy-constructor from a mutable iterator<\/span>$/;"	a
l00911	doxygen-html/a00026_source.html	/^<a name="l00911"><\/a><a class="code" href="a00020.html#a971eb197745a946766bd4dc9febc9be4">00911<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#a037a981f590f5cf648a66f84a37a8e01" title="Default-Constructor of a reverse iterator.">reverse_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a> &amp;it)$/;"	a
l00912	doxygen-html/a00026_source.html	/^<a name="l00912"><\/a>00912             : <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>)$/;"	a
l00913	doxygen-html/a00026_source.html	/^<a name="l00913"><\/a>00913         { }$/;"	a
l00914	doxygen-html/a00026_source.html	/^<a name="l00914"><\/a>00914 <span class="comment"><\/span>$/;"	a
l00915	doxygen-html/a00026_source.html	/^<a name="l00915"><\/a>00915 <span class="comment">        \/\/\/ Dereference the iterator, this is not a value_type&amp; because key and<\/span>$/;"	a
l00916	doxygen-html/a00026_source.html	/^<a name="l00916"><\/a>00916 <span class="comment">        \/\/\/ value are not stored together<\/span>$/;"	a
l00917	doxygen-html/a00026_source.html	/^<a name="l00917"><\/a><a class="code" href="a00020.html#ac4ab8274575df053e010e4ce7f66ef96">00917<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#aafabdbb26269c865eff146d29d106d95" title="Reference to the value_type. STL required.">reference<\/a> <a class="code" href="a00020.html#ac4ab8274575df053e010e4ce7f66ef96" title="Dereference the iterator, this is not a value_type&amp; because key and value are not stored together...">operator*<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00918	doxygen-html/a00026_source.html	/^<a name="l00918"><\/a>00918 <span class="keyword">        <\/span>{$/;"	a
l00919	doxygen-html/a00026_source.html	/^<a name="l00919"><\/a>00919             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l00920	doxygen-html/a00026_source.html	/^<a name="l00920"><\/a>00920             <a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00020.html#a29586b9555247c18a0bbc963077277cc" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00020.html#af080cb064e66be74b06c471cdbb82f0b" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00020.html#a913c74f0137024989f6ab3eb1568b961" title="Writable reference to the current data object.">data<\/a>()) );$/;"	a
l00921	doxygen-html/a00026_source.html	/^<a name="l00921"><\/a>00921             <span class="keywordflow">return<\/span> <a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00922	doxygen-html/a00026_source.html	/^<a name="l00922"><\/a>00922         }$/;"	a
l00923	doxygen-html/a00026_source.html	/^<a name="l00923"><\/a>00923 <span class="comment"><\/span>$/;"	a
l00924	doxygen-html/a00026_source.html	/^<a name="l00924"><\/a>00924 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l00925	doxygen-html/a00026_source.html	/^<a name="l00925"><\/a>00925 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l00926	doxygen-html/a00026_source.html	/^<a name="l00926"><\/a>00926 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l00927	doxygen-html/a00026_source.html	/^<a name="l00927"><\/a><a class="code" href="a00020.html#a59e5d71e8750afe41bdebbf01dc2983c">00927<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#abec59d5ad25b0caaa3dbd19cb1e5c1b4" title="Pointer to the value_type. STL required.">pointer<\/a> <a class="code" href="a00020.html#a59e5d71e8750afe41bdebbf01dc2983c" title="Dereference the iterator.">operator-&gt;<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00928	doxygen-html/a00026_source.html	/^<a name="l00928"><\/a>00928 <span class="keyword">        <\/span>{$/;"	a
l00929	doxygen-html/a00026_source.html	/^<a name="l00929"><\/a>00929             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l00930	doxygen-html/a00026_source.html	/^<a name="l00930"><\/a>00930             <a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00020.html#a29586b9555247c18a0bbc963077277cc" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00020.html#af080cb064e66be74b06c471cdbb82f0b" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00020.html#a913c74f0137024989f6ab3eb1568b961" title="Writable reference to the current data object.">data<\/a>()) );$/;"	a
l00931	doxygen-html/a00026_source.html	/^<a name="l00931"><\/a>00931             <span class="keywordflow">return<\/span> &amp;<a class="code" href="a00020.html#a63ccdf692264f526659802b5326bc13c" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l00932	doxygen-html/a00026_source.html	/^<a name="l00932"><\/a>00932         }$/;"	a
l00933	doxygen-html/a00026_source.html	/^<a name="l00933"><\/a>00933 <span class="comment"><\/span>$/;"	a
l00934	doxygen-html/a00026_source.html	/^<a name="l00934"><\/a>00934 <span class="comment">        \/\/\/ Key of the current slot<\/span>$/;"	a
l00935	doxygen-html/a00026_source.html	/^<a name="l00935"><\/a><a class="code" href="a00020.html#af080cb064e66be74b06c471cdbb82f0b">00935<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00020.html#a6c51c511a728641235b1b766d370d947" title="The key type of the btree. Returned by key().">key_type<\/a>&amp; <a class="code" href="a00020.html#af080cb064e66be74b06c471cdbb82f0b" title="Key of the current slot.">key<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00936	doxygen-html/a00026_source.html	/^<a name="l00936"><\/a>00936 <span class="keyword">        <\/span>{$/;"	a
l00937	doxygen-html/a00026_source.html	/^<a name="l00937"><\/a>00937             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l00938	doxygen-html/a00026_source.html	/^<a name="l00938"><\/a>00938             <span class="keywordflow">return<\/span> <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> - 1];$/;"	a
l00939	doxygen-html/a00026_source.html	/^<a name="l00939"><\/a>00939         }$/;"	a
l00940	doxygen-html/a00026_source.html	/^<a name="l00940"><\/a>00940 <span class="comment"><\/span>$/;"	a
l00941	doxygen-html/a00026_source.html	/^<a name="l00941"><\/a>00941 <span class="comment">        \/\/\/ Writable reference to the current data object<\/span>$/;"	a
l00942	doxygen-html/a00026_source.html	/^<a name="l00942"><\/a><a class="code" href="a00020.html#a913c74f0137024989f6ab3eb1568b961">00942<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00020.html#adbbb473dc39aa6939320a775270db73b" title="The data type of the btree. Returned by data().">data_type<\/a>&amp; <a class="code" href="a00020.html#a913c74f0137024989f6ab3eb1568b961" title="Writable reference to the current data object.">data<\/a>()<span class="keyword"> const<\/span>$/;"	a
l00943	doxygen-html/a00026_source.html	/^<a name="l00943"><\/a>00943 <span class="keyword">        <\/span>{$/;"	a
l00944	doxygen-html/a00026_source.html	/^<a name="l00944"><\/a>00944             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l00945	doxygen-html/a00026_source.html	/^<a name="l00945"><\/a>00945             <span class="keywordflow">return<\/span> <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> ? 0 : <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>-1];$/;"	a
l00946	doxygen-html/a00026_source.html	/^<a name="l00946"><\/a>00946         }$/;"	a
l00947	doxygen-html/a00026_source.html	/^<a name="l00947"><\/a>00947 <span class="comment"><\/span>$/;"	a
l00948	doxygen-html/a00026_source.html	/^<a name="l00948"><\/a>00948 <span class="comment">        \/\/\/ Prefix++ advance the iterator to the next slot<\/span>$/;"	a
l00949	doxygen-html/a00026_source.html	/^<a name="l00949"><\/a><a class="code" href="a00020.html#a83c5c8552459da2b6047762874aec039">00949<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00020.html#a83c5c8552459da2b6047762874aec039" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>()$/;"	a
l00950	doxygen-html/a00026_source.html	/^<a name="l00950"><\/a>00950         {$/;"	a
l00951	doxygen-html/a00026_source.html	/^<a name="l00951"><\/a>00951             <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 1) {$/;"	a
l00952	doxygen-html/a00026_source.html	/^<a name="l00952"><\/a>00952                 --<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00953	doxygen-html/a00026_source.html	/^<a name="l00953"><\/a>00953             }$/;"	a
l00954	doxygen-html/a00026_source.html	/^<a name="l00954"><\/a>00954             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00955	doxygen-html/a00026_source.html	/^<a name="l00955"><\/a>00955                 <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00956	doxygen-html/a00026_source.html	/^<a name="l00956"><\/a>00956                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00957	doxygen-html/a00026_source.html	/^<a name="l00957"><\/a>00957             }$/;"	a
l00958	doxygen-html/a00026_source.html	/^<a name="l00958"><\/a>00958             <span class="keywordflow">else<\/span> {$/;"	a
l00959	doxygen-html/a00026_source.html	/^<a name="l00959"><\/a>00959                 <span class="comment">\/\/ this is begin() == rend()<\/span>$/;"	a
l00960	doxygen-html/a00026_source.html	/^<a name="l00960"><\/a>00960                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00961	doxygen-html/a00026_source.html	/^<a name="l00961"><\/a>00961             }$/;"	a
l00962	doxygen-html/a00026_source.html	/^<a name="l00962"><\/a>00962 $/;"	a
l00963	doxygen-html/a00026_source.html	/^<a name="l00963"><\/a>00963             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l00964	doxygen-html/a00026_source.html	/^<a name="l00964"><\/a>00964         }$/;"	a
l00965	doxygen-html/a00026_source.html	/^<a name="l00965"><\/a>00965 <span class="comment"><\/span>$/;"	a
l00966	doxygen-html/a00026_source.html	/^<a name="l00966"><\/a>00966 <span class="comment">        \/\/\/ Postfix++ advance the iterator to the next slot<\/span>$/;"	a
l00967	doxygen-html/a00026_source.html	/^<a name="l00967"><\/a><a class="code" href="a00020.html#a618f9236ea8724f4d2051e81e5dfab79">00967<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00020.html#a83c5c8552459da2b6047762874aec039" title="Prefix++ advance the iterator to the next slot.">operator++<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l00968	doxygen-html/a00026_source.html	/^<a name="l00968"><\/a>00968         {$/;"	a
l00969	doxygen-html/a00026_source.html	/^<a name="l00969"><\/a>00969             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l00970	doxygen-html/a00026_source.html	/^<a name="l00970"><\/a>00970 $/;"	a
l00971	doxygen-html/a00026_source.html	/^<a name="l00971"><\/a>00971             <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 1) {$/;"	a
l00972	doxygen-html/a00026_source.html	/^<a name="l00972"><\/a>00972                 --<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00973	doxygen-html/a00026_source.html	/^<a name="l00973"><\/a>00973             }$/;"	a
l00974	doxygen-html/a00026_source.html	/^<a name="l00974"><\/a>00974             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l00975	doxygen-html/a00026_source.html	/^<a name="l00975"><\/a>00975                 <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l00976	doxygen-html/a00026_source.html	/^<a name="l00976"><\/a>00976                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00977	doxygen-html/a00026_source.html	/^<a name="l00977"><\/a>00977             }$/;"	a
l00978	doxygen-html/a00026_source.html	/^<a name="l00978"><\/a>00978             <span class="keywordflow">else<\/span> {$/;"	a
l00979	doxygen-html/a00026_source.html	/^<a name="l00979"><\/a>00979                 <span class="comment">\/\/ this is begin() == rend()<\/span>$/;"	a
l00980	doxygen-html/a00026_source.html	/^<a name="l00980"><\/a>00980                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l00981	doxygen-html/a00026_source.html	/^<a name="l00981"><\/a>00981             }$/;"	a
l00982	doxygen-html/a00026_source.html	/^<a name="l00982"><\/a>00982 $/;"	a
l00983	doxygen-html/a00026_source.html	/^<a name="l00983"><\/a>00983             <span class="keywordflow">return<\/span> tmp;$/;"	a
l00984	doxygen-html/a00026_source.html	/^<a name="l00984"><\/a>00984         }$/;"	a
l00985	doxygen-html/a00026_source.html	/^<a name="l00985"><\/a>00985 <span class="comment"><\/span>$/;"	a
l00986	doxygen-html/a00026_source.html	/^<a name="l00986"><\/a>00986 <span class="comment">        \/\/\/ Prefix-- backstep the iterator to the last slot<\/span>$/;"	a
l00987	doxygen-html/a00026_source.html	/^<a name="l00987"><\/a><a class="code" href="a00020.html#a9cc89c7f58ea9856d57d2f0c230d0ade">00987<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00020.html#a9cc89c7f58ea9856d57d2f0c230d0ade" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>()$/;"	a
l00988	doxygen-html/a00026_source.html	/^<a name="l00988"><\/a>00988         {$/;"	a
l00989	doxygen-html/a00026_source.html	/^<a name="l00989"><\/a>00989             <span class="keywordflow">if<\/span> (currslot &lt; currnode-&gt;slotuse) {$/;"	a
l00990	doxygen-html/a00026_source.html	/^<a name="l00990"><\/a>00990                 ++<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l00991	doxygen-html/a00026_source.html	/^<a name="l00991"><\/a>00991             }$/;"	a
l00992	doxygen-html/a00026_source.html	/^<a name="l00992"><\/a>00992             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l00993	doxygen-html/a00026_source.html	/^<a name="l00993"><\/a>00993                 <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l00994	doxygen-html/a00026_source.html	/^<a name="l00994"><\/a>00994                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 1;$/;"	a
l00995	doxygen-html/a00026_source.html	/^<a name="l00995"><\/a>00995             }$/;"	a
l00996	doxygen-html/a00026_source.html	/^<a name="l00996"><\/a>00996             <span class="keywordflow">else<\/span> {$/;"	a
l00997	doxygen-html/a00026_source.html	/^<a name="l00997"><\/a>00997                 <span class="comment">\/\/ this is end() == rbegin()<\/span>$/;"	a
l00998	doxygen-html/a00026_source.html	/^<a name="l00998"><\/a>00998                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l00999	doxygen-html/a00026_source.html	/^<a name="l00999"><\/a>00999             }$/;"	a
l01000	doxygen-html/a00026_source.html	/^<a name="l01000"><\/a>01000 $/;"	a
l01001	doxygen-html/a00026_source.html	/^<a name="l01001"><\/a>01001             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l01002	doxygen-html/a00026_source.html	/^<a name="l01002"><\/a>01002         }$/;"	a
l01003	doxygen-html/a00026_source.html	/^<a name="l01003"><\/a>01003 <span class="comment"><\/span>$/;"	a
l01004	doxygen-html/a00026_source.html	/^<a name="l01004"><\/a>01004 <span class="comment">        \/\/\/ Postfix-- backstep the iterator to the last slot<\/span>$/;"	a
l01005	doxygen-html/a00026_source.html	/^<a name="l01005"><\/a><a class="code" href="a00020.html#a0a9ee91c333e89bcf34c2a46d2f2fb33">01005<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00020.html#a9cc89c7f58ea9856d57d2f0c230d0ade" title="Prefix-- backstep the iterator to the last slot.">operator--<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l01006	doxygen-html/a00026_source.html	/^<a name="l01006"><\/a>01006         {$/;"	a
l01007	doxygen-html/a00026_source.html	/^<a name="l01007"><\/a>01007             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l01008	doxygen-html/a00026_source.html	/^<a name="l01008"><\/a>01008 $/;"	a
l01009	doxygen-html/a00026_source.html	/^<a name="l01009"><\/a>01009             <span class="keywordflow">if<\/span> (currslot &lt; currnode-&gt;slotuse) {$/;"	a
l01010	doxygen-html/a00026_source.html	/^<a name="l01010"><\/a>01010                 ++<a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01011	doxygen-html/a00026_source.html	/^<a name="l01011"><\/a>01011             }$/;"	a
l01012	doxygen-html/a00026_source.html	/^<a name="l01012"><\/a>01012             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l01013	doxygen-html/a00026_source.html	/^<a name="l01013"><\/a>01013                 <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l01014	doxygen-html/a00026_source.html	/^<a name="l01014"><\/a>01014                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 1;$/;"	a
l01015	doxygen-html/a00026_source.html	/^<a name="l01015"><\/a>01015             }$/;"	a
l01016	doxygen-html/a00026_source.html	/^<a name="l01016"><\/a>01016             <span class="keywordflow">else<\/span> {$/;"	a
l01017	doxygen-html/a00026_source.html	/^<a name="l01017"><\/a>01017                 <span class="comment">\/\/ this is end() == rbegin()<\/span>$/;"	a
l01018	doxygen-html/a00026_source.html	/^<a name="l01018"><\/a>01018                 <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l01019	doxygen-html/a00026_source.html	/^<a name="l01019"><\/a>01019             }$/;"	a
l01020	doxygen-html/a00026_source.html	/^<a name="l01020"><\/a>01020 $/;"	a
l01021	doxygen-html/a00026_source.html	/^<a name="l01021"><\/a>01021             <span class="keywordflow">return<\/span> tmp;$/;"	a
l01022	doxygen-html/a00026_source.html	/^<a name="l01022"><\/a>01022         }$/;"	a
l01023	doxygen-html/a00026_source.html	/^<a name="l01023"><\/a>01023 <span class="comment"><\/span>$/;"	a
l01024	doxygen-html/a00026_source.html	/^<a name="l01024"><\/a>01024 <span class="comment">        \/\/\/ Equality of iterators<\/span>$/;"	a
l01025	doxygen-html/a00026_source.html	/^<a name="l01025"><\/a><a class="code" href="a00020.html#a21842a65d08ee94fff82572f57d731da">01025<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00020.html#a21842a65d08ee94fff82572f57d731da" title="Equality of iterators.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l01026	doxygen-html/a00026_source.html	/^<a name="l01026"><\/a>01026 <span class="keyword">        <\/span>{$/;"	a
l01027	doxygen-html/a00026_source.html	/^<a name="l01027"><\/a>01027             <span class="keywordflow">return<\/span> (x.currnode == <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>) &amp;&amp; (x.currslot == <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>);$/;"	a
l01028	doxygen-html/a00026_source.html	/^<a name="l01028"><\/a>01028         }$/;"	a
l01029	doxygen-html/a00026_source.html	/^<a name="l01029"><\/a>01029 <span class="comment"><\/span>$/;"	a
l01030	doxygen-html/a00026_source.html	/^<a name="l01030"><\/a>01030 <span class="comment">        \/\/\/ Inequality of iterators<\/span>$/;"	a
l01031	doxygen-html/a00026_source.html	/^<a name="l01031"><\/a><a class="code" href="a00020.html#aec652edaceca04b39dc8154b7ff271fb">01031<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00020.html#aec652edaceca04b39dc8154b7ff271fb" title="Inequality of iterators.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l01032	doxygen-html/a00026_source.html	/^<a name="l01032"><\/a>01032 <span class="keyword">        <\/span>{$/;"	a
l01033	doxygen-html/a00026_source.html	/^<a name="l01033"><\/a>01033             <span class="keywordflow">return<\/span> (x.currnode != <a class="code" href="a00020.html#aa0d19039b62c1900832061ff5ffc0cdd" title="The currently referenced leaf node of the tree.">currnode<\/a>) || (x.currslot != <a class="code" href="a00020.html#a18093d258964badd66e623908a699774" title="One slot past the current key\/data slot referenced.">currslot<\/a>);$/;"	a
l01034	doxygen-html/a00026_source.html	/^<a name="l01034"><\/a>01034         }$/;"	a
l01035	doxygen-html/a00026_source.html	/^<a name="l01035"><\/a>01035     };$/;"	a
l01036	doxygen-html/a00026_source.html	/^<a name="l01036"><\/a>01036 <span class="comment"><\/span>$/;"	a
l01037	doxygen-html/a00026_source.html	/^<a name="l01037"><\/a>01037 <span class="comment">    \/\/\/ STL-like read-only reverse iterator object for B+ tree items. The<\/span>$/;"	a
l01038	doxygen-html/a00026_source.html	/^<a name="l01038"><\/a>01038 <span class="comment">    \/\/\/ iterator points to a specific slot number in a leaf.<\/span>$/;"	a
l01039	doxygen-html/a00026_source.html	/^<a name="l01039"><\/a><a class="code" href="a00011.html">01039<\/a> <span class="comment"><\/span>    <span class="keyword">class <\/span><a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a>$/;"	a
l01040	doxygen-html/a00026_source.html	/^<a name="l01040"><\/a>01040     {$/;"	a
l01041	doxygen-html/a00026_source.html	/^<a name="l01041"><\/a>01041     <span class="keyword">public<\/span>:$/;"	a
l01042	doxygen-html/a00026_source.html	/^<a name="l01042"><\/a>01042         <span class="comment">\/\/ *** Types<\/span>$/;"	a
l01043	doxygen-html/a00026_source.html	/^<a name="l01043"><\/a>01043 <span class="comment"><\/span>$/;"	a
l01044	doxygen-html/a00026_source.html	/^<a name="l01044"><\/a>01044 <span class="comment">        \/\/\/ The key type of the btree. Returned by key().<\/span>$/;"	a
l01045	doxygen-html/a00026_source.html	/^<a name="l01045"><\/a><a class="code" href="a00011.html#a70e0109ac9bbb992d8cd719e46a823f7">01045<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">btree::key_type<\/a>                <a class="code" href="a00011.html#a70e0109ac9bbb992d8cd719e46a823f7" title="The key type of the btree. Returned by key().">key_type<\/a>;$/;"	a
l01046	doxygen-html/a00026_source.html	/^<a name="l01046"><\/a>01046 <span class="comment"><\/span>$/;"	a
l01047	doxygen-html/a00026_source.html	/^<a name="l01047"><\/a>01047 <span class="comment">        \/\/\/ The data type of the btree. Returned by data().<\/span>$/;"	a
l01048	doxygen-html/a00026_source.html	/^<a name="l01048"><\/a><a class="code" href="a00011.html#a9c8e143f60ffc4737bcd5aff64056b8b">01048<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">btree::data_type<\/a>               <a class="code" href="a00011.html#a9c8e143f60ffc4737bcd5aff64056b8b" title="The data type of the btree. Returned by data().">data_type<\/a>;$/;"	a
l01049	doxygen-html/a00026_source.html	/^<a name="l01049"><\/a>01049 <span class="comment"><\/span>$/;"	a
l01050	doxygen-html/a00026_source.html	/^<a name="l01050"><\/a>01050 <span class="comment">        \/\/\/ The value type of the btree. Returned by operator*().<\/span>$/;"	a
l01051	doxygen-html/a00026_source.html	/^<a name="l01051"><\/a><a class="code" href="a00011.html#acc930672f2eec7f6415ff83d4509ac05">01051<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">btree::value_type<\/a>              <a class="code" href="a00011.html#acc930672f2eec7f6415ff83d4509ac05" title="The value type of the btree. Returned by operator*().">value_type<\/a>;$/;"	a
l01052	doxygen-html/a00026_source.html	/^<a name="l01052"><\/a>01052 <span class="comment"><\/span>$/;"	a
l01053	doxygen-html/a00026_source.html	/^<a name="l01053"><\/a>01053 <span class="comment">        \/\/\/ The pair type of the btree.<\/span>$/;"	a
l01054	doxygen-html/a00026_source.html	/^<a name="l01054"><\/a><a class="code" href="a00011.html#aab286faf1eb3ae1b6468fe8e9a75f3b1">01054<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">btree::pair_type<\/a>               <a class="code" href="a00011.html#aab286faf1eb3ae1b6468fe8e9a75f3b1" title="The pair type of the btree.">pair_type<\/a>;$/;"	a
l01055	doxygen-html/a00026_source.html	/^<a name="l01055"><\/a>01055 <span class="comment"><\/span>$/;"	a
l01056	doxygen-html/a00026_source.html	/^<a name="l01056"><\/a>01056 <span class="comment">        \/\/\/ Reference to the value_type. STL required.<\/span>$/;"	a
l01057	doxygen-html/a00026_source.html	/^<a name="l01057"><\/a><a class="code" href="a00011.html#a348f4ac60e9b98e52dd4a9eb7a583aae">01057<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> <a class="code" href="a00011.html#acc930672f2eec7f6415ff83d4509ac05" title="The value type of the btree. Returned by operator*().">value_type<\/a>&amp;               <a class="code" href="a00011.html#a348f4ac60e9b98e52dd4a9eb7a583aae" title="Reference to the value_type. STL required.">reference<\/a>;$/;"	a
l01058	doxygen-html/a00026_source.html	/^<a name="l01058"><\/a>01058 <span class="comment"><\/span>$/;"	a
l01059	doxygen-html/a00026_source.html	/^<a name="l01059"><\/a>01059 <span class="comment">        \/\/\/ Pointer to the value_type. STL required.<\/span>$/;"	a
l01060	doxygen-html/a00026_source.html	/^<a name="l01060"><\/a><a class="code" href="a00011.html#ae4738f49ed44440ea435caf233b0f9e4">01060<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <span class="keyword">const<\/span> <a class="code" href="a00011.html#acc930672f2eec7f6415ff83d4509ac05" title="The value type of the btree. Returned by operator*().">value_type<\/a>*               <a class="code" href="a00011.html#ae4738f49ed44440ea435caf233b0f9e4" title="Pointer to the value_type. STL required.">pointer<\/a>;$/;"	a
l01061	doxygen-html/a00026_source.html	/^<a name="l01061"><\/a>01061 <span class="comment"><\/span>$/;"	a
l01062	doxygen-html/a00026_source.html	/^<a name="l01062"><\/a>01062 <span class="comment">        \/\/\/ STL-magic iterator category<\/span>$/;"	a
l01063	doxygen-html/a00026_source.html	/^<a name="l01063"><\/a><a class="code" href="a00011.html#a32a22b72cec700c50bbd3d39aa7b08e6">01063<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> std::bidirectional_iterator_tag         <a class="code" href="a00011.html#a32a22b72cec700c50bbd3d39aa7b08e6" title="STL-magic iterator category.">iterator_category<\/a>;$/;"	a
l01064	doxygen-html/a00026_source.html	/^<a name="l01064"><\/a>01064 <span class="comment"><\/span>$/;"	a
l01065	doxygen-html/a00026_source.html	/^<a name="l01065"><\/a>01065 <span class="comment">        \/\/\/ STL-magic<\/span>$/;"	a
l01066	doxygen-html/a00026_source.html	/^<a name="l01066"><\/a><a class="code" href="a00011.html#a16239c36756ab6f302cae6c81f546435">01066<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> ptrdiff_t               <a class="code" href="a00011.html#a16239c36756ab6f302cae6c81f546435" title="STL-magic.">difference_type<\/a>;$/;"	a
l01067	doxygen-html/a00026_source.html	/^<a name="l01067"><\/a>01067 <span class="comment"><\/span>$/;"	a
l01068	doxygen-html/a00026_source.html	/^<a name="l01068"><\/a>01068 <span class="comment">        \/\/\/ Our own type<\/span>$/;"	a
l01069	doxygen-html/a00026_source.html	/^<a name="l01069"><\/a><a class="code" href="a00011.html#a49f760734d01e4d077b81d7bfb50d249">01069<\/a> <span class="comment"><\/span>        <span class="keyword">typedef<\/span> <a class="code" href="a00011.html" title="STL-like read-only reverse iterator object for B+ tree items.">const_reverse_iterator<\/a>  <span class="keyword">self<\/span>;$/;"	a
l01070	doxygen-html/a00026_source.html	/^<a name="l01070"><\/a>01070 $/;"	a
l01071	doxygen-html/a00026_source.html	/^<a name="l01071"><\/a>01071     <span class="keyword">private<\/span>:$/;"	a
l01072	doxygen-html/a00026_source.html	/^<a name="l01072"><\/a>01072         <span class="comment">\/\/ *** Members<\/span>$/;"	a
l01073	doxygen-html/a00026_source.html	/^<a name="l01073"><\/a>01073 <span class="comment"><\/span>$/;"	a
l01074	doxygen-html/a00026_source.html	/^<a name="l01074"><\/a>01074 <span class="comment">        \/\/\/ The currently referenced leaf node of the tree<\/span>$/;"	a
l01075	doxygen-html/a00026_source.html	/^<a name="l01075"><\/a><a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1">01075<\/a> <span class="comment"><\/span>        <span class="keyword">const<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a>*        <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>;$/;"	a
l01076	doxygen-html/a00026_source.html	/^<a name="l01076"><\/a>01076 <span class="comment"><\/span>$/;"	a
l01077	doxygen-html/a00026_source.html	/^<a name="l01077"><\/a>01077 <span class="comment">        \/\/\/ One slot past the current key\/data slot referenced.<\/span>$/;"	a
l01078	doxygen-html/a00026_source.html	/^<a name="l01078"><\/a><a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0">01078<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>                          <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01079	doxygen-html/a00026_source.html	/^<a name="l01079"><\/a>01079 <span class="comment"><\/span>$/;"	a
l01080	doxygen-html/a00026_source.html	/^<a name="l01080"><\/a>01080 <span class="comment">        \/\/\/ Friendly to the const_iterator, so it may access the two data items<\/span>$/;"	a
l01081	doxygen-html/a00026_source.html	/^<a name="l01081"><\/a>01081 <span class="comment">        \/\/\/ directly.<\/span>$/;"	a
l01082	doxygen-html/a00026_source.html	/^<a name="l01082"><\/a><a class="code" href="a00011.html#af0a70641f2216cc31420487a62dd3b0d">01082<\/a> <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a>;$/;"	a
l01083	doxygen-html/a00026_source.html	/^<a name="l01083"><\/a>01083 <span class="comment"><\/span>$/;"	a
l01084	doxygen-html/a00026_source.html	/^<a name="l01084"><\/a>01084 <span class="comment">        \/\/\/ Evil! A temporary value_type to STL-correctly deliver operator* and<\/span>$/;"	a
l01085	doxygen-html/a00026_source.html	/^<a name="l01085"><\/a>01085 <span class="comment">        \/\/\/ operator-&gt;<\/span>$/;"	a
l01086	doxygen-html/a00026_source.html	/^<a name="l01086"><\/a><a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159">01086<\/a> <span class="comment"><\/span>        <span class="keyword">mutable<\/span> <a class="code" href="a00011.html#acc930672f2eec7f6415ff83d4509ac05" title="The value type of the btree. Returned by operator*().">value_type<\/a>              <a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l01087	doxygen-html/a00026_source.html	/^<a name="l01087"><\/a>01087 $/;"	a
l01088	doxygen-html/a00026_source.html	/^<a name="l01088"><\/a>01088         <span class="comment">\/\/ The macro BTREE_FRIENDS can be used by outside class to access the B+<\/span>$/;"	a
l01089	doxygen-html/a00026_source.html	/^<a name="l01089"><\/a>01089         <span class="comment">\/\/ tree internals. This was added for wxBTreeDemo to be able to draw the<\/span>$/;"	a
l01090	doxygen-html/a00026_source.html	/^<a name="l01090"><\/a>01090         <span class="comment">\/\/ tree.<\/span>$/;"	a
l01091	doxygen-html/a00026_source.html	/^<a name="l01091"><\/a>01091         <a class="code" href="a00026.html#aec07a93b351ce398f789007a441a4320" title="The macro BTREE_FRIENDS can be used by outside class to access the B+ tree internals.">BTREE_FRIENDS<\/a>$/;"	a
l01092	doxygen-html/a00026_source.html	/^<a name="l01092"><\/a>01092 $/;"	a
l01093	doxygen-html/a00026_source.html	/^<a name="l01093"><\/a>01093     <span class="keyword">public<\/span>:$/;"	a
l01094	doxygen-html/a00026_source.html	/^<a name="l01094"><\/a>01094         <span class="comment">\/\/ *** Methods<\/span>$/;"	a
l01095	doxygen-html/a00026_source.html	/^<a name="l01095"><\/a>01095 <span class="comment"><\/span>$/;"	a
l01096	doxygen-html/a00026_source.html	/^<a name="l01096"><\/a>01096 <span class="comment">        \/\/\/ Default-Constructor of a const reverse iterator<\/span>$/;"	a
l01097	doxygen-html/a00026_source.html	/^<a name="l01097"><\/a><a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07">01097<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07" title="Default-Constructor of a const reverse iterator.">const_reverse_iterator<\/a>()$/;"	a
l01098	doxygen-html/a00026_source.html	/^<a name="l01098"><\/a>01098             : <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>(NULL), <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>(0)$/;"	a
l01099	doxygen-html/a00026_source.html	/^<a name="l01099"><\/a>01099         { }$/;"	a
l01100	doxygen-html/a00026_source.html	/^<a name="l01100"><\/a>01100 <span class="comment"><\/span>$/;"	a
l01101	doxygen-html/a00026_source.html	/^<a name="l01101"><\/a>01101 <span class="comment">        \/\/\/ Initializing-Constructor of a const reverse iterator<\/span>$/;"	a
l01102	doxygen-html/a00026_source.html	/^<a name="l01102"><\/a><a class="code" href="a00011.html#a406c6261e15547799c5354469bd97bc1">01102<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07" title="Default-Constructor of a const reverse iterator.">const_reverse_iterator<\/a>(<span class="keyword">const<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00017.html" title="Extended structure of a leaf node in memory.">btree::leaf_node<\/a> *l, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s)$/;"	a
l01103	doxygen-html/a00026_source.html	/^<a name="l01103"><\/a>01103             : <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>(l), <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>(s)$/;"	a
l01104	doxygen-html/a00026_source.html	/^<a name="l01104"><\/a>01104         { }$/;"	a
l01105	doxygen-html/a00026_source.html	/^<a name="l01105"><\/a>01105 <span class="comment"><\/span>$/;"	a
l01106	doxygen-html/a00026_source.html	/^<a name="l01106"><\/a>01106 <span class="comment">        \/\/\/ Copy-constructor from a mutable iterator<\/span>$/;"	a
l01107	doxygen-html/a00026_source.html	/^<a name="l01107"><\/a><a class="code" href="a00011.html#aca6caede1c4a70a0ba6374374e8d23b4">01107<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07" title="Default-Constructor of a const reverse iterator.">const_reverse_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00016.html" title="STL-like iterator object for B+ tree items.">iterator<\/a> &amp;it)$/;"	a
l01108	doxygen-html/a00026_source.html	/^<a name="l01108"><\/a>01108             : <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>)$/;"	a
l01109	doxygen-html/a00026_source.html	/^<a name="l01109"><\/a>01109         { }$/;"	a
l01110	doxygen-html/a00026_source.html	/^<a name="l01110"><\/a>01110 <span class="comment"><\/span>$/;"	a
l01111	doxygen-html/a00026_source.html	/^<a name="l01111"><\/a>01111 <span class="comment">        \/\/\/ Copy-constructor from a const iterator<\/span>$/;"	a
l01112	doxygen-html/a00026_source.html	/^<a name="l01112"><\/a><a class="code" href="a00011.html#a349eb4703fe072a9f7391fbf690227c5">01112<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07" title="Default-Constructor of a const reverse iterator.">const_reverse_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00010.html" title="STL-like read-only iterator object for B+ tree items.">const_iterator<\/a> &amp;it)$/;"	a
l01113	doxygen-html/a00026_source.html	/^<a name="l01113"><\/a>01113             : <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>)$/;"	a
l01114	doxygen-html/a00026_source.html	/^<a name="l01114"><\/a>01114         { }$/;"	a
l01115	doxygen-html/a00026_source.html	/^<a name="l01115"><\/a>01115 <span class="comment"><\/span>$/;"	a
l01116	doxygen-html/a00026_source.html	/^<a name="l01116"><\/a>01116 <span class="comment">        \/\/\/ Copy-constructor from a mutable reverse iterator<\/span>$/;"	a
l01117	doxygen-html/a00026_source.html	/^<a name="l01117"><\/a><a class="code" href="a00011.html#a28c296620454764d5f4122bbba635fe8">01117<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#af3bb1866679e03b44091e60297eb3a07" title="Default-Constructor of a const reverse iterator.">const_reverse_iterator<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00020.html" title="STL-like mutable reverse iterator object for B+ tree items.">reverse_iterator<\/a> &amp;it)$/;"	a
l01118	doxygen-html/a00026_source.html	/^<a name="l01118"><\/a>01118             : <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>(it.<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>), <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>(it.<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>)$/;"	a
l01119	doxygen-html/a00026_source.html	/^<a name="l01119"><\/a>01119         { }$/;"	a
l01120	doxygen-html/a00026_source.html	/^<a name="l01120"><\/a>01120 <span class="comment"><\/span>$/;"	a
l01121	doxygen-html/a00026_source.html	/^<a name="l01121"><\/a>01121 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l01122	doxygen-html/a00026_source.html	/^<a name="l01122"><\/a>01122 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l01123	doxygen-html/a00026_source.html	/^<a name="l01123"><\/a>01123 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l01124	doxygen-html/a00026_source.html	/^<a name="l01124"><\/a><a class="code" href="a00011.html#ab3e68e6e7fb69e17532b6bcaa6cde4fd">01124<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#a348f4ac60e9b98e52dd4a9eb7a583aae" title="Reference to the value_type. STL required.">reference<\/a> <a class="code" href="a00011.html#ab3e68e6e7fb69e17532b6bcaa6cde4fd" title="Dereference the iterator.">operator*<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01125	doxygen-html/a00026_source.html	/^<a name="l01125"><\/a>01125 <span class="keyword">        <\/span>{$/;"	a
l01126	doxygen-html/a00026_source.html	/^<a name="l01126"><\/a>01126             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l01127	doxygen-html/a00026_source.html	/^<a name="l01127"><\/a>01127             <a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00011.html#aab286faf1eb3ae1b6468fe8e9a75f3b1" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00011.html#a4ecc6fe88b07cd9f45636b45846ab205" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00011.html#abb2dda2d282567f7f45d47e89b78163d" title="Read-only reference to the current data object.">data<\/a>()) );$/;"	a
l01128	doxygen-html/a00026_source.html	/^<a name="l01128"><\/a>01128             <span class="keywordflow">return<\/span> <a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l01129	doxygen-html/a00026_source.html	/^<a name="l01129"><\/a>01129         }$/;"	a
l01130	doxygen-html/a00026_source.html	/^<a name="l01130"><\/a>01130 <span class="comment"><\/span>$/;"	a
l01131	doxygen-html/a00026_source.html	/^<a name="l01131"><\/a>01131 <span class="comment">        \/\/\/ Dereference the iterator. Do not use this if possible, use key()<\/span>$/;"	a
l01132	doxygen-html/a00026_source.html	/^<a name="l01132"><\/a>01132 <span class="comment">        \/\/\/ and data() instead. The B+ tree does not stored key and data<\/span>$/;"	a
l01133	doxygen-html/a00026_source.html	/^<a name="l01133"><\/a>01133 <span class="comment">        \/\/\/ together.<\/span>$/;"	a
l01134	doxygen-html/a00026_source.html	/^<a name="l01134"><\/a><a class="code" href="a00011.html#a370933a996011f9b7562b617dbbdd6d4">01134<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00011.html#ae4738f49ed44440ea435caf233b0f9e4" title="Pointer to the value_type. STL required.">pointer<\/a> <a class="code" href="a00011.html#a370933a996011f9b7562b617dbbdd6d4" title="Dereference the iterator.">operator-&gt;<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01135	doxygen-html/a00026_source.html	/^<a name="l01135"><\/a>01135 <span class="keyword">        <\/span>{$/;"	a
l01136	doxygen-html/a00026_source.html	/^<a name="l01136"><\/a>01136             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l01137	doxygen-html/a00026_source.html	/^<a name="l01137"><\/a>01137             <a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a> = <a class="code" href="a00001.html#a76bd9fc84f712e0d962314c1d6a188ce" title="Using template specialization select the correct converter used by the iterators.">pair_to_value_type<\/a>()( <a class="code" href="a00011.html#aab286faf1eb3ae1b6468fe8e9a75f3b1" title="The pair type of the btree.">pair_type<\/a>(<a class="code" href="a00011.html#a4ecc6fe88b07cd9f45636b45846ab205" title="Key of the current slot.">key<\/a>(),<a class="code" href="a00011.html#abb2dda2d282567f7f45d47e89b78163d" title="Read-only reference to the current data object.">data<\/a>()) );$/;"	a
l01138	doxygen-html/a00026_source.html	/^<a name="l01138"><\/a>01138             <span class="keywordflow">return<\/span> &amp;<a class="code" href="a00011.html#a61c5865ccc405cfdfbc4c4a5c6d56159" title="Evil! A temporary value_type to STL-correctly deliver operator* and operator-&gt;">temp_value<\/a>;$/;"	a
l01139	doxygen-html/a00026_source.html	/^<a name="l01139"><\/a>01139         }$/;"	a
l01140	doxygen-html/a00026_source.html	/^<a name="l01140"><\/a>01140 <span class="comment"><\/span>$/;"	a
l01141	doxygen-html/a00026_source.html	/^<a name="l01141"><\/a>01141 <span class="comment">        \/\/\/ Key of the current slot<\/span>$/;"	a
l01142	doxygen-html/a00026_source.html	/^<a name="l01142"><\/a><a class="code" href="a00011.html#a4ecc6fe88b07cd9f45636b45846ab205">01142<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00011.html#a70e0109ac9bbb992d8cd719e46a823f7" title="The key type of the btree. Returned by key().">key_type<\/a>&amp; <a class="code" href="a00011.html#a4ecc6fe88b07cd9f45636b45846ab205" title="Key of the current slot.">key<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01143	doxygen-html/a00026_source.html	/^<a name="l01143"><\/a>01143 <span class="keyword">        <\/span>{$/;"	a
l01144	doxygen-html/a00026_source.html	/^<a name="l01144"><\/a>01144             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l01145	doxygen-html/a00026_source.html	/^<a name="l01145"><\/a>01145             <span class="keywordflow">return<\/span> <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#af92e519f605cf7b7aae74f6f5d6c8bd8" title="Keys of children or data pointers.">slotkey<\/a>[<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> - 1];$/;"	a
l01146	doxygen-html/a00026_source.html	/^<a name="l01146"><\/a>01146         }$/;"	a
l01147	doxygen-html/a00026_source.html	/^<a name="l01147"><\/a>01147 <span class="comment"><\/span>$/;"	a
l01148	doxygen-html/a00026_source.html	/^<a name="l01148"><\/a>01148 <span class="comment">        \/\/\/ Read-only reference to the current data object<\/span>$/;"	a
l01149	doxygen-html/a00026_source.html	/^<a name="l01149"><\/a><a class="code" href="a00011.html#abb2dda2d282567f7f45d47e89b78163d">01149<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <a class="code" href="a00011.html#a9c8e143f60ffc4737bcd5aff64056b8b" title="The data type of the btree. Returned by data().">data_type<\/a>&amp; <a class="code" href="a00011.html#abb2dda2d282567f7f45d47e89b78163d" title="Read-only reference to the current data object.">data<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01150	doxygen-html/a00026_source.html	/^<a name="l01150"><\/a>01150 <span class="keyword">        <\/span>{$/;"	a
l01151	doxygen-html/a00026_source.html	/^<a name="l01151"><\/a>01151             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 0);$/;"	a
l01152	doxygen-html/a00026_source.html	/^<a name="l01152"><\/a>01152             <span class="keywordflow">return<\/span> <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#ad4fc245fe5b90c21dec069792c3f7432" title="Array of data.">slotdata<\/a>[<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a> ? 0 : <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>-1];$/;"	a
l01153	doxygen-html/a00026_source.html	/^<a name="l01153"><\/a>01153         }$/;"	a
l01154	doxygen-html/a00026_source.html	/^<a name="l01154"><\/a>01154 <span class="comment"><\/span>$/;"	a
l01155	doxygen-html/a00026_source.html	/^<a name="l01155"><\/a>01155 <span class="comment">        \/\/\/ Prefix++ advance the iterator to the previous slot<\/span>$/;"	a
l01156	doxygen-html/a00026_source.html	/^<a name="l01156"><\/a><a class="code" href="a00011.html#a3d4d624e2c4ddf7f4de6e48f534fdd26">01156<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00011.html#a3d4d624e2c4ddf7f4de6e48f534fdd26" title="Prefix++ advance the iterator to the previous slot.">operator++<\/a>()$/;"	a
l01157	doxygen-html/a00026_source.html	/^<a name="l01157"><\/a>01157         {$/;"	a
l01158	doxygen-html/a00026_source.html	/^<a name="l01158"><\/a>01158             <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 1) {$/;"	a
l01159	doxygen-html/a00026_source.html	/^<a name="l01159"><\/a>01159                 --<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01160	doxygen-html/a00026_source.html	/^<a name="l01160"><\/a>01160             }$/;"	a
l01161	doxygen-html/a00026_source.html	/^<a name="l01161"><\/a>01161             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l01162	doxygen-html/a00026_source.html	/^<a name="l01162"><\/a>01162                 <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l01163	doxygen-html/a00026_source.html	/^<a name="l01163"><\/a>01163                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l01164	doxygen-html/a00026_source.html	/^<a name="l01164"><\/a>01164             }$/;"	a
l01165	doxygen-html/a00026_source.html	/^<a name="l01165"><\/a>01165             <span class="keywordflow">else<\/span> {$/;"	a
l01166	doxygen-html/a00026_source.html	/^<a name="l01166"><\/a>01166                 <span class="comment">\/\/ this is begin() == rend()<\/span>$/;"	a
l01167	doxygen-html/a00026_source.html	/^<a name="l01167"><\/a>01167                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l01168	doxygen-html/a00026_source.html	/^<a name="l01168"><\/a>01168             }$/;"	a
l01169	doxygen-html/a00026_source.html	/^<a name="l01169"><\/a>01169 $/;"	a
l01170	doxygen-html/a00026_source.html	/^<a name="l01170"><\/a>01170             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l01171	doxygen-html/a00026_source.html	/^<a name="l01171"><\/a>01171         }$/;"	a
l01172	doxygen-html/a00026_source.html	/^<a name="l01172"><\/a>01172 <span class="comment"><\/span>$/;"	a
l01173	doxygen-html/a00026_source.html	/^<a name="l01173"><\/a>01173 <span class="comment">        \/\/\/ Postfix++ advance the iterator to the previous slot<\/span>$/;"	a
l01174	doxygen-html/a00026_source.html	/^<a name="l01174"><\/a><a class="code" href="a00011.html#adef1f00061b420c3920886bbbfeb6c26">01174<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00011.html#a3d4d624e2c4ddf7f4de6e48f534fdd26" title="Prefix++ advance the iterator to the previous slot.">operator++<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l01175	doxygen-html/a00026_source.html	/^<a name="l01175"><\/a>01175         {$/;"	a
l01176	doxygen-html/a00026_source.html	/^<a name="l01176"><\/a>01176             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l01177	doxygen-html/a00026_source.html	/^<a name="l01177"><\/a>01177 $/;"	a
l01178	doxygen-html/a00026_source.html	/^<a name="l01178"><\/a>01178             <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> &gt; 1) {$/;"	a
l01179	doxygen-html/a00026_source.html	/^<a name="l01179"><\/a>01179                 --<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01180	doxygen-html/a00026_source.html	/^<a name="l01180"><\/a>01180             }$/;"	a
l01181	doxygen-html/a00026_source.html	/^<a name="l01181"><\/a>01181             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> != NULL) {$/;"	a
l01182	doxygen-html/a00026_source.html	/^<a name="l01182"><\/a>01182                 <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a>;$/;"	a
l01183	doxygen-html/a00026_source.html	/^<a name="l01183"><\/a>01183                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l01184	doxygen-html/a00026_source.html	/^<a name="l01184"><\/a>01184             }$/;"	a
l01185	doxygen-html/a00026_source.html	/^<a name="l01185"><\/a>01185             <span class="keywordflow">else<\/span> {$/;"	a
l01186	doxygen-html/a00026_source.html	/^<a name="l01186"><\/a>01186                 <span class="comment">\/\/ this is begin() == rend()<\/span>$/;"	a
l01187	doxygen-html/a00026_source.html	/^<a name="l01187"><\/a>01187                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 0;$/;"	a
l01188	doxygen-html/a00026_source.html	/^<a name="l01188"><\/a>01188             }$/;"	a
l01189	doxygen-html/a00026_source.html	/^<a name="l01189"><\/a>01189 $/;"	a
l01190	doxygen-html/a00026_source.html	/^<a name="l01190"><\/a>01190             <span class="keywordflow">return<\/span> tmp;$/;"	a
l01191	doxygen-html/a00026_source.html	/^<a name="l01191"><\/a>01191         }$/;"	a
l01192	doxygen-html/a00026_source.html	/^<a name="l01192"><\/a>01192 <span class="comment"><\/span>$/;"	a
l01193	doxygen-html/a00026_source.html	/^<a name="l01193"><\/a>01193 <span class="comment">        \/\/\/ Prefix-- backstep the iterator to the next slot<\/span>$/;"	a
l01194	doxygen-html/a00026_source.html	/^<a name="l01194"><\/a><a class="code" href="a00011.html#a19b97b3c22c5efe9aae998ad436779c8">01194<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span>&amp; <a class="code" href="a00011.html#a19b97b3c22c5efe9aae998ad436779c8" title="Prefix-- backstep the iterator to the next slot.">operator--<\/a>()$/;"	a
l01195	doxygen-html/a00026_source.html	/^<a name="l01195"><\/a>01195         {$/;"	a
l01196	doxygen-html/a00026_source.html	/^<a name="l01196"><\/a>01196             <span class="keywordflow">if<\/span> (currslot &lt; currnode-&gt;slotuse) {$/;"	a
l01197	doxygen-html/a00026_source.html	/^<a name="l01197"><\/a>01197                 ++<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01198	doxygen-html/a00026_source.html	/^<a name="l01198"><\/a>01198             }$/;"	a
l01199	doxygen-html/a00026_source.html	/^<a name="l01199"><\/a>01199             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l01200	doxygen-html/a00026_source.html	/^<a name="l01200"><\/a>01200                 <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l01201	doxygen-html/a00026_source.html	/^<a name="l01201"><\/a>01201                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 1;$/;"	a
l01202	doxygen-html/a00026_source.html	/^<a name="l01202"><\/a>01202             }$/;"	a
l01203	doxygen-html/a00026_source.html	/^<a name="l01203"><\/a>01203             <span class="keywordflow">else<\/span> {$/;"	a
l01204	doxygen-html/a00026_source.html	/^<a name="l01204"><\/a>01204                 <span class="comment">\/\/ this is end() == rbegin()<\/span>$/;"	a
l01205	doxygen-html/a00026_source.html	/^<a name="l01205"><\/a>01205                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l01206	doxygen-html/a00026_source.html	/^<a name="l01206"><\/a>01206             }$/;"	a
l01207	doxygen-html/a00026_source.html	/^<a name="l01207"><\/a>01207 $/;"	a
l01208	doxygen-html/a00026_source.html	/^<a name="l01208"><\/a>01208             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l01209	doxygen-html/a00026_source.html	/^<a name="l01209"><\/a>01209         }$/;"	a
l01210	doxygen-html/a00026_source.html	/^<a name="l01210"><\/a>01210 <span class="comment"><\/span>$/;"	a
l01211	doxygen-html/a00026_source.html	/^<a name="l01211"><\/a>01211 <span class="comment">        \/\/\/ Postfix-- backstep the iterator to the next slot<\/span>$/;"	a
l01212	doxygen-html/a00026_source.html	/^<a name="l01212"><\/a><a class="code" href="a00011.html#ab38fc2017a87598e61cdc5abe4a314f7">01212<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keyword">self<\/span> <a class="code" href="a00011.html#a19b97b3c22c5efe9aae998ad436779c8" title="Prefix-- backstep the iterator to the next slot.">operator--<\/a>(<span class="keywordtype">int<\/span>)$/;"	a
l01213	doxygen-html/a00026_source.html	/^<a name="l01213"><\/a>01213         {$/;"	a
l01214	doxygen-html/a00026_source.html	/^<a name="l01214"><\/a>01214             <span class="keyword">self<\/span> tmp = *<span class="keyword">this<\/span>;   <span class="comment">\/\/ copy ourselves<\/span>$/;"	a
l01215	doxygen-html/a00026_source.html	/^<a name="l01215"><\/a>01215 $/;"	a
l01216	doxygen-html/a00026_source.html	/^<a name="l01216"><\/a>01216             <span class="keywordflow">if<\/span> (currslot &lt; currnode-&gt;slotuse) {$/;"	a
l01217	doxygen-html/a00026_source.html	/^<a name="l01217"><\/a>01217                 ++<a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>;$/;"	a
l01218	doxygen-html/a00026_source.html	/^<a name="l01218"><\/a>01218             }$/;"	a
l01219	doxygen-html/a00026_source.html	/^<a name="l01219"><\/a>01219             <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (<a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> != NULL) {$/;"	a
l01220	doxygen-html/a00026_source.html	/^<a name="l01220"><\/a>01220                 <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l01221	doxygen-html/a00026_source.html	/^<a name="l01221"><\/a>01221                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = 1;$/;"	a
l01222	doxygen-html/a00026_source.html	/^<a name="l01222"><\/a>01222             }$/;"	a
l01223	doxygen-html/a00026_source.html	/^<a name="l01223"><\/a>01223             <span class="keywordflow">else<\/span> {$/;"	a
l01224	doxygen-html/a00026_source.html	/^<a name="l01224"><\/a>01224                 <span class="comment">\/\/ this is end() == rbegin()<\/span>$/;"	a
l01225	doxygen-html/a00026_source.html	/^<a name="l01225"><\/a>01225                 <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a> = <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l01226	doxygen-html/a00026_source.html	/^<a name="l01226"><\/a>01226             }$/;"	a
l01227	doxygen-html/a00026_source.html	/^<a name="l01227"><\/a>01227 $/;"	a
l01228	doxygen-html/a00026_source.html	/^<a name="l01228"><\/a>01228             <span class="keywordflow">return<\/span> tmp;$/;"	a
l01229	doxygen-html/a00026_source.html	/^<a name="l01229"><\/a>01229         }$/;"	a
l01230	doxygen-html/a00026_source.html	/^<a name="l01230"><\/a>01230 <span class="comment"><\/span>$/;"	a
l01231	doxygen-html/a00026_source.html	/^<a name="l01231"><\/a>01231 <span class="comment">        \/\/\/ Equality of iterators<\/span>$/;"	a
l01232	doxygen-html/a00026_source.html	/^<a name="l01232"><\/a><a class="code" href="a00011.html#a04440b5128f77cd8b5ded1755ee02f0a">01232<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00011.html#a04440b5128f77cd8b5ded1755ee02f0a" title="Equality of iterators.">operator==<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l01233	doxygen-html/a00026_source.html	/^<a name="l01233"><\/a>01233 <span class="keyword">        <\/span>{$/;"	a
l01234	doxygen-html/a00026_source.html	/^<a name="l01234"><\/a>01234             <span class="keywordflow">return<\/span> (x.currnode == <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>) &amp;&amp; (x.currslot == <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>);$/;"	a
l01235	doxygen-html/a00026_source.html	/^<a name="l01235"><\/a>01235         }$/;"	a
l01236	doxygen-html/a00026_source.html	/^<a name="l01236"><\/a>01236 <span class="comment"><\/span>$/;"	a
l01237	doxygen-html/a00026_source.html	/^<a name="l01237"><\/a>01237 <span class="comment">        \/\/\/ Inequality of iterators<\/span>$/;"	a
l01238	doxygen-html/a00026_source.html	/^<a name="l01238"><\/a><a class="code" href="a00011.html#a39a768f4e4691446178064dfbfbaef5a">01238<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00011.html#a39a768f4e4691446178064dfbfbaef5a" title="Inequality of iterators.">operator!=<\/a>(<span class="keyword">const<\/span> <span class="keyword">self<\/span>&amp; x)<span class="keyword"> const<\/span>$/;"	a
l01239	doxygen-html/a00026_source.html	/^<a name="l01239"><\/a>01239 <span class="keyword">        <\/span>{$/;"	a
l01240	doxygen-html/a00026_source.html	/^<a name="l01240"><\/a>01240             <span class="keywordflow">return<\/span> (x.currnode != <a class="code" href="a00011.html#ac0b50284d015657e6ea251bb695680f1" title="The currently referenced leaf node of the tree.">currnode<\/a>) || (x.currslot != <a class="code" href="a00011.html#a34ea10996939f11220a3ec2c8cd4d6a0" title="One slot past the current key\/data slot referenced.">currslot<\/a>);$/;"	a
l01241	doxygen-html/a00026_source.html	/^<a name="l01241"><\/a>01241         }$/;"	a
l01242	doxygen-html/a00026_source.html	/^<a name="l01242"><\/a>01242     };$/;"	a
l01243	doxygen-html/a00026_source.html	/^<a name="l01243"><\/a>01243 $/;"	a
l01244	doxygen-html/a00026_source.html	/^<a name="l01244"><\/a>01244 <span class="keyword">public<\/span>:$/;"	a
l01245	doxygen-html/a00026_source.html	/^<a name="l01245"><\/a>01245     <span class="comment">\/\/ *** Small Statistics Structure<\/span>$/;"	a
l01246	doxygen-html/a00026_source.html	/^<a name="l01246"><\/a>01246 <span class="comment"><\/span>$/;"	a
l01247	doxygen-html/a00026_source.html	/^<a name="l01247"><\/a>01247 <span class="comment">    \/** A small struct containing basic statistics about the B+ tree. It can be<\/span>$/;"	a
l01248	doxygen-html/a00026_source.html	/^<a name="l01248"><\/a>01248 <span class="comment">     * fetched using get_stats(). *\/<\/span>$/;"	a
l01249	doxygen-html/a00026_source.html	/^<a name="l01249"><\/a><a class="code" href="a00021.html">01249<\/a>     <span class="keyword">struct <\/span><a class="code" href="a00021.html" title="A small struct containing basic statistics about the B+ tree.">tree_stats<\/a>$/;"	a
l01250	doxygen-html/a00026_source.html	/^<a name="l01250"><\/a>01250     {<span class="comment"><\/span>$/;"	a
l01251	doxygen-html/a00026_source.html	/^<a name="l01251"><\/a>01251 <span class="comment">        \/\/\/ Number of items in the B+ tree<\/span>$/;"	a
l01252	doxygen-html/a00026_source.html	/^<a name="l01252"><\/a><a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae">01252<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>       <a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>;$/;"	a
l01253	doxygen-html/a00026_source.html	/^<a name="l01253"><\/a>01253 <span class="comment"><\/span>$/;"	a
l01254	doxygen-html/a00026_source.html	/^<a name="l01254"><\/a>01254 <span class="comment">        \/\/\/ Number of leaves in the B+ tree<\/span>$/;"	a
l01255	doxygen-html/a00026_source.html	/^<a name="l01255"><\/a><a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc">01255<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>       <a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a>;$/;"	a
l01256	doxygen-html/a00026_source.html	/^<a name="l01256"><\/a>01256 <span class="comment"><\/span>$/;"	a
l01257	doxygen-html/a00026_source.html	/^<a name="l01257"><\/a>01257 <span class="comment">        \/\/\/ Number of inner nodes in the B+ tree<\/span>$/;"	a
l01258	doxygen-html/a00026_source.html	/^<a name="l01258"><\/a><a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17">01258<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>       <a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a>;$/;"	a
l01259	doxygen-html/a00026_source.html	/^<a name="l01259"><\/a>01259 <span class="comment"><\/span>$/;"	a
l01260	doxygen-html/a00026_source.html	/^<a name="l01260"><\/a>01260 <span class="comment">        \/\/\/ Base B+ tree parameter: The number of key\/data slots in each leaf<\/span>$/;"	a
l01261	doxygen-html/a00026_source.html	/^<a name="l01261"><\/a><a class="code" href="a00021.html#ae833639b01b1ee2893bdaa1d96e8a584">01261<\/a> <span class="comment"><\/span>        <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>     <a class="code" href="a00021.html#ae833639b01b1ee2893bdaa1d96e8a584" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslots<\/a> = <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_self::leafslotmax<\/a>;$/;"	a
l01262	doxygen-html/a00026_source.html	/^<a name="l01262"><\/a>01262 <span class="comment"><\/span>$/;"	a
l01263	doxygen-html/a00026_source.html	/^<a name="l01263"><\/a>01263 <span class="comment">        \/\/\/ Base B+ tree parameter: The number of key slots in each inner node.<\/span>$/;"	a
l01264	doxygen-html/a00026_source.html	/^<a name="l01264"><\/a><a class="code" href="a00021.html#a3811eb889b199b4b7aff549e85cc585b">01264<\/a> <span class="comment"><\/span>        <span class="keyword">static<\/span> <span class="keyword">const<\/span> <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>     <a class="code" href="a00021.html#a3811eb889b199b4b7aff549e85cc585b" title="Base B+ tree parameter: The number of key slots in each inner node.">innerslots<\/a> = <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_self::innerslotmax<\/a>;$/;"	a
l01265	doxygen-html/a00026_source.html	/^<a name="l01265"><\/a>01265 <span class="comment"><\/span>$/;"	a
l01266	doxygen-html/a00026_source.html	/^<a name="l01266"><\/a>01266 <span class="comment">        \/\/\/ Zero initialized<\/span>$/;"	a
l01267	doxygen-html/a00026_source.html	/^<a name="l01267"><\/a><a class="code" href="a00021.html#a3628ef3722433a7edfa727a188f7a455">01267<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00021.html#a3628ef3722433a7edfa727a188f7a455" title="Zero initialized.">tree_stats<\/a>()$/;"	a
l01268	doxygen-html/a00026_source.html	/^<a name="l01268"><\/a>01268             : <a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>(0),$/;"	a
l01269	doxygen-html/a00026_source.html	/^<a name="l01269"><\/a>01269               <a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a>(0), <a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a>(0)$/;"	a
l01270	doxygen-html/a00026_source.html	/^<a name="l01270"><\/a>01270         {$/;"	a
l01271	doxygen-html/a00026_source.html	/^<a name="l01271"><\/a>01271         }$/;"	a
l01272	doxygen-html/a00026_source.html	/^<a name="l01272"><\/a>01272 <span class="comment"><\/span>$/;"	a
l01273	doxygen-html/a00026_source.html	/^<a name="l01273"><\/a>01273 <span class="comment">        \/\/\/ Return the total number of nodes<\/span>$/;"	a
l01274	doxygen-html/a00026_source.html	/^<a name="l01274"><\/a><a class="code" href="a00021.html#adf69b8f2b4df771fc5b1bd4e248a7a47">01274<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00021.html#adf69b8f2b4df771fc5b1bd4e248a7a47" title="Return the total number of nodes.">nodes<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01275	doxygen-html/a00026_source.html	/^<a name="l01275"><\/a>01275 <span class="keyword">        <\/span>{$/;"	a
l01276	doxygen-html/a00026_source.html	/^<a name="l01276"><\/a>01276             <span class="keywordflow">return<\/span> <a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> + <a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a>;$/;"	a
l01277	doxygen-html/a00026_source.html	/^<a name="l01277"><\/a>01277         }$/;"	a
l01278	doxygen-html/a00026_source.html	/^<a name="l01278"><\/a>01278 <span class="comment"><\/span>$/;"	a
l01279	doxygen-html/a00026_source.html	/^<a name="l01279"><\/a>01279 <span class="comment">        \/\/\/ Return the average fill of leaves<\/span>$/;"	a
l01280	doxygen-html/a00026_source.html	/^<a name="l01280"><\/a><a class="code" href="a00021.html#a9988e57cfa46a77f0bc02f67faab2d1f">01280<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">double<\/span> <a class="code" href="a00021.html#a9988e57cfa46a77f0bc02f67faab2d1f" title="Return the average fill of leaves.">avgfill_leaves<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01281	doxygen-html/a00026_source.html	/^<a name="l01281"><\/a>01281 <span class="keyword">        <\/span>{$/;"	a
l01282	doxygen-html/a00026_source.html	/^<a name="l01282"><\/a>01282             <span class="keywordflow">return<\/span> <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">double<\/span><span class="keyword">&gt;<\/span>(<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>) \/ (<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> * <a class="code" href="a00021.html#ae833639b01b1ee2893bdaa1d96e8a584" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslots<\/a>);$/;"	a
l01283	doxygen-html/a00026_source.html	/^<a name="l01283"><\/a>01283         }$/;"	a
l01284	doxygen-html/a00026_source.html	/^<a name="l01284"><\/a>01284     };$/;"	a
l01285	doxygen-html/a00026_source.html	/^<a name="l01285"><\/a>01285 $/;"	a
l01286	doxygen-html/a00026_source.html	/^<a name="l01286"><\/a>01286 <span class="keyword">private<\/span>:$/;"	a
l01287	doxygen-html/a00026_source.html	/^<a name="l01287"><\/a>01287     <span class="comment">\/\/ *** Tree Object Data Members<\/span>$/;"	a
l01288	doxygen-html/a00026_source.html	/^<a name="l01288"><\/a>01288 <span class="comment"><\/span>$/;"	a
l01289	doxygen-html/a00026_source.html	/^<a name="l01289"><\/a>01289 <span class="comment">    \/\/\/ Pointer to the B+ tree&#39;s root node, either leaf or inner node<\/span>$/;"	a
l01290	doxygen-html/a00026_source.html	/^<a name="l01290"><\/a><a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80">01290<\/a> <span class="comment"><\/span>    node*       <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01291	doxygen-html/a00026_source.html	/^<a name="l01291"><\/a>01291 <span class="comment"><\/span>$/;"	a
l01292	doxygen-html/a00026_source.html	/^<a name="l01292"><\/a>01292 <span class="comment">    \/\/\/ Pointer to first leaf in the double linked leaf chain<\/span>$/;"	a
l01293	doxygen-html/a00026_source.html	/^<a name="l01293"><\/a><a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa">01293<\/a> <span class="comment"><\/span>    leaf_node   *<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>;$/;"	a
l01294	doxygen-html/a00026_source.html	/^<a name="l01294"><\/a>01294 <span class="comment"><\/span>$/;"	a
l01295	doxygen-html/a00026_source.html	/^<a name="l01295"><\/a>01295 <span class="comment">    \/\/\/ Pointer to last leaf in the double linked leaf chain<\/span>$/;"	a
l01296	doxygen-html/a00026_source.html	/^<a name="l01296"><\/a><a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7">01296<\/a> <span class="comment"><\/span>    leaf_node   *<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>;$/;"	a
l01297	doxygen-html/a00026_source.html	/^<a name="l01297"><\/a>01297 <span class="comment"><\/span>$/;"	a
l01298	doxygen-html/a00026_source.html	/^<a name="l01298"><\/a>01298 <span class="comment">    \/\/\/ Other small statistics about the B+ tree<\/span>$/;"	a
l01299	doxygen-html/a00026_source.html	/^<a name="l01299"><\/a><a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3">01299<\/a> <span class="comment"><\/span>    tree_stats  <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>;$/;"	a
l01300	doxygen-html/a00026_source.html	/^<a name="l01300"><\/a>01300 <span class="comment"><\/span>$/;"	a
l01301	doxygen-html/a00026_source.html	/^<a name="l01301"><\/a>01301 <span class="comment">    \/\/\/ Key comparison object. More comparison functions are generated from<\/span>$/;"	a
l01302	doxygen-html/a00026_source.html	/^<a name="l01302"><\/a>01302 <span class="comment">    \/\/\/ this &lt; relation.<\/span>$/;"	a
l01303	doxygen-html/a00026_source.html	/^<a name="l01303"><\/a><a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1">01303<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>;$/;"	a
l01304	doxygen-html/a00026_source.html	/^<a name="l01304"><\/a>01304 <span class="comment"><\/span>$/;"	a
l01305	doxygen-html/a00026_source.html	/^<a name="l01305"><\/a>01305 <span class="comment">    \/\/\/ Memory allocator.<\/span>$/;"	a
l01306	doxygen-html/a00026_source.html	/^<a name="l01306"><\/a><a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64">01306<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>;$/;"	a
l01307	doxygen-html/a00026_source.html	/^<a name="l01307"><\/a>01307 $/;"	a
l01308	doxygen-html/a00026_source.html	/^<a name="l01308"><\/a>01308 <span class="keyword">public<\/span>:$/;"	a
l01309	doxygen-html/a00026_source.html	/^<a name="l01309"><\/a>01309     <span class="comment">\/\/ *** Constructors and Destructor<\/span>$/;"	a
l01310	doxygen-html/a00026_source.html	/^<a name="l01310"><\/a>01310 <span class="comment"><\/span>$/;"	a
l01311	doxygen-html/a00026_source.html	/^<a name="l01311"><\/a>01311 <span class="comment">    \/\/\/ Default constructor initializing an empty B+ tree with the standard key<\/span>$/;"	a
l01312	doxygen-html/a00026_source.html	/^<a name="l01312"><\/a>01312 <span class="comment">    \/\/\/ comparison function<\/span>$/;"	a
l01313	doxygen-html/a00026_source.html	/^<a name="l01313"><\/a><a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4">01313<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>())$/;"	a
l01314	doxygen-html/a00026_source.html	/^<a name="l01314"><\/a>01314         : <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>(NULL), <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>(NULL), <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>(NULL), <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>(alloc)$/;"	a
l01315	doxygen-html/a00026_source.html	/^<a name="l01315"><\/a>01315     {$/;"	a
l01316	doxygen-html/a00026_source.html	/^<a name="l01316"><\/a>01316     }$/;"	a
l01317	doxygen-html/a00026_source.html	/^<a name="l01317"><\/a>01317 <span class="comment"><\/span>$/;"	a
l01318	doxygen-html/a00026_source.html	/^<a name="l01318"><\/a>01318 <span class="comment">    \/\/\/ Constructor initializing an empty B+ tree with a special key<\/span>$/;"	a
l01319	doxygen-html/a00026_source.html	/^<a name="l01319"><\/a>01319 <span class="comment">    \/\/\/ comparison object<\/span>$/;"	a
l01320	doxygen-html/a00026_source.html	/^<a name="l01320"><\/a><a class="code" href="a00001.html#a6601ec01fa386f754809f62baad7a112">01320<\/a> <span class="comment"><\/span>    <span class="keyword">explicit<\/span> <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l01321	doxygen-html/a00026_source.html	/^<a name="l01321"><\/a>01321                           <span class="keyword">const<\/span> <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>())$/;"	a
l01322	doxygen-html/a00026_source.html	/^<a name="l01322"><\/a>01322         : <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>(NULL), <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>(NULL), <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>(NULL),$/;"	a
l01323	doxygen-html/a00026_source.html	/^<a name="l01323"><\/a>01323           <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(kcf), <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>(alloc)$/;"	a
l01324	doxygen-html/a00026_source.html	/^<a name="l01324"><\/a>01324     {$/;"	a
l01325	doxygen-html/a00026_source.html	/^<a name="l01325"><\/a>01325     }$/;"	a
l01326	doxygen-html/a00026_source.html	/^<a name="l01326"><\/a>01326 <span class="comment"><\/span>$/;"	a
l01327	doxygen-html/a00026_source.html	/^<a name="l01327"><\/a>01327 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last). The<\/span>$/;"	a
l01328	doxygen-html/a00026_source.html	/^<a name="l01328"><\/a>01328 <span class="comment">    \/\/\/ range need not be sorted. To create a B+ tree from a sorted range, use<\/span>$/;"	a
l01329	doxygen-html/a00026_source.html	/^<a name="l01329"><\/a>01329 <span class="comment">    \/\/\/ bulk_load().<\/span>$/;"	a
l01330	doxygen-html/a00026_source.html	/^<a name="l01330"><\/a>01330 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l01331	doxygen-html/a00026_source.html	/^<a name="l01331"><\/a><a class="code" href="a00001.html#ad6c89387fa35b4724f9da5cfc91033f5">01331<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree<\/a>(InputIterator first, InputIterator last,$/;"	a
l01332	doxygen-html/a00026_source.html	/^<a name="l01332"><\/a>01332                  <span class="keyword">const<\/span> <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>())$/;"	a
l01333	doxygen-html/a00026_source.html	/^<a name="l01333"><\/a>01333         : <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>(NULL), <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>(NULL), <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>(NULL), <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>(alloc)$/;"	a
l01334	doxygen-html/a00026_source.html	/^<a name="l01334"><\/a>01334     {$/;"	a
l01335	doxygen-html/a00026_source.html	/^<a name="l01335"><\/a>01335         <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(first, last);$/;"	a
l01336	doxygen-html/a00026_source.html	/^<a name="l01336"><\/a>01336     }$/;"	a
l01337	doxygen-html/a00026_source.html	/^<a name="l01337"><\/a>01337 <span class="comment"><\/span>$/;"	a
l01338	doxygen-html/a00026_source.html	/^<a name="l01338"><\/a>01338 <span class="comment">    \/\/\/ Constructor initializing a B+ tree with the range [first,last) and a<\/span>$/;"	a
l01339	doxygen-html/a00026_source.html	/^<a name="l01339"><\/a>01339 <span class="comment">    \/\/\/ special key comparison object.  The range need not be sorted. To create<\/span>$/;"	a
l01340	doxygen-html/a00026_source.html	/^<a name="l01340"><\/a>01340 <span class="comment">    \/\/\/ a B+ tree from a sorted range, use bulk_load().<\/span>$/;"	a
l01341	doxygen-html/a00026_source.html	/^<a name="l01341"><\/a>01341 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">class<\/span> InputIterator&gt;$/;"	a
l01342	doxygen-html/a00026_source.html	/^<a name="l01342"><\/a><a class="code" href="a00001.html#ac7d4c03c5db5551f72d69f44471e3217">01342<\/a>     <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree<\/a>(InputIterator first, InputIterator last, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a> &amp;kcf,$/;"	a
l01343	doxygen-html/a00026_source.html	/^<a name="l01343"><\/a>01343                  <span class="keyword">const<\/span> <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> &amp;alloc = <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>())$/;"	a
l01344	doxygen-html/a00026_source.html	/^<a name="l01344"><\/a>01344         : <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>(NULL), <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>(NULL), <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>(NULL),$/;"	a
l01345	doxygen-html/a00026_source.html	/^<a name="l01345"><\/a>01345           <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(kcf), <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>(alloc)$/;"	a
l01346	doxygen-html/a00026_source.html	/^<a name="l01346"><\/a>01346     {$/;"	a
l01347	doxygen-html/a00026_source.html	/^<a name="l01347"><\/a>01347         <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(first, last);$/;"	a
l01348	doxygen-html/a00026_source.html	/^<a name="l01348"><\/a>01348     }$/;"	a
l01349	doxygen-html/a00026_source.html	/^<a name="l01349"><\/a>01349 <span class="comment"><\/span>$/;"	a
l01350	doxygen-html/a00026_source.html	/^<a name="l01350"><\/a>01350 <span class="comment">    \/\/\/ Frees up all used B+ tree memory pages<\/span>$/;"	a
l01351	doxygen-html/a00026_source.html	/^<a name="l01351"><\/a><a class="code" href="a00001.html#af3bb3b3b2596f973a258fefc46fe098f">01351<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html#af3bb3b3b2596f973a258fefc46fe098f" title="Frees up all used B+ tree memory pages.">~btree<\/a>()$/;"	a
l01352	doxygen-html/a00026_source.html	/^<a name="l01352"><\/a>01352     {$/;"	a
l01353	doxygen-html/a00026_source.html	/^<a name="l01353"><\/a>01353         <a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l01354	doxygen-html/a00026_source.html	/^<a name="l01354"><\/a>01354     }$/;"	a
l01355	doxygen-html/a00026_source.html	/^<a name="l01355"><\/a>01355 <span class="comment"><\/span>$/;"	a
l01356	doxygen-html/a00026_source.html	/^<a name="l01356"><\/a>01356 <span class="comment">    \/\/\/ Fast swapping of two identical B+ tree objects.<\/span>$/;"	a
l01357	doxygen-html/a00026_source.html	/^<a name="l01357"><\/a><a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c">01357<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">swap<\/a>(<a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a>&amp; from)$/;"	a
l01358	doxygen-html/a00026_source.html	/^<a name="l01358"><\/a>01358     {$/;"	a
l01359	doxygen-html/a00026_source.html	/^<a name="l01359"><\/a>01359         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, from.<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l01360	doxygen-html/a00026_source.html	/^<a name="l01360"><\/a>01360         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>, from.<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>);$/;"	a
l01361	doxygen-html/a00026_source.html	/^<a name="l01361"><\/a>01361         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>, from.<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>);$/;"	a
l01362	doxygen-html/a00026_source.html	/^<a name="l01362"><\/a>01362         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>, from.<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>);$/;"	a
l01363	doxygen-html/a00026_source.html	/^<a name="l01363"><\/a>01363         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>, from.<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>);$/;"	a
l01364	doxygen-html/a00026_source.html	/^<a name="l01364"><\/a>01364         <a class="code" href="a00001.html#a2413b9b084811d786cd928df4b9fe37c" title="Fast swapping of two identical B+ tree objects.">std::swap<\/a>(<a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>, from.<a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>);$/;"	a
l01365	doxygen-html/a00026_source.html	/^<a name="l01365"><\/a>01365     }$/;"	a
l01366	doxygen-html/a00026_source.html	/^<a name="l01366"><\/a>01366 $/;"	a
l01367	doxygen-html/a00026_source.html	/^<a name="l01367"><\/a>01367 <span class="keyword">public<\/span>:$/;"	a
l01368	doxygen-html/a00026_source.html	/^<a name="l01368"><\/a>01368     <span class="comment">\/\/ *** Key and Value Comparison Function Objects<\/span>$/;"	a
l01369	doxygen-html/a00026_source.html	/^<a name="l01369"><\/a>01369 <span class="comment"><\/span>$/;"	a
l01370	doxygen-html/a00026_source.html	/^<a name="l01370"><\/a>01370 <span class="comment">    \/\/\/ Function class to compare value_type objects. Required by the STL<\/span>$/;"	a
l01371	doxygen-html/a00026_source.html	/^<a name="l01371"><\/a><a class="code" href="a00022.html">01371<\/a> <span class="comment"><\/span>    <span class="keyword">class <\/span><a class="code" href="a00022.html" title="Function class to compare value_type objects. Required by the STL.">value_compare<\/a>$/;"	a
l01372	doxygen-html/a00026_source.html	/^<a name="l01372"><\/a>01372     {$/;"	a
l01373	doxygen-html/a00026_source.html	/^<a name="l01373"><\/a>01373     <span class="keyword">protected<\/span>:<span class="comment"><\/span>$/;"	a
l01374	doxygen-html/a00026_source.html	/^<a name="l01374"><\/a>01374 <span class="comment">        \/\/\/ Key comparison function from the template parameter<\/span>$/;"	a
l01375	doxygen-html/a00026_source.html	/^<a name="l01375"><\/a><a class="code" href="a00022.html#a7fa676ec0e6b36fde48f49358de96c74">01375<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a>     <a class="code" href="a00022.html#a7fa676ec0e6b36fde48f49358de96c74" title="Key comparison function from the template parameter.">key_comp<\/a>;$/;"	a
l01376	doxygen-html/a00026_source.html	/^<a name="l01376"><\/a>01376 <span class="comment"><\/span>$/;"	a
l01377	doxygen-html/a00026_source.html	/^<a name="l01377"><\/a>01377 <span class="comment">        \/\/\/ Constructor called from btree::value_comp()<\/span>$/;"	a
l01378	doxygen-html/a00026_source.html	/^<a name="l01378"><\/a><a class="code" href="a00022.html#a64022a7383be900306573bea8c114c2e">01378<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00022.html#a64022a7383be900306573bea8c114c2e" title="Constructor called from btree::value_comp()">value_compare<\/a>(<a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a> kc)$/;"	a
l01379	doxygen-html/a00026_source.html	/^<a name="l01379"><\/a>01379             : <a class="code" href="a00022.html#a7fa676ec0e6b36fde48f49358de96c74" title="Key comparison function from the template parameter.">key_comp<\/a>(kc)$/;"	a
l01380	doxygen-html/a00026_source.html	/^<a name="l01380"><\/a>01380         { }$/;"	a
l01381	doxygen-html/a00026_source.html	/^<a name="l01381"><\/a>01381 <span class="comment"><\/span>$/;"	a
l01382	doxygen-html/a00026_source.html	/^<a name="l01382"><\/a>01382 <span class="comment">        \/\/\/ Friendly to the btree class so it may call the constructor<\/span>$/;"	a
l01383	doxygen-html/a00026_source.html	/^<a name="l01383"><\/a>01383 <span class="comment"><\/span>        <span class="keyword">friend<\/span> <span class="keyword">class <\/span><a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree<\/a>&lt;<a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>, <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>, <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>, <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a>,$/;"	a
l01384	doxygen-html/a00026_source.html	/^<a name="l01384"><\/a><a class="code" href="a00022.html#a1de115e86b32c4ed13649b6760f1da28">01384<\/a>                            <a class="code" href="a00001.html#a8b13a0eb2e558d11830d38de21b82319" title="Fifth template parameter: Traits object used to define more parameters of the B+ tree.">traits<\/a>, <a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a>, <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a>, <a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>&gt;;$/;"	a
l01385	doxygen-html/a00026_source.html	/^<a name="l01385"><\/a>01385 $/;"	a
l01386	doxygen-html/a00026_source.html	/^<a name="l01386"><\/a>01386     <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l01387	doxygen-html/a00026_source.html	/^<a name="l01387"><\/a>01387 <span class="comment">        \/\/\/ Function call &quot;less&quot;-operator resulting in true if x &lt; y.<\/span>$/;"	a
l01388	doxygen-html/a00026_source.html	/^<a name="l01388"><\/a><a class="code" href="a00022.html#a768a1b25f26381862906c76a4508775f">01388<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00022.html#a768a1b25f26381862906c76a4508775f" title="Function call &quot;less&quot;-operator resulting in true if x &lt; y.">operator()<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>&amp; x, <span class="keyword">const<\/span> <a class="code" href="a00001.html#ab66ffb9c9a42bea595ef23cf9dbfd8d6" title="Third template parameter: Composition pair of key and data types, this is required by the STL standar...">value_type<\/a>&amp; y)<span class="keyword"> const<\/span>$/;"	a
l01389	doxygen-html/a00026_source.html	/^<a name="l01389"><\/a>01389 <span class="keyword">        <\/span>{$/;"	a
l01390	doxygen-html/a00026_source.html	/^<a name="l01390"><\/a>01390             <span class="keywordflow">return<\/span> <a class="code" href="a00022.html#a7fa676ec0e6b36fde48f49358de96c74" title="Key comparison function from the template parameter.">key_comp<\/a>(x.first, y.first);$/;"	a
l01391	doxygen-html/a00026_source.html	/^<a name="l01391"><\/a>01391         }$/;"	a
l01392	doxygen-html/a00026_source.html	/^<a name="l01392"><\/a>01392     };$/;"	a
l01393	doxygen-html/a00026_source.html	/^<a name="l01393"><\/a>01393 <span class="comment"><\/span>$/;"	a
l01394	doxygen-html/a00026_source.html	/^<a name="l01394"><\/a>01394 <span class="comment">    \/\/\/ Constant access to the key comparison object sorting the B+ tree<\/span>$/;"	a
l01395	doxygen-html/a00026_source.html	/^<a name="l01395"><\/a><a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b">01395<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html#a71413b8b8a1440539691a97f4cb61cae" title="Fourth template parameter: Key comparison function object.">key_compare<\/a> <a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01396	doxygen-html/a00026_source.html	/^<a name="l01396"><\/a>01396 <span class="keyword">    <\/span>{$/;"	a
l01397	doxygen-html/a00026_source.html	/^<a name="l01397"><\/a>01397         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>;$/;"	a
l01398	doxygen-html/a00026_source.html	/^<a name="l01398"><\/a>01398     }$/;"	a
l01399	doxygen-html/a00026_source.html	/^<a name="l01399"><\/a>01399 <span class="comment"><\/span>$/;"	a
l01400	doxygen-html/a00026_source.html	/^<a name="l01400"><\/a>01400 <span class="comment">    \/\/\/ Constant access to a constructed value_type comparison object. Required<\/span>$/;"	a
l01401	doxygen-html/a00026_source.html	/^<a name="l01401"><\/a>01401 <span class="comment">    \/\/\/ by the STL<\/span>$/;"	a
l01402	doxygen-html/a00026_source.html	/^<a name="l01402"><\/a><a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673">01402<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> value_compare <a class="code" href="a00001.html#a35152f783bc65c97504cd22d1812f673" title="Constant access to a constructed value_type comparison object.">value_comp<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01403	doxygen-html/a00026_source.html	/^<a name="l01403"><\/a>01403 <span class="keyword">    <\/span>{$/;"	a
l01404	doxygen-html/a00026_source.html	/^<a name="l01404"><\/a>01404         <span class="keywordflow">return<\/span> value_compare(<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>);$/;"	a
l01405	doxygen-html/a00026_source.html	/^<a name="l01405"><\/a>01405     }$/;"	a
l01406	doxygen-html/a00026_source.html	/^<a name="l01406"><\/a>01406 $/;"	a
l01407	doxygen-html/a00026_source.html	/^<a name="l01407"><\/a>01407 <span class="keyword">private<\/span>:$/;"	a
l01408	doxygen-html/a00026_source.html	/^<a name="l01408"><\/a>01408     <span class="comment">\/\/ *** Convenient Key Comparison Functions Generated From key_less<\/span>$/;"	a
l01409	doxygen-html/a00026_source.html	/^<a name="l01409"><\/a>01409 <span class="comment"><\/span>$/;"	a
l01410	doxygen-html/a00026_source.html	/^<a name="l01410"><\/a>01410 <span class="comment">    \/\/\/ True if a &lt; b ? &quot;constructed&quot; from m_key_less()<\/span>$/;"	a
l01411	doxygen-html/a00026_source.html	/^<a name="l01411"><\/a><a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32">01411<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32" title="True if a &lt; b ? &quot;constructed&quot; from m_key_less()">key_less<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> b)<span class="keyword"> const<\/span>$/;"	a
l01412	doxygen-html/a00026_source.html	/^<a name="l01412"><\/a>01412 <span class="keyword">    <\/span>{$/;"	a
l01413	doxygen-html/a00026_source.html	/^<a name="l01413"><\/a>01413         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(a, b);$/;"	a
l01414	doxygen-html/a00026_source.html	/^<a name="l01414"><\/a>01414     }$/;"	a
l01415	doxygen-html/a00026_source.html	/^<a name="l01415"><\/a>01415 <span class="comment"><\/span>$/;"	a
l01416	doxygen-html/a00026_source.html	/^<a name="l01416"><\/a>01416 <span class="comment">    \/\/\/ True if a &lt;= b ? constructed from key_less()<\/span>$/;"	a
l01417	doxygen-html/a00026_source.html	/^<a name="l01417"><\/a><a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07">01417<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> b)<span class="keyword"> const<\/span>$/;"	a
l01418	doxygen-html/a00026_source.html	/^<a name="l01418"><\/a>01418 <span class="keyword">    <\/span>{$/;"	a
l01419	doxygen-html/a00026_source.html	/^<a name="l01419"><\/a>01419         <span class="keywordflow">return<\/span> !<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(b, a);$/;"	a
l01420	doxygen-html/a00026_source.html	/^<a name="l01420"><\/a>01420     }$/;"	a
l01421	doxygen-html/a00026_source.html	/^<a name="l01421"><\/a>01421 <span class="comment"><\/span>$/;"	a
l01422	doxygen-html/a00026_source.html	/^<a name="l01422"><\/a>01422 <span class="comment">    \/\/\/ True if a &gt; b ? constructed from key_less()<\/span>$/;"	a
l01423	doxygen-html/a00026_source.html	/^<a name="l01423"><\/a><a class="code" href="a00001.html#a7846f950b879c014e9379860266ef0b5">01423<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a7846f950b879c014e9379860266ef0b5" title="True if a &gt; b ? constructed from key_less()">key_greater<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;b)<span class="keyword"> const<\/span>$/;"	a
l01424	doxygen-html/a00026_source.html	/^<a name="l01424"><\/a>01424 <span class="keyword">    <\/span>{$/;"	a
l01425	doxygen-html/a00026_source.html	/^<a name="l01425"><\/a>01425         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(b, a);$/;"	a
l01426	doxygen-html/a00026_source.html	/^<a name="l01426"><\/a>01426     }$/;"	a
l01427	doxygen-html/a00026_source.html	/^<a name="l01427"><\/a>01427 <span class="comment"><\/span>$/;"	a
l01428	doxygen-html/a00026_source.html	/^<a name="l01428"><\/a>01428 <span class="comment">    \/\/\/ True if a &gt;= b ? constructed from key_less()<\/span>$/;"	a
l01429	doxygen-html/a00026_source.html	/^<a name="l01429"><\/a><a class="code" href="a00001.html#a7d9e621a7b8c3e88820e49874381ec1b">01429<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a7d9e621a7b8c3e88820e49874381ec1b" title="True if a &gt;= b ? constructed from key_less()">key_greaterequal<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> b)<span class="keyword"> const<\/span>$/;"	a
l01430	doxygen-html/a00026_source.html	/^<a name="l01430"><\/a>01430 <span class="keyword">    <\/span>{$/;"	a
l01431	doxygen-html/a00026_source.html	/^<a name="l01431"><\/a>01431         <span class="keywordflow">return<\/span> !<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(a, b);$/;"	a
l01432	doxygen-html/a00026_source.html	/^<a name="l01432"><\/a>01432     }$/;"	a
l01433	doxygen-html/a00026_source.html	/^<a name="l01433"><\/a>01433 <span class="comment"><\/span>$/;"	a
l01434	doxygen-html/a00026_source.html	/^<a name="l01434"><\/a>01434 <span class="comment">    \/\/\/ True if a == b ? constructed from key_less(). This requires the &lt;<\/span>$/;"	a
l01435	doxygen-html/a00026_source.html	/^<a name="l01435"><\/a>01435 <span class="comment">    \/\/\/ relation to be a total order, otherwise the B+ tree cannot be sorted.<\/span>$/;"	a
l01436	doxygen-html/a00026_source.html	/^<a name="l01436"><\/a><a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68">01436<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;a, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;b)<span class="keyword"> const<\/span>$/;"	a
l01437	doxygen-html/a00026_source.html	/^<a name="l01437"><\/a>01437 <span class="keyword">    <\/span>{$/;"	a
l01438	doxygen-html/a00026_source.html	/^<a name="l01438"><\/a>01438         <span class="keywordflow">return<\/span> !<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(a, b) &amp;&amp; !<a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>(b, a);$/;"	a
l01439	doxygen-html/a00026_source.html	/^<a name="l01439"><\/a>01439     }$/;"	a
l01440	doxygen-html/a00026_source.html	/^<a name="l01440"><\/a>01440 $/;"	a
l01441	doxygen-html/a00026_source.html	/^<a name="l01441"><\/a>01441 <span class="keyword">public<\/span>:$/;"	a
l01442	doxygen-html/a00026_source.html	/^<a name="l01442"><\/a>01442     <span class="comment">\/\/ *** Allocators<\/span>$/;"	a
l01443	doxygen-html/a00026_source.html	/^<a name="l01443"><\/a>01443 <span class="comment"><\/span>$/;"	a
l01444	doxygen-html/a00026_source.html	/^<a name="l01444"><\/a>01444 <span class="comment">    \/\/\/ Return the base node allocator provided during construction.<\/span>$/;"	a
l01445	doxygen-html/a00026_source.html	/^<a name="l01445"><\/a><a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd">01445<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html#aef567d7893cd02d22933a2e68702532b" title="Seventh template parameter: STL allocator for tree nodes.">allocator_type<\/a> <a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01446	doxygen-html/a00026_source.html	/^<a name="l01446"><\/a>01446 <span class="keyword">    <\/span>{$/;"	a
l01447	doxygen-html/a00026_source.html	/^<a name="l01447"><\/a>01447         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>;$/;"	a
l01448	doxygen-html/a00026_source.html	/^<a name="l01448"><\/a>01448     }$/;"	a
l01449	doxygen-html/a00026_source.html	/^<a name="l01449"><\/a>01449 $/;"	a
l01450	doxygen-html/a00026_source.html	/^<a name="l01450"><\/a>01450 <span class="keyword">private<\/span>:$/;"	a
l01451	doxygen-html/a00026_source.html	/^<a name="l01451"><\/a>01451     <span class="comment">\/\/ *** Node Object Allocation and Deallocation Functions<\/span>$/;"	a
l01452	doxygen-html/a00026_source.html	/^<a name="l01452"><\/a>01452 <span class="comment"><\/span>$/;"	a
l01453	doxygen-html/a00026_source.html	/^<a name="l01453"><\/a>01453 <span class="comment">    \/\/\/ Return an allocator for leaf_node objects<\/span>$/;"	a
l01454	doxygen-html/a00026_source.html	/^<a name="l01454"><\/a><a class="code" href="a00001.html#aacca4955cae12c5da0b91a020d05d42a">01454<\/a> <span class="comment"><\/span>    <span class="keyword">typename<\/span> <a class="code" href="a00017.html#a99d5a3d40c5098a75bbcb9404971e4fd" title="Define an related allocator for the leaf_node structs.">leaf_node::alloc_type<\/a> <a class="code" href="a00001.html#aacca4955cae12c5da0b91a020d05d42a" title="Return an allocator for leaf_node objects.">leaf_node_allocator<\/a>()$/;"	a
l01455	doxygen-html/a00026_source.html	/^<a name="l01455"><\/a>01455     {$/;"	a
l01456	doxygen-html/a00026_source.html	/^<a name="l01456"><\/a>01456         <span class="keywordflow">return<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00017.html#a99d5a3d40c5098a75bbcb9404971e4fd" title="Define an related allocator for the leaf_node structs.">leaf_node::alloc_type<\/a>(<a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>);$/;"	a
l01457	doxygen-html/a00026_source.html	/^<a name="l01457"><\/a>01457     }$/;"	a
l01458	doxygen-html/a00026_source.html	/^<a name="l01458"><\/a>01458 <span class="comment"><\/span>$/;"	a
l01459	doxygen-html/a00026_source.html	/^<a name="l01459"><\/a>01459 <span class="comment">    \/\/\/ Return an allocator for inner_node objects<\/span>$/;"	a
l01460	doxygen-html/a00026_source.html	/^<a name="l01460"><\/a><a class="code" href="a00001.html#a583e6f3a9b61bb4b0ca9886ea52f73b9">01460<\/a> <span class="comment"><\/span>    <span class="keyword">typename<\/span> <a class="code" href="a00015.html#a0d8b919b9db1069387e966ae4b39c1b5" title="Define an related allocator for the inner_node structs.">inner_node::alloc_type<\/a> <a class="code" href="a00001.html#a583e6f3a9b61bb4b0ca9886ea52f73b9" title="Return an allocator for inner_node objects.">inner_node_allocator<\/a>()$/;"	a
l01461	doxygen-html/a00026_source.html	/^<a name="l01461"><\/a>01461     {$/;"	a
l01462	doxygen-html/a00026_source.html	/^<a name="l01462"><\/a>01462         <span class="keywordflow">return<\/span> <span class="keyword">typename<\/span> <a class="code" href="a00015.html#a0d8b919b9db1069387e966ae4b39c1b5" title="Define an related allocator for the inner_node structs.">inner_node::alloc_type<\/a>(<a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>);$/;"	a
l01463	doxygen-html/a00026_source.html	/^<a name="l01463"><\/a>01463     }$/;"	a
l01464	doxygen-html/a00026_source.html	/^<a name="l01464"><\/a>01464 <span class="comment"><\/span>$/;"	a
l01465	doxygen-html/a00026_source.html	/^<a name="l01465"><\/a>01465 <span class="comment">    \/\/\/ Allocate and initialize a leaf node<\/span>$/;"	a
l01466	doxygen-html/a00026_source.html	/^<a name="l01466"><\/a><a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337">01466<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> leaf_node* <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>()$/;"	a
l01467	doxygen-html/a00026_source.html	/^<a name="l01467"><\/a>01467     {$/;"	a
l01468	doxygen-html/a00026_source.html	/^<a name="l01468"><\/a>01468         leaf_node *n = <span class="keyword">new<\/span> (<a class="code" href="a00001.html#aacca4955cae12c5da0b91a020d05d42a" title="Return an allocator for leaf_node objects.">leaf_node_allocator<\/a>().allocate(1)) leaf_node();$/;"	a
l01469	doxygen-html/a00026_source.html	/^<a name="l01469"><\/a>01469         n-&gt;<a class="code" href="a00017.html#a3db9141d0f1335ebaacb141ab6eef0d1" title="Set variables to initial values.">initialize<\/a>();$/;"	a
l01470	doxygen-html/a00026_source.html	/^<a name="l01470"><\/a>01470         <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a>++;$/;"	a
l01471	doxygen-html/a00026_source.html	/^<a name="l01471"><\/a>01471         <span class="keywordflow">return<\/span> n;$/;"	a
l01472	doxygen-html/a00026_source.html	/^<a name="l01472"><\/a>01472     }$/;"	a
l01473	doxygen-html/a00026_source.html	/^<a name="l01473"><\/a>01473 <span class="comment"><\/span>$/;"	a
l01474	doxygen-html/a00026_source.html	/^<a name="l01474"><\/a>01474 <span class="comment">    \/\/\/ Allocate and initialize an inner node<\/span>$/;"	a
l01475	doxygen-html/a00026_source.html	/^<a name="l01475"><\/a><a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a">01475<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> inner_node* <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> level)$/;"	a
l01476	doxygen-html/a00026_source.html	/^<a name="l01476"><\/a>01476     {$/;"	a
l01477	doxygen-html/a00026_source.html	/^<a name="l01477"><\/a>01477         inner_node *n = <span class="keyword">new<\/span> (<a class="code" href="a00001.html#a583e6f3a9b61bb4b0ca9886ea52f73b9" title="Return an allocator for inner_node objects.">inner_node_allocator<\/a>().allocate(1)) inner_node();$/;"	a
l01478	doxygen-html/a00026_source.html	/^<a name="l01478"><\/a>01478         n-&gt;<a class="code" href="a00015.html#ae10027d02927a1c8c2303a419197078c" title="Set variables to initial values.">initialize<\/a>(level);$/;"	a
l01479	doxygen-html/a00026_source.html	/^<a name="l01479"><\/a>01479         <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a>++;$/;"	a
l01480	doxygen-html/a00026_source.html	/^<a name="l01480"><\/a>01480         <span class="keywordflow">return<\/span> n;$/;"	a
l01481	doxygen-html/a00026_source.html	/^<a name="l01481"><\/a>01481     }$/;"	a
l01482	doxygen-html/a00026_source.html	/^<a name="l01482"><\/a>01482 <span class="comment"><\/span>$/;"	a
l01483	doxygen-html/a00026_source.html	/^<a name="l01483"><\/a>01483 <span class="comment">    \/\/\/ Correctly free either inner or leaf node, destructs all contained key<\/span>$/;"	a
l01484	doxygen-html/a00026_source.html	/^<a name="l01484"><\/a>01484 <span class="comment">    \/\/\/ and value objects<\/span>$/;"	a
l01485	doxygen-html/a00026_source.html	/^<a name="l01485"><\/a><a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583">01485<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(node *n)$/;"	a
l01486	doxygen-html/a00026_source.html	/^<a name="l01486"><\/a>01486     {$/;"	a
l01487	doxygen-html/a00026_source.html	/^<a name="l01487"><\/a>01487         <span class="keywordflow">if<\/span> (n-&gt;isleafnode()) {$/;"	a
l01488	doxygen-html/a00026_source.html	/^<a name="l01488"><\/a>01488             leaf_node *ln = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01489	doxygen-html/a00026_source.html	/^<a name="l01489"><\/a>01489             <span class="keyword">typename<\/span> <a class="code" href="a00017.html#a99d5a3d40c5098a75bbcb9404971e4fd" title="Define an related allocator for the leaf_node structs.">leaf_node::alloc_type<\/a> a(<a class="code" href="a00001.html#aacca4955cae12c5da0b91a020d05d42a" title="Return an allocator for leaf_node objects.">leaf_node_allocator<\/a>());$/;"	a
l01490	doxygen-html/a00026_source.html	/^<a name="l01490"><\/a>01490             a.destroy(ln);$/;"	a
l01491	doxygen-html/a00026_source.html	/^<a name="l01491"><\/a>01491             a.deallocate(ln, 1);$/;"	a
l01492	doxygen-html/a00026_source.html	/^<a name="l01492"><\/a>01492             <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a>--;$/;"	a
l01493	doxygen-html/a00026_source.html	/^<a name="l01493"><\/a>01493         }$/;"	a
l01494	doxygen-html/a00026_source.html	/^<a name="l01494"><\/a>01494         <span class="keywordflow">else<\/span> {$/;"	a
l01495	doxygen-html/a00026_source.html	/^<a name="l01495"><\/a>01495             inner_node *in = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01496	doxygen-html/a00026_source.html	/^<a name="l01496"><\/a>01496             <span class="keyword">typename<\/span> <a class="code" href="a00015.html#a0d8b919b9db1069387e966ae4b39c1b5" title="Define an related allocator for the inner_node structs.">inner_node::alloc_type<\/a> a(<a class="code" href="a00001.html#a583e6f3a9b61bb4b0ca9886ea52f73b9" title="Return an allocator for inner_node objects.">inner_node_allocator<\/a>());$/;"	a
l01497	doxygen-html/a00026_source.html	/^<a name="l01497"><\/a>01497             a.destroy(in);$/;"	a
l01498	doxygen-html/a00026_source.html	/^<a name="l01498"><\/a>01498             a.deallocate(in, 1);$/;"	a
l01499	doxygen-html/a00026_source.html	/^<a name="l01499"><\/a>01499             <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a>--;$/;"	a
l01500	doxygen-html/a00026_source.html	/^<a name="l01500"><\/a>01500         }$/;"	a
l01501	doxygen-html/a00026_source.html	/^<a name="l01501"><\/a>01501     }$/;"	a
l01502	doxygen-html/a00026_source.html	/^<a name="l01502"><\/a>01502 <span class="comment"><\/span>$/;"	a
l01503	doxygen-html/a00026_source.html	/^<a name="l01503"><\/a>01503 <span class="comment">    \/\/\/ Convenient template function for conditional copying of slotdata. This<\/span>$/;"	a
l01504	doxygen-html/a00026_source.html	/^<a name="l01504"><\/a>01504 <span class="comment">    \/\/\/ should be used instead of std::copy for all slotdata manipulations.<\/span>$/;"	a
l01505	doxygen-html/a00026_source.html	/^<a name="l01505"><\/a>01505 <span class="comment"><\/span>    <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> InputIterator, <span class="keyword">class<\/span> OutputIterator&gt;$/;"	a
l01506	doxygen-html/a00026_source.html	/^<a name="l01506"><\/a><a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941">01506<\/a>     <span class="keyword">static<\/span> OutputIterator <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a> (InputIterator first, InputIterator last,$/;"	a
l01507	doxygen-html/a00026_source.html	/^<a name="l01507"><\/a>01507                                      OutputIterator result)$/;"	a
l01508	doxygen-html/a00026_source.html	/^<a name="l01508"><\/a>01508     {$/;"	a
l01509	doxygen-html/a00026_source.html	/^<a name="l01509"><\/a>01509         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>) <span class="keywordflow">return<\/span> result; <span class="comment">\/\/ no operation<\/span>$/;"	a
l01510	doxygen-html/a00026_source.html	/^<a name="l01510"><\/a>01510         <span class="keywordflow">else<\/span> <span class="keywordflow">return<\/span> std::copy(first, last, result);$/;"	a
l01511	doxygen-html/a00026_source.html	/^<a name="l01511"><\/a>01511     }$/;"	a
l01512	doxygen-html/a00026_source.html	/^<a name="l01512"><\/a>01512 <span class="comment"><\/span>$/;"	a
l01513	doxygen-html/a00026_source.html	/^<a name="l01513"><\/a>01513 <span class="comment">    \/\/\/ Convenient template function for conditional copying of slotdata. This<\/span>$/;"	a
l01514	doxygen-html/a00026_source.html	/^<a name="l01514"><\/a>01514 <span class="comment">    \/\/\/ should be used instead of std::copy for all slotdata manipulations.<\/span>$/;"	a
l01515	doxygen-html/a00026_source.html	/^<a name="l01515"><\/a>01515 <span class="comment"><\/span>    <span class="keyword">template<\/span>&lt;<span class="keyword">class<\/span> InputIterator, <span class="keyword">class<\/span> OutputIterator&gt;$/;"	a
l01516	doxygen-html/a00026_source.html	/^<a name="l01516"><\/a><a class="code" href="a00001.html#a555a24bfd925a5d77bba28041d207f8d">01516<\/a>     <span class="keyword">static<\/span> OutputIterator <a class="code" href="a00001.html#a555a24bfd925a5d77bba28041d207f8d" title="Convenient template function for conditional copying of slotdata.">data_copy_backward<\/a> (InputIterator first, InputIterator last,$/;"	a
l01517	doxygen-html/a00026_source.html	/^<a name="l01517"><\/a>01517                                               OutputIterator result)$/;"	a
l01518	doxygen-html/a00026_source.html	/^<a name="l01518"><\/a>01518     {$/;"	a
l01519	doxygen-html/a00026_source.html	/^<a name="l01519"><\/a>01519         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>) <span class="keywordflow">return<\/span> result; <span class="comment">\/\/ no operation<\/span>$/;"	a
l01520	doxygen-html/a00026_source.html	/^<a name="l01520"><\/a>01520         <span class="keywordflow">else<\/span> <span class="keywordflow">return<\/span> std::copy_backward(first, last, result);$/;"	a
l01521	doxygen-html/a00026_source.html	/^<a name="l01521"><\/a>01521     }$/;"	a
l01522	doxygen-html/a00026_source.html	/^<a name="l01522"><\/a>01522 $/;"	a
l01523	doxygen-html/a00026_source.html	/^<a name="l01523"><\/a>01523 <span class="keyword">public<\/span>:$/;"	a
l01524	doxygen-html/a00026_source.html	/^<a name="l01524"><\/a>01524     <span class="comment">\/\/ *** Fast Destruction of the B+ Tree<\/span>$/;"	a
l01525	doxygen-html/a00026_source.html	/^<a name="l01525"><\/a>01525 <span class="comment"><\/span>$/;"	a
l01526	doxygen-html/a00026_source.html	/^<a name="l01526"><\/a>01526 <span class="comment">    \/\/\/ Frees all key\/data pairs and all nodes of the tree<\/span>$/;"	a
l01527	doxygen-html/a00026_source.html	/^<a name="l01527"><\/a><a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036">01527<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>()$/;"	a
l01528	doxygen-html/a00026_source.html	/^<a name="l01528"><\/a>01528     {$/;"	a
l01529	doxygen-html/a00026_source.html	/^<a name="l01529"><\/a>01529         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>)$/;"	a
l01530	doxygen-html/a00026_source.html	/^<a name="l01530"><\/a>01530         {$/;"	a
l01531	doxygen-html/a00026_source.html	/^<a name="l01531"><\/a>01531             <a class="code" href="a00001.html#a33241f6ae21f58c9747a6392470b646c" title="Recursively free up nodes.">clear_recursive<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l01532	doxygen-html/a00026_source.html	/^<a name="l01532"><\/a>01532             <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l01533	doxygen-html/a00026_source.html	/^<a name="l01533"><\/a>01533 $/;"	a
l01534	doxygen-html/a00026_source.html	/^<a name="l01534"><\/a>01534             <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = NULL;$/;"	a
l01535	doxygen-html/a00026_source.html	/^<a name="l01535"><\/a>01535             <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = NULL;$/;"	a
l01536	doxygen-html/a00026_source.html	/^<a name="l01536"><\/a>01536 $/;"	a
l01537	doxygen-html/a00026_source.html	/^<a name="l01537"><\/a>01537             <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a> = tree_stats();$/;"	a
l01538	doxygen-html/a00026_source.html	/^<a name="l01538"><\/a>01538         }$/;"	a
l01539	doxygen-html/a00026_source.html	/^<a name="l01539"><\/a>01539 $/;"	a
l01540	doxygen-html/a00026_source.html	/^<a name="l01540"><\/a>01540         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> == 0);$/;"	a
l01541	doxygen-html/a00026_source.html	/^<a name="l01541"><\/a>01541     }$/;"	a
l01542	doxygen-html/a00026_source.html	/^<a name="l01542"><\/a>01542 $/;"	a
l01543	doxygen-html/a00026_source.html	/^<a name="l01543"><\/a>01543 <span class="keyword">private<\/span>:<span class="comment"><\/span>$/;"	a
l01544	doxygen-html/a00026_source.html	/^<a name="l01544"><\/a>01544 <span class="comment">    \/\/\/ Recursively free up nodes<\/span>$/;"	a
l01545	doxygen-html/a00026_source.html	/^<a name="l01545"><\/a><a class="code" href="a00001.html#a33241f6ae21f58c9747a6392470b646c">01545<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a33241f6ae21f58c9747a6392470b646c" title="Recursively free up nodes.">clear_recursive<\/a>(node *n)$/;"	a
l01546	doxygen-html/a00026_source.html	/^<a name="l01546"><\/a>01546     {$/;"	a
l01547	doxygen-html/a00026_source.html	/^<a name="l01547"><\/a>01547         <span class="keywordflow">if<\/span> (n-&gt;isleafnode())$/;"	a
l01548	doxygen-html/a00026_source.html	/^<a name="l01548"><\/a>01548         {$/;"	a
l01549	doxygen-html/a00026_source.html	/^<a name="l01549"><\/a>01549             leaf_node *leafnode = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01550	doxygen-html/a00026_source.html	/^<a name="l01550"><\/a>01550 $/;"	a
l01551	doxygen-html/a00026_source.html	/^<a name="l01551"><\/a>01551             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> slot = 0; slot &lt; leafnode-&gt;slotuse; ++slot)$/;"	a
l01552	doxygen-html/a00026_source.html	/^<a name="l01552"><\/a>01552             {$/;"	a
l01553	doxygen-html/a00026_source.html	/^<a name="l01553"><\/a>01553                 <span class="comment">\/\/ data objects are deleted by leaf_node&#39;s destructor<\/span>$/;"	a
l01554	doxygen-html/a00026_source.html	/^<a name="l01554"><\/a>01554             }$/;"	a
l01555	doxygen-html/a00026_source.html	/^<a name="l01555"><\/a>01555         }$/;"	a
l01556	doxygen-html/a00026_source.html	/^<a name="l01556"><\/a>01556         <span class="keywordflow">else<\/span>$/;"	a
l01557	doxygen-html/a00026_source.html	/^<a name="l01557"><\/a>01557         {$/;"	a
l01558	doxygen-html/a00026_source.html	/^<a name="l01558"><\/a>01558             inner_node *innernode = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01559	doxygen-html/a00026_source.html	/^<a name="l01559"><\/a>01559 $/;"	a
l01560	doxygen-html/a00026_source.html	/^<a name="l01560"><\/a>01560             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; innernode-&gt;slotuse + 1; ++slot)$/;"	a
l01561	doxygen-html/a00026_source.html	/^<a name="l01561"><\/a>01561             {$/;"	a
l01562	doxygen-html/a00026_source.html	/^<a name="l01562"><\/a>01562                 <a class="code" href="a00001.html#a33241f6ae21f58c9747a6392470b646c" title="Recursively free up nodes.">clear_recursive<\/a>(innernode-&gt;childid[slot]);$/;"	a
l01563	doxygen-html/a00026_source.html	/^<a name="l01563"><\/a>01563                 <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(innernode-&gt;childid[slot]);$/;"	a
l01564	doxygen-html/a00026_source.html	/^<a name="l01564"><\/a>01564             }$/;"	a
l01565	doxygen-html/a00026_source.html	/^<a name="l01565"><\/a>01565         }$/;"	a
l01566	doxygen-html/a00026_source.html	/^<a name="l01566"><\/a>01566     }$/;"	a
l01567	doxygen-html/a00026_source.html	/^<a name="l01567"><\/a>01567 $/;"	a
l01568	doxygen-html/a00026_source.html	/^<a name="l01568"><\/a>01568 <span class="keyword">public<\/span>:$/;"	a
l01569	doxygen-html/a00026_source.html	/^<a name="l01569"><\/a>01569     <span class="comment">\/\/ *** STL Iterator Construction Functions<\/span>$/;"	a
l01570	doxygen-html/a00026_source.html	/^<a name="l01570"><\/a>01570 <span class="comment"><\/span>$/;"	a
l01571	doxygen-html/a00026_source.html	/^<a name="l01571"><\/a>01571 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first slot in<\/span>$/;"	a
l01572	doxygen-html/a00026_source.html	/^<a name="l01572"><\/a>01572 <span class="comment">    \/\/\/ the first leaf of the B+ tree.<\/span>$/;"	a
l01573	doxygen-html/a00026_source.html	/^<a name="l01573"><\/a><a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd">01573<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> iterator <a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()$/;"	a
l01574	doxygen-html/a00026_source.html	/^<a name="l01574"><\/a>01574     {$/;"	a
l01575	doxygen-html/a00026_source.html	/^<a name="l01575"><\/a>01575         <span class="keywordflow">return<\/span> iterator(<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>, 0);$/;"	a
l01576	doxygen-html/a00026_source.html	/^<a name="l01576"><\/a>01576     }$/;"	a
l01577	doxygen-html/a00026_source.html	/^<a name="l01577"><\/a>01577 <span class="comment"><\/span>$/;"	a
l01578	doxygen-html/a00026_source.html	/^<a name="l01578"><\/a>01578 <span class="comment">    \/\/\/ Constructs a read\/data-write iterator that points to the first invalid<\/span>$/;"	a
l01579	doxygen-html/a00026_source.html	/^<a name="l01579"><\/a>01579 <span class="comment">    \/\/\/ slot in the last leaf of the B+ tree.<\/span>$/;"	a
l01580	doxygen-html/a00026_source.html	/^<a name="l01580"><\/a><a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d">01580<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> iterator <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()$/;"	a
l01581	doxygen-html/a00026_source.html	/^<a name="l01581"><\/a>01581     {$/;"	a
l01582	doxygen-html/a00026_source.html	/^<a name="l01582"><\/a>01582         <span class="keywordflow">return<\/span> iterator(<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>, <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> ? <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> : 0);$/;"	a
l01583	doxygen-html/a00026_source.html	/^<a name="l01583"><\/a>01583     }$/;"	a
l01584	doxygen-html/a00026_source.html	/^<a name="l01584"><\/a>01584 <span class="comment"><\/span>$/;"	a
l01585	doxygen-html/a00026_source.html	/^<a name="l01585"><\/a>01585 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first slot<\/span>$/;"	a
l01586	doxygen-html/a00026_source.html	/^<a name="l01586"><\/a>01586 <span class="comment">    \/\/\/ in the first leaf of the B+ tree.<\/span>$/;"	a
l01587	doxygen-html/a00026_source.html	/^<a name="l01587"><\/a><a class="code" href="a00001.html#a530d199e20aaf216b82f43a51e1c4526">01587<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> const_iterator <a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01588	doxygen-html/a00026_source.html	/^<a name="l01588"><\/a>01588 <span class="keyword">    <\/span>{$/;"	a
l01589	doxygen-html/a00026_source.html	/^<a name="l01589"><\/a>01589         <span class="keywordflow">return<\/span> const_iterator(<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>, 0);$/;"	a
l01590	doxygen-html/a00026_source.html	/^<a name="l01590"><\/a>01590     }$/;"	a
l01591	doxygen-html/a00026_source.html	/^<a name="l01591"><\/a>01591 <span class="comment"><\/span>$/;"	a
l01592	doxygen-html/a00026_source.html	/^<a name="l01592"><\/a>01592 <span class="comment">    \/\/\/ Constructs a read-only constant iterator that points to the first<\/span>$/;"	a
l01593	doxygen-html/a00026_source.html	/^<a name="l01593"><\/a>01593 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree.<\/span>$/;"	a
l01594	doxygen-html/a00026_source.html	/^<a name="l01594"><\/a><a class="code" href="a00001.html#aaad45bd0825139ad9168fc4ee143fe7d">01594<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> const_iterator <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01595	doxygen-html/a00026_source.html	/^<a name="l01595"><\/a>01595 <span class="keyword">    <\/span>{$/;"	a
l01596	doxygen-html/a00026_source.html	/^<a name="l01596"><\/a>01596         <span class="keywordflow">return<\/span> const_iterator(<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>, <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> ? <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> : 0);$/;"	a
l01597	doxygen-html/a00026_source.html	/^<a name="l01597"><\/a>01597     }$/;"	a
l01598	doxygen-html/a00026_source.html	/^<a name="l01598"><\/a>01598 <span class="comment"><\/span>$/;"	a
l01599	doxygen-html/a00026_source.html	/^<a name="l01599"><\/a>01599 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l01600	doxygen-html/a00026_source.html	/^<a name="l01600"><\/a>01600 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l01601	doxygen-html/a00026_source.html	/^<a name="l01601"><\/a><a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5">01601<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> reverse_iterator <a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()$/;"	a
l01602	doxygen-html/a00026_source.html	/^<a name="l01602"><\/a>01602     {$/;"	a
l01603	doxygen-html/a00026_source.html	/^<a name="l01603"><\/a>01603         <span class="keywordflow">return<\/span> reverse_iterator(<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>());$/;"	a
l01604	doxygen-html/a00026_source.html	/^<a name="l01604"><\/a>01604     }$/;"	a
l01605	doxygen-html/a00026_source.html	/^<a name="l01605"><\/a>01605 <span class="comment"><\/span>$/;"	a
l01606	doxygen-html/a00026_source.html	/^<a name="l01606"><\/a>01606 <span class="comment">    \/\/\/ Constructs a read\/data-write reverse iterator that points to the first<\/span>$/;"	a
l01607	doxygen-html/a00026_source.html	/^<a name="l01607"><\/a>01607 <span class="comment">    \/\/\/ slot in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l01608	doxygen-html/a00026_source.html	/^<a name="l01608"><\/a><a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc">01608<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> reverse_iterator <a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()$/;"	a
l01609	doxygen-html/a00026_source.html	/^<a name="l01609"><\/a>01609     {$/;"	a
l01610	doxygen-html/a00026_source.html	/^<a name="l01610"><\/a>01610         <span class="keywordflow">return<\/span> reverse_iterator(<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>());$/;"	a
l01611	doxygen-html/a00026_source.html	/^<a name="l01611"><\/a>01611     }$/;"	a
l01612	doxygen-html/a00026_source.html	/^<a name="l01612"><\/a>01612 <span class="comment"><\/span>$/;"	a
l01613	doxygen-html/a00026_source.html	/^<a name="l01613"><\/a>01613 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first<\/span>$/;"	a
l01614	doxygen-html/a00026_source.html	/^<a name="l01614"><\/a>01614 <span class="comment">    \/\/\/ invalid slot in the last leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l01615	doxygen-html/a00026_source.html	/^<a name="l01615"><\/a><a class="code" href="a00001.html#a6a6224c68ffa219bf9ca4f4ef229e915">01615<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> const_reverse_iterator <a class="code" href="a00001.html#a4e2f4ba4141820f4bc5782298c261aa5" title="Constructs a read\/data-write reverse iterator that points to the first invalid slot in the last leaf ...">rbegin<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01616	doxygen-html/a00026_source.html	/^<a name="l01616"><\/a>01616 <span class="keyword">    <\/span>{$/;"	a
l01617	doxygen-html/a00026_source.html	/^<a name="l01617"><\/a>01617         <span class="keywordflow">return<\/span> const_reverse_iterator(<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>());$/;"	a
l01618	doxygen-html/a00026_source.html	/^<a name="l01618"><\/a>01618     }$/;"	a
l01619	doxygen-html/a00026_source.html	/^<a name="l01619"><\/a>01619 <span class="comment"><\/span>$/;"	a
l01620	doxygen-html/a00026_source.html	/^<a name="l01620"><\/a>01620 <span class="comment">    \/\/\/ Constructs a read-only reverse iterator that points to the first slot<\/span>$/;"	a
l01621	doxygen-html/a00026_source.html	/^<a name="l01621"><\/a>01621 <span class="comment">    \/\/\/ in the first leaf of the B+ tree. Uses STL magic.<\/span>$/;"	a
l01622	doxygen-html/a00026_source.html	/^<a name="l01622"><\/a><a class="code" href="a00001.html#aa0536538d736bf52c94144b806bfd12f">01622<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> const_reverse_iterator <a class="code" href="a00001.html#a625d6f5e37cfed631a403fe36fa818dc" title="Constructs a read\/data-write reverse iterator that points to the first slot in the first leaf of the ...">rend<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01623	doxygen-html/a00026_source.html	/^<a name="l01623"><\/a>01623 <span class="keyword">    <\/span>{$/;"	a
l01624	doxygen-html/a00026_source.html	/^<a name="l01624"><\/a>01624         <span class="keywordflow">return<\/span> const_reverse_iterator(<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>());$/;"	a
l01625	doxygen-html/a00026_source.html	/^<a name="l01625"><\/a>01625     }$/;"	a
l01626	doxygen-html/a00026_source.html	/^<a name="l01626"><\/a>01626 $/;"	a
l01627	doxygen-html/a00026_source.html	/^<a name="l01627"><\/a>01627 <span class="keyword">private<\/span>:$/;"	a
l01628	doxygen-html/a00026_source.html	/^<a name="l01628"><\/a>01628     <span class="comment">\/\/ *** B+ Tree Node Binary Search Functions<\/span>$/;"	a
l01629	doxygen-html/a00026_source.html	/^<a name="l01629"><\/a>01629 <span class="comment"><\/span>$/;"	a
l01630	doxygen-html/a00026_source.html	/^<a name="l01630"><\/a>01630 <span class="comment">    \/\/\/ Searches for the first key in the node n greater or equal to key. Uses<\/span>$/;"	a
l01631	doxygen-html/a00026_source.html	/^<a name="l01631"><\/a>01631 <span class="comment">    \/\/\/ binary search with an optional linear self-verification. This is a<\/span>$/;"	a
l01632	doxygen-html/a00026_source.html	/^<a name="l01632"><\/a>01632 <span class="comment">    \/\/\/ template function, because the slotkey array is located at different<\/span>$/;"	a
l01633	doxygen-html/a00026_source.html	/^<a name="l01633"><\/a>01633 <span class="comment">    \/\/\/ places in leaf_node and inner_node.<\/span>$/;"	a
l01634	doxygen-html/a00026_source.html	/^<a name="l01634"><\/a>01634 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> node_type&gt;$/;"	a
l01635	doxygen-html/a00026_source.html	/^<a name="l01635"><\/a><a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669">01635<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(<span class="keyword">const<\/span> node_type *n, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l01636	doxygen-html/a00026_source.html	/^<a name="l01636"><\/a>01636 <span class="keyword">    <\/span>{$/;"	a
l01637	doxygen-html/a00026_source.html	/^<a name="l01637"><\/a>01637         <span class="keywordflow">if<\/span> ( 0 &amp;&amp; <span class="keyword">sizeof<\/span>(n-&gt;slotkey) &gt; traits::binsearch_threshold )$/;"	a
l01638	doxygen-html/a00026_source.html	/^<a name="l01638"><\/a>01638         {$/;"	a
l01639	doxygen-html/a00026_source.html	/^<a name="l01639"><\/a>01639             <span class="keywordflow">if<\/span> (n-&gt;slotuse == 0) <span class="keywordflow">return<\/span> 0;$/;"	a
l01640	doxygen-html/a00026_source.html	/^<a name="l01640"><\/a>01640 $/;"	a
l01641	doxygen-html/a00026_source.html	/^<a name="l01641"><\/a>01641             <span class="keywordtype">int<\/span> lo = 0, hi = n-&gt;slotuse;$/;"	a
l01642	doxygen-html/a00026_source.html	/^<a name="l01642"><\/a>01642 $/;"	a
l01643	doxygen-html/a00026_source.html	/^<a name="l01643"><\/a>01643             <span class="keywordflow">while<\/span> (lo &lt; hi)$/;"	a
l01644	doxygen-html/a00026_source.html	/^<a name="l01644"><\/a>01644             {$/;"	a
l01645	doxygen-html/a00026_source.html	/^<a name="l01645"><\/a>01645                 <span class="keywordtype">int<\/span> mid = (lo + hi) &gt;&gt; 1;$/;"	a
l01646	doxygen-html/a00026_source.html	/^<a name="l01646"><\/a>01646 $/;"	a
l01647	doxygen-html/a00026_source.html	/^<a name="l01647"><\/a>01647                 <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(key, n-&gt;slotkey[mid])) {$/;"	a
l01648	doxygen-html/a00026_source.html	/^<a name="l01648"><\/a>01648                     hi = mid; <span class="comment">\/\/ key &lt;= mid<\/span>$/;"	a
l01649	doxygen-html/a00026_source.html	/^<a name="l01649"><\/a>01649                 }$/;"	a
l01650	doxygen-html/a00026_source.html	/^<a name="l01650"><\/a>01650                 <span class="keywordflow">else<\/span> {$/;"	a
l01651	doxygen-html/a00026_source.html	/^<a name="l01651"><\/a>01651                     lo = mid + 1; <span class="comment">\/\/ key &gt; mid<\/span>$/;"	a
l01652	doxygen-html/a00026_source.html	/^<a name="l01652"><\/a>01652                 }$/;"	a
l01653	doxygen-html/a00026_source.html	/^<a name="l01653"><\/a>01653             }$/;"	a
l01654	doxygen-html/a00026_source.html	/^<a name="l01654"><\/a>01654 $/;"	a
l01655	doxygen-html/a00026_source.html	/^<a name="l01655"><\/a>01655             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::find_lower: on &quot;<\/span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; key &quot;<\/span> &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot; -&gt; &quot;<\/span> &lt;&lt; lo &lt;&lt; <span class="stringliteral">&quot; \/ &quot;<\/span> &lt;&lt; hi);$/;"	a
l01656	doxygen-html/a00026_source.html	/^<a name="l01656"><\/a>01656 $/;"	a
l01657	doxygen-html/a00026_source.html	/^<a name="l01657"><\/a>01657             <span class="comment">\/\/ verify result using simple linear search<\/span>$/;"	a
l01658	doxygen-html/a00026_source.html	/^<a name="l01658"><\/a>01658             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l01659	doxygen-html/a00026_source.html	/^<a name="l01659"><\/a>01659             {$/;"	a
l01660	doxygen-html/a00026_source.html	/^<a name="l01660"><\/a>01660                 <span class="keywordtype">int<\/span> i = 0;$/;"	a
l01661	doxygen-html/a00026_source.html	/^<a name="l01661"><\/a>01661                 <span class="keywordflow">while<\/span> (i &lt; n-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32" title="True if a &lt; b ? &quot;constructed&quot; from m_key_less()">key_less<\/a>(n-&gt;slotkey[i],key)) ++i;$/;"	a
l01662	doxygen-html/a00026_source.html	/^<a name="l01662"><\/a>01662 $/;"	a
l01663	doxygen-html/a00026_source.html	/^<a name="l01663"><\/a>01663                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::find_lower: testfind: &quot;<\/span> &lt;&lt; i);$/;"	a
l01664	doxygen-html/a00026_source.html	/^<a name="l01664"><\/a>01664                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(i == lo);$/;"	a
l01665	doxygen-html/a00026_source.html	/^<a name="l01665"><\/a>01665             }$/;"	a
l01666	doxygen-html/a00026_source.html	/^<a name="l01666"><\/a>01666 $/;"	a
l01667	doxygen-html/a00026_source.html	/^<a name="l01667"><\/a>01667             <span class="keywordflow">return<\/span> lo;$/;"	a
l01668	doxygen-html/a00026_source.html	/^<a name="l01668"><\/a>01668         }$/;"	a
l01669	doxygen-html/a00026_source.html	/^<a name="l01669"><\/a>01669         <span class="keywordflow">else<\/span> <span class="comment">\/\/ for nodes &lt;= binsearch_threshold do linear search.<\/span>$/;"	a
l01670	doxygen-html/a00026_source.html	/^<a name="l01670"><\/a>01670         {$/;"	a
l01671	doxygen-html/a00026_source.html	/^<a name="l01671"><\/a>01671             <span class="keywordtype">int<\/span> lo = 0;$/;"	a
l01672	doxygen-html/a00026_source.html	/^<a name="l01672"><\/a>01672             <span class="keywordflow">while<\/span> (lo &lt; n-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32" title="True if a &lt; b ? &quot;constructed&quot; from m_key_less()">key_less<\/a>(n-&gt;slotkey[lo],key)) ++lo;$/;"	a
l01673	doxygen-html/a00026_source.html	/^<a name="l01673"><\/a>01673             <span class="keywordflow">return<\/span> lo;$/;"	a
l01674	doxygen-html/a00026_source.html	/^<a name="l01674"><\/a>01674         }$/;"	a
l01675	doxygen-html/a00026_source.html	/^<a name="l01675"><\/a>01675     }$/;"	a
l01676	doxygen-html/a00026_source.html	/^<a name="l01676"><\/a>01676 <span class="comment"><\/span>$/;"	a
l01677	doxygen-html/a00026_source.html	/^<a name="l01677"><\/a>01677 <span class="comment">    \/\/\/ Searches for the first key in the node n greater than key. Uses binary<\/span>$/;"	a
l01678	doxygen-html/a00026_source.html	/^<a name="l01678"><\/a>01678 <span class="comment">    \/\/\/ search with an optional linear self-verification. This is a template<\/span>$/;"	a
l01679	doxygen-html/a00026_source.html	/^<a name="l01679"><\/a>01679 <span class="comment">    \/\/\/ function, because the slotkey array is located at different places in<\/span>$/;"	a
l01680	doxygen-html/a00026_source.html	/^<a name="l01680"><\/a>01680 <span class="comment">    \/\/\/ leaf_node and inner_node.<\/span>$/;"	a
l01681	doxygen-html/a00026_source.html	/^<a name="l01681"><\/a>01681 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> node_type&gt;$/;"	a
l01682	doxygen-html/a00026_source.html	/^<a name="l01682"><\/a><a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c">01682<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">int<\/span> <a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c" title="Searches for the first key in the node n greater than key.">find_upper<\/a>(<span class="keyword">const<\/span> node_type *n, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l01683	doxygen-html/a00026_source.html	/^<a name="l01683"><\/a>01683 <span class="keyword">    <\/span>{$/;"	a
l01684	doxygen-html/a00026_source.html	/^<a name="l01684"><\/a>01684         <span class="keywordflow">if<\/span> ( 0 &amp;&amp; <span class="keyword">sizeof<\/span>(n-&gt;slotkey) &gt; traits::binsearch_threshold )$/;"	a
l01685	doxygen-html/a00026_source.html	/^<a name="l01685"><\/a>01685         {$/;"	a
l01686	doxygen-html/a00026_source.html	/^<a name="l01686"><\/a>01686             <span class="keywordflow">if<\/span> (n-&gt;slotuse == 0) <span class="keywordflow">return<\/span> 0;$/;"	a
l01687	doxygen-html/a00026_source.html	/^<a name="l01687"><\/a>01687 $/;"	a
l01688	doxygen-html/a00026_source.html	/^<a name="l01688"><\/a>01688             <span class="keywordtype">int<\/span> lo = 0, hi = n-&gt;slotuse;$/;"	a
l01689	doxygen-html/a00026_source.html	/^<a name="l01689"><\/a>01689 $/;"	a
l01690	doxygen-html/a00026_source.html	/^<a name="l01690"><\/a>01690             <span class="keywordflow">while<\/span> (lo &lt; hi)$/;"	a
l01691	doxygen-html/a00026_source.html	/^<a name="l01691"><\/a>01691             {$/;"	a
l01692	doxygen-html/a00026_source.html	/^<a name="l01692"><\/a>01692                 <span class="keywordtype">int<\/span> mid = (lo + hi) &gt;&gt; 1;$/;"	a
l01693	doxygen-html/a00026_source.html	/^<a name="l01693"><\/a>01693 $/;"	a
l01694	doxygen-html/a00026_source.html	/^<a name="l01694"><\/a>01694                 <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32" title="True if a &lt; b ? &quot;constructed&quot; from m_key_less()">key_less<\/a>(key, n-&gt;slotkey[mid])) {$/;"	a
l01695	doxygen-html/a00026_source.html	/^<a name="l01695"><\/a>01695                     hi = mid; <span class="comment">\/\/ key &lt; mid<\/span>$/;"	a
l01696	doxygen-html/a00026_source.html	/^<a name="l01696"><\/a>01696                 }$/;"	a
l01697	doxygen-html/a00026_source.html	/^<a name="l01697"><\/a>01697                 <span class="keywordflow">else<\/span> {$/;"	a
l01698	doxygen-html/a00026_source.html	/^<a name="l01698"><\/a>01698                     lo = mid + 1; <span class="comment">\/\/ key &gt;= mid<\/span>$/;"	a
l01699	doxygen-html/a00026_source.html	/^<a name="l01699"><\/a>01699                 }$/;"	a
l01700	doxygen-html/a00026_source.html	/^<a name="l01700"><\/a>01700             }$/;"	a
l01701	doxygen-html/a00026_source.html	/^<a name="l01701"><\/a>01701 $/;"	a
l01702	doxygen-html/a00026_source.html	/^<a name="l01702"><\/a>01702             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::find_upper: on &quot;<\/span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; key &quot;<\/span> &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot; -&gt; &quot;<\/span> &lt;&lt; lo &lt;&lt; <span class="stringliteral">&quot; \/ &quot;<\/span> &lt;&lt; hi);$/;"	a
l01703	doxygen-html/a00026_source.html	/^<a name="l01703"><\/a>01703 $/;"	a
l01704	doxygen-html/a00026_source.html	/^<a name="l01704"><\/a>01704             <span class="comment">\/\/ verify result using simple linear search<\/span>$/;"	a
l01705	doxygen-html/a00026_source.html	/^<a name="l01705"><\/a>01705             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l01706	doxygen-html/a00026_source.html	/^<a name="l01706"><\/a>01706             {$/;"	a
l01707	doxygen-html/a00026_source.html	/^<a name="l01707"><\/a>01707                 <span class="keywordtype">int<\/span> i = 0;$/;"	a
l01708	doxygen-html/a00026_source.html	/^<a name="l01708"><\/a>01708                 <span class="keywordflow">while<\/span> (i &lt; n-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(n-&gt;slotkey[i],key)) ++i;$/;"	a
l01709	doxygen-html/a00026_source.html	/^<a name="l01709"><\/a>01709 $/;"	a
l01710	doxygen-html/a00026_source.html	/^<a name="l01710"><\/a>01710                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::find_upper testfind: &quot;<\/span> &lt;&lt; i);$/;"	a
l01711	doxygen-html/a00026_source.html	/^<a name="l01711"><\/a>01711                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(i == hi);$/;"	a
l01712	doxygen-html/a00026_source.html	/^<a name="l01712"><\/a>01712             }$/;"	a
l01713	doxygen-html/a00026_source.html	/^<a name="l01713"><\/a>01713 $/;"	a
l01714	doxygen-html/a00026_source.html	/^<a name="l01714"><\/a>01714             <span class="keywordflow">return<\/span> lo;$/;"	a
l01715	doxygen-html/a00026_source.html	/^<a name="l01715"><\/a>01715         }$/;"	a
l01716	doxygen-html/a00026_source.html	/^<a name="l01716"><\/a>01716         <span class="keywordflow">else<\/span> <span class="comment">\/\/ for nodes &lt;= binsearch_threshold do linear search.<\/span>$/;"	a
l01717	doxygen-html/a00026_source.html	/^<a name="l01717"><\/a>01717         {$/;"	a
l01718	doxygen-html/a00026_source.html	/^<a name="l01718"><\/a>01718             <span class="keywordtype">int<\/span> lo = 0;$/;"	a
l01719	doxygen-html/a00026_source.html	/^<a name="l01719"><\/a>01719             <span class="keywordflow">while<\/span> (lo &lt; n-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(n-&gt;slotkey[lo],key)) ++lo;$/;"	a
l01720	doxygen-html/a00026_source.html	/^<a name="l01720"><\/a>01720             <span class="keywordflow">return<\/span> lo;$/;"	a
l01721	doxygen-html/a00026_source.html	/^<a name="l01721"><\/a>01721         }$/;"	a
l01722	doxygen-html/a00026_source.html	/^<a name="l01722"><\/a>01722     }$/;"	a
l01723	doxygen-html/a00026_source.html	/^<a name="l01723"><\/a>01723 $/;"	a
l01724	doxygen-html/a00026_source.html	/^<a name="l01724"><\/a>01724 <span class="keyword">public<\/span>:$/;"	a
l01725	doxygen-html/a00026_source.html	/^<a name="l01725"><\/a>01725     <span class="comment">\/\/ *** Access Functions to the Item Count<\/span>$/;"	a
l01726	doxygen-html/a00026_source.html	/^<a name="l01726"><\/a>01726 <span class="comment"><\/span>$/;"	a
l01727	doxygen-html/a00026_source.html	/^<a name="l01727"><\/a>01727 <span class="comment">    \/\/\/ Return the number of key\/data pairs in the B+ tree<\/span>$/;"	a
l01728	doxygen-html/a00026_source.html	/^<a name="l01728"><\/a><a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e">01728<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01729	doxygen-html/a00026_source.html	/^<a name="l01729"><\/a>01729 <span class="keyword">    <\/span>{$/;"	a
l01730	doxygen-html/a00026_source.html	/^<a name="l01730"><\/a>01730         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>;$/;"	a
l01731	doxygen-html/a00026_source.html	/^<a name="l01731"><\/a>01731     }$/;"	a
l01732	doxygen-html/a00026_source.html	/^<a name="l01732"><\/a>01732 <span class="comment"><\/span>$/;"	a
l01733	doxygen-html/a00026_source.html	/^<a name="l01733"><\/a>01733 <span class="comment">    \/\/\/ Returns true if there is at least one key\/data pair in the B+ tree<\/span>$/;"	a
l01734	doxygen-html/a00026_source.html	/^<a name="l01734"><\/a><a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40">01734<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01735	doxygen-html/a00026_source.html	/^<a name="l01735"><\/a>01735 <span class="keyword">    <\/span>{$/;"	a
l01736	doxygen-html/a00026_source.html	/^<a name="l01736"><\/a>01736         <span class="keywordflow">return<\/span> (<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>() == <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>(0));$/;"	a
l01737	doxygen-html/a00026_source.html	/^<a name="l01737"><\/a>01737     }$/;"	a
l01738	doxygen-html/a00026_source.html	/^<a name="l01738"><\/a>01738 <span class="comment"><\/span>$/;"	a
l01739	doxygen-html/a00026_source.html	/^<a name="l01739"><\/a>01739 <span class="comment">    \/\/\/ Returns the largest possible size of the B+ Tree. This is just a<\/span>$/;"	a
l01740	doxygen-html/a00026_source.html	/^<a name="l01740"><\/a>01740 <span class="comment">    \/\/\/ function required by the STL standard, the B+ Tree can hold more items.<\/span>$/;"	a
l01741	doxygen-html/a00026_source.html	/^<a name="l01741"><\/a><a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92">01741<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00001.html#a3285e41cd6c4566e99d8c82803ad4d92" title="Returns the largest possible size of the B+ Tree.">max_size<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01742	doxygen-html/a00026_source.html	/^<a name="l01742"><\/a>01742 <span class="keyword">    <\/span>{$/;"	a
l01743	doxygen-html/a00026_source.html	/^<a name="l01743"><\/a>01743         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>(-1);$/;"	a
l01744	doxygen-html/a00026_source.html	/^<a name="l01744"><\/a>01744     }$/;"	a
l01745	doxygen-html/a00026_source.html	/^<a name="l01745"><\/a>01745 <span class="comment"><\/span>$/;"	a
l01746	doxygen-html/a00026_source.html	/^<a name="l01746"><\/a>01746 <span class="comment">    \/\/\/ Return a const reference to the current statistics.<\/span>$/;"	a
l01747	doxygen-html/a00026_source.html	/^<a name="l01747"><\/a><a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc">01747<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keyword">const<\/span> <span class="keyword">struct <\/span>tree_stats&amp; <a class="code" href="a00001.html#a81c7f4e56b3421976855daf40c6e20fc" title="Return a const reference to the current statistics.">get_stats<\/a>()<span class="keyword"> const<\/span>$/;"	a
l01748	doxygen-html/a00026_source.html	/^<a name="l01748"><\/a>01748 <span class="keyword">    <\/span>{$/;"	a
l01749	doxygen-html/a00026_source.html	/^<a name="l01749"><\/a>01749         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>;$/;"	a
l01750	doxygen-html/a00026_source.html	/^<a name="l01750"><\/a>01750     }$/;"	a
l01751	doxygen-html/a00026_source.html	/^<a name="l01751"><\/a>01751 $/;"	a
l01752	doxygen-html/a00026_source.html	/^<a name="l01752"><\/a>01752 <span class="keyword">public<\/span>:$/;"	a
l01753	doxygen-html/a00026_source.html	/^<a name="l01753"><\/a>01753     <span class="comment">\/\/ *** Standard Access Functions Querying the Tree by Descending to a Leaf<\/span>$/;"	a
l01754	doxygen-html/a00026_source.html	/^<a name="l01754"><\/a>01754 <span class="comment"><\/span>$/;"	a
l01755	doxygen-html/a00026_source.html	/^<a name="l01755"><\/a>01755 <span class="comment">    \/\/\/ Non-STL function checking whether a key is in the B+ tree. The same as<\/span>$/;"	a
l01756	doxygen-html/a00026_source.html	/^<a name="l01756"><\/a>01756 <span class="comment">    \/\/\/ (find(k) != end()) or (count() != 0).<\/span>$/;"	a
l01757	doxygen-html/a00026_source.html	/^<a name="l01757"><\/a><a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961">01757<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l01758	doxygen-html/a00026_source.html	/^<a name="l01758"><\/a>01758 <span class="keyword">    <\/span>{$/;"	a
l01759	doxygen-html/a00026_source.html	/^<a name="l01759"><\/a>01759         <span class="keyword">const<\/span> node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01760	doxygen-html/a00026_source.html	/^<a name="l01760"><\/a>01760         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;$/;"	a
l01761	doxygen-html/a00026_source.html	/^<a name="l01761"><\/a>01761 $/;"	a
l01762	doxygen-html/a00026_source.html	/^<a name="l01762"><\/a>01762         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01763	doxygen-html/a00026_source.html	/^<a name="l01763"><\/a>01763         {$/;"	a
l01764	doxygen-html/a00026_source.html	/^<a name="l01764"><\/a>01764             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01765	doxygen-html/a00026_source.html	/^<a name="l01765"><\/a>01765             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01766	doxygen-html/a00026_source.html	/^<a name="l01766"><\/a>01766 $/;"	a
l01767	doxygen-html/a00026_source.html	/^<a name="l01767"><\/a>01767             n = inner-&gt;childid[slot];$/;"	a
l01768	doxygen-html/a00026_source.html	/^<a name="l01768"><\/a>01768         }$/;"	a
l01769	doxygen-html/a00026_source.html	/^<a name="l01769"><\/a>01769 $/;"	a
l01770	doxygen-html/a00026_source.html	/^<a name="l01770"><\/a>01770         <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01771	doxygen-html/a00026_source.html	/^<a name="l01771"><\/a>01771 $/;"	a
l01772	doxygen-html/a00026_source.html	/^<a name="l01772"><\/a>01772         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01773	doxygen-html/a00026_source.html	/^<a name="l01773"><\/a>01773         <span class="keywordflow">return<\/span> (slot &lt; leaf-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot]));$/;"	a
l01774	doxygen-html/a00026_source.html	/^<a name="l01774"><\/a>01774     }$/;"	a
l01775	doxygen-html/a00026_source.html	/^<a name="l01775"><\/a>01775 <span class="comment"><\/span>$/;"	a
l01776	doxygen-html/a00026_source.html	/^<a name="l01776"><\/a>01776 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an iterator to the<\/span>$/;"	a
l01777	doxygen-html/a00026_source.html	/^<a name="l01777"><\/a>01777 <span class="comment">    \/\/\/ key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l01778	doxygen-html/a00026_source.html	/^<a name="l01778"><\/a><a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f">01778<\/a> <span class="comment"><\/span>    iterator <a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l01779	doxygen-html/a00026_source.html	/^<a name="l01779"><\/a>01779     {$/;"	a
l01780	doxygen-html/a00026_source.html	/^<a name="l01780"><\/a>01780         node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01781	doxygen-html/a00026_source.html	/^<a name="l01781"><\/a>01781         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01782	doxygen-html/a00026_source.html	/^<a name="l01782"><\/a>01782 $/;"	a
l01783	doxygen-html/a00026_source.html	/^<a name="l01783"><\/a>01783         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01784	doxygen-html/a00026_source.html	/^<a name="l01784"><\/a>01784         {$/;"	a
l01785	doxygen-html/a00026_source.html	/^<a name="l01785"><\/a>01785             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01786	doxygen-html/a00026_source.html	/^<a name="l01786"><\/a>01786             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01787	doxygen-html/a00026_source.html	/^<a name="l01787"><\/a>01787 $/;"	a
l01788	doxygen-html/a00026_source.html	/^<a name="l01788"><\/a>01788             n = inner-&gt;childid[slot];$/;"	a
l01789	doxygen-html/a00026_source.html	/^<a name="l01789"><\/a>01789         }$/;"	a
l01790	doxygen-html/a00026_source.html	/^<a name="l01790"><\/a>01790 $/;"	a
l01791	doxygen-html/a00026_source.html	/^<a name="l01791"><\/a>01791         leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01792	doxygen-html/a00026_source.html	/^<a name="l01792"><\/a>01792 $/;"	a
l01793	doxygen-html/a00026_source.html	/^<a name="l01793"><\/a>01793         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01794	doxygen-html/a00026_source.html	/^<a name="l01794"><\/a>01794         <span class="keywordflow">return<\/span> (slot &lt; leaf-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot]))$/;"	a
l01795	doxygen-html/a00026_source.html	/^<a name="l01795"><\/a>01795             ? iterator(leaf, slot) : <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01796	doxygen-html/a00026_source.html	/^<a name="l01796"><\/a>01796     }$/;"	a
l01797	doxygen-html/a00026_source.html	/^<a name="l01797"><\/a>01797 <span class="comment"><\/span>$/;"	a
l01798	doxygen-html/a00026_source.html	/^<a name="l01798"><\/a>01798 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns an constant iterator<\/span>$/;"	a
l01799	doxygen-html/a00026_source.html	/^<a name="l01799"><\/a>01799 <span class="comment">    \/\/\/ to the key\/data slot if found. If unsuccessful it returns end().<\/span>$/;"	a
l01800	doxygen-html/a00026_source.html	/^<a name="l01800"><\/a><a class="code" href="a00001.html#a6271881b282c78b6e17fa08de0052d5e">01800<\/a> <span class="comment"><\/span>    const_iterator <a class="code" href="a00001.html#a90bd85f703bb74d7ab7dc967bf8d712f" title="Tries to locate a key in the B+ tree and returns an iterator to the key\/data slot if found...">find<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l01801	doxygen-html/a00026_source.html	/^<a name="l01801"><\/a>01801 <span class="keyword">    <\/span>{$/;"	a
l01802	doxygen-html/a00026_source.html	/^<a name="l01802"><\/a>01802         <span class="keyword">const<\/span> node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01803	doxygen-html/a00026_source.html	/^<a name="l01803"><\/a>01803         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01804	doxygen-html/a00026_source.html	/^<a name="l01804"><\/a>01804 $/;"	a
l01805	doxygen-html/a00026_source.html	/^<a name="l01805"><\/a>01805         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01806	doxygen-html/a00026_source.html	/^<a name="l01806"><\/a>01806         {$/;"	a
l01807	doxygen-html/a00026_source.html	/^<a name="l01807"><\/a>01807             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01808	doxygen-html/a00026_source.html	/^<a name="l01808"><\/a>01808             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01809	doxygen-html/a00026_source.html	/^<a name="l01809"><\/a>01809 $/;"	a
l01810	doxygen-html/a00026_source.html	/^<a name="l01810"><\/a>01810             n = inner-&gt;childid[slot];$/;"	a
l01811	doxygen-html/a00026_source.html	/^<a name="l01811"><\/a>01811         }$/;"	a
l01812	doxygen-html/a00026_source.html	/^<a name="l01812"><\/a>01812 $/;"	a
l01813	doxygen-html/a00026_source.html	/^<a name="l01813"><\/a>01813         <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01814	doxygen-html/a00026_source.html	/^<a name="l01814"><\/a>01814 $/;"	a
l01815	doxygen-html/a00026_source.html	/^<a name="l01815"><\/a>01815         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01816	doxygen-html/a00026_source.html	/^<a name="l01816"><\/a>01816         <span class="keywordflow">return<\/span> (slot &lt; leaf-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot]))$/;"	a
l01817	doxygen-html/a00026_source.html	/^<a name="l01817"><\/a>01817             ? const_iterator(leaf, slot) : <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01818	doxygen-html/a00026_source.html	/^<a name="l01818"><\/a>01818     }$/;"	a
l01819	doxygen-html/a00026_source.html	/^<a name="l01819"><\/a>01819 <span class="comment"><\/span>$/;"	a
l01820	doxygen-html/a00026_source.html	/^<a name="l01820"><\/a>01820 <span class="comment">    \/\/\/ Tries to locate a key in the B+ tree and returns the number of<\/span>$/;"	a
l01821	doxygen-html/a00026_source.html	/^<a name="l01821"><\/a>01821 <span class="comment">    \/\/\/ identical key entries found.<\/span>$/;"	a
l01822	doxygen-html/a00026_source.html	/^<a name="l01822"><\/a><a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2">01822<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00001.html#a3882a2b0e2ea8eb43b4261e7f3eb32f2" title="Tries to locate a key in the B+ tree and returns the number of identical key entries found...">count<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)<span class="keyword"> const<\/span>$/;"	a
l01823	doxygen-html/a00026_source.html	/^<a name="l01823"><\/a>01823 <span class="keyword">    <\/span>{$/;"	a
l01824	doxygen-html/a00026_source.html	/^<a name="l01824"><\/a>01824         <span class="keyword">const<\/span> node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01825	doxygen-html/a00026_source.html	/^<a name="l01825"><\/a>01825         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> 0;$/;"	a
l01826	doxygen-html/a00026_source.html	/^<a name="l01826"><\/a>01826 $/;"	a
l01827	doxygen-html/a00026_source.html	/^<a name="l01827"><\/a>01827         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01828	doxygen-html/a00026_source.html	/^<a name="l01828"><\/a>01828         {$/;"	a
l01829	doxygen-html/a00026_source.html	/^<a name="l01829"><\/a>01829             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01830	doxygen-html/a00026_source.html	/^<a name="l01830"><\/a>01830             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01831	doxygen-html/a00026_source.html	/^<a name="l01831"><\/a>01831 $/;"	a
l01832	doxygen-html/a00026_source.html	/^<a name="l01832"><\/a>01832             n = inner-&gt;childid[slot];$/;"	a
l01833	doxygen-html/a00026_source.html	/^<a name="l01833"><\/a>01833         }$/;"	a
l01834	doxygen-html/a00026_source.html	/^<a name="l01834"><\/a>01834 $/;"	a
l01835	doxygen-html/a00026_source.html	/^<a name="l01835"><\/a>01835         <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01836	doxygen-html/a00026_source.html	/^<a name="l01836"><\/a>01836 $/;"	a
l01837	doxygen-html/a00026_source.html	/^<a name="l01837"><\/a>01837         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01838	doxygen-html/a00026_source.html	/^<a name="l01838"><\/a>01838         <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> num = 0;$/;"	a
l01839	doxygen-html/a00026_source.html	/^<a name="l01839"><\/a>01839 $/;"	a
l01840	doxygen-html/a00026_source.html	/^<a name="l01840"><\/a>01840         <span class="keywordflow">while<\/span> (leaf &amp;&amp; slot &lt; leaf-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot]))$/;"	a
l01841	doxygen-html/a00026_source.html	/^<a name="l01841"><\/a>01841         {$/;"	a
l01842	doxygen-html/a00026_source.html	/^<a name="l01842"><\/a>01842             ++num;$/;"	a
l01843	doxygen-html/a00026_source.html	/^<a name="l01843"><\/a>01843             <span class="keywordflow">if<\/span> (++slot &gt;= leaf-&gt;slotuse)$/;"	a
l01844	doxygen-html/a00026_source.html	/^<a name="l01844"><\/a>01844             {$/;"	a
l01845	doxygen-html/a00026_source.html	/^<a name="l01845"><\/a>01845                 leaf = leaf-&gt;nextleaf;$/;"	a
l01846	doxygen-html/a00026_source.html	/^<a name="l01846"><\/a>01846                 slot = 0;$/;"	a
l01847	doxygen-html/a00026_source.html	/^<a name="l01847"><\/a>01847             }$/;"	a
l01848	doxygen-html/a00026_source.html	/^<a name="l01848"><\/a>01848         }$/;"	a
l01849	doxygen-html/a00026_source.html	/^<a name="l01849"><\/a>01849 $/;"	a
l01850	doxygen-html/a00026_source.html	/^<a name="l01850"><\/a>01850         <span class="keywordflow">return<\/span> num;$/;"	a
l01851	doxygen-html/a00026_source.html	/^<a name="l01851"><\/a>01851     }$/;"	a
l01852	doxygen-html/a00026_source.html	/^<a name="l01852"><\/a>01852 <span class="comment"><\/span>$/;"	a
l01853	doxygen-html/a00026_source.html	/^<a name="l01853"><\/a>01853 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l01854	doxygen-html/a00026_source.html	/^<a name="l01854"><\/a>01854 <span class="comment">    \/\/\/ equal to or greater than key, or end() if all keys are smaller.<\/span>$/;"	a
l01855	doxygen-html/a00026_source.html	/^<a name="l01855"><\/a><a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e">01855<\/a> <span class="comment"><\/span>    iterator <a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l01856	doxygen-html/a00026_source.html	/^<a name="l01856"><\/a>01856     {$/;"	a
l01857	doxygen-html/a00026_source.html	/^<a name="l01857"><\/a>01857         node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01858	doxygen-html/a00026_source.html	/^<a name="l01858"><\/a>01858         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01859	doxygen-html/a00026_source.html	/^<a name="l01859"><\/a>01859 $/;"	a
l01860	doxygen-html/a00026_source.html	/^<a name="l01860"><\/a>01860         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01861	doxygen-html/a00026_source.html	/^<a name="l01861"><\/a>01861         {$/;"	a
l01862	doxygen-html/a00026_source.html	/^<a name="l01862"><\/a>01862             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01863	doxygen-html/a00026_source.html	/^<a name="l01863"><\/a>01863             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01864	doxygen-html/a00026_source.html	/^<a name="l01864"><\/a>01864 $/;"	a
l01865	doxygen-html/a00026_source.html	/^<a name="l01865"><\/a>01865             n = inner-&gt;childid[slot];$/;"	a
l01866	doxygen-html/a00026_source.html	/^<a name="l01866"><\/a>01866         }$/;"	a
l01867	doxygen-html/a00026_source.html	/^<a name="l01867"><\/a>01867 $/;"	a
l01868	doxygen-html/a00026_source.html	/^<a name="l01868"><\/a>01868         leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01869	doxygen-html/a00026_source.html	/^<a name="l01869"><\/a>01869 $/;"	a
l01870	doxygen-html/a00026_source.html	/^<a name="l01870"><\/a>01870         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01871	doxygen-html/a00026_source.html	/^<a name="l01871"><\/a>01871         <span class="keywordflow">return<\/span> iterator(leaf, slot);$/;"	a
l01872	doxygen-html/a00026_source.html	/^<a name="l01872"><\/a>01872     }$/;"	a
l01873	doxygen-html/a00026_source.html	/^<a name="l01873"><\/a>01873 <span class="comment"><\/span>$/;"	a
l01874	doxygen-html/a00026_source.html	/^<a name="l01874"><\/a>01874 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l01875	doxygen-html/a00026_source.html	/^<a name="l01875"><\/a>01875 <span class="comment">    \/\/\/ first pair equal to or greater than key, or end() if all keys<\/span>$/;"	a
l01876	doxygen-html/a00026_source.html	/^<a name="l01876"><\/a>01876 <span class="comment">    \/\/\/ are smaller.<\/span>$/;"	a
l01877	doxygen-html/a00026_source.html	/^<a name="l01877"><\/a><a class="code" href="a00001.html#a534f04efcbc017d34df9dfa9ad0e4047">01877<\/a> <span class="comment"><\/span>    const_iterator <a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l01878	doxygen-html/a00026_source.html	/^<a name="l01878"><\/a>01878 <span class="keyword">    <\/span>{$/;"	a
l01879	doxygen-html/a00026_source.html	/^<a name="l01879"><\/a>01879         <span class="keyword">const<\/span> node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01880	doxygen-html/a00026_source.html	/^<a name="l01880"><\/a>01880         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01881	doxygen-html/a00026_source.html	/^<a name="l01881"><\/a>01881 $/;"	a
l01882	doxygen-html/a00026_source.html	/^<a name="l01882"><\/a>01882         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01883	doxygen-html/a00026_source.html	/^<a name="l01883"><\/a>01883         {$/;"	a
l01884	doxygen-html/a00026_source.html	/^<a name="l01884"><\/a>01884             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01885	doxygen-html/a00026_source.html	/^<a name="l01885"><\/a>01885             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l01886	doxygen-html/a00026_source.html	/^<a name="l01886"><\/a>01886 $/;"	a
l01887	doxygen-html/a00026_source.html	/^<a name="l01887"><\/a>01887             n = inner-&gt;childid[slot];$/;"	a
l01888	doxygen-html/a00026_source.html	/^<a name="l01888"><\/a>01888         }$/;"	a
l01889	doxygen-html/a00026_source.html	/^<a name="l01889"><\/a>01889 $/;"	a
l01890	doxygen-html/a00026_source.html	/^<a name="l01890"><\/a>01890         <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01891	doxygen-html/a00026_source.html	/^<a name="l01891"><\/a>01891 $/;"	a
l01892	doxygen-html/a00026_source.html	/^<a name="l01892"><\/a>01892         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l01893	doxygen-html/a00026_source.html	/^<a name="l01893"><\/a>01893         <span class="keywordflow">return<\/span> const_iterator(leaf, slot);$/;"	a
l01894	doxygen-html/a00026_source.html	/^<a name="l01894"><\/a>01894     }$/;"	a
l01895	doxygen-html/a00026_source.html	/^<a name="l01895"><\/a>01895 <span class="comment"><\/span>$/;"	a
l01896	doxygen-html/a00026_source.html	/^<a name="l01896"><\/a>01896 <span class="comment">    \/\/\/ Searches the B+ tree and returns an iterator to the first pair<\/span>$/;"	a
l01897	doxygen-html/a00026_source.html	/^<a name="l01897"><\/a>01897 <span class="comment">    \/\/\/ greater than key, or end() if all keys are smaller or equal.<\/span>$/;"	a
l01898	doxygen-html/a00026_source.html	/^<a name="l01898"><\/a><a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2">01898<\/a> <span class="comment"><\/span>    iterator <a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l01899	doxygen-html/a00026_source.html	/^<a name="l01899"><\/a>01899     {$/;"	a
l01900	doxygen-html/a00026_source.html	/^<a name="l01900"><\/a>01900         node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01901	doxygen-html/a00026_source.html	/^<a name="l01901"><\/a>01901         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01902	doxygen-html/a00026_source.html	/^<a name="l01902"><\/a>01902 $/;"	a
l01903	doxygen-html/a00026_source.html	/^<a name="l01903"><\/a>01903         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01904	doxygen-html/a00026_source.html	/^<a name="l01904"><\/a>01904         {$/;"	a
l01905	doxygen-html/a00026_source.html	/^<a name="l01905"><\/a>01905             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01906	doxygen-html/a00026_source.html	/^<a name="l01906"><\/a>01906             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c" title="Searches for the first key in the node n greater than key.">find_upper<\/a>(inner, key);$/;"	a
l01907	doxygen-html/a00026_source.html	/^<a name="l01907"><\/a>01907 $/;"	a
l01908	doxygen-html/a00026_source.html	/^<a name="l01908"><\/a>01908             n = inner-&gt;childid[slot];$/;"	a
l01909	doxygen-html/a00026_source.html	/^<a name="l01909"><\/a>01909         }$/;"	a
l01910	doxygen-html/a00026_source.html	/^<a name="l01910"><\/a>01910 $/;"	a
l01911	doxygen-html/a00026_source.html	/^<a name="l01911"><\/a>01911         leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01912	doxygen-html/a00026_source.html	/^<a name="l01912"><\/a>01912 $/;"	a
l01913	doxygen-html/a00026_source.html	/^<a name="l01913"><\/a>01913         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c" title="Searches for the first key in the node n greater than key.">find_upper<\/a>(leaf, key);$/;"	a
l01914	doxygen-html/a00026_source.html	/^<a name="l01914"><\/a>01914         <span class="keywordflow">return<\/span> iterator(leaf, slot);$/;"	a
l01915	doxygen-html/a00026_source.html	/^<a name="l01915"><\/a>01915     }$/;"	a
l01916	doxygen-html/a00026_source.html	/^<a name="l01916"><\/a>01916 <span class="comment"><\/span>$/;"	a
l01917	doxygen-html/a00026_source.html	/^<a name="l01917"><\/a>01917 <span class="comment">    \/\/\/ Searches the B+ tree and returns a constant iterator to the<\/span>$/;"	a
l01918	doxygen-html/a00026_source.html	/^<a name="l01918"><\/a>01918 <span class="comment">    \/\/\/ first pair greater than key, or end() if all keys are smaller<\/span>$/;"	a
l01919	doxygen-html/a00026_source.html	/^<a name="l01919"><\/a>01919 <span class="comment">    \/\/\/ or equal.<\/span>$/;"	a
l01920	doxygen-html/a00026_source.html	/^<a name="l01920"><\/a><a class="code" href="a00001.html#a264d9835af5474e009eee3b617fa1411">01920<\/a> <span class="comment"><\/span>    const_iterator <a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l01921	doxygen-html/a00026_source.html	/^<a name="l01921"><\/a>01921 <span class="keyword">    <\/span>{$/;"	a
l01922	doxygen-html/a00026_source.html	/^<a name="l01922"><\/a>01922         <span class="keyword">const<\/span> node *n = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l01923	doxygen-html/a00026_source.html	/^<a name="l01923"><\/a>01923         <span class="keywordflow">if<\/span> (!n) <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>();$/;"	a
l01924	doxygen-html/a00026_source.html	/^<a name="l01924"><\/a>01924 $/;"	a
l01925	doxygen-html/a00026_source.html	/^<a name="l01925"><\/a>01925         <span class="keywordflow">while<\/span>(!n-&gt;isleafnode())$/;"	a
l01926	doxygen-html/a00026_source.html	/^<a name="l01926"><\/a>01926         {$/;"	a
l01927	doxygen-html/a00026_source.html	/^<a name="l01927"><\/a>01927             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01928	doxygen-html/a00026_source.html	/^<a name="l01928"><\/a>01928             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c" title="Searches for the first key in the node n greater than key.">find_upper<\/a>(inner, key);$/;"	a
l01929	doxygen-html/a00026_source.html	/^<a name="l01929"><\/a>01929 $/;"	a
l01930	doxygen-html/a00026_source.html	/^<a name="l01930"><\/a>01930             n = inner-&gt;childid[slot];$/;"	a
l01931	doxygen-html/a00026_source.html	/^<a name="l01931"><\/a>01931         }$/;"	a
l01932	doxygen-html/a00026_source.html	/^<a name="l01932"><\/a>01932 $/;"	a
l01933	doxygen-html/a00026_source.html	/^<a name="l01933"><\/a>01933         <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l01934	doxygen-html/a00026_source.html	/^<a name="l01934"><\/a>01934 $/;"	a
l01935	doxygen-html/a00026_source.html	/^<a name="l01935"><\/a>01935         <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a46ff197e60365a8cad59fd72f935b59c" title="Searches for the first key in the node n greater than key.">find_upper<\/a>(leaf, key);$/;"	a
l01936	doxygen-html/a00026_source.html	/^<a name="l01936"><\/a>01936         <span class="keywordflow">return<\/span> const_iterator(leaf, slot);$/;"	a
l01937	doxygen-html/a00026_source.html	/^<a name="l01937"><\/a>01937     }$/;"	a
l01938	doxygen-html/a00026_source.html	/^<a name="l01938"><\/a>01938 <span class="comment"><\/span>$/;"	a
l01939	doxygen-html/a00026_source.html	/^<a name="l01939"><\/a>01939 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l01940	doxygen-html/a00026_source.html	/^<a name="l01940"><\/a><a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90">01940<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, iterator&gt; <a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)$/;"	a
l01941	doxygen-html/a00026_source.html	/^<a name="l01941"><\/a>01941     {$/;"	a
l01942	doxygen-html/a00026_source.html	/^<a name="l01942"><\/a>01942         <span class="keywordflow">return<\/span> std::pair&lt;iterator, iterator&gt;(<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key), <a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key));$/;"	a
l01943	doxygen-html/a00026_source.html	/^<a name="l01943"><\/a>01943     }$/;"	a
l01944	doxygen-html/a00026_source.html	/^<a name="l01944"><\/a>01944 <span class="comment"><\/span>$/;"	a
l01945	doxygen-html/a00026_source.html	/^<a name="l01945"><\/a>01945 <span class="comment">    \/\/\/ Searches the B+ tree and returns both lower_bound() and upper_bound().<\/span>$/;"	a
l01946	doxygen-html/a00026_source.html	/^<a name="l01946"><\/a><a class="code" href="a00001.html#aed04d2ca76fe26b8a103abe8d988f4af">01946<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;const_iterator, const_iterator&gt; <a class="code" href="a00001.html#ac73cf4621b0650fef2ea3ea1d2fd2f90" title="Searches the B+ tree and returns both lower_bound() and upper_bound().">equal_range<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key)<span class="keyword"> const<\/span>$/;"	a
l01947	doxygen-html/a00026_source.html	/^<a name="l01947"><\/a>01947 <span class="keyword">    <\/span>{$/;"	a
l01948	doxygen-html/a00026_source.html	/^<a name="l01948"><\/a>01948         <span class="keywordflow">return<\/span> std::pair&lt;const_iterator, const_iterator&gt;(<a class="code" href="a00001.html#aa0b7c53085ef7106f3d430d850b4959e" title="Searches the B+ tree and returns an iterator to the first pair equal to or greater than key...">lower_bound<\/a>(key), <a class="code" href="a00001.html#a0404bb704466a149ea96613b7c5ef3e2" title="Searches the B+ tree and returns an iterator to the first pair greater than key, or end() if all keys...">upper_bound<\/a>(key));$/;"	a
l01949	doxygen-html/a00026_source.html	/^<a name="l01949"><\/a>01949     }$/;"	a
l01950	doxygen-html/a00026_source.html	/^<a name="l01950"><\/a>01950 $/;"	a
l01951	doxygen-html/a00026_source.html	/^<a name="l01951"><\/a>01951 <span class="keyword">public<\/span>:$/;"	a
l01952	doxygen-html/a00026_source.html	/^<a name="l01952"><\/a>01952     <span class="comment">\/\/ *** B+ Tree Object Comparison Functions<\/span>$/;"	a
l01953	doxygen-html/a00026_source.html	/^<a name="l01953"><\/a>01953 <span class="comment"><\/span>$/;"	a
l01954	doxygen-html/a00026_source.html	/^<a name="l01954"><\/a>01954 <span class="comment">    \/\/\/ Equality relation of B+ trees of the same type. B+ trees of the same<\/span>$/;"	a
l01955	doxygen-html/a00026_source.html	/^<a name="l01955"><\/a>01955 <span class="comment">    \/\/\/ size and equal elements (both key and data) are considered<\/span>$/;"	a
l01956	doxygen-html/a00026_source.html	/^<a name="l01956"><\/a>01956 <span class="comment">    \/\/\/ equal. Beware of the random ordering of duplicate keys.<\/span>$/;"	a
l01957	doxygen-html/a00026_source.html	/^<a name="l01957"><\/a><a class="code" href="a00001.html#af0c66916cc7315b98213bb0a276ad1c5">01957<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#af0c66916cc7315b98213bb0a276ad1c5" title="Equality relation of B+ trees of the same type.">operator==<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01958	doxygen-html/a00026_source.html	/^<a name="l01958"><\/a>01958 <span class="keyword">    <\/span>{$/;"	a
l01959	doxygen-html/a00026_source.html	/^<a name="l01959"><\/a>01959         <span class="keywordflow">return<\/span> (<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>() == other.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>()) &amp;&amp; std::equal(<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>(), <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>(), other.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>());$/;"	a
l01960	doxygen-html/a00026_source.html	/^<a name="l01960"><\/a>01960     }$/;"	a
l01961	doxygen-html/a00026_source.html	/^<a name="l01961"><\/a>01961 <span class="comment"><\/span>$/;"	a
l01962	doxygen-html/a00026_source.html	/^<a name="l01962"><\/a>01962 <span class="comment">    \/\/\/ Inequality relation. Based on operator==.<\/span>$/;"	a
l01963	doxygen-html/a00026_source.html	/^<a name="l01963"><\/a><a class="code" href="a00001.html#aa8d82a57e9d983487477fbab491fe77b">01963<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#aa8d82a57e9d983487477fbab491fe77b" title="Inequality relation. Based on operator==.">operator!=<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01964	doxygen-html/a00026_source.html	/^<a name="l01964"><\/a>01964 <span class="keyword">    <\/span>{$/;"	a
l01965	doxygen-html/a00026_source.html	/^<a name="l01965"><\/a>01965         <span class="keywordflow">return<\/span> !(*<span class="keyword">this<\/span> == other);$/;"	a
l01966	doxygen-html/a00026_source.html	/^<a name="l01966"><\/a>01966     }$/;"	a
l01967	doxygen-html/a00026_source.html	/^<a name="l01967"><\/a>01967 <span class="comment"><\/span>$/;"	a
l01968	doxygen-html/a00026_source.html	/^<a name="l01968"><\/a>01968 <span class="comment">    \/\/\/ Total ordering relation of B+ trees of the same type. It uses<\/span>$/;"	a
l01969	doxygen-html/a00026_source.html	/^<a name="l01969"><\/a>01969 <span class="comment">    \/\/\/ std::lexicographical_compare() for the actual comparison of elements.<\/span>$/;"	a
l01970	doxygen-html/a00026_source.html	/^<a name="l01970"><\/a><a class="code" href="a00001.html#a0861b6d445c1701ef81625676b88d08f">01970<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a0861b6d445c1701ef81625676b88d08f" title="Total ordering relation of B+ trees of the same type.">operator&lt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01971	doxygen-html/a00026_source.html	/^<a name="l01971"><\/a>01971 <span class="keyword">    <\/span>{$/;"	a
l01972	doxygen-html/a00026_source.html	/^<a name="l01972"><\/a>01972         <span class="keywordflow">return<\/span> std::lexicographical_compare(<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>(), <a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>(), other.<a class="code" href="a00001.html#a564a6ea78bcc0de0bbc1fdff65f547fd" title="Constructs a read\/data-write iterator that points to the first slot in the first leaf of the B+ tree...">begin<\/a>(), other.<a class="code" href="a00001.html#a8f1fbaf7eabefca66188e2bf6996573d" title="Constructs a read\/data-write iterator that points to the first invalid slot in the last leaf of the B...">end<\/a>());$/;"	a
l01973	doxygen-html/a00026_source.html	/^<a name="l01973"><\/a>01973     }$/;"	a
l01974	doxygen-html/a00026_source.html	/^<a name="l01974"><\/a>01974 <span class="comment"><\/span>$/;"	a
l01975	doxygen-html/a00026_source.html	/^<a name="l01975"><\/a>01975 <span class="comment">    \/\/\/ Greater relation. Based on operator&lt;.<\/span>$/;"	a
l01976	doxygen-html/a00026_source.html	/^<a name="l01976"><\/a><a class="code" href="a00001.html#aac294ce4d54a06978bb1bd1cb6b61994">01976<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#aac294ce4d54a06978bb1bd1cb6b61994" title="Greater relation. Based on operator&lt;.">operator&gt;<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01977	doxygen-html/a00026_source.html	/^<a name="l01977"><\/a>01977 <span class="keyword">    <\/span>{$/;"	a
l01978	doxygen-html/a00026_source.html	/^<a name="l01978"><\/a>01978         <span class="keywordflow">return<\/span> other &lt; *<span class="keyword">this<\/span>;$/;"	a
l01979	doxygen-html/a00026_source.html	/^<a name="l01979"><\/a>01979     }$/;"	a
l01980	doxygen-html/a00026_source.html	/^<a name="l01980"><\/a>01980 <span class="comment"><\/span>$/;"	a
l01981	doxygen-html/a00026_source.html	/^<a name="l01981"><\/a>01981 <span class="comment">    \/\/\/ Less-equal relation. Based on operator&lt;.<\/span>$/;"	a
l01982	doxygen-html/a00026_source.html	/^<a name="l01982"><\/a><a class="code" href="a00001.html#a9547e921eb277c76a7c5707668bcdb3d">01982<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a9547e921eb277c76a7c5707668bcdb3d" title="Less-equal relation. Based on operator&lt;.">operator&lt;=<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01983	doxygen-html/a00026_source.html	/^<a name="l01983"><\/a>01983 <span class="keyword">    <\/span>{$/;"	a
l01984	doxygen-html/a00026_source.html	/^<a name="l01984"><\/a>01984         <span class="keywordflow">return<\/span> !(other &lt; *<span class="keyword">this<\/span>);$/;"	a
l01985	doxygen-html/a00026_source.html	/^<a name="l01985"><\/a>01985     }$/;"	a
l01986	doxygen-html/a00026_source.html	/^<a name="l01986"><\/a>01986 <span class="comment"><\/span>$/;"	a
l01987	doxygen-html/a00026_source.html	/^<a name="l01987"><\/a>01987 <span class="comment">    \/\/\/ Greater-equal relation. Based on operator&lt;.<\/span>$/;"	a
l01988	doxygen-html/a00026_source.html	/^<a name="l01988"><\/a><a class="code" href="a00001.html#a820ebeacf8619198969de50fd3a406a3">01988<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a820ebeacf8619198969de50fd3a406a3" title="Greater-equal relation. Based on operator&lt;.">operator&gt;=<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)<span class="keyword"> const<\/span>$/;"	a
l01989	doxygen-html/a00026_source.html	/^<a name="l01989"><\/a>01989 <span class="keyword">    <\/span>{$/;"	a
l01990	doxygen-html/a00026_source.html	/^<a name="l01990"><\/a>01990         <span class="keywordflow">return<\/span> !(*<span class="keyword">this<\/span> &lt; other);$/;"	a
l01991	doxygen-html/a00026_source.html	/^<a name="l01991"><\/a>01991     }$/;"	a
l01992	doxygen-html/a00026_source.html	/^<a name="l01992"><\/a>01992 $/;"	a
l01993	doxygen-html/a00026_source.html	/^<a name="l01993"><\/a>01993 <span class="keyword">public<\/span>:<span class="comment"><\/span>$/;"	a
l01994	doxygen-html/a00026_source.html	/^<a name="l01994"><\/a>01994 <span class="comment">    \/\/\/ *** Fast Copy: Assign Operator and Copy Constructors<\/span>$/;"	a
l01995	doxygen-html/a00026_source.html	/^<a name="l01995"><\/a>01995 <span class="comment"><\/span><span class="comment"><\/span>$/;"	a
l01996	doxygen-html/a00026_source.html	/^<a name="l01996"><\/a>01996 <span class="comment">    \/\/\/ Assignment operator. All the key\/data pairs are copied<\/span>$/;"	a
l01997	doxygen-html/a00026_source.html	/^<a name="l01997"><\/a><a class="code" href="a00001.html#a888dd89447d0a1ad66276c208e52f348">01997<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a>&amp; <a class="code" href="a00001.html#a888dd89447d0a1ad66276c208e52f348" title="*** Fast Copy: Assign Operator and Copy Constructors">operator= <\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)$/;"	a
l01998	doxygen-html/a00026_source.html	/^<a name="l01998"><\/a>01998     {$/;"	a
l01999	doxygen-html/a00026_source.html	/^<a name="l01999"><\/a>01999         <span class="keywordflow">if<\/span> (<span class="keyword">this<\/span> != &amp;other)$/;"	a
l02000	doxygen-html/a00026_source.html	/^<a name="l02000"><\/a>02000         {$/;"	a
l02001	doxygen-html/a00026_source.html	/^<a name="l02001"><\/a>02001             <a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l02002	doxygen-html/a00026_source.html	/^<a name="l02002"><\/a>02002 $/;"	a
l02003	doxygen-html/a00026_source.html	/^<a name="l02003"><\/a>02003             <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a> = other.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>();$/;"	a
l02004	doxygen-html/a00026_source.html	/^<a name="l02004"><\/a>02004             <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a> = other.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>();$/;"	a
l02005	doxygen-html/a00026_source.html	/^<a name="l02005"><\/a>02005 $/;"	a
l02006	doxygen-html/a00026_source.html	/^<a name="l02006"><\/a>02006             <span class="keywordflow">if<\/span> (other.<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>() != 0)$/;"	a
l02007	doxygen-html/a00026_source.html	/^<a name="l02007"><\/a>02007             {$/;"	a
l02008	doxygen-html/a00026_source.html	/^<a name="l02008"><\/a>02008                 <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> = <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> = 0;$/;"	a
l02009	doxygen-html/a00026_source.html	/^<a name="l02009"><\/a>02009                 <span class="keywordflow">if<\/span> (other.<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) {$/;"	a
l02010	doxygen-html/a00026_source.html	/^<a name="l02010"><\/a>02010                     <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = <a class="code" href="a00001.html#abf107ac5589a59a068bdc648f02bf353" title="Recursively copy nodes from another B+ tree object.">copy_recursive<\/a>(other.<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02011	doxygen-html/a00026_source.html	/^<a name="l02011"><\/a>02011                 }$/;"	a
l02012	doxygen-html/a00026_source.html	/^<a name="l02012"><\/a>02012                 <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a> = other.<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>;$/;"	a
l02013	doxygen-html/a00026_source.html	/^<a name="l02013"><\/a>02013             }$/;"	a
l02014	doxygen-html/a00026_source.html	/^<a name="l02014"><\/a>02014 $/;"	a
l02015	doxygen-html/a00026_source.html	/^<a name="l02015"><\/a>02015             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02016	doxygen-html/a00026_source.html	/^<a name="l02016"><\/a>02016         }$/;"	a
l02017	doxygen-html/a00026_source.html	/^<a name="l02017"><\/a>02017         <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l02018	doxygen-html/a00026_source.html	/^<a name="l02018"><\/a>02018     }$/;"	a
l02019	doxygen-html/a00026_source.html	/^<a name="l02019"><\/a>02019 <span class="comment"><\/span>$/;"	a
l02020	doxygen-html/a00026_source.html	/^<a name="l02020"><\/a>02020 <span class="comment">    \/\/\/ Copy constructor. The newly initialized B+ tree object will contain a<\/span>$/;"	a
l02021	doxygen-html/a00026_source.html	/^<a name="l02021"><\/a>02021 <span class="comment">    \/\/\/ copy of all key\/data pairs.<\/span>$/;"	a
l02022	doxygen-html/a00026_source.html	/^<a name="l02022"><\/a><a class="code" href="a00001.html#a34a7b277c27f485c2237bdc73888ec74">02022<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> <a class="code" href="a00001.html#ab8d4b1a025d08beb515f5e3a8033deb4" title="Default constructor initializing an empty B+ tree with the standard key comparison function...">btree<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html" title="Basic class implementing a base B+ tree data structure in memory.">btree_self<\/a> &amp;other)$/;"	a
l02023	doxygen-html/a00026_source.html	/^<a name="l02023"><\/a>02023         : <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>(NULL), <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>(NULL), <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>(NULL),$/;"	a
l02024	doxygen-html/a00026_source.html	/^<a name="l02024"><\/a>02024           <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>( other.<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a> ),$/;"	a
l02025	doxygen-html/a00026_source.html	/^<a name="l02025"><\/a>02025           <a class="code" href="a00001.html#ab2994c7f5b38e618e894129e596d79d1" title="Key comparison object.">m_key_less<\/a>( other.<a class="code" href="a00001.html#a6200a8a00989f77f053e1200da7f816b" title="Constant access to the key comparison object sorting the B+ tree.">key_comp<\/a>() ),$/;"	a
l02026	doxygen-html/a00026_source.html	/^<a name="l02026"><\/a>02026           <a class="code" href="a00001.html#a36368c13e6be2feca3cbcc0aa8950b64" title="Memory allocator.">m_allocator<\/a>( other.<a class="code" href="a00001.html#ad7b097e1a4301e319d8a7e6f6bb661fd" title="Return the base node allocator provided during construction.">get_allocator<\/a>() )$/;"	a
l02027	doxygen-html/a00026_source.html	/^<a name="l02027"><\/a>02027     {$/;"	a
l02028	doxygen-html/a00026_source.html	/^<a name="l02028"><\/a>02028         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>() &gt; 0)$/;"	a
l02029	doxygen-html/a00026_source.html	/^<a name="l02029"><\/a>02029         {$/;"	a
l02030	doxygen-html/a00026_source.html	/^<a name="l02030"><\/a>02030             <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> = <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> = 0;$/;"	a
l02031	doxygen-html/a00026_source.html	/^<a name="l02031"><\/a>02031             <span class="keywordflow">if<\/span> (other.<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) {$/;"	a
l02032	doxygen-html/a00026_source.html	/^<a name="l02032"><\/a>02032                 <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = <a class="code" href="a00001.html#abf107ac5589a59a068bdc648f02bf353" title="Recursively copy nodes from another B+ tree object.">copy_recursive<\/a>(other.<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02033	doxygen-html/a00026_source.html	/^<a name="l02033"><\/a>02033             }$/;"	a
l02034	doxygen-html/a00026_source.html	/^<a name="l02034"><\/a>02034             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02035	doxygen-html/a00026_source.html	/^<a name="l02035"><\/a>02035         }$/;"	a
l02036	doxygen-html/a00026_source.html	/^<a name="l02036"><\/a>02036     }$/;"	a
l02037	doxygen-html/a00026_source.html	/^<a name="l02037"><\/a>02037 $/;"	a
l02038	doxygen-html/a00026_source.html	/^<a name="l02038"><\/a>02038 <span class="keyword">private<\/span>:<span class="comment"><\/span>$/;"	a
l02039	doxygen-html/a00026_source.html	/^<a name="l02039"><\/a>02039 <span class="comment">    \/\/\/ Recursively copy nodes from another B+ tree object<\/span>$/;"	a
l02040	doxygen-html/a00026_source.html	/^<a name="l02040"><\/a><a class="code" href="a00001.html#abf107ac5589a59a068bdc648f02bf353">02040<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span>node* <a class="code" href="a00001.html#abf107ac5589a59a068bdc648f02bf353" title="Recursively copy nodes from another B+ tree object.">copy_recursive<\/a>(<span class="keyword">const<\/span> node *n)$/;"	a
l02041	doxygen-html/a00026_source.html	/^<a name="l02041"><\/a>02041     {$/;"	a
l02042	doxygen-html/a00026_source.html	/^<a name="l02042"><\/a>02042         <span class="keywordflow">if<\/span> (n-&gt;isleafnode())$/;"	a
l02043	doxygen-html/a00026_source.html	/^<a name="l02043"><\/a>02043         {$/;"	a
l02044	doxygen-html/a00026_source.html	/^<a name="l02044"><\/a>02044             <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l02045	doxygen-html/a00026_source.html	/^<a name="l02045"><\/a>02045             leaf_node *newleaf = <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>();$/;"	a
l02046	doxygen-html/a00026_source.html	/^<a name="l02046"><\/a>02046 $/;"	a
l02047	doxygen-html/a00026_source.html	/^<a name="l02047"><\/a>02047             newleaf-&gt;slotuse = leaf-&gt;slotuse;$/;"	a
l02048	doxygen-html/a00026_source.html	/^<a name="l02048"><\/a>02048             std::copy(leaf-&gt;slotkey, leaf-&gt;slotkey + leaf-&gt;slotuse, newleaf-&gt;slotkey);$/;"	a
l02049	doxygen-html/a00026_source.html	/^<a name="l02049"><\/a>02049             <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(leaf-&gt;slotdata, leaf-&gt;slotdata + leaf-&gt;slotuse, newleaf-&gt;slotdata);$/;"	a
l02050	doxygen-html/a00026_source.html	/^<a name="l02050"><\/a>02050 $/;"	a
l02051	doxygen-html/a00026_source.html	/^<a name="l02051"><\/a>02051             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> == NULL)$/;"	a
l02052	doxygen-html/a00026_source.html	/^<a name="l02052"><\/a>02052             {$/;"	a
l02053	doxygen-html/a00026_source.html	/^<a name="l02053"><\/a>02053                 <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = newleaf;$/;"	a
l02054	doxygen-html/a00026_source.html	/^<a name="l02054"><\/a>02054                 newleaf-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = newleaf-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> = NULL;$/;"	a
l02055	doxygen-html/a00026_source.html	/^<a name="l02055"><\/a>02055             }$/;"	a
l02056	doxygen-html/a00026_source.html	/^<a name="l02056"><\/a>02056             <span class="keywordflow">else<\/span>$/;"	a
l02057	doxygen-html/a00026_source.html	/^<a name="l02057"><\/a>02057             {$/;"	a
l02058	doxygen-html/a00026_source.html	/^<a name="l02058"><\/a>02058                 newleaf-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>;$/;"	a
l02059	doxygen-html/a00026_source.html	/^<a name="l02059"><\/a>02059                 <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> = newleaf;$/;"	a
l02060	doxygen-html/a00026_source.html	/^<a name="l02060"><\/a>02060                 <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = newleaf;$/;"	a
l02061	doxygen-html/a00026_source.html	/^<a name="l02061"><\/a>02061             }$/;"	a
l02062	doxygen-html/a00026_source.html	/^<a name="l02062"><\/a>02062 $/;"	a
l02063	doxygen-html/a00026_source.html	/^<a name="l02063"><\/a>02063             <span class="keywordflow">return<\/span> newleaf;$/;"	a
l02064	doxygen-html/a00026_source.html	/^<a name="l02064"><\/a>02064         }$/;"	a
l02065	doxygen-html/a00026_source.html	/^<a name="l02065"><\/a>02065         <span class="keywordflow">else<\/span>$/;"	a
l02066	doxygen-html/a00026_source.html	/^<a name="l02066"><\/a>02066         {$/;"	a
l02067	doxygen-html/a00026_source.html	/^<a name="l02067"><\/a>02067             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l02068	doxygen-html/a00026_source.html	/^<a name="l02068"><\/a>02068             inner_node *newinner = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(inner-&gt;level);$/;"	a
l02069	doxygen-html/a00026_source.html	/^<a name="l02069"><\/a>02069 $/;"	a
l02070	doxygen-html/a00026_source.html	/^<a name="l02070"><\/a>02070             newinner-&gt;slotuse = inner-&gt;slotuse;$/;"	a
l02071	doxygen-html/a00026_source.html	/^<a name="l02071"><\/a>02071             std::copy(inner-&gt;slotkey, inner-&gt;slotkey + inner-&gt;slotuse, newinner-&gt;slotkey);$/;"	a
l02072	doxygen-html/a00026_source.html	/^<a name="l02072"><\/a>02072 $/;"	a
l02073	doxygen-html/a00026_source.html	/^<a name="l02073"><\/a>02073             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt;= inner-&gt;slotuse; ++slot)$/;"	a
l02074	doxygen-html/a00026_source.html	/^<a name="l02074"><\/a>02074             {$/;"	a
l02075	doxygen-html/a00026_source.html	/^<a name="l02075"><\/a>02075                 newinner-&gt;childid[slot] = <a class="code" href="a00001.html#abf107ac5589a59a068bdc648f02bf353" title="Recursively copy nodes from another B+ tree object.">copy_recursive<\/a>(inner-&gt;childid[slot]);$/;"	a
l02076	doxygen-html/a00026_source.html	/^<a name="l02076"><\/a>02076             }$/;"	a
l02077	doxygen-html/a00026_source.html	/^<a name="l02077"><\/a>02077 $/;"	a
l02078	doxygen-html/a00026_source.html	/^<a name="l02078"><\/a>02078             <span class="keywordflow">return<\/span> newinner;$/;"	a
l02079	doxygen-html/a00026_source.html	/^<a name="l02079"><\/a>02079         }$/;"	a
l02080	doxygen-html/a00026_source.html	/^<a name="l02080"><\/a>02080     }$/;"	a
l02081	doxygen-html/a00026_source.html	/^<a name="l02081"><\/a>02081 $/;"	a
l02082	doxygen-html/a00026_source.html	/^<a name="l02082"><\/a>02082 <span class="keyword">public<\/span>:$/;"	a
l02083	doxygen-html/a00026_source.html	/^<a name="l02083"><\/a>02083     <span class="comment">\/\/ *** Public Insertion Functions<\/span>$/;"	a
l02084	doxygen-html/a00026_source.html	/^<a name="l02084"><\/a>02084 <span class="comment"><\/span>$/;"	a
l02085	doxygen-html/a00026_source.html	/^<a name="l02085"><\/a>02085 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. If the tree does not<\/span>$/;"	a
l02086	doxygen-html/a00026_source.html	/^<a name="l02086"><\/a>02086 <span class="comment">    \/\/\/ allow duplicate keys, then the insert may fail if it is already<\/span>$/;"	a
l02087	doxygen-html/a00026_source.html	/^<a name="l02087"><\/a>02087 <span class="comment">    \/\/\/ present.<\/span>$/;"	a
l02088	doxygen-html/a00026_source.html	/^<a name="l02088"><\/a><a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053">02088<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a>&amp; x)$/;"	a
l02089	doxygen-html/a00026_source.html	/^<a name="l02089"><\/a>02089     {$/;"	a
l02090	doxygen-html/a00026_source.html	/^<a name="l02090"><\/a>02090         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(x.first, x.second);$/;"	a
l02091	doxygen-html/a00026_source.html	/^<a name="l02091"><\/a>02091     }$/;"	a
l02092	doxygen-html/a00026_source.html	/^<a name="l02092"><\/a>02092 <span class="comment"><\/span>$/;"	a
l02093	doxygen-html/a00026_source.html	/^<a name="l02093"><\/a>02093 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. Beware that if<\/span>$/;"	a
l02094	doxygen-html/a00026_source.html	/^<a name="l02094"><\/a>02094 <span class="comment">    \/\/\/ key_type == data_type, then the template iterator insert() is called<\/span>$/;"	a
l02095	doxygen-html/a00026_source.html	/^<a name="l02095"><\/a>02095 <span class="comment">    \/\/\/ instead. If the tree does not allow duplicate keys, then the insert may<\/span>$/;"	a
l02096	doxygen-html/a00026_source.html	/^<a name="l02096"><\/a>02096 <span class="comment">    \/\/\/ fail if it is already present.<\/span>$/;"	a
l02097	doxygen-html/a00026_source.html	/^<a name="l02097"><\/a><a class="code" href="a00001.html#a3728a56b1c508547d13420d4d2e6054c">02097<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l02098	doxygen-html/a00026_source.html	/^<a name="l02098"><\/a>02098     {$/;"	a
l02099	doxygen-html/a00026_source.html	/^<a name="l02099"><\/a>02099         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(key, data);$/;"	a
l02100	doxygen-html/a00026_source.html	/^<a name="l02100"><\/a>02100     }$/;"	a
l02101	doxygen-html/a00026_source.html	/^<a name="l02101"><\/a>02101 <span class="comment"><\/span>$/;"	a
l02102	doxygen-html/a00026_source.html	/^<a name="l02102"><\/a>02102 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. This function is the<\/span>$/;"	a
l02103	doxygen-html/a00026_source.html	/^<a name="l02103"><\/a>02103 <span class="comment">    \/\/\/ same as the other insert, however if key_type == data_type then the<\/span>$/;"	a
l02104	doxygen-html/a00026_source.html	/^<a name="l02104"><\/a>02104 <span class="comment">    \/\/\/ non-template function cannot be called. If the tree does not allow<\/span>$/;"	a
l02105	doxygen-html/a00026_source.html	/^<a name="l02105"><\/a>02105 <span class="comment">    \/\/\/ duplicate keys, then the insert may fail if it is already present.<\/span>$/;"	a
l02106	doxygen-html/a00026_source.html	/^<a name="l02106"><\/a><a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78">02106<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> std::pair&lt;iterator, bool&gt; <a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l02107	doxygen-html/a00026_source.html	/^<a name="l02107"><\/a>02107     {$/;"	a
l02108	doxygen-html/a00026_source.html	/^<a name="l02108"><\/a>02108         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(key, data);$/;"	a
l02109	doxygen-html/a00026_source.html	/^<a name="l02109"><\/a>02109     }$/;"	a
l02110	doxygen-html/a00026_source.html	/^<a name="l02110"><\/a>02110 <span class="comment"><\/span>$/;"	a
l02111	doxygen-html/a00026_source.html	/^<a name="l02111"><\/a>02111 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint<\/span>$/;"	a
l02112	doxygen-html/a00026_source.html	/^<a name="l02112"><\/a>02112 <span class="comment">    \/\/\/ is currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l02113	doxygen-html/a00026_source.html	/^<a name="l02113"><\/a><a class="code" href="a00001.html#a21d7a0745168857083ca888c5539275b">02113<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> iterator <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(iterator <span class="comment">\/* hint *\/<\/span>, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a2cddd431e50047766f45902b9f6f5c31" title="The pair of key_type and data_type, this may be different from value_type.">pair_type<\/a> &amp;x)$/;"	a
l02114	doxygen-html/a00026_source.html	/^<a name="l02114"><\/a>02114     {$/;"	a
l02115	doxygen-html/a00026_source.html	/^<a name="l02115"><\/a>02115         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(x.first, x.second).first;$/;"	a
l02116	doxygen-html/a00026_source.html	/^<a name="l02116"><\/a>02116     }$/;"	a
l02117	doxygen-html/a00026_source.html	/^<a name="l02117"><\/a>02117 <span class="comment"><\/span>$/;"	a
l02118	doxygen-html/a00026_source.html	/^<a name="l02118"><\/a>02118 <span class="comment">    \/\/\/ Attempt to insert a key\/data pair into the B+ tree. The iterator hint is<\/span>$/;"	a
l02119	doxygen-html/a00026_source.html	/^<a name="l02119"><\/a>02119 <span class="comment">    \/\/\/ currently ignored by the B+ tree insertion routine.<\/span>$/;"	a
l02120	doxygen-html/a00026_source.html	/^<a name="l02120"><\/a><a class="code" href="a00001.html#a255994ba0a472e0d8f13fea2951d63f9">02120<\/a> <span class="comment"><\/span>    <span class="keyword">inline<\/span> iterator <a class="code" href="a00001.html#a586dd230f8be24eaeebc75cc95196d78" title="Attempt to insert a key\/data pair into the B+ tree.">insert2<\/a>(iterator <span class="comment">\/* hint *\/<\/span>, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; data)$/;"	a
l02121	doxygen-html/a00026_source.html	/^<a name="l02121"><\/a>02121     {$/;"	a
l02122	doxygen-html/a00026_source.html	/^<a name="l02122"><\/a>02122         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(key, data).first;$/;"	a
l02123	doxygen-html/a00026_source.html	/^<a name="l02123"><\/a>02123     }$/;"	a
l02124	doxygen-html/a00026_source.html	/^<a name="l02124"><\/a>02124 <span class="comment"><\/span>$/;"	a
l02125	doxygen-html/a00026_source.html	/^<a name="l02125"><\/a>02125 <span class="comment">    \/\/\/ Attempt to insert the range [first,last) of value_type pairs into the<\/span>$/;"	a
l02126	doxygen-html/a00026_source.html	/^<a name="l02126"><\/a>02126 <span class="comment">    \/\/\/ B+ tree. Each key\/data pair is inserted individually; to bulk load the<\/span>$/;"	a
l02127	doxygen-html/a00026_source.html	/^<a name="l02127"><\/a>02127 <span class="comment">    \/\/\/ tree, use a constructor with range.<\/span>$/;"	a
l02128	doxygen-html/a00026_source.html	/^<a name="l02128"><\/a>02128 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> InputIterator&gt;$/;"	a
l02129	doxygen-html/a00026_source.html	/^<a name="l02129"><\/a><a class="code" href="a00001.html#aa72caeff37728fa324ed4ea406cee57b">02129<\/a>     <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(InputIterator first, InputIterator last)$/;"	a
l02130	doxygen-html/a00026_source.html	/^<a name="l02130"><\/a>02130     {$/;"	a
l02131	doxygen-html/a00026_source.html	/^<a name="l02131"><\/a>02131         InputIterator iter = first;$/;"	a
l02132	doxygen-html/a00026_source.html	/^<a name="l02132"><\/a>02132         <span class="keywordflow">while<\/span>(iter != last)$/;"	a
l02133	doxygen-html/a00026_source.html	/^<a name="l02133"><\/a>02133         {$/;"	a
l02134	doxygen-html/a00026_source.html	/^<a name="l02134"><\/a>02134             <a class="code" href="a00001.html#a29d3aa8b03d2def35a358aebb2853053" title="Attempt to insert a key\/data pair into the B+ tree.">insert<\/a>(*iter);$/;"	a
l02135	doxygen-html/a00026_source.html	/^<a name="l02135"><\/a>02135             ++iter;$/;"	a
l02136	doxygen-html/a00026_source.html	/^<a name="l02136"><\/a>02136         }$/;"	a
l02137	doxygen-html/a00026_source.html	/^<a name="l02137"><\/a>02137     }$/;"	a
l02138	doxygen-html/a00026_source.html	/^<a name="l02138"><\/a>02138 $/;"	a
l02139	doxygen-html/a00026_source.html	/^<a name="l02139"><\/a>02139 <span class="keyword">private<\/span>:$/;"	a
l02140	doxygen-html/a00026_source.html	/^<a name="l02140"><\/a>02140     <span class="comment">\/\/ *** Private Insertion Functions<\/span>$/;"	a
l02141	doxygen-html/a00026_source.html	/^<a name="l02141"><\/a>02141 <span class="comment"><\/span>$/;"	a
l02142	doxygen-html/a00026_source.html	/^<a name="l02142"><\/a>02142 <span class="comment">    \/\/\/ Start the insertion descent at the current root and handle root<\/span>$/;"	a
l02143	doxygen-html/a00026_source.html	/^<a name="l02143"><\/a>02143 <span class="comment">    \/\/\/ splits. Returns true if the item was inserted<\/span>$/;"	a
l02144	doxygen-html/a00026_source.html	/^<a name="l02144"><\/a><a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991">02144<\/a> <span class="comment"><\/span>    std::pair&lt;iterator, bool&gt; <a class="code" href="a00001.html#a0ec1af7db81bf48c6542eca6a126b991" title="Start the insertion descent at the current root and handle root splits.">insert_start<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; value)$/;"	a
l02145	doxygen-html/a00026_source.html	/^<a name="l02145"><\/a>02145     {$/;"	a
l02146	doxygen-html/a00026_source.html	/^<a name="l02146"><\/a>02146         node *newchild = NULL;$/;"	a
l02147	doxygen-html/a00026_source.html	/^<a name="l02147"><\/a>02147         <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> newkey = <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>();$/;"	a
l02148	doxygen-html/a00026_source.html	/^<a name="l02148"><\/a>02148 $/;"	a
l02149	doxygen-html/a00026_source.html	/^<a name="l02149"><\/a>02149         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> == NULL) {$/;"	a
l02150	doxygen-html/a00026_source.html	/^<a name="l02150"><\/a>02150             <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>();$/;"	a
l02151	doxygen-html/a00026_source.html	/^<a name="l02151"><\/a>02151         }$/;"	a
l02152	doxygen-html/a00026_source.html	/^<a name="l02152"><\/a>02152 $/;"	a
l02153	doxygen-html/a00026_source.html	/^<a name="l02153"><\/a>02153         std::pair&lt;iterator, bool&gt; r = <a class="code" href="a00001.html#a07898a6b8d2fcc51dc713c1096ce8fdf" title="Insert an item into the B+ tree.">insert_descend<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, key, value, &amp;newkey, &amp;newchild);$/;"	a
l02154	doxygen-html/a00026_source.html	/^<a name="l02154"><\/a>02154 $/;"	a
l02155	doxygen-html/a00026_source.html	/^<a name="l02155"><\/a>02155         <span class="keywordflow">if<\/span> (newchild)$/;"	a
l02156	doxygen-html/a00026_source.html	/^<a name="l02156"><\/a>02156         {$/;"	a
l02157	doxygen-html/a00026_source.html	/^<a name="l02157"><\/a>02157             inner_node *newroot = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>-&gt;<a class="code" href="a00018.html#a9204f647e868560552dddc001aac8a55" title="Level in the b-tree, if level == 0 -&gt; leaf node.">level<\/a> + 1);$/;"	a
l02158	doxygen-html/a00026_source.html	/^<a name="l02158"><\/a>02158             newroot-&gt;slotkey[0] = newkey;$/;"	a
l02159	doxygen-html/a00026_source.html	/^<a name="l02159"><\/a>02159 $/;"	a
l02160	doxygen-html/a00026_source.html	/^<a name="l02160"><\/a>02160             newroot-&gt;childid[0] = <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>;$/;"	a
l02161	doxygen-html/a00026_source.html	/^<a name="l02161"><\/a>02161             newroot-&gt;childid[1] = newchild;$/;"	a
l02162	doxygen-html/a00026_source.html	/^<a name="l02162"><\/a>02162 $/;"	a
l02163	doxygen-html/a00026_source.html	/^<a name="l02163"><\/a>02163             newroot-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> = 1;$/;"	a
l02164	doxygen-html/a00026_source.html	/^<a name="l02164"><\/a>02164 $/;"	a
l02165	doxygen-html/a00026_source.html	/^<a name="l02165"><\/a>02165             <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = newroot;$/;"	a
l02166	doxygen-html/a00026_source.html	/^<a name="l02166"><\/a>02166         }$/;"	a
l02167	doxygen-html/a00026_source.html	/^<a name="l02167"><\/a>02167 $/;"	a
l02168	doxygen-html/a00026_source.html	/^<a name="l02168"><\/a>02168         <span class="comment">\/\/ increment itemcount if the item was inserted<\/span>$/;"	a
l02169	doxygen-html/a00026_source.html	/^<a name="l02169"><\/a>02169         <span class="keywordflow">if<\/span> (r.second) ++<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>;$/;"	a
l02170	doxygen-html/a00026_source.html	/^<a name="l02170"><\/a>02170 $/;"	a
l02171	doxygen-html/a00026_source.html	/^<a name="l02171"><\/a>02171 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l02172	doxygen-html/a00026_source.html	/^<a name="l02172"><\/a>02172 <span class="preprocessor"><\/span>        <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a>) <a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::cout);$/;"	a
l02173	doxygen-html/a00026_source.html	/^<a name="l02173"><\/a>02173 <span class="preprocessor">#endif<\/span>$/;"	a
l02174	doxygen-html/a00026_source.html	/^<a name="l02174"><\/a>02174 <span class="preprocessor"><\/span>$/;"	a
l02175	doxygen-html/a00026_source.html	/^<a name="l02175"><\/a>02175         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) {$/;"	a
l02176	doxygen-html/a00026_source.html	/^<a name="l02176"><\/a>02176             <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02177	doxygen-html/a00026_source.html	/^<a name="l02177"><\/a>02177             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#a3c1b922d80faa7d5864237b4791a7961" title="Non-STL function checking whether a key is in the B+ tree.">exists<\/a>(key));$/;"	a
l02178	doxygen-html/a00026_source.html	/^<a name="l02178"><\/a>02178         }$/;"	a
l02179	doxygen-html/a00026_source.html	/^<a name="l02179"><\/a>02179 $/;"	a
l02180	doxygen-html/a00026_source.html	/^<a name="l02180"><\/a>02180         <span class="keywordflow">return<\/span> r;$/;"	a
l02181	doxygen-html/a00026_source.html	/^<a name="l02181"><\/a>02181     }$/;"	a
l02182	doxygen-html/a00026_source.html	/^<a name="l02182"><\/a>02182 <span class="comment"><\/span>$/;"	a
l02183	doxygen-html/a00026_source.html	/^<a name="l02183"><\/a>02183 <span class="comment">    \/**<\/span>$/;"	a
l02184	doxygen-html/a00026_source.html	/^<a name="l02184"><\/a>02184 <span class="comment">     * @brief Insert an item into the B+ tree.<\/span>$/;"	a
l02185	doxygen-html/a00026_source.html	/^<a name="l02185"><\/a>02185 <span class="comment">     *<\/span>$/;"	a
l02186	doxygen-html/a00026_source.html	/^<a name="l02186"><\/a>02186 <span class="comment">     * Descend down the nodes to a leaf, insert the key\/data pair in a free<\/span>$/;"	a
l02187	doxygen-html/a00026_source.html	/^<a name="l02187"><\/a>02187 <span class="comment">     * slot. If the node overflows, then it must be split and the new split<\/span>$/;"	a
l02188	doxygen-html/a00026_source.html	/^<a name="l02188"><\/a>02188 <span class="comment">     * node inserted into the parent. Unroll \/ this splitting up to the root.<\/span>$/;"	a
l02189	doxygen-html/a00026_source.html	/^<a name="l02189"><\/a>02189 <span class="comment">    *\/<\/span>$/;"	a
l02190	doxygen-html/a00026_source.html	/^<a name="l02190"><\/a><a class="code" href="a00001.html#a07898a6b8d2fcc51dc713c1096ce8fdf">02190<\/a>     std::pair&lt;iterator, bool&gt; <a class="code" href="a00001.html#a07898a6b8d2fcc51dc713c1096ce8fdf" title="Insert an item into the B+ tree.">insert_descend<\/a>(node* n,$/;"	a
l02191	doxygen-html/a00026_source.html	/^<a name="l02191"><\/a>02191                                              <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key, <span class="keyword">const<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">data_type<\/a>&amp; value,$/;"	a
l02192	doxygen-html/a00026_source.html	/^<a name="l02192"><\/a>02192                                              <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>* splitkey, node** splitnode)$/;"	a
l02193	doxygen-html/a00026_source.html	/^<a name="l02193"><\/a>02193     {$/;"	a
l02194	doxygen-html/a00026_source.html	/^<a name="l02194"><\/a>02194         <span class="keywordflow">if<\/span> (!n-&gt;isleafnode())$/;"	a
l02195	doxygen-html/a00026_source.html	/^<a name="l02195"><\/a>02195         {$/;"	a
l02196	doxygen-html/a00026_source.html	/^<a name="l02196"><\/a>02196             inner_node *inner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l02197	doxygen-html/a00026_source.html	/^<a name="l02197"><\/a>02197 $/;"	a
l02198	doxygen-html/a00026_source.html	/^<a name="l02198"><\/a>02198             <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> newkey = <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>();$/;"	a
l02199	doxygen-html/a00026_source.html	/^<a name="l02199"><\/a>02199             node *newchild = NULL;$/;"	a
l02200	doxygen-html/a00026_source.html	/^<a name="l02200"><\/a>02200 $/;"	a
l02201	doxygen-html/a00026_source.html	/^<a name="l02201"><\/a>02201             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l02202	doxygen-html/a00026_source.html	/^<a name="l02202"><\/a>02202 $/;"	a
l02203	doxygen-html/a00026_source.html	/^<a name="l02203"><\/a>02203             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::insert_descend into &quot;<\/span> &lt;&lt; inner-&gt;childid[slot]);$/;"	a
l02204	doxygen-html/a00026_source.html	/^<a name="l02204"><\/a>02204 $/;"	a
l02205	doxygen-html/a00026_source.html	/^<a name="l02205"><\/a>02205             std::pair&lt;iterator, bool&gt; r = <a class="code" href="a00001.html#a07898a6b8d2fcc51dc713c1096ce8fdf" title="Insert an item into the B+ tree.">insert_descend<\/a>(inner-&gt;childid[slot],$/;"	a
l02206	doxygen-html/a00026_source.html	/^<a name="l02206"><\/a>02206                                                          key, value, &amp;newkey, &amp;newchild);$/;"	a
l02207	doxygen-html/a00026_source.html	/^<a name="l02207"><\/a>02207 $/;"	a
l02208	doxygen-html/a00026_source.html	/^<a name="l02208"><\/a>02208             <span class="keywordflow">if<\/span> (newchild)$/;"	a
l02209	doxygen-html/a00026_source.html	/^<a name="l02209"><\/a>02209             {$/;"	a
l02210	doxygen-html/a00026_source.html	/^<a name="l02210"><\/a>02210                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::insert_descend newchild with key &quot;<\/span> &lt;&lt; newkey &lt;&lt; <span class="stringliteral">&quot; node &quot;<\/span> &lt;&lt; newchild &lt;&lt; <span class="stringliteral">&quot; at slot &quot;<\/span> &lt;&lt; slot);$/;"	a
l02211	doxygen-html/a00026_source.html	/^<a name="l02211"><\/a>02211 $/;"	a
l02212	doxygen-html/a00026_source.html	/^<a name="l02212"><\/a>02212                 <span class="keywordflow">if<\/span> (inner-&gt;isfull())$/;"	a
l02213	doxygen-html/a00026_source.html	/^<a name="l02213"><\/a>02213                 {$/;"	a
l02214	doxygen-html/a00026_source.html	/^<a name="l02214"><\/a>02214                     <a class="code" href="a00001.html#a5716fa91bd7418aed6dd62c33392e479" title="Split up an inner node into two equally-filled sibling nodes.">split_inner_node<\/a>(inner, splitkey, splitnode, slot);$/;"	a
l02215	doxygen-html/a00026_source.html	/^<a name="l02215"><\/a>02215 $/;"	a
l02216	doxygen-html/a00026_source.html	/^<a name="l02216"><\/a>02216                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::insert_descend done split_inner: putslot: &quot;<\/span> &lt;&lt; slot &lt;&lt; <span class="stringliteral">&quot; putkey: &quot;<\/span> &lt;&lt; newkey &lt;&lt; <span class="stringliteral">&quot; upkey: &quot;<\/span> &lt;&lt; *splitkey);$/;"	a
l02217	doxygen-html/a00026_source.html	/^<a name="l02217"><\/a>02217 $/;"	a
l02218	doxygen-html/a00026_source.html	/^<a name="l02218"><\/a>02218 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l02219	doxygen-html/a00026_source.html	/^<a name="l02219"><\/a>02219 <span class="preprocessor"><\/span>                    <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a>)$/;"	a
l02220	doxygen-html/a00026_source.html	/^<a name="l02220"><\/a>02220                     {$/;"	a
l02221	doxygen-html/a00026_source.html	/^<a name="l02221"><\/a>02221                         <a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4" title="Recursively descend down the tree and print out nodes.">print_node<\/a>(std::cout, inner);$/;"	a
l02222	doxygen-html/a00026_source.html	/^<a name="l02222"><\/a>02222                         <a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4" title="Recursively descend down the tree and print out nodes.">print_node<\/a>(std::cout, *splitnode);$/;"	a
l02223	doxygen-html/a00026_source.html	/^<a name="l02223"><\/a>02223                     }$/;"	a
l02224	doxygen-html/a00026_source.html	/^<a name="l02224"><\/a>02224 <span class="preprocessor">#endif<\/span>$/;"	a
l02225	doxygen-html/a00026_source.html	/^<a name="l02225"><\/a>02225 <span class="preprocessor"><\/span>$/;"	a
l02226	doxygen-html/a00026_source.html	/^<a name="l02226"><\/a>02226                     <span class="comment">\/\/ check if insert slot is in the split sibling node<\/span>$/;"	a
l02227	doxygen-html/a00026_source.html	/^<a name="l02227"><\/a>02227                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::insert_descend switch: &quot;<\/span> &lt;&lt; slot &lt;&lt; <span class="stringliteral">&quot; &gt; &quot;<\/span> &lt;&lt; inner-&gt;slotuse+1);$/;"	a
l02228	doxygen-html/a00026_source.html	/^<a name="l02228"><\/a>02228 $/;"	a
l02229	doxygen-html/a00026_source.html	/^<a name="l02229"><\/a>02229                     <span class="keywordflow">if<\/span> (slot == inner-&gt;slotuse+1 &amp;&amp; inner-&gt;slotuse &lt; (*splitnode)-&gt;slotuse)$/;"	a
l02230	doxygen-html/a00026_source.html	/^<a name="l02230"><\/a>02230                     {$/;"	a
l02231	doxygen-html/a00026_source.html	/^<a name="l02231"><\/a>02231                         <span class="comment">\/\/ special case when the insert slot matches the split<\/span>$/;"	a
l02232	doxygen-html/a00026_source.html	/^<a name="l02232"><\/a>02232                         <span class="comment">\/\/ place between the two nodes, then the insert key<\/span>$/;"	a
l02233	doxygen-html/a00026_source.html	/^<a name="l02233"><\/a>02233                         <span class="comment">\/\/ becomes the split key.<\/span>$/;"	a
l02234	doxygen-html/a00026_source.html	/^<a name="l02234"><\/a>02234 $/;"	a
l02235	doxygen-html/a00026_source.html	/^<a name="l02235"><\/a>02235                         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;slotuse + 1 &lt; <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>);$/;"	a
l02236	doxygen-html/a00026_source.html	/^<a name="l02236"><\/a>02236 $/;"	a
l02237	doxygen-html/a00026_source.html	/^<a name="l02237"><\/a>02237                         inner_node *splitinner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(*splitnode);$/;"	a
l02238	doxygen-html/a00026_source.html	/^<a name="l02238"><\/a>02238 $/;"	a
l02239	doxygen-html/a00026_source.html	/^<a name="l02239"><\/a>02239                         <span class="comment">\/\/ move the split key and it&#39;s datum into the left node<\/span>$/;"	a
l02240	doxygen-html/a00026_source.html	/^<a name="l02240"><\/a>02240                         inner-&gt;slotkey[inner-&gt;slotuse] = *splitkey;$/;"	a
l02241	doxygen-html/a00026_source.html	/^<a name="l02241"><\/a>02241                         inner-&gt;childid[inner-&gt;slotuse+1] = splitinner-&gt;childid[0];$/;"	a
l02242	doxygen-html/a00026_source.html	/^<a name="l02242"><\/a>02242                         inner-&gt;slotuse++;$/;"	a
l02243	doxygen-html/a00026_source.html	/^<a name="l02243"><\/a>02243 $/;"	a
l02244	doxygen-html/a00026_source.html	/^<a name="l02244"><\/a>02244                         <span class="comment">\/\/ set new split key and move corresponding datum into right node<\/span>$/;"	a
l02245	doxygen-html/a00026_source.html	/^<a name="l02245"><\/a>02245                         splitinner-&gt;childid[0] = newchild;$/;"	a
l02246	doxygen-html/a00026_source.html	/^<a name="l02246"><\/a>02246                         *splitkey = newkey;$/;"	a
l02247	doxygen-html/a00026_source.html	/^<a name="l02247"><\/a>02247 $/;"	a
l02248	doxygen-html/a00026_source.html	/^<a name="l02248"><\/a>02248                         <span class="keywordflow">return<\/span> r;$/;"	a
l02249	doxygen-html/a00026_source.html	/^<a name="l02249"><\/a>02249                     }$/;"	a
l02250	doxygen-html/a00026_source.html	/^<a name="l02250"><\/a>02250                     <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (slot &gt;= inner-&gt;slotuse+1)$/;"	a
l02251	doxygen-html/a00026_source.html	/^<a name="l02251"><\/a>02251                     {$/;"	a
l02252	doxygen-html/a00026_source.html	/^<a name="l02252"><\/a>02252                         <span class="comment">\/\/ in case the insert slot is in the newly create split<\/span>$/;"	a
l02253	doxygen-html/a00026_source.html	/^<a name="l02253"><\/a>02253                         <span class="comment">\/\/ node, we reuse the code below.<\/span>$/;"	a
l02254	doxygen-html/a00026_source.html	/^<a name="l02254"><\/a>02254 $/;"	a
l02255	doxygen-html/a00026_source.html	/^<a name="l02255"><\/a>02255                         slot -= inner-&gt;slotuse+1;$/;"	a
l02256	doxygen-html/a00026_source.html	/^<a name="l02256"><\/a>02256                         inner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(*splitnode);$/;"	a
l02257	doxygen-html/a00026_source.html	/^<a name="l02257"><\/a>02257                         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::insert_descend switching to splitted node &quot;<\/span> &lt;&lt; inner &lt;&lt; <span class="stringliteral">&quot; slot &quot;<\/span> &lt;&lt; slot);$/;"	a
l02258	doxygen-html/a00026_source.html	/^<a name="l02258"><\/a>02258                     }$/;"	a
l02259	doxygen-html/a00026_source.html	/^<a name="l02259"><\/a>02259                 }$/;"	a
l02260	doxygen-html/a00026_source.html	/^<a name="l02260"><\/a>02260 $/;"	a
l02261	doxygen-html/a00026_source.html	/^<a name="l02261"><\/a>02261                 <span class="comment">\/\/ move items and put pointer to child node into correct slot<\/span>$/;"	a
l02262	doxygen-html/a00026_source.html	/^<a name="l02262"><\/a>02262                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(slot &gt;= 0 &amp;&amp; slot &lt;= inner-&gt;slotuse);$/;"	a
l02263	doxygen-html/a00026_source.html	/^<a name="l02263"><\/a>02263 $/;"	a
l02264	doxygen-html/a00026_source.html	/^<a name="l02264"><\/a>02264                 std::copy_backward(inner-&gt;slotkey + slot, inner-&gt;slotkey + inner-&gt;slotuse,$/;"	a
l02265	doxygen-html/a00026_source.html	/^<a name="l02265"><\/a>02265                                    inner-&gt;slotkey + inner-&gt;slotuse+1);$/;"	a
l02266	doxygen-html/a00026_source.html	/^<a name="l02266"><\/a>02266                 std::copy_backward(inner-&gt;childid + slot, inner-&gt;childid + inner-&gt;slotuse+1,$/;"	a
l02267	doxygen-html/a00026_source.html	/^<a name="l02267"><\/a>02267                                    inner-&gt;childid + inner-&gt;slotuse+2);$/;"	a
l02268	doxygen-html/a00026_source.html	/^<a name="l02268"><\/a>02268 $/;"	a
l02269	doxygen-html/a00026_source.html	/^<a name="l02269"><\/a>02269                 inner-&gt;slotkey[slot] = newkey;$/;"	a
l02270	doxygen-html/a00026_source.html	/^<a name="l02270"><\/a>02270                 inner-&gt;childid[slot + 1] = newchild;$/;"	a
l02271	doxygen-html/a00026_source.html	/^<a name="l02271"><\/a>02271                 inner-&gt;slotuse++;$/;"	a
l02272	doxygen-html/a00026_source.html	/^<a name="l02272"><\/a>02272             }$/;"	a
l02273	doxygen-html/a00026_source.html	/^<a name="l02273"><\/a>02273 $/;"	a
l02274	doxygen-html/a00026_source.html	/^<a name="l02274"><\/a>02274             <span class="keywordflow">return<\/span> r;$/;"	a
l02275	doxygen-html/a00026_source.html	/^<a name="l02275"><\/a>02275         }$/;"	a
l02276	doxygen-html/a00026_source.html	/^<a name="l02276"><\/a>02276         <span class="keywordflow">else<\/span> <span class="comment">\/\/ n-&gt;isleafnode() == true<\/span>$/;"	a
l02277	doxygen-html/a00026_source.html	/^<a name="l02277"><\/a>02277         {$/;"	a
l02278	doxygen-html/a00026_source.html	/^<a name="l02278"><\/a>02278             leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l02279	doxygen-html/a00026_source.html	/^<a name="l02279"><\/a>02279 $/;"	a
l02280	doxygen-html/a00026_source.html	/^<a name="l02280"><\/a>02280             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l02281	doxygen-html/a00026_source.html	/^<a name="l02281"><\/a>02281 $/;"	a
l02282	doxygen-html/a00026_source.html	/^<a name="l02282"><\/a>02282             <span class="keywordflow">if<\/span> (!<a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a> &amp;&amp; slot &lt; leaf-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot])) {$/;"	a
l02283	doxygen-html/a00026_source.html	/^<a name="l02283"><\/a>02283                 <span class="keywordflow">return<\/span> std::pair&lt;iterator, bool&gt;(iterator(leaf, slot), <span class="keyword">false<\/span>);$/;"	a
l02284	doxygen-html/a00026_source.html	/^<a name="l02284"><\/a>02284             }$/;"	a
l02285	doxygen-html/a00026_source.html	/^<a name="l02285"><\/a>02285 $/;"	a
l02286	doxygen-html/a00026_source.html	/^<a name="l02286"><\/a>02286             <span class="keywordflow">if<\/span> (leaf-&gt;isfull())$/;"	a
l02287	doxygen-html/a00026_source.html	/^<a name="l02287"><\/a>02287             {$/;"	a
l02288	doxygen-html/a00026_source.html	/^<a name="l02288"><\/a>02288                 <a class="code" href="a00001.html#ac82d4e07a4397d91c9fb5b124d229fb0" title="Split up a leaf node into two equally-filled sibling leaves.">split_leaf_node<\/a>(leaf, splitkey, splitnode);$/;"	a
l02289	doxygen-html/a00026_source.html	/^<a name="l02289"><\/a>02289 $/;"	a
l02290	doxygen-html/a00026_source.html	/^<a name="l02290"><\/a>02290                 <span class="comment">\/\/ check if insert slot is in the split sibling node<\/span>$/;"	a
l02291	doxygen-html/a00026_source.html	/^<a name="l02291"><\/a>02291                 <span class="keywordflow">if<\/span> (slot &gt;= leaf-&gt;slotuse)$/;"	a
l02292	doxygen-html/a00026_source.html	/^<a name="l02292"><\/a>02292                 {$/;"	a
l02293	doxygen-html/a00026_source.html	/^<a name="l02293"><\/a>02293                     slot -= leaf-&gt;slotuse;$/;"	a
l02294	doxygen-html/a00026_source.html	/^<a name="l02294"><\/a>02294                     leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(*splitnode);$/;"	a
l02295	doxygen-html/a00026_source.html	/^<a name="l02295"><\/a>02295                 }$/;"	a
l02296	doxygen-html/a00026_source.html	/^<a name="l02296"><\/a>02296             }$/;"	a
l02297	doxygen-html/a00026_source.html	/^<a name="l02297"><\/a>02297 $/;"	a
l02298	doxygen-html/a00026_source.html	/^<a name="l02298"><\/a>02298             <span class="comment">\/\/ move items and put data item into correct data slot<\/span>$/;"	a
l02299	doxygen-html/a00026_source.html	/^<a name="l02299"><\/a>02299             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(slot &gt;= 0 &amp;&amp; slot &lt;= leaf-&gt;slotuse);$/;"	a
l02300	doxygen-html/a00026_source.html	/^<a name="l02300"><\/a>02300 $/;"	a
l02301	doxygen-html/a00026_source.html	/^<a name="l02301"><\/a>02301             std::copy_backward(leaf-&gt;slotkey + slot, leaf-&gt;slotkey + leaf-&gt;slotuse,$/;"	a
l02302	doxygen-html/a00026_source.html	/^<a name="l02302"><\/a>02302                                leaf-&gt;slotkey + leaf-&gt;slotuse+1);$/;"	a
l02303	doxygen-html/a00026_source.html	/^<a name="l02303"><\/a>02303             <a class="code" href="a00001.html#a555a24bfd925a5d77bba28041d207f8d" title="Convenient template function for conditional copying of slotdata.">data_copy_backward<\/a>(leaf-&gt;slotdata + slot, leaf-&gt;slotdata + leaf-&gt;slotuse,$/;"	a
l02304	doxygen-html/a00026_source.html	/^<a name="l02304"><\/a>02304                                leaf-&gt;slotdata + leaf-&gt;slotuse+1);$/;"	a
l02305	doxygen-html/a00026_source.html	/^<a name="l02305"><\/a>02305 $/;"	a
l02306	doxygen-html/a00026_source.html	/^<a name="l02306"><\/a>02306             leaf-&gt;slotkey[slot] = key;$/;"	a
l02307	doxygen-html/a00026_source.html	/^<a name="l02307"><\/a>02307             <span class="keywordflow">if<\/span> (!<a class="code" href="a00001.html#a636973c0a66512d36c7aa833435ad023" title="Eighth template parameter: boolean indicator whether the btree is used as a set.">used_as_set<\/a>) leaf-&gt;slotdata[slot] = value;$/;"	a
l02308	doxygen-html/a00026_source.html	/^<a name="l02308"><\/a>02308             leaf-&gt;slotuse++;$/;"	a
l02309	doxygen-html/a00026_source.html	/^<a name="l02309"><\/a>02309 $/;"	a
l02310	doxygen-html/a00026_source.html	/^<a name="l02310"><\/a>02310             <span class="keywordflow">if<\/span> (splitnode &amp;&amp; leaf != *splitnode &amp;&amp; slot == leaf-&gt;slotuse-1)$/;"	a
l02311	doxygen-html/a00026_source.html	/^<a name="l02311"><\/a>02311             {$/;"	a
l02312	doxygen-html/a00026_source.html	/^<a name="l02312"><\/a>02312                 <span class="comment">\/\/ special case: the node was split, and the insert is at the<\/span>$/;"	a
l02313	doxygen-html/a00026_source.html	/^<a name="l02313"><\/a>02313                 <span class="comment">\/\/ last slot of the old node. then the splitkey must be<\/span>$/;"	a
l02314	doxygen-html/a00026_source.html	/^<a name="l02314"><\/a>02314                 <span class="comment">\/\/ updated.<\/span>$/;"	a
l02315	doxygen-html/a00026_source.html	/^<a name="l02315"><\/a>02315                 *splitkey = key;$/;"	a
l02316	doxygen-html/a00026_source.html	/^<a name="l02316"><\/a>02316             }$/;"	a
l02317	doxygen-html/a00026_source.html	/^<a name="l02317"><\/a>02317 $/;"	a
l02318	doxygen-html/a00026_source.html	/^<a name="l02318"><\/a>02318             <span class="keywordflow">return<\/span> std::pair&lt;iterator, bool&gt;(iterator(leaf, slot), <span class="keyword">true<\/span>);$/;"	a
l02319	doxygen-html/a00026_source.html	/^<a name="l02319"><\/a>02319         }$/;"	a
l02320	doxygen-html/a00026_source.html	/^<a name="l02320"><\/a>02320     }$/;"	a
l02321	doxygen-html/a00026_source.html	/^<a name="l02321"><\/a>02321 <span class="comment"><\/span>$/;"	a
l02322	doxygen-html/a00026_source.html	/^<a name="l02322"><\/a>02322 <span class="comment">    \/\/\/ Split up a leaf node into two equally-filled sibling leaves. Returns<\/span>$/;"	a
l02323	doxygen-html/a00026_source.html	/^<a name="l02323"><\/a>02323 <span class="comment">    \/\/\/ the new nodes and it&#39;s insertion key in the two parameters.<\/span>$/;"	a
l02324	doxygen-html/a00026_source.html	/^<a name="l02324"><\/a><a class="code" href="a00001.html#ac82d4e07a4397d91c9fb5b124d229fb0">02324<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#ac82d4e07a4397d91c9fb5b124d229fb0" title="Split up a leaf node into two equally-filled sibling leaves.">split_leaf_node<\/a>(leaf_node* leaf, <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>* _newkey, node** _newleaf)$/;"	a
l02325	doxygen-html/a00026_source.html	/^<a name="l02325"><\/a>02325     {$/;"	a
l02326	doxygen-html/a00026_source.html	/^<a name="l02326"><\/a>02326         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf-&gt;isfull());$/;"	a
l02327	doxygen-html/a00026_source.html	/^<a name="l02327"><\/a>02327 $/;"	a
l02328	doxygen-html/a00026_source.html	/^<a name="l02328"><\/a>02328         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> mid = (leaf-&gt;slotuse &gt;&gt; 1);$/;"	a
l02329	doxygen-html/a00026_source.html	/^<a name="l02329"><\/a>02329 $/;"	a
l02330	doxygen-html/a00026_source.html	/^<a name="l02330"><\/a>02330         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::split_leaf_node on &quot;<\/span> &lt;&lt; leaf);$/;"	a
l02331	doxygen-html/a00026_source.html	/^<a name="l02331"><\/a>02331 $/;"	a
l02332	doxygen-html/a00026_source.html	/^<a name="l02332"><\/a>02332         leaf_node *newleaf = <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>();$/;"	a
l02333	doxygen-html/a00026_source.html	/^<a name="l02333"><\/a>02333 $/;"	a
l02334	doxygen-html/a00026_source.html	/^<a name="l02334"><\/a>02334         newleaf-&gt;slotuse = leaf-&gt;slotuse - mid;$/;"	a
l02335	doxygen-html/a00026_source.html	/^<a name="l02335"><\/a>02335 $/;"	a
l02336	doxygen-html/a00026_source.html	/^<a name="l02336"><\/a>02336         newleaf-&gt;nextleaf = leaf-&gt;nextleaf;$/;"	a
l02337	doxygen-html/a00026_source.html	/^<a name="l02337"><\/a>02337         <span class="keywordflow">if<\/span> (newleaf-&gt;nextleaf == NULL) {$/;"	a
l02338	doxygen-html/a00026_source.html	/^<a name="l02338"><\/a>02338             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf == <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>);$/;"	a
l02339	doxygen-html/a00026_source.html	/^<a name="l02339"><\/a>02339             <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = newleaf;$/;"	a
l02340	doxygen-html/a00026_source.html	/^<a name="l02340"><\/a>02340         }$/;"	a
l02341	doxygen-html/a00026_source.html	/^<a name="l02341"><\/a>02341         <span class="keywordflow">else<\/span> {$/;"	a
l02342	doxygen-html/a00026_source.html	/^<a name="l02342"><\/a>02342             newleaf-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = newleaf;$/;"	a
l02343	doxygen-html/a00026_source.html	/^<a name="l02343"><\/a>02343         }$/;"	a
l02344	doxygen-html/a00026_source.html	/^<a name="l02344"><\/a>02344 $/;"	a
l02345	doxygen-html/a00026_source.html	/^<a name="l02345"><\/a>02345         std::copy(leaf-&gt;slotkey + mid, leaf-&gt;slotkey + leaf-&gt;slotuse,$/;"	a
l02346	doxygen-html/a00026_source.html	/^<a name="l02346"><\/a>02346                   newleaf-&gt;slotkey);$/;"	a
l02347	doxygen-html/a00026_source.html	/^<a name="l02347"><\/a>02347         <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(leaf-&gt;slotdata + mid, leaf-&gt;slotdata + leaf-&gt;slotuse,$/;"	a
l02348	doxygen-html/a00026_source.html	/^<a name="l02348"><\/a>02348                   newleaf-&gt;slotdata);$/;"	a
l02349	doxygen-html/a00026_source.html	/^<a name="l02349"><\/a>02349 $/;"	a
l02350	doxygen-html/a00026_source.html	/^<a name="l02350"><\/a>02350         leaf-&gt;slotuse = mid;$/;"	a
l02351	doxygen-html/a00026_source.html	/^<a name="l02351"><\/a>02351         leaf-&gt;nextleaf = newleaf;$/;"	a
l02352	doxygen-html/a00026_source.html	/^<a name="l02352"><\/a>02352         newleaf-&gt;prevleaf = leaf;$/;"	a
l02353	doxygen-html/a00026_source.html	/^<a name="l02353"><\/a>02353 $/;"	a
l02354	doxygen-html/a00026_source.html	/^<a name="l02354"><\/a>02354         *_newkey = leaf-&gt;slotkey[leaf-&gt;slotuse-1];$/;"	a
l02355	doxygen-html/a00026_source.html	/^<a name="l02355"><\/a>02355         *_newleaf = newleaf;$/;"	a
l02356	doxygen-html/a00026_source.html	/^<a name="l02356"><\/a>02356     }$/;"	a
l02357	doxygen-html/a00026_source.html	/^<a name="l02357"><\/a>02357 <span class="comment"><\/span>$/;"	a
l02358	doxygen-html/a00026_source.html	/^<a name="l02358"><\/a>02358 <span class="comment">    \/\/\/ Split up an inner node into two equally-filled sibling nodes. Returns<\/span>$/;"	a
l02359	doxygen-html/a00026_source.html	/^<a name="l02359"><\/a>02359 <span class="comment">    \/\/\/ the new nodes and it&#39;s insertion key in the two parameters. Requires<\/span>$/;"	a
l02360	doxygen-html/a00026_source.html	/^<a name="l02360"><\/a>02360 <span class="comment">    \/\/\/ the slot of the item will be inserted, so the nodes will be the same<\/span>$/;"	a
l02361	doxygen-html/a00026_source.html	/^<a name="l02361"><\/a>02361 <span class="comment">    \/\/\/ size after the insert.<\/span>$/;"	a
l02362	doxygen-html/a00026_source.html	/^<a name="l02362"><\/a><a class="code" href="a00001.html#a5716fa91bd7418aed6dd62c33392e479">02362<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a5716fa91bd7418aed6dd62c33392e479" title="Split up an inner node into two equally-filled sibling nodes.">split_inner_node<\/a>(inner_node* inner, <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>* _newkey, node** _newinner, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> addslot)$/;"	a
l02363	doxygen-html/a00026_source.html	/^<a name="l02363"><\/a>02363     {$/;"	a
l02364	doxygen-html/a00026_source.html	/^<a name="l02364"><\/a>02364         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;isfull());$/;"	a
l02365	doxygen-html/a00026_source.html	/^<a name="l02365"><\/a>02365 $/;"	a
l02366	doxygen-html/a00026_source.html	/^<a name="l02366"><\/a>02366         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> mid = (inner-&gt;slotuse &gt;&gt; 1);$/;"	a
l02367	doxygen-html/a00026_source.html	/^<a name="l02367"><\/a>02367 $/;"	a
l02368	doxygen-html/a00026_source.html	/^<a name="l02368"><\/a>02368         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::split_inner: mid &quot;<\/span> &lt;&lt; mid &lt;&lt; <span class="stringliteral">&quot; addslot &quot;<\/span> &lt;&lt; addslot);$/;"	a
l02369	doxygen-html/a00026_source.html	/^<a name="l02369"><\/a>02369 $/;"	a
l02370	doxygen-html/a00026_source.html	/^<a name="l02370"><\/a>02370         <span class="comment">\/\/ if the split is uneven and the overflowing item will be put into the<\/span>$/;"	a
l02371	doxygen-html/a00026_source.html	/^<a name="l02371"><\/a>02371         <span class="comment">\/\/ larger node, then the smaller split node may underflow<\/span>$/;"	a
l02372	doxygen-html/a00026_source.html	/^<a name="l02372"><\/a>02372         <span class="keywordflow">if<\/span> (addslot &lt;= mid &amp;&amp; mid &gt; inner-&gt;slotuse - (mid + 1))$/;"	a
l02373	doxygen-html/a00026_source.html	/^<a name="l02373"><\/a>02373             mid--;$/;"	a
l02374	doxygen-html/a00026_source.html	/^<a name="l02374"><\/a>02374 $/;"	a
l02375	doxygen-html/a00026_source.html	/^<a name="l02375"><\/a>02375         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::split_inner: mid &quot;<\/span> &lt;&lt; mid &lt;&lt; <span class="stringliteral">&quot; addslot &quot;<\/span> &lt;&lt; addslot);$/;"	a
l02376	doxygen-html/a00026_source.html	/^<a name="l02376"><\/a>02376 $/;"	a
l02377	doxygen-html/a00026_source.html	/^<a name="l02377"><\/a>02377         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::split_inner_node on &quot;<\/span> &lt;&lt; inner &lt;&lt; <span class="stringliteral">&quot; into two nodes &quot;<\/span> &lt;&lt; mid &lt;&lt; <span class="stringliteral">&quot; and &quot;<\/span> &lt;&lt; inner-&gt;slotuse - (mid + 1) &lt;&lt; <span class="stringliteral">&quot; sized&quot;<\/span>);$/;"	a
l02378	doxygen-html/a00026_source.html	/^<a name="l02378"><\/a>02378 $/;"	a
l02379	doxygen-html/a00026_source.html	/^<a name="l02379"><\/a>02379         inner_node *newinner = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(inner-&gt;level);$/;"	a
l02380	doxygen-html/a00026_source.html	/^<a name="l02380"><\/a>02380 $/;"	a
l02381	doxygen-html/a00026_source.html	/^<a name="l02381"><\/a>02381         newinner-&gt;slotuse = inner-&gt;slotuse - (mid + 1);$/;"	a
l02382	doxygen-html/a00026_source.html	/^<a name="l02382"><\/a>02382 $/;"	a
l02383	doxygen-html/a00026_source.html	/^<a name="l02383"><\/a>02383         std::copy(inner-&gt;slotkey + mid+1, inner-&gt;slotkey + inner-&gt;slotuse,$/;"	a
l02384	doxygen-html/a00026_source.html	/^<a name="l02384"><\/a>02384                   newinner-&gt;slotkey);$/;"	a
l02385	doxygen-html/a00026_source.html	/^<a name="l02385"><\/a>02385         std::copy(inner-&gt;childid + mid+1, inner-&gt;childid + inner-&gt;slotuse+1,$/;"	a
l02386	doxygen-html/a00026_source.html	/^<a name="l02386"><\/a>02386                   newinner-&gt;childid);$/;"	a
l02387	doxygen-html/a00026_source.html	/^<a name="l02387"><\/a>02387 $/;"	a
l02388	doxygen-html/a00026_source.html	/^<a name="l02388"><\/a>02388         inner-&gt;slotuse = mid;$/;"	a
l02389	doxygen-html/a00026_source.html	/^<a name="l02389"><\/a>02389 $/;"	a
l02390	doxygen-html/a00026_source.html	/^<a name="l02390"><\/a>02390         *_newkey = inner-&gt;slotkey[mid];$/;"	a
l02391	doxygen-html/a00026_source.html	/^<a name="l02391"><\/a>02391         *_newinner = newinner;$/;"	a
l02392	doxygen-html/a00026_source.html	/^<a name="l02392"><\/a>02392     }$/;"	a
l02393	doxygen-html/a00026_source.html	/^<a name="l02393"><\/a>02393 $/;"	a
l02394	doxygen-html/a00026_source.html	/^<a name="l02394"><\/a>02394 <span class="keyword">public<\/span>:$/;"	a
l02395	doxygen-html/a00026_source.html	/^<a name="l02395"><\/a>02395 $/;"	a
l02396	doxygen-html/a00026_source.html	/^<a name="l02396"><\/a>02396     <span class="comment">\/\/ *** Bulk Loader - Construct Tree from Sorted Sequence<\/span>$/;"	a
l02397	doxygen-html/a00026_source.html	/^<a name="l02397"><\/a>02397 <span class="comment"><\/span>$/;"	a
l02398	doxygen-html/a00026_source.html	/^<a name="l02398"><\/a>02398 <span class="comment">    \/\/\/ Bulk load a sorted range. Loads items into leaves and constructs a<\/span>$/;"	a
l02399	doxygen-html/a00026_source.html	/^<a name="l02399"><\/a>02399 <span class="comment">    \/\/\/ B-tree above them. The tree must be empty when calling this function.<\/span>$/;"	a
l02400	doxygen-html/a00026_source.html	/^<a name="l02400"><\/a>02400 <span class="comment"><\/span>    <span class="keyword">template<\/span> &lt;<span class="keyword">typename<\/span> Iterator&gt;$/;"	a
l02401	doxygen-html/a00026_source.html	/^<a name="l02401"><\/a><a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656">02401<\/a>     <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a053c808858d78e6f0a93041ab612d656" title="Bulk load a sorted range.">bulk_load<\/a>(Iterator ibegin, Iterator iend)$/;"	a
l02402	doxygen-html/a00026_source.html	/^<a name="l02402"><\/a>02402     {$/;"	a
l02403	doxygen-html/a00026_source.html	/^<a name="l02403"><\/a>02403         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ad7cf0c4833d2ea3fcd79df4c884bab40" title="Returns true if there is at least one key\/data pair in the B+ tree.">empty<\/a>());$/;"	a
l02404	doxygen-html/a00026_source.html	/^<a name="l02404"><\/a>02404 $/;"	a
l02405	doxygen-html/a00026_source.html	/^<a name="l02405"><\/a>02405         <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> = iend - ibegin;$/;"	a
l02406	doxygen-html/a00026_source.html	/^<a name="l02406"><\/a>02406 $/;"	a
l02407	doxygen-html/a00026_source.html	/^<a name="l02407"><\/a>02407         <span class="comment">\/\/ calculate number of leaves needed, round up.<\/span>$/;"	a
l02408	doxygen-html/a00026_source.html	/^<a name="l02408"><\/a>02408         <span class="keywordtype">size_t<\/span> num_items = iend - ibegin;$/;"	a
l02409	doxygen-html/a00026_source.html	/^<a name="l02409"><\/a>02409         <span class="keywordtype">size_t<\/span> num_leaves = (num_items + <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>-1) \/ <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>;$/;"	a
l02410	doxygen-html/a00026_source.html	/^<a name="l02410"><\/a>02410 $/;"	a
l02411	doxygen-html/a00026_source.html	/^<a name="l02411"><\/a>02411         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::bulk_load, level 0: &quot;<\/span> &lt;&lt; <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> &lt;&lt; <span class="stringliteral">&quot; items into &quot;<\/span> &lt;&lt; num_leaves &lt;&lt; <span class="stringliteral">&quot; leaves with up to &quot;<\/span> &lt;&lt; ((iend - ibegin + num_leaves-1) \/ num_leaves) &lt;&lt; <span class="stringliteral">&quot; items per leaf.&quot;<\/span>);$/;"	a
l02412	doxygen-html/a00026_source.html	/^<a name="l02412"><\/a>02412 $/;"	a
l02413	doxygen-html/a00026_source.html	/^<a name="l02413"><\/a>02413         Iterator it = ibegin;$/;"	a
l02414	doxygen-html/a00026_source.html	/^<a name="l02414"><\/a>02414         <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; num_leaves; ++i)$/;"	a
l02415	doxygen-html/a00026_source.html	/^<a name="l02415"><\/a>02415         {$/;"	a
l02416	doxygen-html/a00026_source.html	/^<a name="l02416"><\/a>02416             <span class="comment">\/\/ allocate new leaf node<\/span>$/;"	a
l02417	doxygen-html/a00026_source.html	/^<a name="l02417"><\/a>02417             leaf_node* leaf = <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>();$/;"	a
l02418	doxygen-html/a00026_source.html	/^<a name="l02418"><\/a>02418 $/;"	a
l02419	doxygen-html/a00026_source.html	/^<a name="l02419"><\/a>02419             <span class="comment">\/\/ copy keys or (key,value) pairs into leaf nodes, uses template<\/span>$/;"	a
l02420	doxygen-html/a00026_source.html	/^<a name="l02420"><\/a>02420             <span class="comment">\/\/ switch leaf-&gt;set_slot().<\/span>$/;"	a
l02421	doxygen-html/a00026_source.html	/^<a name="l02421"><\/a>02421             leaf-&gt;slotuse = <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">int<\/span><span class="keyword">&gt;<\/span>(num_items \/ (num_leaves-i));$/;"	a
l02422	doxygen-html/a00026_source.html	/^<a name="l02422"><\/a>02422             <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> s = 0; s &lt; leaf-&gt;slotuse; ++s, ++it)$/;"	a
l02423	doxygen-html/a00026_source.html	/^<a name="l02423"><\/a>02423                 leaf-&gt;set_slot(s, *it);$/;"	a
l02424	doxygen-html/a00026_source.html	/^<a name="l02424"><\/a>02424 $/;"	a
l02425	doxygen-html/a00026_source.html	/^<a name="l02425"><\/a>02425             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> != NULL) {$/;"	a
l02426	doxygen-html/a00026_source.html	/^<a name="l02426"><\/a>02426                 <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> = leaf;$/;"	a
l02427	doxygen-html/a00026_source.html	/^<a name="l02427"><\/a>02427                 leaf-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>;$/;"	a
l02428	doxygen-html/a00026_source.html	/^<a name="l02428"><\/a>02428             }$/;"	a
l02429	doxygen-html/a00026_source.html	/^<a name="l02429"><\/a>02429             <span class="keywordflow">else<\/span> {$/;"	a
l02430	doxygen-html/a00026_source.html	/^<a name="l02430"><\/a>02430                 <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = leaf;$/;"	a
l02431	doxygen-html/a00026_source.html	/^<a name="l02431"><\/a>02431             }$/;"	a
l02432	doxygen-html/a00026_source.html	/^<a name="l02432"><\/a>02432             <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = leaf;$/;"	a
l02433	doxygen-html/a00026_source.html	/^<a name="l02433"><\/a>02433 $/;"	a
l02434	doxygen-html/a00026_source.html	/^<a name="l02434"><\/a>02434             num_items -= leaf-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a>;$/;"	a
l02435	doxygen-html/a00026_source.html	/^<a name="l02435"><\/a>02435         }$/;"	a
l02436	doxygen-html/a00026_source.html	/^<a name="l02436"><\/a>02436 $/;"	a
l02437	doxygen-html/a00026_source.html	/^<a name="l02437"><\/a>02437         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>( it == iend &amp;&amp; num_items == 0 );$/;"	a
l02438	doxygen-html/a00026_source.html	/^<a name="l02438"><\/a>02438 $/;"	a
l02439	doxygen-html/a00026_source.html	/^<a name="l02439"><\/a>02439         <span class="comment">\/\/ if the btree is so small to fit into one leaf, then we&#39;re done.<\/span>$/;"	a
l02440	doxygen-html/a00026_source.html	/^<a name="l02440"><\/a>02440         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> == <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>) {$/;"	a
l02441	doxygen-html/a00026_source.html	/^<a name="l02441"><\/a>02441             <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>;$/;"	a
l02442	doxygen-html/a00026_source.html	/^<a name="l02442"><\/a>02442             <span class="keywordflow">return<\/span>;$/;"	a
l02443	doxygen-html/a00026_source.html	/^<a name="l02443"><\/a>02443         }$/;"	a
l02444	doxygen-html/a00026_source.html	/^<a name="l02444"><\/a>02444 $/;"	a
l02445	doxygen-html/a00026_source.html	/^<a name="l02445"><\/a>02445         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>( <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> == num_leaves );$/;"	a
l02446	doxygen-html/a00026_source.html	/^<a name="l02446"><\/a>02446 $/;"	a
l02447	doxygen-html/a00026_source.html	/^<a name="l02447"><\/a>02447         <span class="comment">\/\/ create first level of inner nodes, pointing to the leaves.<\/span>$/;"	a
l02448	doxygen-html/a00026_source.html	/^<a name="l02448"><\/a>02448         <span class="keywordtype">size_t<\/span> num_parents = (num_leaves + (<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>+1)-1) \/ (<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>+1);$/;"	a
l02449	doxygen-html/a00026_source.html	/^<a name="l02449"><\/a>02449 $/;"	a
l02450	doxygen-html/a00026_source.html	/^<a name="l02450"><\/a>02450         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::bulk_load, level 1: &quot;<\/span> &lt;&lt; num_leaves &lt;&lt; <span class="stringliteral">&quot; leaves in &quot;<\/span> &lt;&lt; num_parents &lt;&lt; <span class="stringliteral">&quot; inner nodes with up to &quot;<\/span> &lt;&lt; ((num_leaves + num_parents-1) \/ num_parents) &lt;&lt; <span class="stringliteral">&quot; leaves per inner node.&quot;<\/span>);$/;"	a
l02451	doxygen-html/a00026_source.html	/^<a name="l02451"><\/a>02451 $/;"	a
l02452	doxygen-html/a00026_source.html	/^<a name="l02452"><\/a>02452         <span class="comment">\/\/ save inner nodes and maxkey for next level.<\/span>$/;"	a
l02453	doxygen-html/a00026_source.html	/^<a name="l02453"><\/a>02453         <span class="keyword">typedef<\/span> std::pair&lt;inner_node*, const key_type*&gt; nextlevel_type;$/;"	a
l02454	doxygen-html/a00026_source.html	/^<a name="l02454"><\/a>02454         nextlevel_type* nextlevel = <span class="keyword">new<\/span> nextlevel_type[num_parents];$/;"	a
l02455	doxygen-html/a00026_source.html	/^<a name="l02455"><\/a>02455 $/;"	a
l02456	doxygen-html/a00026_source.html	/^<a name="l02456"><\/a>02456         leaf_node* leaf = <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>;$/;"	a
l02457	doxygen-html/a00026_source.html	/^<a name="l02457"><\/a>02457         <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; num_parents; ++i)$/;"	a
l02458	doxygen-html/a00026_source.html	/^<a name="l02458"><\/a>02458         {$/;"	a
l02459	doxygen-html/a00026_source.html	/^<a name="l02459"><\/a>02459             <span class="comment">\/\/ allocate new inner node at level 1<\/span>$/;"	a
l02460	doxygen-html/a00026_source.html	/^<a name="l02460"><\/a>02460             inner_node* n = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(1);$/;"	a
l02461	doxygen-html/a00026_source.html	/^<a name="l02461"><\/a>02461 $/;"	a
l02462	doxygen-html/a00026_source.html	/^<a name="l02462"><\/a>02462             n-&gt;slotuse = <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">int<\/span><span class="keyword">&gt;<\/span>(num_leaves \/ (num_parents-i));$/;"	a
l02463	doxygen-html/a00026_source.html	/^<a name="l02463"><\/a>02463             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(n-&gt;slotuse &gt; 0);$/;"	a
l02464	doxygen-html/a00026_source.html	/^<a name="l02464"><\/a>02464             --n-&gt;slotuse; <span class="comment">\/\/ this counts keys, but an inner node has keys+1 children.<\/span>$/;"	a
l02465	doxygen-html/a00026_source.html	/^<a name="l02465"><\/a>02465 $/;"	a
l02466	doxygen-html/a00026_source.html	/^<a name="l02466"><\/a>02466             <span class="comment">\/\/ copy last key from each leaf and set child<\/span>$/;"	a
l02467	doxygen-html/a00026_source.html	/^<a name="l02467"><\/a>02467             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s = 0; s &lt; n-&gt;slotuse; ++s)$/;"	a
l02468	doxygen-html/a00026_source.html	/^<a name="l02468"><\/a>02468             {$/;"	a
l02469	doxygen-html/a00026_source.html	/^<a name="l02469"><\/a>02469                 n-&gt;slotkey[s] = leaf-&gt;slotkey[leaf-&gt;slotuse-1];$/;"	a
l02470	doxygen-html/a00026_source.html	/^<a name="l02470"><\/a>02470                 n-&gt;childid[s] = leaf;$/;"	a
l02471	doxygen-html/a00026_source.html	/^<a name="l02471"><\/a>02471                 leaf = leaf-&gt;nextleaf;$/;"	a
l02472	doxygen-html/a00026_source.html	/^<a name="l02472"><\/a>02472             }$/;"	a
l02473	doxygen-html/a00026_source.html	/^<a name="l02473"><\/a>02473             n-&gt;childid[n-&gt;slotuse] = leaf;$/;"	a
l02474	doxygen-html/a00026_source.html	/^<a name="l02474"><\/a>02474 $/;"	a
l02475	doxygen-html/a00026_source.html	/^<a name="l02475"><\/a>02475             <span class="comment">\/\/ track max key of any descendant.<\/span>$/;"	a
l02476	doxygen-html/a00026_source.html	/^<a name="l02476"><\/a>02476             nextlevel[i].first = n;$/;"	a
l02477	doxygen-html/a00026_source.html	/^<a name="l02477"><\/a>02477             nextlevel[i].second = &amp;leaf-&gt;slotkey[leaf-&gt;slotuse-1];$/;"	a
l02478	doxygen-html/a00026_source.html	/^<a name="l02478"><\/a>02478 $/;"	a
l02479	doxygen-html/a00026_source.html	/^<a name="l02479"><\/a>02479             leaf = leaf-&gt;nextleaf;$/;"	a
l02480	doxygen-html/a00026_source.html	/^<a name="l02480"><\/a>02480             num_leaves -= n-&gt;slotuse+1;$/;"	a
l02481	doxygen-html/a00026_source.html	/^<a name="l02481"><\/a>02481         }$/;"	a
l02482	doxygen-html/a00026_source.html	/^<a name="l02482"><\/a>02482 $/;"	a
l02483	doxygen-html/a00026_source.html	/^<a name="l02483"><\/a>02483         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>( leaf == NULL &amp;&amp; num_leaves == 0 );$/;"	a
l02484	doxygen-html/a00026_source.html	/^<a name="l02484"><\/a>02484 $/;"	a
l02485	doxygen-html/a00026_source.html	/^<a name="l02485"><\/a>02485         <span class="comment">\/\/ recursively build inner nodes pointing to inner nodes.<\/span>$/;"	a
l02486	doxygen-html/a00026_source.html	/^<a name="l02486"><\/a>02486         <span class="keywordflow">for<\/span> (<span class="keywordtype">int<\/span> level = 2; num_parents != 1; ++level)$/;"	a
l02487	doxygen-html/a00026_source.html	/^<a name="l02487"><\/a>02487         {$/;"	a
l02488	doxygen-html/a00026_source.html	/^<a name="l02488"><\/a>02488             <span class="keywordtype">size_t<\/span> num_children = num_parents;$/;"	a
l02489	doxygen-html/a00026_source.html	/^<a name="l02489"><\/a>02489             num_parents = (num_children + (<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>+1)-1) \/ (<a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>+1);$/;"	a
l02490	doxygen-html/a00026_source.html	/^<a name="l02490"><\/a>02490 $/;"	a
l02491	doxygen-html/a00026_source.html	/^<a name="l02491"><\/a>02491             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::bulk_load, level &quot;<\/span> &lt;&lt; level &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; num_children &lt;&lt; <span class="stringliteral">&quot; children in &quot;<\/span> &lt;&lt; num_parents &lt;&lt; <span class="stringliteral">&quot; inner nodes with up to &quot;<\/span> &lt;&lt; ((num_children + num_parents-1) \/ num_parents) &lt;&lt; <span class="stringliteral">&quot; children per inner node.&quot;<\/span>);$/;"	a
l02492	doxygen-html/a00026_source.html	/^<a name="l02492"><\/a>02492 $/;"	a
l02493	doxygen-html/a00026_source.html	/^<a name="l02493"><\/a>02493             <span class="keywordtype">size_t<\/span> inner_index = 0;$/;"	a
l02494	doxygen-html/a00026_source.html	/^<a name="l02494"><\/a>02494             <span class="keywordflow">for<\/span> (<span class="keywordtype">size_t<\/span> i = 0; i &lt; num_parents; ++i)$/;"	a
l02495	doxygen-html/a00026_source.html	/^<a name="l02495"><\/a>02495             {$/;"	a
l02496	doxygen-html/a00026_source.html	/^<a name="l02496"><\/a>02496                 <span class="comment">\/\/ allocate new inner node at level<\/span>$/;"	a
l02497	doxygen-html/a00026_source.html	/^<a name="l02497"><\/a>02497                 inner_node* n = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(level);$/;"	a
l02498	doxygen-html/a00026_source.html	/^<a name="l02498"><\/a>02498 $/;"	a
l02499	doxygen-html/a00026_source.html	/^<a name="l02499"><\/a>02499                 n-&gt;slotuse = <span class="keyword">static_cast&lt;<\/span><span class="keywordtype">int<\/span><span class="keyword">&gt;<\/span>(num_children \/ (num_parents-i));$/;"	a
l02500	doxygen-html/a00026_source.html	/^<a name="l02500"><\/a>02500                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(n-&gt;slotuse &gt; 0);$/;"	a
l02501	doxygen-html/a00026_source.html	/^<a name="l02501"><\/a>02501                 --n-&gt;slotuse; <span class="comment">\/\/ this counts keys, but an inner node has keys+1 children.<\/span>$/;"	a
l02502	doxygen-html/a00026_source.html	/^<a name="l02502"><\/a>02502 $/;"	a
l02503	doxygen-html/a00026_source.html	/^<a name="l02503"><\/a>02503                 <span class="comment">\/\/ copy children and maxkeys from nextlevel<\/span>$/;"	a
l02504	doxygen-html/a00026_source.html	/^<a name="l02504"><\/a>02504                 <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> s = 0; s &lt; n-&gt;slotuse; ++s)$/;"	a
l02505	doxygen-html/a00026_source.html	/^<a name="l02505"><\/a>02505                 {$/;"	a
l02506	doxygen-html/a00026_source.html	/^<a name="l02506"><\/a>02506                     n-&gt;slotkey[s] = *nextlevel[inner_index].second;$/;"	a
l02507	doxygen-html/a00026_source.html	/^<a name="l02507"><\/a>02507                     n-&gt;childid[s] = nextlevel[inner_index].first;$/;"	a
l02508	doxygen-html/a00026_source.html	/^<a name="l02508"><\/a>02508                     ++inner_index;$/;"	a
l02509	doxygen-html/a00026_source.html	/^<a name="l02509"><\/a>02509                 }$/;"	a
l02510	doxygen-html/a00026_source.html	/^<a name="l02510"><\/a>02510                 n-&gt;childid[n-&gt;slotuse] = nextlevel[inner_index].first;$/;"	a
l02511	doxygen-html/a00026_source.html	/^<a name="l02511"><\/a>02511 $/;"	a
l02512	doxygen-html/a00026_source.html	/^<a name="l02512"><\/a>02512                 <span class="comment">\/\/ reuse nextlevel array for parents, because we can overwrite<\/span>$/;"	a
l02513	doxygen-html/a00026_source.html	/^<a name="l02513"><\/a>02513                 <span class="comment">\/\/ slots we&#39;ve already consumed.<\/span>$/;"	a
l02514	doxygen-html/a00026_source.html	/^<a name="l02514"><\/a>02514                 nextlevel[i].first = n;$/;"	a
l02515	doxygen-html/a00026_source.html	/^<a name="l02515"><\/a>02515                 nextlevel[i].second = nextlevel[inner_index].second;$/;"	a
l02516	doxygen-html/a00026_source.html	/^<a name="l02516"><\/a>02516 $/;"	a
l02517	doxygen-html/a00026_source.html	/^<a name="l02517"><\/a>02517                 ++inner_index;$/;"	a
l02518	doxygen-html/a00026_source.html	/^<a name="l02518"><\/a>02518                 num_children -= n-&gt;slotuse+1;$/;"	a
l02519	doxygen-html/a00026_source.html	/^<a name="l02519"><\/a>02519             }$/;"	a
l02520	doxygen-html/a00026_source.html	/^<a name="l02520"><\/a>02520 $/;"	a
l02521	doxygen-html/a00026_source.html	/^<a name="l02521"><\/a>02521             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>( num_children == 0 );$/;"	a
l02522	doxygen-html/a00026_source.html	/^<a name="l02522"><\/a>02522         }$/;"	a
l02523	doxygen-html/a00026_source.html	/^<a name="l02523"><\/a>02523 $/;"	a
l02524	doxygen-html/a00026_source.html	/^<a name="l02524"><\/a>02524         <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = nextlevel[0].first;$/;"	a
l02525	doxygen-html/a00026_source.html	/^<a name="l02525"><\/a>02525         <span class="keyword">delete<\/span> [] nextlevel;$/;"	a
l02526	doxygen-html/a00026_source.html	/^<a name="l02526"><\/a>02526 $/;"	a
l02527	doxygen-html/a00026_source.html	/^<a name="l02527"><\/a>02527         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02528	doxygen-html/a00026_source.html	/^<a name="l02528"><\/a>02528     }$/;"	a
l02529	doxygen-html/a00026_source.html	/^<a name="l02529"><\/a>02529 $/;"	a
l02530	doxygen-html/a00026_source.html	/^<a name="l02530"><\/a>02530 <span class="keyword">private<\/span>:$/;"	a
l02531	doxygen-html/a00026_source.html	/^<a name="l02531"><\/a>02531     <span class="comment">\/\/ *** Support Class Encapsulating Deletion Results<\/span>$/;"	a
l02532	doxygen-html/a00026_source.html	/^<a name="l02532"><\/a>02532 <span class="comment"><\/span>$/;"	a
l02533	doxygen-html/a00026_source.html	/^<a name="l02533"><\/a>02533 <span class="comment">    \/\/\/ Result flags of recursive deletion.<\/span>$/;"	a
l02534	doxygen-html/a00026_source.html	/^<a name="l02534"><\/a><a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b">02534<\/a> <span class="comment"><\/span>    <span class="keyword">enum<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a>$/;"	a
l02535	doxygen-html/a00026_source.html	/^<a name="l02535"><\/a>02535     {<span class="comment"><\/span>$/;"	a
l02536	doxygen-html/a00026_source.html	/^<a name="l02536"><\/a>02536 <span class="comment">        \/\/\/ Deletion successful and no fix-ups necessary.<\/span>$/;"	a
l02537	doxygen-html/a00026_source.html	/^<a name="l02537"><\/a><a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88">02537<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a> = 0,$/;"	a
l02538	doxygen-html/a00026_source.html	/^<a name="l02538"><\/a>02538 <span class="comment"><\/span>$/;"	a
l02539	doxygen-html/a00026_source.html	/^<a name="l02539"><\/a>02539 <span class="comment">        \/\/\/ Deletion not successful because key was not found.<\/span>$/;"	a
l02540	doxygen-html/a00026_source.html	/^<a name="l02540"><\/a><a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e">02540<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a> = 1,$/;"	a
l02541	doxygen-html/a00026_source.html	/^<a name="l02541"><\/a>02541 <span class="comment"><\/span>$/;"	a
l02542	doxygen-html/a00026_source.html	/^<a name="l02542"><\/a>02542 <span class="comment">        \/\/\/ Deletion successful, the last key was updated so parent slotkeys<\/span>$/;"	a
l02543	doxygen-html/a00026_source.html	/^<a name="l02543"><\/a>02543 <span class="comment">        \/\/\/ need updates.<\/span>$/;"	a
l02544	doxygen-html/a00026_source.html	/^<a name="l02544"><\/a><a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8">02544<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a> = 2,$/;"	a
l02545	doxygen-html/a00026_source.html	/^<a name="l02545"><\/a>02545 <span class="comment"><\/span>$/;"	a
l02546	doxygen-html/a00026_source.html	/^<a name="l02546"><\/a>02546 <span class="comment">        \/\/\/ Deletion successful, children nodes were merged and the parent<\/span>$/;"	a
l02547	doxygen-html/a00026_source.html	/^<a name="l02547"><\/a>02547 <span class="comment">        \/\/\/ needs to remove the empty node.<\/span>$/;"	a
l02548	doxygen-html/a00026_source.html	/^<a name="l02548"><\/a><a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43">02548<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43" title="Deletion successful, children nodes were merged and the parent needs to remove the empty node...">btree_fixmerge<\/a> = 4$/;"	a
l02549	doxygen-html/a00026_source.html	/^<a name="l02549"><\/a>02549     };$/;"	a
l02550	doxygen-html/a00026_source.html	/^<a name="l02550"><\/a>02550 <span class="comment"><\/span>$/;"	a
l02551	doxygen-html/a00026_source.html	/^<a name="l02551"><\/a>02551 <span class="comment">    \/\/\/ B+ tree recursive deletion has much information which is needs to be<\/span>$/;"	a
l02552	doxygen-html/a00026_source.html	/^<a name="l02552"><\/a>02552 <span class="comment">    \/\/\/ passed upward.<\/span>$/;"	a
l02553	doxygen-html/a00026_source.html	/^<a name="l02553"><\/a><a class="code" href="a00019.html">02553<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00019.html" title="B+ tree recursive deletion has much information which is needs to be passed upward.">result_t<\/a>$/;"	a
l02554	doxygen-html/a00026_source.html	/^<a name="l02554"><\/a>02554     {<span class="comment"><\/span>$/;"	a
l02555	doxygen-html/a00026_source.html	/^<a name="l02555"><\/a>02555 <span class="comment">        \/\/\/ Merged result flags<\/span>$/;"	a
l02556	doxygen-html/a00026_source.html	/^<a name="l02556"><\/a><a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38">02556<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a>  <a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a>;$/;"	a
l02557	doxygen-html/a00026_source.html	/^<a name="l02557"><\/a>02557 <span class="comment"><\/span>$/;"	a
l02558	doxygen-html/a00026_source.html	/^<a name="l02558"><\/a>02558 <span class="comment">        \/\/\/ The key to be updated at the parent&#39;s slot<\/span>$/;"	a
l02559	doxygen-html/a00026_source.html	/^<a name="l02559"><\/a><a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92">02559<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>        <a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92" title="The key to be updated at the parent&#39;s slot.">lastkey<\/a>;$/;"	a
l02560	doxygen-html/a00026_source.html	/^<a name="l02560"><\/a>02560 <span class="comment"><\/span>$/;"	a
l02561	doxygen-html/a00026_source.html	/^<a name="l02561"><\/a>02561 <span class="comment">        \/\/\/ Constructor of a result with a specific flag, this can also be used<\/span>$/;"	a
l02562	doxygen-html/a00026_source.html	/^<a name="l02562"><\/a>02562 <span class="comment">        \/\/\/ as for implicit conversion.<\/span>$/;"	a
l02563	doxygen-html/a00026_source.html	/^<a name="l02563"><\/a><a class="code" href="a00019.html#ad5027e43a6bfd8592c2cb0102d7841d6">02563<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00019.html#ad5027e43a6bfd8592c2cb0102d7841d6" title="Constructor of a result with a specific flag, this can also be used as for implicit conversion...">result_t<\/a>(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a> f = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>)$/;"	a
l02564	doxygen-html/a00026_source.html	/^<a name="l02564"><\/a>02564             : <a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a>(f), <a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92" title="The key to be updated at the parent&#39;s slot.">lastkey<\/a>()$/;"	a
l02565	doxygen-html/a00026_source.html	/^<a name="l02565"><\/a>02565         { }$/;"	a
l02566	doxygen-html/a00026_source.html	/^<a name="l02566"><\/a>02566 <span class="comment"><\/span>$/;"	a
l02567	doxygen-html/a00026_source.html	/^<a name="l02567"><\/a>02567 <span class="comment">        \/\/\/ Constructor with a lastkey value.<\/span>$/;"	a
l02568	doxygen-html/a00026_source.html	/^<a name="l02568"><\/a><a class="code" href="a00019.html#a8ae54cfaafef34bbe21ccc21d37afe49">02568<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00019.html#ad5027e43a6bfd8592c2cb0102d7841d6" title="Constructor of a result with a specific flag, this can also be used as for implicit conversion...">result_t<\/a>(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a> f, <span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;k)$/;"	a
l02569	doxygen-html/a00026_source.html	/^<a name="l02569"><\/a>02569             : <a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a>(f), <a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92" title="The key to be updated at the parent&#39;s slot.">lastkey<\/a>(k)$/;"	a
l02570	doxygen-html/a00026_source.html	/^<a name="l02570"><\/a>02570         { }$/;"	a
l02571	doxygen-html/a00026_source.html	/^<a name="l02571"><\/a>02571 <span class="comment"><\/span>$/;"	a
l02572	doxygen-html/a00026_source.html	/^<a name="l02572"><\/a>02572 <span class="comment">        \/\/\/ Test if this result object has a given flag set.<\/span>$/;"	a
l02573	doxygen-html/a00026_source.html	/^<a name="l02573"><\/a><a class="code" href="a00019.html#a636848529dcbaf2287bf0454d74d2043">02573<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00019.html#a636848529dcbaf2287bf0454d74d2043" title="Test if this result object has a given flag set.">has<\/a>(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a> f)<span class="keyword"> const<\/span>$/;"	a
l02574	doxygen-html/a00026_source.html	/^<a name="l02574"><\/a>02574 <span class="keyword">        <\/span>{$/;"	a
l02575	doxygen-html/a00026_source.html	/^<a name="l02575"><\/a>02575             <span class="keywordflow">return<\/span> (<a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a> &amp; f) != 0;$/;"	a
l02576	doxygen-html/a00026_source.html	/^<a name="l02576"><\/a>02576         }$/;"	a
l02577	doxygen-html/a00026_source.html	/^<a name="l02577"><\/a>02577 <span class="comment"><\/span>$/;"	a
l02578	doxygen-html/a00026_source.html	/^<a name="l02578"><\/a>02578 <span class="comment">        \/\/\/ Merge two results OR-ing the result flags and overwriting lastkeys.<\/span>$/;"	a
l02579	doxygen-html/a00026_source.html	/^<a name="l02579"><\/a><a class="code" href="a00019.html#a95b7f90fd11bfc2cda0051f59c09e792">02579<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <a class="code" href="a00019.html" title="B+ tree recursive deletion has much information which is needs to be passed upward.">result_t<\/a>&amp; <a class="code" href="a00019.html#a95b7f90fd11bfc2cda0051f59c09e792" title="Merge two results OR-ing the result flags and overwriting lastkeys.">operator|= <\/a>(<span class="keyword">const<\/span> <a class="code" href="a00019.html" title="B+ tree recursive deletion has much information which is needs to be passed upward.">result_t<\/a> &amp;other)$/;"	a
l02580	doxygen-html/a00026_source.html	/^<a name="l02580"><\/a>02580         {$/;"	a
l02581	doxygen-html/a00026_source.html	/^<a name="l02581"><\/a>02581             <a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a> = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02b" title="Result flags of recursive deletion.">result_flags_t<\/a>(<a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a> | other.<a class="code" href="a00019.html#a6e044b06d9dce43b0f0d43d64ef30b38" title="Merged result flags.">flags<\/a>);$/;"	a
l02582	doxygen-html/a00026_source.html	/^<a name="l02582"><\/a>02582 $/;"	a
l02583	doxygen-html/a00026_source.html	/^<a name="l02583"><\/a>02583             <span class="comment">\/\/ we overwrite existing lastkeys on purpose<\/span>$/;"	a
l02584	doxygen-html/a00026_source.html	/^<a name="l02584"><\/a>02584             <span class="keywordflow">if<\/span> (other.<a class="code" href="a00019.html#a636848529dcbaf2287bf0454d74d2043" title="Test if this result object has a given flag set.">has<\/a>(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>))$/;"	a
l02585	doxygen-html/a00026_source.html	/^<a name="l02585"><\/a>02585                 <a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92" title="The key to be updated at the parent&#39;s slot.">lastkey<\/a> = other.<a class="code" href="a00019.html#a3f991156f89e99cd9143bfa816da4e92" title="The key to be updated at the parent&#39;s slot.">lastkey<\/a>;$/;"	a
l02586	doxygen-html/a00026_source.html	/^<a name="l02586"><\/a>02586 $/;"	a
l02587	doxygen-html/a00026_source.html	/^<a name="l02587"><\/a>02587             <span class="keywordflow">return<\/span> *<span class="keyword">this<\/span>;$/;"	a
l02588	doxygen-html/a00026_source.html	/^<a name="l02588"><\/a>02588         }$/;"	a
l02589	doxygen-html/a00026_source.html	/^<a name="l02589"><\/a>02589     };$/;"	a
l02590	doxygen-html/a00026_source.html	/^<a name="l02590"><\/a>02590 $/;"	a
l02591	doxygen-html/a00026_source.html	/^<a name="l02591"><\/a>02591 <span class="keyword">public<\/span>:$/;"	a
l02592	doxygen-html/a00026_source.html	/^<a name="l02592"><\/a>02592     <span class="comment">\/\/ *** Public Erase Functions<\/span>$/;"	a
l02593	doxygen-html/a00026_source.html	/^<a name="l02593"><\/a>02593 <span class="comment"><\/span>$/;"	a
l02594	doxygen-html/a00026_source.html	/^<a name="l02594"><\/a>02594 <span class="comment">    \/\/\/ Erases one (the first) of the key\/data pairs associated with the given<\/span>$/;"	a
l02595	doxygen-html/a00026_source.html	/^<a name="l02595"><\/a>02595 <span class="comment">    \/\/\/ key.<\/span>$/;"	a
l02596	doxygen-html/a00026_source.html	/^<a name="l02596"><\/a><a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817">02596<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l02597	doxygen-html/a00026_source.html	/^<a name="l02597"><\/a>02597     {$/;"	a
l02598	doxygen-html/a00026_source.html	/^<a name="l02598"><\/a>02598         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::erase_one(&quot;<\/span> &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot;) on btree size &quot;<\/span> &lt;&lt; <a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>());$/;"	a
l02599	doxygen-html/a00026_source.html	/^<a name="l02599"><\/a>02599 $/;"	a
l02600	doxygen-html/a00026_source.html	/^<a name="l02600"><\/a>02600         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02601	doxygen-html/a00026_source.html	/^<a name="l02601"><\/a>02601 $/;"	a
l02602	doxygen-html/a00026_source.html	/^<a name="l02602"><\/a>02602         <span class="keywordflow">if<\/span> (!<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;$/;"	a
l02603	doxygen-html/a00026_source.html	/^<a name="l02603"><\/a>02603 $/;"	a
l02604	doxygen-html/a00026_source.html	/^<a name="l02604"><\/a>02604         result_t result = <a class="code" href="a00001.html#a141c007e7d7dce479b2797f3a0735d03" title="Erase one (the first) key\/data pair in the B+ tree matching key.">erase_one_descend<\/a>(key, <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, NULL, NULL, NULL, NULL, NULL, 0);$/;"	a
l02605	doxygen-html/a00026_source.html	/^<a name="l02605"><\/a>02605 $/;"	a
l02606	doxygen-html/a00026_source.html	/^<a name="l02606"><\/a>02606         <span class="keywordflow">if<\/span> (!result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>))$/;"	a
l02607	doxygen-html/a00026_source.html	/^<a name="l02607"><\/a>02607             --<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>;$/;"	a
l02608	doxygen-html/a00026_source.html	/^<a name="l02608"><\/a>02608 $/;"	a
l02609	doxygen-html/a00026_source.html	/^<a name="l02609"><\/a>02609 #ifdef BTREE_DEBUG$/;"	a
l02610	doxygen-html/a00026_source.html	/^<a name="l02610"><\/a>02610         if (<a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a>) <a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::cout);$/;"	a
l02611	doxygen-html/a00026_source.html	/^<a name="l02611"><\/a>02611 <span class="preprocessor">#endif<\/span>$/;"	a
l02612	doxygen-html/a00026_source.html	/^<a name="l02612"><\/a>02612 <span class="preprocessor"><\/span>        <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02613	doxygen-html/a00026_source.html	/^<a name="l02613"><\/a>02613 $/;"	a
l02614	doxygen-html/a00026_source.html	/^<a name="l02614"><\/a>02614         <span class="keywordflow">return<\/span> !result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>);$/;"	a
l02615	doxygen-html/a00026_source.html	/^<a name="l02615"><\/a>02615     }$/;"	a
l02616	doxygen-html/a00026_source.html	/^<a name="l02616"><\/a>02616 <span class="comment"><\/span>$/;"	a
l02617	doxygen-html/a00026_source.html	/^<a name="l02617"><\/a>02617 <span class="comment">    \/\/\/ Erases all the key\/data pairs associated with the given key. This is<\/span>$/;"	a
l02618	doxygen-html/a00026_source.html	/^<a name="l02618"><\/a>02618 <span class="comment">    \/\/\/ implemented using erase_one().<\/span>$/;"	a
l02619	doxygen-html/a00026_source.html	/^<a name="l02619"><\/a><a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1">02619<\/a> <span class="comment"><\/span>    <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> <a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> &amp;key)$/;"	a
l02620	doxygen-html/a00026_source.html	/^<a name="l02620"><\/a>02620     {$/;"	a
l02621	doxygen-html/a00026_source.html	/^<a name="l02621"><\/a>02621         <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a> c = 0;$/;"	a
l02622	doxygen-html/a00026_source.html	/^<a name="l02622"><\/a>02622 $/;"	a
l02623	doxygen-html/a00026_source.html	/^<a name="l02623"><\/a>02623         <span class="keywordflow">while<\/span>( <a class="code" href="a00001.html#a07ca3a19f1e20908f7cca3180420c817" title="Erases one (the first) of the key\/data pairs associated with the given key.">erase_one<\/a>(key) )$/;"	a
l02624	doxygen-html/a00026_source.html	/^<a name="l02624"><\/a>02624         {$/;"	a
l02625	doxygen-html/a00026_source.html	/^<a name="l02625"><\/a>02625             ++c;$/;"	a
l02626	doxygen-html/a00026_source.html	/^<a name="l02626"><\/a>02626             <span class="keywordflow">if<\/span> (!<a class="code" href="a00001.html#acd41575a35d1c5d55e955aafc9762454" title="Sixth template parameter: Allow duplicate keys in the B+ tree.">allow_duplicates<\/a>) <span class="keywordflow">break<\/span>;$/;"	a
l02627	doxygen-html/a00026_source.html	/^<a name="l02627"><\/a>02627         }$/;"	a
l02628	doxygen-html/a00026_source.html	/^<a name="l02628"><\/a>02628 $/;"	a
l02629	doxygen-html/a00026_source.html	/^<a name="l02629"><\/a>02629         <span class="keywordflow">return<\/span> c;$/;"	a
l02630	doxygen-html/a00026_source.html	/^<a name="l02630"><\/a>02630     }$/;"	a
l02631	doxygen-html/a00026_source.html	/^<a name="l02631"><\/a>02631 <span class="comment"><\/span>$/;"	a
l02632	doxygen-html/a00026_source.html	/^<a name="l02632"><\/a>02632 <span class="comment">    \/\/\/ Erase the key\/data pair referenced by the iterator.<\/span>$/;"	a
l02633	doxygen-html/a00026_source.html	/^<a name="l02633"><\/a><a class="code" href="a00001.html#a405c45adc3df9f58da98a785b65078a3">02633<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iterator iter)$/;"	a
l02634	doxygen-html/a00026_source.html	/^<a name="l02634"><\/a>02634     {$/;"	a
l02635	doxygen-html/a00026_source.html	/^<a name="l02635"><\/a>02635         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::erase_iter(&quot;<\/span> &lt;&lt; iter.currnode &lt;&lt; <span class="stringliteral">&quot;,&quot;<\/span> &lt;&lt; iter.currslot &lt;&lt; <span class="stringliteral">&quot;) on btree size &quot;<\/span> &lt;&lt; <a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>());$/;"	a
l02636	doxygen-html/a00026_source.html	/^<a name="l02636"><\/a>02636 $/;"	a
l02637	doxygen-html/a00026_source.html	/^<a name="l02637"><\/a>02637         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02638	doxygen-html/a00026_source.html	/^<a name="l02638"><\/a>02638 $/;"	a
l02639	doxygen-html/a00026_source.html	/^<a name="l02639"><\/a>02639         <span class="keywordflow">if<\/span> (!<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) <span class="keywordflow">return<\/span>;$/;"	a
l02640	doxygen-html/a00026_source.html	/^<a name="l02640"><\/a>02640 $/;"	a
l02641	doxygen-html/a00026_source.html	/^<a name="l02641"><\/a>02641         result_t result = <a class="code" href="a00001.html#a28e069672d73503156b4bc604064c4ac" title="Erase one key\/data pair referenced by an iterator in the B+ tree.">erase_iter_descend<\/a>(iter, <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, NULL, NULL, NULL, NULL, NULL, 0);$/;"	a
l02642	doxygen-html/a00026_source.html	/^<a name="l02642"><\/a>02642 $/;"	a
l02643	doxygen-html/a00026_source.html	/^<a name="l02643"><\/a>02643         <span class="keywordflow">if<\/span> (!result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>))$/;"	a
l02644	doxygen-html/a00026_source.html	/^<a name="l02644"><\/a>02644             --<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a>;$/;"	a
l02645	doxygen-html/a00026_source.html	/^<a name="l02645"><\/a>02645 $/;"	a
l02646	doxygen-html/a00026_source.html	/^<a name="l02646"><\/a>02646 #ifdef BTREE_DEBUG$/;"	a
l02647	doxygen-html/a00026_source.html	/^<a name="l02647"><\/a>02647         if (<a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a>) <a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::cout);$/;"	a
l02648	doxygen-html/a00026_source.html	/^<a name="l02648"><\/a>02648 <span class="preprocessor">#endif<\/span>$/;"	a
l02649	doxygen-html/a00026_source.html	/^<a name="l02649"><\/a>02649 <span class="preprocessor"><\/span>        <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l02650	doxygen-html/a00026_source.html	/^<a name="l02650"><\/a>02650     }$/;"	a
l02651	doxygen-html/a00026_source.html	/^<a name="l02651"><\/a>02651 $/;"	a
l02652	doxygen-html/a00026_source.html	/^<a name="l02652"><\/a>02652 <span class="preprocessor">#ifdef BTREE_TODO<\/span>$/;"	a
l02653	doxygen-html/a00026_source.html	/^<a name="l02653"><\/a>02653 <span class="preprocessor"><\/span><span class="comment">    \/\/\/ Erase all key\/data pairs in the range [first,last). This function is<\/span>$/;"	a
l02654	doxygen-html/a00026_source.html	/^<a name="l02654"><\/a>02654 <span class="comment"><\/span><span class="comment">    \/\/\/ currently not implemented by the B+ Tree.<\/span>$/;"	a
l02655	doxygen-html/a00026_source.html	/^<a name="l02655"><\/a><a class="code" href="a00001.html#ae89ad4210d7a1f320af633818b28a9f2">02655<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a8bced926ecf575a393e06ca7d35291f1" title="Erases all the key\/data pairs associated with the given key.">erase<\/a>(iterator <span class="comment">\/* first *\/<\/span>, iterator <span class="comment">\/* last *\/<\/span>)$/;"	a
l02656	doxygen-html/a00026_source.html	/^<a name="l02656"><\/a>02656     {$/;"	a
l02657	doxygen-html/a00026_source.html	/^<a name="l02657"><\/a>02657         abort();$/;"	a
l02658	doxygen-html/a00026_source.html	/^<a name="l02658"><\/a>02658     }$/;"	a
l02659	doxygen-html/a00026_source.html	/^<a name="l02659"><\/a>02659 <span class="preprocessor">#endif<\/span>$/;"	a
l02660	doxygen-html/a00026_source.html	/^<a name="l02660"><\/a>02660 <span class="preprocessor"><\/span>$/;"	a
l02661	doxygen-html/a00026_source.html	/^<a name="l02661"><\/a>02661 <span class="keyword">private<\/span>:$/;"	a
l02662	doxygen-html/a00026_source.html	/^<a name="l02662"><\/a>02662     <span class="comment">\/\/ *** Private Erase Functions<\/span>$/;"	a
l02663	doxygen-html/a00026_source.html	/^<a name="l02663"><\/a>02663 <span class="comment"><\/span>$/;"	a
l02664	doxygen-html/a00026_source.html	/^<a name="l02664"><\/a>02664 <span class="comment">    \/** @brief Erase one (the first) key\/data pair in the B+ tree matching key.<\/span>$/;"	a
l02665	doxygen-html/a00026_source.html	/^<a name="l02665"><\/a>02665 <span class="comment">     *<\/span>$/;"	a
l02666	doxygen-html/a00026_source.html	/^<a name="l02666"><\/a>02666 <span class="comment">     * Descends down the tree in search of key. During the descent the parent,<\/span>$/;"	a
l02667	doxygen-html/a00026_source.html	/^<a name="l02667"><\/a>02667 <span class="comment">     * left and right siblings and their parents are computed and passed<\/span>$/;"	a
l02668	doxygen-html/a00026_source.html	/^<a name="l02668"><\/a>02668 <span class="comment">     * down. Once the key\/data pair is found, it is removed from the leaf. If<\/span>$/;"	a
l02669	doxygen-html/a00026_source.html	/^<a name="l02669"><\/a>02669 <span class="comment">     * the leaf underflows 6 different cases are handled. These cases resolve<\/span>$/;"	a
l02670	doxygen-html/a00026_source.html	/^<a name="l02670"><\/a>02670 <span class="comment">     * the underflow by shifting key\/data pairs from adjacent sibling nodes,<\/span>$/;"	a
l02671	doxygen-html/a00026_source.html	/^<a name="l02671"><\/a>02671 <span class="comment">     * merging two sibling nodes or trimming the tree.<\/span>$/;"	a
l02672	doxygen-html/a00026_source.html	/^<a name="l02672"><\/a>02672 <span class="comment">     *\/<\/span>$/;"	a
l02673	doxygen-html/a00026_source.html	/^<a name="l02673"><\/a><a class="code" href="a00001.html#a141c007e7d7dce479b2797f3a0735d03">02673<\/a>     result_t <a class="code" href="a00001.html#a141c007e7d7dce479b2797f3a0735d03" title="Erase one (the first) key\/data pair in the B+ tree matching key.">erase_one_descend<\/a>(<span class="keyword">const<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>&amp; key,$/;"	a
l02674	doxygen-html/a00026_source.html	/^<a name="l02674"><\/a>02674                                node *curr,$/;"	a
l02675	doxygen-html/a00026_source.html	/^<a name="l02675"><\/a>02675                                node *left, node *right,$/;"	a
l02676	doxygen-html/a00026_source.html	/^<a name="l02676"><\/a>02676                                inner_node *leftparent, inner_node *rightparent,$/;"	a
l02677	doxygen-html/a00026_source.html	/^<a name="l02677"><\/a>02677                                inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l02678	doxygen-html/a00026_source.html	/^<a name="l02678"><\/a>02678     {$/;"	a
l02679	doxygen-html/a00026_source.html	/^<a name="l02679"><\/a>02679         <span class="keywordflow">if<\/span> (curr-&gt;isleafnode())$/;"	a
l02680	doxygen-html/a00026_source.html	/^<a name="l02680"><\/a>02680         {$/;"	a
l02681	doxygen-html/a00026_source.html	/^<a name="l02681"><\/a>02681             leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(curr);$/;"	a
l02682	doxygen-html/a00026_source.html	/^<a name="l02682"><\/a>02682             leaf_node *leftleaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(left);$/;"	a
l02683	doxygen-html/a00026_source.html	/^<a name="l02683"><\/a>02683             leaf_node *rightleaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(right);$/;"	a
l02684	doxygen-html/a00026_source.html	/^<a name="l02684"><\/a>02684 $/;"	a
l02685	doxygen-html/a00026_source.html	/^<a name="l02685"><\/a>02685             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(leaf, key);$/;"	a
l02686	doxygen-html/a00026_source.html	/^<a name="l02686"><\/a>02686 $/;"	a
l02687	doxygen-html/a00026_source.html	/^<a name="l02687"><\/a>02687             <span class="keywordflow">if<\/span> (slot &gt;= leaf-&gt;slotuse || !<a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(key, leaf-&gt;slotkey[slot]))$/;"	a
l02688	doxygen-html/a00026_source.html	/^<a name="l02688"><\/a>02688             {$/;"	a
l02689	doxygen-html/a00026_source.html	/^<a name="l02689"><\/a>02689                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Could not find key &quot;<\/span> &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot; to erase.&quot;<\/span>);$/;"	a
l02690	doxygen-html/a00026_source.html	/^<a name="l02690"><\/a>02690 $/;"	a
l02691	doxygen-html/a00026_source.html	/^<a name="l02691"><\/a>02691                 <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>;$/;"	a
l02692	doxygen-html/a00026_source.html	/^<a name="l02692"><\/a>02692             }$/;"	a
l02693	doxygen-html/a00026_source.html	/^<a name="l02693"><\/a>02693 $/;"	a
l02694	doxygen-html/a00026_source.html	/^<a name="l02694"><\/a>02694             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Found key in leaf &quot;<\/span> &lt;&lt; curr &lt;&lt; <span class="stringliteral">&quot; at slot &quot;<\/span> &lt;&lt; slot);$/;"	a
l02695	doxygen-html/a00026_source.html	/^<a name="l02695"><\/a>02695 $/;"	a
l02696	doxygen-html/a00026_source.html	/^<a name="l02696"><\/a>02696             std::copy(leaf-&gt;slotkey + slot+1, leaf-&gt;slotkey + leaf-&gt;slotuse,$/;"	a
l02697	doxygen-html/a00026_source.html	/^<a name="l02697"><\/a>02697                       leaf-&gt;slotkey + slot);$/;"	a
l02698	doxygen-html/a00026_source.html	/^<a name="l02698"><\/a>02698             <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(leaf-&gt;slotdata + slot+1, leaf-&gt;slotdata + leaf-&gt;slotuse,$/;"	a
l02699	doxygen-html/a00026_source.html	/^<a name="l02699"><\/a>02699                       leaf-&gt;slotdata + slot);$/;"	a
l02700	doxygen-html/a00026_source.html	/^<a name="l02700"><\/a>02700 $/;"	a
l02701	doxygen-html/a00026_source.html	/^<a name="l02701"><\/a>02701             leaf-&gt;slotuse--;$/;"	a
l02702	doxygen-html/a00026_source.html	/^<a name="l02702"><\/a>02702 $/;"	a
l02703	doxygen-html/a00026_source.html	/^<a name="l02703"><\/a>02703             result_t myres = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l02704	doxygen-html/a00026_source.html	/^<a name="l02704"><\/a>02704 $/;"	a
l02705	doxygen-html/a00026_source.html	/^<a name="l02705"><\/a>02705             <span class="comment">\/\/ if the last key of the leaf was changed, the parent is notified<\/span>$/;"	a
l02706	doxygen-html/a00026_source.html	/^<a name="l02706"><\/a>02706             <span class="comment">\/\/ and updates the key of this leaf<\/span>$/;"	a
l02707	doxygen-html/a00026_source.html	/^<a name="l02707"><\/a>02707             <span class="keywordflow">if<\/span> (slot == leaf-&gt;slotuse)$/;"	a
l02708	doxygen-html/a00026_source.html	/^<a name="l02708"><\/a>02708             {$/;"	a
l02709	doxygen-html/a00026_source.html	/^<a name="l02709"><\/a>02709                 <span class="keywordflow">if<\/span> (parent &amp;&amp; parentslot &lt; parent-&gt;slotuse)$/;"	a
l02710	doxygen-html/a00026_source.html	/^<a name="l02710"><\/a>02710                 {$/;"	a
l02711	doxygen-html/a00026_source.html	/^<a name="l02711"><\/a>02711                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == curr);$/;"	a
l02712	doxygen-html/a00026_source.html	/^<a name="l02712"><\/a>02712                     parent-&gt;slotkey[parentslot] = leaf-&gt;slotkey[leaf-&gt;slotuse - 1];$/;"	a
l02713	doxygen-html/a00026_source.html	/^<a name="l02713"><\/a>02713                 }$/;"	a
l02714	doxygen-html/a00026_source.html	/^<a name="l02714"><\/a>02714                 <span class="keywordflow">else<\/span>$/;"	a
l02715	doxygen-html/a00026_source.html	/^<a name="l02715"><\/a>02715                 {$/;"	a
l02716	doxygen-html/a00026_source.html	/^<a name="l02716"><\/a>02716                     <span class="keywordflow">if<\/span> (leaf-&gt;slotuse &gt;= 1)$/;"	a
l02717	doxygen-html/a00026_source.html	/^<a name="l02717"><\/a>02717                     {$/;"	a
l02718	doxygen-html/a00026_source.html	/^<a name="l02718"><\/a>02718                         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Scheduling lastkeyupdate: key &quot;<\/span> &lt;&lt; leaf-&gt;slotkey[leaf-&gt;slotuse - 1]);$/;"	a
l02719	doxygen-html/a00026_source.html	/^<a name="l02719"><\/a>02719                         myres |= result_t(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>, leaf-&gt;slotkey[leaf-&gt;slotuse - 1]);$/;"	a
l02720	doxygen-html/a00026_source.html	/^<a name="l02720"><\/a>02720                     }$/;"	a
l02721	doxygen-html/a00026_source.html	/^<a name="l02721"><\/a>02721                     <span class="keywordflow">else<\/span>$/;"	a
l02722	doxygen-html/a00026_source.html	/^<a name="l02722"><\/a>02722                     {$/;"	a
l02723	doxygen-html/a00026_source.html	/^<a name="l02723"><\/a>02723                         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02724	doxygen-html/a00026_source.html	/^<a name="l02724"><\/a>02724                     }$/;"	a
l02725	doxygen-html/a00026_source.html	/^<a name="l02725"><\/a>02725                 }$/;"	a
l02726	doxygen-html/a00026_source.html	/^<a name="l02726"><\/a>02726             }$/;"	a
l02727	doxygen-html/a00026_source.html	/^<a name="l02727"><\/a>02727 $/;"	a
l02728	doxygen-html/a00026_source.html	/^<a name="l02728"><\/a>02728             <span class="keywordflow">if<\/span> (leaf-&gt;isunderflow() &amp;&amp; !(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> &amp;&amp; leaf-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> &gt;= 1))$/;"	a
l02729	doxygen-html/a00026_source.html	/^<a name="l02729"><\/a>02729             {$/;"	a
l02730	doxygen-html/a00026_source.html	/^<a name="l02730"><\/a>02730                 <span class="comment">\/\/ determine what to do about the underflow<\/span>$/;"	a
l02731	doxygen-html/a00026_source.html	/^<a name="l02731"><\/a>02731 $/;"	a
l02732	doxygen-html/a00026_source.html	/^<a name="l02732"><\/a>02732                 <span class="comment">\/\/ case : if this empty leaf is the root, then delete all nodes<\/span>$/;"	a
l02733	doxygen-html/a00026_source.html	/^<a name="l02733"><\/a>02733                 <span class="comment">\/\/ and set root to NULL.<\/span>$/;"	a
l02734	doxygen-html/a00026_source.html	/^<a name="l02734"><\/a>02734                 <span class="keywordflow">if<\/span> (leftleaf == NULL &amp;&amp; rightleaf == NULL)$/;"	a
l02735	doxygen-html/a00026_source.html	/^<a name="l02735"><\/a>02735                 {$/;"	a
l02736	doxygen-html/a00026_source.html	/^<a name="l02736"><\/a>02736                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02737	doxygen-html/a00026_source.html	/^<a name="l02737"><\/a>02737                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf-&gt;slotuse == 0);$/;"	a
l02738	doxygen-html/a00026_source.html	/^<a name="l02738"><\/a>02738 $/;"	a
l02739	doxygen-html/a00026_source.html	/^<a name="l02739"><\/a>02739                     <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02740	doxygen-html/a00026_source.html	/^<a name="l02740"><\/a>02740 $/;"	a
l02741	doxygen-html/a00026_source.html	/^<a name="l02741"><\/a>02741                     <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = leaf = NULL;$/;"	a
l02742	doxygen-html/a00026_source.html	/^<a name="l02742"><\/a>02742                     <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = NULL;$/;"	a
l02743	doxygen-html/a00026_source.html	/^<a name="l02743"><\/a>02743 $/;"	a
l02744	doxygen-html/a00026_source.html	/^<a name="l02744"><\/a>02744                     <span class="comment">\/\/ will be decremented soon by insert_start()<\/span>$/;"	a
l02745	doxygen-html/a00026_source.html	/^<a name="l02745"><\/a>02745                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> == 1);$/;"	a
l02746	doxygen-html/a00026_source.html	/^<a name="l02746"><\/a>02746                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> == 0);$/;"	a
l02747	doxygen-html/a00026_source.html	/^<a name="l02747"><\/a>02747                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> == 0);$/;"	a
l02748	doxygen-html/a00026_source.html	/^<a name="l02748"><\/a>02748 $/;"	a
l02749	doxygen-html/a00026_source.html	/^<a name="l02749"><\/a>02749                     <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l02750	doxygen-html/a00026_source.html	/^<a name="l02750"><\/a>02750                 }$/;"	a
l02751	doxygen-html/a00026_source.html	/^<a name="l02751"><\/a>02751                 <span class="comment">\/\/ case : if both left and right leaves would underflow in case of<\/span>$/;"	a
l02752	doxygen-html/a00026_source.html	/^<a name="l02752"><\/a>02752                 <span class="comment">\/\/ a shift, then merging is necessary. choose the more local merger<\/span>$/;"	a
l02753	doxygen-html/a00026_source.html	/^<a name="l02753"><\/a>02753                 <span class="comment">\/\/ with our parent<\/span>$/;"	a
l02754	doxygen-html/a00026_source.html	/^<a name="l02754"><\/a>02754                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf == NULL || leftleaf-&gt;isfew()) &amp;&amp; (rightleaf == NULL || rightleaf-&gt;isfew()) )$/;"	a
l02755	doxygen-html/a00026_source.html	/^<a name="l02755"><\/a>02755                 {$/;"	a
l02756	doxygen-html/a00026_source.html	/^<a name="l02756"><\/a>02756                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02757	doxygen-html/a00026_source.html	/^<a name="l02757"><\/a>02757                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leftleaf, leaf, leftparent);$/;"	a
l02758	doxygen-html/a00026_source.html	/^<a name="l02758"><\/a>02758                     <span class="keywordflow">else<\/span>$/;"	a
l02759	doxygen-html/a00026_source.html	/^<a name="l02759"><\/a>02759                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leaf, rightleaf, rightparent);$/;"	a
l02760	doxygen-html/a00026_source.html	/^<a name="l02760"><\/a>02760                 }$/;"	a
l02761	doxygen-html/a00026_source.html	/^<a name="l02761"><\/a>02761                 <span class="comment">\/\/ case : the right leaf has extra data, so balance right with current<\/span>$/;"	a
l02762	doxygen-html/a00026_source.html	/^<a name="l02762"><\/a>02762                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf != NULL &amp;&amp; leftleaf-&gt;isfew()) &amp;&amp; (rightleaf != NULL &amp;&amp; !rightleaf-&gt;isfew()) )$/;"	a
l02763	doxygen-html/a00026_source.html	/^<a name="l02763"><\/a>02763                 {$/;"	a
l02764	doxygen-html/a00026_source.html	/^<a name="l02764"><\/a>02764                     <span class="keywordflow">if<\/span> (rightparent == parent)$/;"	a
l02765	doxygen-html/a00026_source.html	/^<a name="l02765"><\/a>02765                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l02766	doxygen-html/a00026_source.html	/^<a name="l02766"><\/a>02766                     <span class="keywordflow">else<\/span>$/;"	a
l02767	doxygen-html/a00026_source.html	/^<a name="l02767"><\/a>02767                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leftleaf, leaf, leftparent);$/;"	a
l02768	doxygen-html/a00026_source.html	/^<a name="l02768"><\/a>02768                 }$/;"	a
l02769	doxygen-html/a00026_source.html	/^<a name="l02769"><\/a>02769                 <span class="comment">\/\/ case : the left leaf has extra data, so balance left with current<\/span>$/;"	a
l02770	doxygen-html/a00026_source.html	/^<a name="l02770"><\/a>02770                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf != NULL &amp;&amp; !leftleaf-&gt;isfew()) &amp;&amp; (rightleaf != NULL &amp;&amp; rightleaf-&gt;isfew()) )$/;"	a
l02771	doxygen-html/a00026_source.html	/^<a name="l02771"><\/a>02771                 {$/;"	a
l02772	doxygen-html/a00026_source.html	/^<a name="l02772"><\/a>02772                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02773	doxygen-html/a00026_source.html	/^<a name="l02773"><\/a>02773                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l02774	doxygen-html/a00026_source.html	/^<a name="l02774"><\/a>02774                     <span class="keywordflow">else<\/span>$/;"	a
l02775	doxygen-html/a00026_source.html	/^<a name="l02775"><\/a>02775                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leaf, rightleaf, rightparent);$/;"	a
l02776	doxygen-html/a00026_source.html	/^<a name="l02776"><\/a>02776                 }$/;"	a
l02777	doxygen-html/a00026_source.html	/^<a name="l02777"><\/a>02777                 <span class="comment">\/\/ case : both the leaf and right leaves have extra data and our<\/span>$/;"	a
l02778	doxygen-html/a00026_source.html	/^<a name="l02778"><\/a>02778                 <span class="comment">\/\/ parent, choose the leaf with more data<\/span>$/;"	a
l02779	doxygen-html/a00026_source.html	/^<a name="l02779"><\/a>02779                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (leftparent == rightparent)$/;"	a
l02780	doxygen-html/a00026_source.html	/^<a name="l02780"><\/a>02780                 {$/;"	a
l02781	doxygen-html/a00026_source.html	/^<a name="l02781"><\/a>02781                     <span class="keywordflow">if<\/span> (leftleaf-&gt;slotuse &lt;= rightleaf-&gt;slotuse)$/;"	a
l02782	doxygen-html/a00026_source.html	/^<a name="l02782"><\/a>02782                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l02783	doxygen-html/a00026_source.html	/^<a name="l02783"><\/a>02783                     <span class="keywordflow">else<\/span>$/;"	a
l02784	doxygen-html/a00026_source.html	/^<a name="l02784"><\/a>02784                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l02785	doxygen-html/a00026_source.html	/^<a name="l02785"><\/a>02785                 }$/;"	a
l02786	doxygen-html/a00026_source.html	/^<a name="l02786"><\/a>02786                 <span class="keywordflow">else<\/span>$/;"	a
l02787	doxygen-html/a00026_source.html	/^<a name="l02787"><\/a>02787                 {$/;"	a
l02788	doxygen-html/a00026_source.html	/^<a name="l02788"><\/a>02788                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02789	doxygen-html/a00026_source.html	/^<a name="l02789"><\/a>02789                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l02790	doxygen-html/a00026_source.html	/^<a name="l02790"><\/a>02790                     <span class="keywordflow">else<\/span>$/;"	a
l02791	doxygen-html/a00026_source.html	/^<a name="l02791"><\/a>02791                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l02792	doxygen-html/a00026_source.html	/^<a name="l02792"><\/a>02792                 }$/;"	a
l02793	doxygen-html/a00026_source.html	/^<a name="l02793"><\/a>02793             }$/;"	a
l02794	doxygen-html/a00026_source.html	/^<a name="l02794"><\/a>02794 $/;"	a
l02795	doxygen-html/a00026_source.html	/^<a name="l02795"><\/a>02795             <span class="keywordflow">return<\/span> myres;$/;"	a
l02796	doxygen-html/a00026_source.html	/^<a name="l02796"><\/a>02796         }$/;"	a
l02797	doxygen-html/a00026_source.html	/^<a name="l02797"><\/a>02797         <span class="keywordflow">else<\/span> <span class="comment">\/\/ !curr-&gt;isleafnode()<\/span>$/;"	a
l02798	doxygen-html/a00026_source.html	/^<a name="l02798"><\/a>02798         {$/;"	a
l02799	doxygen-html/a00026_source.html	/^<a name="l02799"><\/a>02799             inner_node *inner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(curr);$/;"	a
l02800	doxygen-html/a00026_source.html	/^<a name="l02800"><\/a>02800             inner_node *leftinner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(left);$/;"	a
l02801	doxygen-html/a00026_source.html	/^<a name="l02801"><\/a>02801             inner_node *rightinner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(right);$/;"	a
l02802	doxygen-html/a00026_source.html	/^<a name="l02802"><\/a>02802 $/;"	a
l02803	doxygen-html/a00026_source.html	/^<a name="l02803"><\/a>02803             node *myleft, *myright;$/;"	a
l02804	doxygen-html/a00026_source.html	/^<a name="l02804"><\/a>02804             inner_node *myleftparent, *myrightparent;$/;"	a
l02805	doxygen-html/a00026_source.html	/^<a name="l02805"><\/a>02805 $/;"	a
l02806	doxygen-html/a00026_source.html	/^<a name="l02806"><\/a>02806             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, key);$/;"	a
l02807	doxygen-html/a00026_source.html	/^<a name="l02807"><\/a>02807 $/;"	a
l02808	doxygen-html/a00026_source.html	/^<a name="l02808"><\/a>02808             <span class="keywordflow">if<\/span> (slot == 0) {$/;"	a
l02809	doxygen-html/a00026_source.html	/^<a name="l02809"><\/a>02809                 myleft = (left == NULL) ? NULL : (static_cast&lt;inner_node*&gt;(left))-&gt;childid[left-&gt;slotuse - 1];$/;"	a
l02810	doxygen-html/a00026_source.html	/^<a name="l02810"><\/a>02810                 myleftparent = leftparent;$/;"	a
l02811	doxygen-html/a00026_source.html	/^<a name="l02811"><\/a>02811             }$/;"	a
l02812	doxygen-html/a00026_source.html	/^<a name="l02812"><\/a>02812             <span class="keywordflow">else<\/span> {$/;"	a
l02813	doxygen-html/a00026_source.html	/^<a name="l02813"><\/a>02813                 myleft = inner-&gt;childid[slot - 1];$/;"	a
l02814	doxygen-html/a00026_source.html	/^<a name="l02814"><\/a>02814                 myleftparent = inner;$/;"	a
l02815	doxygen-html/a00026_source.html	/^<a name="l02815"><\/a>02815             }$/;"	a
l02816	doxygen-html/a00026_source.html	/^<a name="l02816"><\/a>02816 $/;"	a
l02817	doxygen-html/a00026_source.html	/^<a name="l02817"><\/a>02817             <span class="keywordflow">if<\/span> (slot == inner-&gt;slotuse) {$/;"	a
l02818	doxygen-html/a00026_source.html	/^<a name="l02818"><\/a>02818                 myright = (right == NULL) ? NULL : (static_cast&lt;inner_node*&gt;(right))-&gt;childid[0];$/;"	a
l02819	doxygen-html/a00026_source.html	/^<a name="l02819"><\/a>02819                 myrightparent = rightparent;$/;"	a
l02820	doxygen-html/a00026_source.html	/^<a name="l02820"><\/a>02820             }$/;"	a
l02821	doxygen-html/a00026_source.html	/^<a name="l02821"><\/a>02821             <span class="keywordflow">else<\/span> {$/;"	a
l02822	doxygen-html/a00026_source.html	/^<a name="l02822"><\/a>02822                 myright = inner-&gt;childid[slot + 1];$/;"	a
l02823	doxygen-html/a00026_source.html	/^<a name="l02823"><\/a>02823                 myrightparent = inner;$/;"	a
l02824	doxygen-html/a00026_source.html	/^<a name="l02824"><\/a>02824             }$/;"	a
l02825	doxygen-html/a00026_source.html	/^<a name="l02825"><\/a>02825 $/;"	a
l02826	doxygen-html/a00026_source.html	/^<a name="l02826"><\/a>02826             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;erase_one_descend into &quot;<\/span> &lt;&lt; inner-&gt;childid[slot]);$/;"	a
l02827	doxygen-html/a00026_source.html	/^<a name="l02827"><\/a>02827 $/;"	a
l02828	doxygen-html/a00026_source.html	/^<a name="l02828"><\/a>02828             result_t result = <a class="code" href="a00001.html#a141c007e7d7dce479b2797f3a0735d03" title="Erase one (the first) key\/data pair in the B+ tree matching key.">erase_one_descend<\/a>(key,$/;"	a
l02829	doxygen-html/a00026_source.html	/^<a name="l02829"><\/a>02829                                                 inner-&gt;childid[slot],$/;"	a
l02830	doxygen-html/a00026_source.html	/^<a name="l02830"><\/a>02830                                                 myleft, myright,$/;"	a
l02831	doxygen-html/a00026_source.html	/^<a name="l02831"><\/a>02831                                                 myleftparent, myrightparent,$/;"	a
l02832	doxygen-html/a00026_source.html	/^<a name="l02832"><\/a>02832                                                 inner, slot);$/;"	a
l02833	doxygen-html/a00026_source.html	/^<a name="l02833"><\/a>02833 $/;"	a
l02834	doxygen-html/a00026_source.html	/^<a name="l02834"><\/a>02834             result_t myres = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l02835	doxygen-html/a00026_source.html	/^<a name="l02835"><\/a>02835 $/;"	a
l02836	doxygen-html/a00026_source.html	/^<a name="l02836"><\/a>02836             <span class="keywordflow">if<\/span> (result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>))$/;"	a
l02837	doxygen-html/a00026_source.html	/^<a name="l02837"><\/a>02837             {$/;"	a
l02838	doxygen-html/a00026_source.html	/^<a name="l02838"><\/a>02838                 <span class="keywordflow">return<\/span> result;$/;"	a
l02839	doxygen-html/a00026_source.html	/^<a name="l02839"><\/a>02839             }$/;"	a
l02840	doxygen-html/a00026_source.html	/^<a name="l02840"><\/a>02840 $/;"	a
l02841	doxygen-html/a00026_source.html	/^<a name="l02841"><\/a>02841             <span class="keywordflow">if<\/span> (result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>))$/;"	a
l02842	doxygen-html/a00026_source.html	/^<a name="l02842"><\/a>02842             {$/;"	a
l02843	doxygen-html/a00026_source.html	/^<a name="l02843"><\/a>02843                 <span class="keywordflow">if<\/span> (parent &amp;&amp; parentslot &lt; parent-&gt;slotuse)$/;"	a
l02844	doxygen-html/a00026_source.html	/^<a name="l02844"><\/a>02844                 {$/;"	a
l02845	doxygen-html/a00026_source.html	/^<a name="l02845"><\/a>02845                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Fixing lastkeyupdate: key &quot;<\/span> &lt;&lt; result.lastkey &lt;&lt; <span class="stringliteral">&quot; into parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot; at parentslot &quot;<\/span> &lt;&lt; parentslot);$/;"	a
l02846	doxygen-html/a00026_source.html	/^<a name="l02846"><\/a>02846 $/;"	a
l02847	doxygen-html/a00026_source.html	/^<a name="l02847"><\/a>02847                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == curr);$/;"	a
l02848	doxygen-html/a00026_source.html	/^<a name="l02848"><\/a>02848                     parent-&gt;slotkey[parentslot] = result.lastkey;$/;"	a
l02849	doxygen-html/a00026_source.html	/^<a name="l02849"><\/a>02849                 }$/;"	a
l02850	doxygen-html/a00026_source.html	/^<a name="l02850"><\/a>02850                 <span class="keywordflow">else<\/span>$/;"	a
l02851	doxygen-html/a00026_source.html	/^<a name="l02851"><\/a>02851                 {$/;"	a
l02852	doxygen-html/a00026_source.html	/^<a name="l02852"><\/a>02852                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Forwarding lastkeyupdate: key &quot;<\/span> &lt;&lt; result.lastkey);$/;"	a
l02853	doxygen-html/a00026_source.html	/^<a name="l02853"><\/a>02853                     myres |= result_t(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>, result.lastkey);$/;"	a
l02854	doxygen-html/a00026_source.html	/^<a name="l02854"><\/a>02854                 }$/;"	a
l02855	doxygen-html/a00026_source.html	/^<a name="l02855"><\/a>02855             }$/;"	a
l02856	doxygen-html/a00026_source.html	/^<a name="l02856"><\/a>02856 $/;"	a
l02857	doxygen-html/a00026_source.html	/^<a name="l02857"><\/a>02857             <span class="keywordflow">if<\/span> (result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43" title="Deletion successful, children nodes were merged and the parent needs to remove the empty node...">btree_fixmerge<\/a>))$/;"	a
l02858	doxygen-html/a00026_source.html	/^<a name="l02858"><\/a>02858             {$/;"	a
l02859	doxygen-html/a00026_source.html	/^<a name="l02859"><\/a>02859                 <span class="comment">\/\/ either the current node or the next is empty and should be removed<\/span>$/;"	a
l02860	doxygen-html/a00026_source.html	/^<a name="l02860"><\/a>02860                 <span class="keywordflow">if<\/span> (inner-&gt;childid[slot]-&gt;slotuse != 0)$/;"	a
l02861	doxygen-html/a00026_source.html	/^<a name="l02861"><\/a>02861                     slot++;$/;"	a
l02862	doxygen-html/a00026_source.html	/^<a name="l02862"><\/a>02862 $/;"	a
l02863	doxygen-html/a00026_source.html	/^<a name="l02863"><\/a>02863                 <span class="comment">\/\/ this is the child slot invalidated by the merge<\/span>$/;"	a
l02864	doxygen-html/a00026_source.html	/^<a name="l02864"><\/a>02864                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;childid[slot]-&gt;slotuse == 0);$/;"	a
l02865	doxygen-html/a00026_source.html	/^<a name="l02865"><\/a>02865 $/;"	a
l02866	doxygen-html/a00026_source.html	/^<a name="l02866"><\/a>02866                 <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(inner-&gt;childid[slot]);$/;"	a
l02867	doxygen-html/a00026_source.html	/^<a name="l02867"><\/a>02867 $/;"	a
l02868	doxygen-html/a00026_source.html	/^<a name="l02868"><\/a>02868                 std::copy(inner-&gt;slotkey + slot, inner-&gt;slotkey + inner-&gt;slotuse,$/;"	a
l02869	doxygen-html/a00026_source.html	/^<a name="l02869"><\/a>02869                           inner-&gt;slotkey + slot-1);$/;"	a
l02870	doxygen-html/a00026_source.html	/^<a name="l02870"><\/a>02870                 std::copy(inner-&gt;childid + slot+1, inner-&gt;childid + inner-&gt;slotuse+1,$/;"	a
l02871	doxygen-html/a00026_source.html	/^<a name="l02871"><\/a>02871                           inner-&gt;childid + slot);$/;"	a
l02872	doxygen-html/a00026_source.html	/^<a name="l02872"><\/a>02872 $/;"	a
l02873	doxygen-html/a00026_source.html	/^<a name="l02873"><\/a>02873                 inner-&gt;slotuse--;$/;"	a
l02874	doxygen-html/a00026_source.html	/^<a name="l02874"><\/a>02874 $/;"	a
l02875	doxygen-html/a00026_source.html	/^<a name="l02875"><\/a>02875                 <span class="keywordflow">if<\/span> (inner-&gt;level == 1)$/;"	a
l02876	doxygen-html/a00026_source.html	/^<a name="l02876"><\/a>02876                 {$/;"	a
l02877	doxygen-html/a00026_source.html	/^<a name="l02877"><\/a>02877                     <span class="comment">\/\/ fix split key for children leaves<\/span>$/;"	a
l02878	doxygen-html/a00026_source.html	/^<a name="l02878"><\/a>02878                     slot--;$/;"	a
l02879	doxygen-html/a00026_source.html	/^<a name="l02879"><\/a>02879                     leaf_node *child = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot]);$/;"	a
l02880	doxygen-html/a00026_source.html	/^<a name="l02880"><\/a>02880                     inner-&gt;slotkey[slot] = child-&gt;slotkey[ child-&gt;slotuse-1 ];$/;"	a
l02881	doxygen-html/a00026_source.html	/^<a name="l02881"><\/a>02881                 }$/;"	a
l02882	doxygen-html/a00026_source.html	/^<a name="l02882"><\/a>02882             }$/;"	a
l02883	doxygen-html/a00026_source.html	/^<a name="l02883"><\/a>02883 $/;"	a
l02884	doxygen-html/a00026_source.html	/^<a name="l02884"><\/a>02884             <span class="keywordflow">if<\/span> (inner-&gt;isunderflow() &amp;&amp; !(inner == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> &amp;&amp; inner-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> &gt;= 1))$/;"	a
l02885	doxygen-html/a00026_source.html	/^<a name="l02885"><\/a>02885             {$/;"	a
l02886	doxygen-html/a00026_source.html	/^<a name="l02886"><\/a>02886                 <span class="comment">\/\/ case: the inner node is the root and has just one child. that child becomes the new root<\/span>$/;"	a
l02887	doxygen-html/a00026_source.html	/^<a name="l02887"><\/a>02887                 <span class="keywordflow">if<\/span> (leftinner == NULL &amp;&amp; rightinner == NULL)$/;"	a
l02888	doxygen-html/a00026_source.html	/^<a name="l02888"><\/a>02888                 {$/;"	a
l02889	doxygen-html/a00026_source.html	/^<a name="l02889"><\/a>02889                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l02890	doxygen-html/a00026_source.html	/^<a name="l02890"><\/a>02890                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;slotuse == 0);$/;"	a
l02891	doxygen-html/a00026_source.html	/^<a name="l02891"><\/a>02891 $/;"	a
l02892	doxygen-html/a00026_source.html	/^<a name="l02892"><\/a>02892                     <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = inner-&gt;childid[0];$/;"	a
l02893	doxygen-html/a00026_source.html	/^<a name="l02893"><\/a>02893 $/;"	a
l02894	doxygen-html/a00026_source.html	/^<a name="l02894"><\/a>02894                     inner-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> = 0;$/;"	a
l02895	doxygen-html/a00026_source.html	/^<a name="l02895"><\/a>02895                     <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(inner);$/;"	a
l02896	doxygen-html/a00026_source.html	/^<a name="l02896"><\/a>02896 $/;"	a
l02897	doxygen-html/a00026_source.html	/^<a name="l02897"><\/a>02897                     <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l02898	doxygen-html/a00026_source.html	/^<a name="l02898"><\/a>02898                 }$/;"	a
l02899	doxygen-html/a00026_source.html	/^<a name="l02899"><\/a>02899                 <span class="comment">\/\/ case : if both left and right leaves would underflow in case of<\/span>$/;"	a
l02900	doxygen-html/a00026_source.html	/^<a name="l02900"><\/a>02900                 <span class="comment">\/\/ a shift, then merging is necessary. choose the more local merger<\/span>$/;"	a
l02901	doxygen-html/a00026_source.html	/^<a name="l02901"><\/a>02901                 <span class="comment">\/\/ with our parent<\/span>$/;"	a
l02902	doxygen-html/a00026_source.html	/^<a name="l02902"><\/a>02902                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner == NULL || leftinner-&gt;isfew()) &amp;&amp; (rightinner == NULL || rightinner-&gt;isfew()) )$/;"	a
l02903	doxygen-html/a00026_source.html	/^<a name="l02903"><\/a>02903                 {$/;"	a
l02904	doxygen-html/a00026_source.html	/^<a name="l02904"><\/a>02904                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02905	doxygen-html/a00026_source.html	/^<a name="l02905"><\/a>02905                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l02906	doxygen-html/a00026_source.html	/^<a name="l02906"><\/a>02906                     <span class="keywordflow">else<\/span>$/;"	a
l02907	doxygen-html/a00026_source.html	/^<a name="l02907"><\/a>02907                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l02908	doxygen-html/a00026_source.html	/^<a name="l02908"><\/a>02908                 }$/;"	a
l02909	doxygen-html/a00026_source.html	/^<a name="l02909"><\/a>02909                 <span class="comment">\/\/ case : the right leaf has extra data, so balance right with current<\/span>$/;"	a
l02910	doxygen-html/a00026_source.html	/^<a name="l02910"><\/a>02910                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner != NULL &amp;&amp; leftinner-&gt;isfew()) &amp;&amp; (rightinner != NULL &amp;&amp; !rightinner-&gt;isfew()) )$/;"	a
l02911	doxygen-html/a00026_source.html	/^<a name="l02911"><\/a>02911                 {$/;"	a
l02912	doxygen-html/a00026_source.html	/^<a name="l02912"><\/a>02912                     <span class="keywordflow">if<\/span> (rightparent == parent)$/;"	a
l02913	doxygen-html/a00026_source.html	/^<a name="l02913"><\/a>02913                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l02914	doxygen-html/a00026_source.html	/^<a name="l02914"><\/a>02914                     <span class="keywordflow">else<\/span>$/;"	a
l02915	doxygen-html/a00026_source.html	/^<a name="l02915"><\/a>02915                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l02916	doxygen-html/a00026_source.html	/^<a name="l02916"><\/a>02916                 }$/;"	a
l02917	doxygen-html/a00026_source.html	/^<a name="l02917"><\/a>02917                 <span class="comment">\/\/ case : the left leaf has extra data, so balance left with current<\/span>$/;"	a
l02918	doxygen-html/a00026_source.html	/^<a name="l02918"><\/a>02918                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner != NULL &amp;&amp; !leftinner-&gt;isfew()) &amp;&amp; (rightinner != NULL &amp;&amp; rightinner-&gt;isfew()) )$/;"	a
l02919	doxygen-html/a00026_source.html	/^<a name="l02919"><\/a>02919                 {$/;"	a
l02920	doxygen-html/a00026_source.html	/^<a name="l02920"><\/a>02920                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02921	doxygen-html/a00026_source.html	/^<a name="l02921"><\/a>02921                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l02922	doxygen-html/a00026_source.html	/^<a name="l02922"><\/a>02922                     <span class="keywordflow">else<\/span>$/;"	a
l02923	doxygen-html/a00026_source.html	/^<a name="l02923"><\/a>02923                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l02924	doxygen-html/a00026_source.html	/^<a name="l02924"><\/a>02924                 }$/;"	a
l02925	doxygen-html/a00026_source.html	/^<a name="l02925"><\/a>02925                 <span class="comment">\/\/ case : both the leaf and right leaves have extra data and our<\/span>$/;"	a
l02926	doxygen-html/a00026_source.html	/^<a name="l02926"><\/a>02926                 <span class="comment">\/\/ parent, choose the leaf with more data<\/span>$/;"	a
l02927	doxygen-html/a00026_source.html	/^<a name="l02927"><\/a>02927                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (leftparent == rightparent)$/;"	a
l02928	doxygen-html/a00026_source.html	/^<a name="l02928"><\/a>02928                 {$/;"	a
l02929	doxygen-html/a00026_source.html	/^<a name="l02929"><\/a>02929                     <span class="keywordflow">if<\/span> (leftinner-&gt;slotuse &lt;= rightinner-&gt;slotuse)$/;"	a
l02930	doxygen-html/a00026_source.html	/^<a name="l02930"><\/a>02930                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l02931	doxygen-html/a00026_source.html	/^<a name="l02931"><\/a>02931                     <span class="keywordflow">else<\/span>$/;"	a
l02932	doxygen-html/a00026_source.html	/^<a name="l02932"><\/a>02932                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l02933	doxygen-html/a00026_source.html	/^<a name="l02933"><\/a>02933                 }$/;"	a
l02934	doxygen-html/a00026_source.html	/^<a name="l02934"><\/a>02934                 <span class="keywordflow">else<\/span>$/;"	a
l02935	doxygen-html/a00026_source.html	/^<a name="l02935"><\/a>02935                 {$/;"	a
l02936	doxygen-html/a00026_source.html	/^<a name="l02936"><\/a>02936                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l02937	doxygen-html/a00026_source.html	/^<a name="l02937"><\/a>02937                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l02938	doxygen-html/a00026_source.html	/^<a name="l02938"><\/a>02938                     <span class="keywordflow">else<\/span>$/;"	a
l02939	doxygen-html/a00026_source.html	/^<a name="l02939"><\/a>02939                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l02940	doxygen-html/a00026_source.html	/^<a name="l02940"><\/a>02940                 }$/;"	a
l02941	doxygen-html/a00026_source.html	/^<a name="l02941"><\/a>02941             }$/;"	a
l02942	doxygen-html/a00026_source.html	/^<a name="l02942"><\/a>02942 $/;"	a
l02943	doxygen-html/a00026_source.html	/^<a name="l02943"><\/a>02943             <span class="keywordflow">return<\/span> myres;$/;"	a
l02944	doxygen-html/a00026_source.html	/^<a name="l02944"><\/a>02944         }$/;"	a
l02945	doxygen-html/a00026_source.html	/^<a name="l02945"><\/a>02945     }$/;"	a
l02946	doxygen-html/a00026_source.html	/^<a name="l02946"><\/a>02946 <span class="comment"><\/span>$/;"	a
l02947	doxygen-html/a00026_source.html	/^<a name="l02947"><\/a>02947 <span class="comment">    \/** @brief Erase one key\/data pair referenced by an iterator in the B+<\/span>$/;"	a
l02948	doxygen-html/a00026_source.html	/^<a name="l02948"><\/a>02948 <span class="comment">     * tree.<\/span>$/;"	a
l02949	doxygen-html/a00026_source.html	/^<a name="l02949"><\/a>02949 <span class="comment">     *<\/span>$/;"	a
l02950	doxygen-html/a00026_source.html	/^<a name="l02950"><\/a>02950 <span class="comment">     * Descends down the tree in search of an iterator. During the descent the<\/span>$/;"	a
l02951	doxygen-html/a00026_source.html	/^<a name="l02951"><\/a>02951 <span class="comment">     * parent, left and right siblings and their parents are computed and<\/span>$/;"	a
l02952	doxygen-html/a00026_source.html	/^<a name="l02952"><\/a>02952 <span class="comment">     * passed down. The difficulty is that the iterator contains only a pointer<\/span>$/;"	a
l02953	doxygen-html/a00026_source.html	/^<a name="l02953"><\/a>02953 <span class="comment">     * to a leaf_node, which means that this function must do a recursive depth<\/span>$/;"	a
l02954	doxygen-html/a00026_source.html	/^<a name="l02954"><\/a>02954 <span class="comment">     * first search for that leaf node in the subtree containing all pairs of<\/span>$/;"	a
l02955	doxygen-html/a00026_source.html	/^<a name="l02955"><\/a>02955 <span class="comment">     * the same key. This subtree can be very large, even the whole tree,<\/span>$/;"	a
l02956	doxygen-html/a00026_source.html	/^<a name="l02956"><\/a>02956 <span class="comment">     * though in practice it would not make sense to have so many duplicate<\/span>$/;"	a
l02957	doxygen-html/a00026_source.html	/^<a name="l02957"><\/a>02957 <span class="comment">     * keys.<\/span>$/;"	a
l02958	doxygen-html/a00026_source.html	/^<a name="l02958"><\/a>02958 <span class="comment">     *<\/span>$/;"	a
l02959	doxygen-html/a00026_source.html	/^<a name="l02959"><\/a>02959 <span class="comment">     * Once the referenced key\/data pair is found, it is removed from the leaf<\/span>$/;"	a
l02960	doxygen-html/a00026_source.html	/^<a name="l02960"><\/a>02960 <span class="comment">     * and the same underflow cases are handled as in erase_one_descend.<\/span>$/;"	a
l02961	doxygen-html/a00026_source.html	/^<a name="l02961"><\/a>02961 <span class="comment">     *\/<\/span>$/;"	a
l02962	doxygen-html/a00026_source.html	/^<a name="l02962"><\/a><a class="code" href="a00001.html#a28e069672d73503156b4bc604064c4ac">02962<\/a>     result_t <a class="code" href="a00001.html#a28e069672d73503156b4bc604064c4ac" title="Erase one key\/data pair referenced by an iterator in the B+ tree.">erase_iter_descend<\/a>(<span class="keyword">const<\/span> iterator&amp; iter,$/;"	a
l02963	doxygen-html/a00026_source.html	/^<a name="l02963"><\/a>02963                                 node *curr,$/;"	a
l02964	doxygen-html/a00026_source.html	/^<a name="l02964"><\/a>02964                                 node *left, node *right,$/;"	a
l02965	doxygen-html/a00026_source.html	/^<a name="l02965"><\/a>02965                                 inner_node *leftparent, inner_node *rightparent,$/;"	a
l02966	doxygen-html/a00026_source.html	/^<a name="l02966"><\/a>02966                                 inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l02967	doxygen-html/a00026_source.html	/^<a name="l02967"><\/a>02967     {$/;"	a
l02968	doxygen-html/a00026_source.html	/^<a name="l02968"><\/a>02968         <span class="keywordflow">if<\/span> (curr-&gt;isleafnode())$/;"	a
l02969	doxygen-html/a00026_source.html	/^<a name="l02969"><\/a>02969         {$/;"	a
l02970	doxygen-html/a00026_source.html	/^<a name="l02970"><\/a>02970             leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(curr);$/;"	a
l02971	doxygen-html/a00026_source.html	/^<a name="l02971"><\/a>02971             leaf_node *leftleaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(left);$/;"	a
l02972	doxygen-html/a00026_source.html	/^<a name="l02972"><\/a>02972             leaf_node *rightleaf = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(right);$/;"	a
l02973	doxygen-html/a00026_source.html	/^<a name="l02973"><\/a>02973 $/;"	a
l02974	doxygen-html/a00026_source.html	/^<a name="l02974"><\/a>02974             <span class="comment">\/\/ if this is not the correct leaf, get next step in recursive<\/span>$/;"	a
l02975	doxygen-html/a00026_source.html	/^<a name="l02975"><\/a>02975             <span class="comment">\/\/ search<\/span>$/;"	a
l02976	doxygen-html/a00026_source.html	/^<a name="l02976"><\/a>02976             <span class="keywordflow">if<\/span> (leaf != iter.currnode)$/;"	a
l02977	doxygen-html/a00026_source.html	/^<a name="l02977"><\/a>02977             {$/;"	a
l02978	doxygen-html/a00026_source.html	/^<a name="l02978"><\/a>02978                 <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>;$/;"	a
l02979	doxygen-html/a00026_source.html	/^<a name="l02979"><\/a>02979             }$/;"	a
l02980	doxygen-html/a00026_source.html	/^<a name="l02980"><\/a>02980 $/;"	a
l02981	doxygen-html/a00026_source.html	/^<a name="l02981"><\/a>02981             <span class="keywordflow">if<\/span> (iter.currslot &gt;= leaf-&gt;slotuse)$/;"	a
l02982	doxygen-html/a00026_source.html	/^<a name="l02982"><\/a>02982             {$/;"	a
l02983	doxygen-html/a00026_source.html	/^<a name="l02983"><\/a>02983                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Could not find iterator (&quot;<\/span> &lt;&lt; iter.currnode &lt;&lt; <span class="stringliteral">&quot;,&quot;<\/span> &lt;&lt; iter.currslot &lt;&lt; <span class="stringliteral">&quot;) to erase. Invalid leaf node?&quot;<\/span>);$/;"	a
l02984	doxygen-html/a00026_source.html	/^<a name="l02984"><\/a>02984 $/;"	a
l02985	doxygen-html/a00026_source.html	/^<a name="l02985"><\/a>02985                 <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>;$/;"	a
l02986	doxygen-html/a00026_source.html	/^<a name="l02986"><\/a>02986             }$/;"	a
l02987	doxygen-html/a00026_source.html	/^<a name="l02987"><\/a>02987 $/;"	a
l02988	doxygen-html/a00026_source.html	/^<a name="l02988"><\/a>02988             <span class="keywordtype">int<\/span> slot = iter.currslot;$/;"	a
l02989	doxygen-html/a00026_source.html	/^<a name="l02989"><\/a>02989 $/;"	a
l02990	doxygen-html/a00026_source.html	/^<a name="l02990"><\/a>02990             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Found iterator in leaf &quot;<\/span> &lt;&lt; curr &lt;&lt; <span class="stringliteral">&quot; at slot &quot;<\/span> &lt;&lt; slot);$/;"	a
l02991	doxygen-html/a00026_source.html	/^<a name="l02991"><\/a>02991 $/;"	a
l02992	doxygen-html/a00026_source.html	/^<a name="l02992"><\/a>02992             std::copy(leaf-&gt;slotkey + slot+1, leaf-&gt;slotkey + leaf-&gt;slotuse,$/;"	a
l02993	doxygen-html/a00026_source.html	/^<a name="l02993"><\/a>02993                       leaf-&gt;slotkey + slot);$/;"	a
l02994	doxygen-html/a00026_source.html	/^<a name="l02994"><\/a>02994             <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(leaf-&gt;slotdata + slot+1, leaf-&gt;slotdata + leaf-&gt;slotuse,$/;"	a
l02995	doxygen-html/a00026_source.html	/^<a name="l02995"><\/a>02995                       leaf-&gt;slotdata + slot);$/;"	a
l02996	doxygen-html/a00026_source.html	/^<a name="l02996"><\/a>02996 $/;"	a
l02997	doxygen-html/a00026_source.html	/^<a name="l02997"><\/a>02997             leaf-&gt;slotuse--;$/;"	a
l02998	doxygen-html/a00026_source.html	/^<a name="l02998"><\/a>02998 $/;"	a
l02999	doxygen-html/a00026_source.html	/^<a name="l02999"><\/a>02999             result_t myres = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l03000	doxygen-html/a00026_source.html	/^<a name="l03000"><\/a>03000 $/;"	a
l03001	doxygen-html/a00026_source.html	/^<a name="l03001"><\/a>03001             <span class="comment">\/\/ if the last key of the leaf was changed, the parent is notified<\/span>$/;"	a
l03002	doxygen-html/a00026_source.html	/^<a name="l03002"><\/a>03002             <span class="comment">\/\/ and updates the key of this leaf<\/span>$/;"	a
l03003	doxygen-html/a00026_source.html	/^<a name="l03003"><\/a>03003             <span class="keywordflow">if<\/span> (slot == leaf-&gt;slotuse)$/;"	a
l03004	doxygen-html/a00026_source.html	/^<a name="l03004"><\/a>03004             {$/;"	a
l03005	doxygen-html/a00026_source.html	/^<a name="l03005"><\/a>03005                 <span class="keywordflow">if<\/span> (parent &amp;&amp; parentslot &lt; parent-&gt;slotuse)$/;"	a
l03006	doxygen-html/a00026_source.html	/^<a name="l03006"><\/a>03006                 {$/;"	a
l03007	doxygen-html/a00026_source.html	/^<a name="l03007"><\/a>03007                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == curr);$/;"	a
l03008	doxygen-html/a00026_source.html	/^<a name="l03008"><\/a>03008                     parent-&gt;slotkey[parentslot] = leaf-&gt;slotkey[leaf-&gt;slotuse - 1];$/;"	a
l03009	doxygen-html/a00026_source.html	/^<a name="l03009"><\/a>03009                 }$/;"	a
l03010	doxygen-html/a00026_source.html	/^<a name="l03010"><\/a>03010                 <span class="keywordflow">else<\/span>$/;"	a
l03011	doxygen-html/a00026_source.html	/^<a name="l03011"><\/a>03011                 {$/;"	a
l03012	doxygen-html/a00026_source.html	/^<a name="l03012"><\/a>03012                     <span class="keywordflow">if<\/span> (leaf-&gt;slotuse &gt;= 1)$/;"	a
l03013	doxygen-html/a00026_source.html	/^<a name="l03013"><\/a>03013                     {$/;"	a
l03014	doxygen-html/a00026_source.html	/^<a name="l03014"><\/a>03014                         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Scheduling lastkeyupdate: key &quot;<\/span> &lt;&lt; leaf-&gt;slotkey[leaf-&gt;slotuse - 1]);$/;"	a
l03015	doxygen-html/a00026_source.html	/^<a name="l03015"><\/a>03015                         myres |= result_t(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>, leaf-&gt;slotkey[leaf-&gt;slotuse - 1]);$/;"	a
l03016	doxygen-html/a00026_source.html	/^<a name="l03016"><\/a>03016                     }$/;"	a
l03017	doxygen-html/a00026_source.html	/^<a name="l03017"><\/a>03017                     <span class="keywordflow">else<\/span>$/;"	a
l03018	doxygen-html/a00026_source.html	/^<a name="l03018"><\/a>03018                     {$/;"	a
l03019	doxygen-html/a00026_source.html	/^<a name="l03019"><\/a>03019                         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l03020	doxygen-html/a00026_source.html	/^<a name="l03020"><\/a>03020                     }$/;"	a
l03021	doxygen-html/a00026_source.html	/^<a name="l03021"><\/a>03021                 }$/;"	a
l03022	doxygen-html/a00026_source.html	/^<a name="l03022"><\/a>03022             }$/;"	a
l03023	doxygen-html/a00026_source.html	/^<a name="l03023"><\/a>03023 $/;"	a
l03024	doxygen-html/a00026_source.html	/^<a name="l03024"><\/a>03024             <span class="keywordflow">if<\/span> (leaf-&gt;isunderflow() &amp;&amp; !(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> &amp;&amp; leaf-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> &gt;= 1))$/;"	a
l03025	doxygen-html/a00026_source.html	/^<a name="l03025"><\/a>03025             {$/;"	a
l03026	doxygen-html/a00026_source.html	/^<a name="l03026"><\/a>03026                 <span class="comment">\/\/ determine what to do about the underflow<\/span>$/;"	a
l03027	doxygen-html/a00026_source.html	/^<a name="l03027"><\/a>03027 $/;"	a
l03028	doxygen-html/a00026_source.html	/^<a name="l03028"><\/a>03028                 <span class="comment">\/\/ case : if this empty leaf is the root, then delete all nodes<\/span>$/;"	a
l03029	doxygen-html/a00026_source.html	/^<a name="l03029"><\/a>03029                 <span class="comment">\/\/ and set root to NULL.<\/span>$/;"	a
l03030	doxygen-html/a00026_source.html	/^<a name="l03030"><\/a>03030                 <span class="keywordflow">if<\/span> (leftleaf == NULL &amp;&amp; rightleaf == NULL)$/;"	a
l03031	doxygen-html/a00026_source.html	/^<a name="l03031"><\/a>03031                 {$/;"	a
l03032	doxygen-html/a00026_source.html	/^<a name="l03032"><\/a>03032                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l03033	doxygen-html/a00026_source.html	/^<a name="l03033"><\/a>03033                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leaf-&gt;slotuse == 0);$/;"	a
l03034	doxygen-html/a00026_source.html	/^<a name="l03034"><\/a>03034 $/;"	a
l03035	doxygen-html/a00026_source.html	/^<a name="l03035"><\/a>03035                     <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l03036	doxygen-html/a00026_source.html	/^<a name="l03036"><\/a>03036 $/;"	a
l03037	doxygen-html/a00026_source.html	/^<a name="l03037"><\/a>03037                     <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = leaf = NULL;$/;"	a
l03038	doxygen-html/a00026_source.html	/^<a name="l03038"><\/a>03038                     <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = NULL;$/;"	a
l03039	doxygen-html/a00026_source.html	/^<a name="l03039"><\/a>03039 $/;"	a
l03040	doxygen-html/a00026_source.html	/^<a name="l03040"><\/a>03040                     <span class="comment">\/\/ will be decremented soon by insert_start()<\/span>$/;"	a
l03041	doxygen-html/a00026_source.html	/^<a name="l03041"><\/a>03041                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> == 1);$/;"	a
l03042	doxygen-html/a00026_source.html	/^<a name="l03042"><\/a>03042                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> == 0);$/;"	a
l03043	doxygen-html/a00026_source.html	/^<a name="l03043"><\/a>03043                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(<a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> == 0);$/;"	a
l03044	doxygen-html/a00026_source.html	/^<a name="l03044"><\/a>03044 $/;"	a
l03045	doxygen-html/a00026_source.html	/^<a name="l03045"><\/a>03045                     <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l03046	doxygen-html/a00026_source.html	/^<a name="l03046"><\/a>03046                 }$/;"	a
l03047	doxygen-html/a00026_source.html	/^<a name="l03047"><\/a>03047                 <span class="comment">\/\/ case : if both left and right leaves would underflow in case of<\/span>$/;"	a
l03048	doxygen-html/a00026_source.html	/^<a name="l03048"><\/a>03048                 <span class="comment">\/\/ a shift, then merging is necessary. choose the more local merger<\/span>$/;"	a
l03049	doxygen-html/a00026_source.html	/^<a name="l03049"><\/a>03049                 <span class="comment">\/\/ with our parent<\/span>$/;"	a
l03050	doxygen-html/a00026_source.html	/^<a name="l03050"><\/a>03050                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf == NULL || leftleaf-&gt;isfew()) &amp;&amp; (rightleaf == NULL || rightleaf-&gt;isfew()) )$/;"	a
l03051	doxygen-html/a00026_source.html	/^<a name="l03051"><\/a>03051                 {$/;"	a
l03052	doxygen-html/a00026_source.html	/^<a name="l03052"><\/a>03052                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03053	doxygen-html/a00026_source.html	/^<a name="l03053"><\/a>03053                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leftleaf, leaf, leftparent);$/;"	a
l03054	doxygen-html/a00026_source.html	/^<a name="l03054"><\/a>03054                     <span class="keywordflow">else<\/span>$/;"	a
l03055	doxygen-html/a00026_source.html	/^<a name="l03055"><\/a>03055                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leaf, rightleaf, rightparent);$/;"	a
l03056	doxygen-html/a00026_source.html	/^<a name="l03056"><\/a>03056                 }$/;"	a
l03057	doxygen-html/a00026_source.html	/^<a name="l03057"><\/a>03057                 <span class="comment">\/\/ case : the right leaf has extra data, so balance right with current<\/span>$/;"	a
l03058	doxygen-html/a00026_source.html	/^<a name="l03058"><\/a>03058                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf != NULL &amp;&amp; leftleaf-&gt;isfew()) &amp;&amp; (rightleaf != NULL &amp;&amp; !rightleaf-&gt;isfew()) )$/;"	a
l03059	doxygen-html/a00026_source.html	/^<a name="l03059"><\/a>03059                 {$/;"	a
l03060	doxygen-html/a00026_source.html	/^<a name="l03060"><\/a>03060                     <span class="keywordflow">if<\/span> (rightparent == parent)$/;"	a
l03061	doxygen-html/a00026_source.html	/^<a name="l03061"><\/a>03061                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l03062	doxygen-html/a00026_source.html	/^<a name="l03062"><\/a>03062                     <span class="keywordflow">else<\/span>$/;"	a
l03063	doxygen-html/a00026_source.html	/^<a name="l03063"><\/a>03063                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leftleaf, leaf, leftparent);$/;"	a
l03064	doxygen-html/a00026_source.html	/^<a name="l03064"><\/a>03064                 }$/;"	a
l03065	doxygen-html/a00026_source.html	/^<a name="l03065"><\/a>03065                 <span class="comment">\/\/ case : the left leaf has extra data, so balance left with current<\/span>$/;"	a
l03066	doxygen-html/a00026_source.html	/^<a name="l03066"><\/a>03066                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftleaf != NULL &amp;&amp; !leftleaf-&gt;isfew()) &amp;&amp; (rightleaf != NULL &amp;&amp; rightleaf-&gt;isfew()) )$/;"	a
l03067	doxygen-html/a00026_source.html	/^<a name="l03067"><\/a>03067                 {$/;"	a
l03068	doxygen-html/a00026_source.html	/^<a name="l03068"><\/a>03068                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03069	doxygen-html/a00026_source.html	/^<a name="l03069"><\/a>03069                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l03070	doxygen-html/a00026_source.html	/^<a name="l03070"><\/a>03070                     <span class="keywordflow">else<\/span>$/;"	a
l03071	doxygen-html/a00026_source.html	/^<a name="l03071"><\/a>03071                         myres |= <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leaf, rightleaf, rightparent);$/;"	a
l03072	doxygen-html/a00026_source.html	/^<a name="l03072"><\/a>03072                 }$/;"	a
l03073	doxygen-html/a00026_source.html	/^<a name="l03073"><\/a>03073                 <span class="comment">\/\/ case : both the leaf and right leaves have extra data and our<\/span>$/;"	a
l03074	doxygen-html/a00026_source.html	/^<a name="l03074"><\/a>03074                 <span class="comment">\/\/ parent, choose the leaf with more data<\/span>$/;"	a
l03075	doxygen-html/a00026_source.html	/^<a name="l03075"><\/a>03075                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (leftparent == rightparent)$/;"	a
l03076	doxygen-html/a00026_source.html	/^<a name="l03076"><\/a>03076                 {$/;"	a
l03077	doxygen-html/a00026_source.html	/^<a name="l03077"><\/a>03077                     <span class="keywordflow">if<\/span> (leftleaf-&gt;slotuse &lt;= rightleaf-&gt;slotuse)$/;"	a
l03078	doxygen-html/a00026_source.html	/^<a name="l03078"><\/a>03078                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l03079	doxygen-html/a00026_source.html	/^<a name="l03079"><\/a>03079                     <span class="keywordflow">else<\/span>$/;"	a
l03080	doxygen-html/a00026_source.html	/^<a name="l03080"><\/a>03080                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l03081	doxygen-html/a00026_source.html	/^<a name="l03081"><\/a>03081                 }$/;"	a
l03082	doxygen-html/a00026_source.html	/^<a name="l03082"><\/a>03082                 <span class="keywordflow">else<\/span>$/;"	a
l03083	doxygen-html/a00026_source.html	/^<a name="l03083"><\/a>03083                 {$/;"	a
l03084	doxygen-html/a00026_source.html	/^<a name="l03084"><\/a>03084                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03085	doxygen-html/a00026_source.html	/^<a name="l03085"><\/a>03085                         <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leftleaf, leaf, leftparent, parentslot - 1);$/;"	a
l03086	doxygen-html/a00026_source.html	/^<a name="l03086"><\/a>03086                     <span class="keywordflow">else<\/span>$/;"	a
l03087	doxygen-html/a00026_source.html	/^<a name="l03087"><\/a>03087                         myres |= <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf, rightleaf, rightparent, parentslot);$/;"	a
l03088	doxygen-html/a00026_source.html	/^<a name="l03088"><\/a>03088                 }$/;"	a
l03089	doxygen-html/a00026_source.html	/^<a name="l03089"><\/a>03089             }$/;"	a
l03090	doxygen-html/a00026_source.html	/^<a name="l03090"><\/a>03090 $/;"	a
l03091	doxygen-html/a00026_source.html	/^<a name="l03091"><\/a>03091             <span class="keywordflow">return<\/span> myres;$/;"	a
l03092	doxygen-html/a00026_source.html	/^<a name="l03092"><\/a>03092         }$/;"	a
l03093	doxygen-html/a00026_source.html	/^<a name="l03093"><\/a>03093         <span class="keywordflow">else<\/span> <span class="comment">\/\/ !curr-&gt;isleafnode()<\/span>$/;"	a
l03094	doxygen-html/a00026_source.html	/^<a name="l03094"><\/a>03094         {$/;"	a
l03095	doxygen-html/a00026_source.html	/^<a name="l03095"><\/a>03095             inner_node *inner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(curr);$/;"	a
l03096	doxygen-html/a00026_source.html	/^<a name="l03096"><\/a>03096             inner_node *leftinner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(left);$/;"	a
l03097	doxygen-html/a00026_source.html	/^<a name="l03097"><\/a>03097             inner_node *rightinner = <span class="keyword">static_cast&lt;<\/span>inner_node*<span class="keyword">&gt;<\/span>(right);$/;"	a
l03098	doxygen-html/a00026_source.html	/^<a name="l03098"><\/a>03098 $/;"	a
l03099	doxygen-html/a00026_source.html	/^<a name="l03099"><\/a>03099             <span class="comment">\/\/ find first slot below which the searched iterator might be<\/span>$/;"	a
l03100	doxygen-html/a00026_source.html	/^<a name="l03100"><\/a>03100             <span class="comment">\/\/ located.<\/span>$/;"	a
l03101	doxygen-html/a00026_source.html	/^<a name="l03101"><\/a>03101 $/;"	a
l03102	doxygen-html/a00026_source.html	/^<a name="l03102"><\/a>03102             result_t result;$/;"	a
l03103	doxygen-html/a00026_source.html	/^<a name="l03103"><\/a>03103             <span class="keywordtype">int<\/span> slot = <a class="code" href="a00001.html#a605361a6a2254edf8ecdffef35a85669" title="Searches for the first key in the node n greater or equal to key.">find_lower<\/a>(inner, iter.key());$/;"	a
l03104	doxygen-html/a00026_source.html	/^<a name="l03104"><\/a>03104 $/;"	a
l03105	doxygen-html/a00026_source.html	/^<a name="l03105"><\/a>03105             <span class="keywordflow">while<\/span> (slot &lt;= inner-&gt;slotuse)$/;"	a
l03106	doxygen-html/a00026_source.html	/^<a name="l03106"><\/a>03106             {$/;"	a
l03107	doxygen-html/a00026_source.html	/^<a name="l03107"><\/a>03107                 node *myleft, *myright;$/;"	a
l03108	doxygen-html/a00026_source.html	/^<a name="l03108"><\/a>03108                 inner_node *myleftparent, *myrightparent;$/;"	a
l03109	doxygen-html/a00026_source.html	/^<a name="l03109"><\/a>03109 $/;"	a
l03110	doxygen-html/a00026_source.html	/^<a name="l03110"><\/a>03110                 <span class="keywordflow">if<\/span> (slot == 0) {$/;"	a
l03111	doxygen-html/a00026_source.html	/^<a name="l03111"><\/a>03111                     myleft = (left == NULL) ? NULL : (static_cast&lt;inner_node*&gt;(left))-&gt;childid[left-&gt;slotuse - 1];$/;"	a
l03112	doxygen-html/a00026_source.html	/^<a name="l03112"><\/a>03112                     myleftparent = leftparent;$/;"	a
l03113	doxygen-html/a00026_source.html	/^<a name="l03113"><\/a>03113                 }$/;"	a
l03114	doxygen-html/a00026_source.html	/^<a name="l03114"><\/a>03114                 <span class="keywordflow">else<\/span> {$/;"	a
l03115	doxygen-html/a00026_source.html	/^<a name="l03115"><\/a>03115                     myleft = inner-&gt;childid[slot - 1];$/;"	a
l03116	doxygen-html/a00026_source.html	/^<a name="l03116"><\/a>03116                     myleftparent = inner;$/;"	a
l03117	doxygen-html/a00026_source.html	/^<a name="l03117"><\/a>03117                 }$/;"	a
l03118	doxygen-html/a00026_source.html	/^<a name="l03118"><\/a>03118 $/;"	a
l03119	doxygen-html/a00026_source.html	/^<a name="l03119"><\/a>03119                 <span class="keywordflow">if<\/span> (slot == inner-&gt;slotuse) {$/;"	a
l03120	doxygen-html/a00026_source.html	/^<a name="l03120"><\/a>03120                     myright = (right == NULL) ? NULL : (static_cast&lt;inner_node*&gt;(right))-&gt;childid[0];$/;"	a
l03121	doxygen-html/a00026_source.html	/^<a name="l03121"><\/a>03121                     myrightparent = rightparent;$/;"	a
l03122	doxygen-html/a00026_source.html	/^<a name="l03122"><\/a>03122                 }$/;"	a
l03123	doxygen-html/a00026_source.html	/^<a name="l03123"><\/a>03123                 <span class="keywordflow">else<\/span> {$/;"	a
l03124	doxygen-html/a00026_source.html	/^<a name="l03124"><\/a>03124                     myright = inner-&gt;childid[slot + 1];$/;"	a
l03125	doxygen-html/a00026_source.html	/^<a name="l03125"><\/a>03125                     myrightparent = inner;$/;"	a
l03126	doxygen-html/a00026_source.html	/^<a name="l03126"><\/a>03126                 }$/;"	a
l03127	doxygen-html/a00026_source.html	/^<a name="l03127"><\/a>03127 $/;"	a
l03128	doxygen-html/a00026_source.html	/^<a name="l03128"><\/a>03128                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;erase_iter_descend into &quot;<\/span> &lt;&lt; inner-&gt;childid[slot]);$/;"	a
l03129	doxygen-html/a00026_source.html	/^<a name="l03129"><\/a>03129 $/;"	a
l03130	doxygen-html/a00026_source.html	/^<a name="l03130"><\/a>03130                 result = <a class="code" href="a00001.html#a28e069672d73503156b4bc604064c4ac" title="Erase one key\/data pair referenced by an iterator in the B+ tree.">erase_iter_descend<\/a>(iter,$/;"	a
l03131	doxygen-html/a00026_source.html	/^<a name="l03131"><\/a>03131                                             inner-&gt;childid[slot],$/;"	a
l03132	doxygen-html/a00026_source.html	/^<a name="l03132"><\/a>03132                                             myleft, myright,$/;"	a
l03133	doxygen-html/a00026_source.html	/^<a name="l03133"><\/a>03133                                             myleftparent, myrightparent,$/;"	a
l03134	doxygen-html/a00026_source.html	/^<a name="l03134"><\/a>03134                                             inner, slot);$/;"	a
l03135	doxygen-html/a00026_source.html	/^<a name="l03135"><\/a>03135 $/;"	a
l03136	doxygen-html/a00026_source.html	/^<a name="l03136"><\/a>03136                 <span class="keywordflow">if<\/span> (!result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>))$/;"	a
l03137	doxygen-html/a00026_source.html	/^<a name="l03137"><\/a>03137                     <span class="keywordflow">break<\/span>;$/;"	a
l03138	doxygen-html/a00026_source.html	/^<a name="l03138"><\/a>03138 $/;"	a
l03139	doxygen-html/a00026_source.html	/^<a name="l03139"><\/a>03139                 <span class="comment">\/\/ continue recursive search for leaf on next slot<\/span>$/;"	a
l03140	doxygen-html/a00026_source.html	/^<a name="l03140"><\/a>03140 $/;"	a
l03141	doxygen-html/a00026_source.html	/^<a name="l03141"><\/a>03141                 <span class="keywordflow">if<\/span> (slot &lt; inner-&gt;slotuse &amp;&amp; <a class="code" href="a00001.html#a6ab60bc4547d2363c0a0d1b89e1e6c32" title="True if a &lt; b ? &quot;constructed&quot; from m_key_less()">key_less<\/a>(inner-&gt;slotkey[slot],iter.key()))$/;"	a
l03142	doxygen-html/a00026_source.html	/^<a name="l03142"><\/a>03142                     <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>;$/;"	a
l03143	doxygen-html/a00026_source.html	/^<a name="l03143"><\/a>03143 $/;"	a
l03144	doxygen-html/a00026_source.html	/^<a name="l03144"><\/a>03144                 ++slot;$/;"	a
l03145	doxygen-html/a00026_source.html	/^<a name="l03145"><\/a>03145             }$/;"	a
l03146	doxygen-html/a00026_source.html	/^<a name="l03146"><\/a>03146 $/;"	a
l03147	doxygen-html/a00026_source.html	/^<a name="l03147"><\/a>03147             <span class="keywordflow">if<\/span> (slot &gt; inner-&gt;slotuse)$/;"	a
l03148	doxygen-html/a00026_source.html	/^<a name="l03148"><\/a>03148                 <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba9c5aae923574ee89980049e9088f943e" title="Deletion not successful because key was not found.">btree_not_found<\/a>;$/;"	a
l03149	doxygen-html/a00026_source.html	/^<a name="l03149"><\/a>03149 $/;"	a
l03150	doxygen-html/a00026_source.html	/^<a name="l03150"><\/a>03150             result_t myres = <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l03151	doxygen-html/a00026_source.html	/^<a name="l03151"><\/a>03151 $/;"	a
l03152	doxygen-html/a00026_source.html	/^<a name="l03152"><\/a>03152             <span class="keywordflow">if<\/span> (result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>))$/;"	a
l03153	doxygen-html/a00026_source.html	/^<a name="l03153"><\/a>03153             {$/;"	a
l03154	doxygen-html/a00026_source.html	/^<a name="l03154"><\/a>03154                 <span class="keywordflow">if<\/span> (parent &amp;&amp; parentslot &lt; parent-&gt;slotuse)$/;"	a
l03155	doxygen-html/a00026_source.html	/^<a name="l03155"><\/a>03155                 {$/;"	a
l03156	doxygen-html/a00026_source.html	/^<a name="l03156"><\/a>03156                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Fixing lastkeyupdate: key &quot;<\/span> &lt;&lt; result.lastkey &lt;&lt; <span class="stringliteral">&quot; into parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot; at parentslot &quot;<\/span> &lt;&lt; parentslot);$/;"	a
l03157	doxygen-html/a00026_source.html	/^<a name="l03157"><\/a>03157 $/;"	a
l03158	doxygen-html/a00026_source.html	/^<a name="l03158"><\/a>03158                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == curr);$/;"	a
l03159	doxygen-html/a00026_source.html	/^<a name="l03159"><\/a>03159                     parent-&gt;slotkey[parentslot] = result.lastkey;$/;"	a
l03160	doxygen-html/a00026_source.html	/^<a name="l03160"><\/a>03160                 }$/;"	a
l03161	doxygen-html/a00026_source.html	/^<a name="l03161"><\/a>03161                 <span class="keywordflow">else<\/span>$/;"	a
l03162	doxygen-html/a00026_source.html	/^<a name="l03162"><\/a>03162                 {$/;"	a
l03163	doxygen-html/a00026_source.html	/^<a name="l03163"><\/a>03163                     <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Forwarding lastkeyupdate: key &quot;<\/span> &lt;&lt; result.lastkey);$/;"	a
l03164	doxygen-html/a00026_source.html	/^<a name="l03164"><\/a>03164                     myres |= result_t(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>, result.lastkey);$/;"	a
l03165	doxygen-html/a00026_source.html	/^<a name="l03165"><\/a>03165                 }$/;"	a
l03166	doxygen-html/a00026_source.html	/^<a name="l03166"><\/a>03166             }$/;"	a
l03167	doxygen-html/a00026_source.html	/^<a name="l03167"><\/a>03167 $/;"	a
l03168	doxygen-html/a00026_source.html	/^<a name="l03168"><\/a>03168             <span class="keywordflow">if<\/span> (result.has(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43" title="Deletion successful, children nodes were merged and the parent needs to remove the empty node...">btree_fixmerge<\/a>))$/;"	a
l03169	doxygen-html/a00026_source.html	/^<a name="l03169"><\/a>03169             {$/;"	a
l03170	doxygen-html/a00026_source.html	/^<a name="l03170"><\/a>03170                 <span class="comment">\/\/ either the current node or the next is empty and should be removed<\/span>$/;"	a
l03171	doxygen-html/a00026_source.html	/^<a name="l03171"><\/a>03171                 <span class="keywordflow">if<\/span> (inner-&gt;childid[slot]-&gt;slotuse != 0)$/;"	a
l03172	doxygen-html/a00026_source.html	/^<a name="l03172"><\/a>03172                     slot++;$/;"	a
l03173	doxygen-html/a00026_source.html	/^<a name="l03173"><\/a>03173 $/;"	a
l03174	doxygen-html/a00026_source.html	/^<a name="l03174"><\/a>03174                 <span class="comment">\/\/ this is the child slot invalidated by the merge<\/span>$/;"	a
l03175	doxygen-html/a00026_source.html	/^<a name="l03175"><\/a>03175                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;childid[slot]-&gt;slotuse == 0);$/;"	a
l03176	doxygen-html/a00026_source.html	/^<a name="l03176"><\/a>03176 $/;"	a
l03177	doxygen-html/a00026_source.html	/^<a name="l03177"><\/a>03177                 <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(inner-&gt;childid[slot]);$/;"	a
l03178	doxygen-html/a00026_source.html	/^<a name="l03178"><\/a>03178 $/;"	a
l03179	doxygen-html/a00026_source.html	/^<a name="l03179"><\/a>03179                 std::copy(inner-&gt;slotkey + slot, inner-&gt;slotkey + inner-&gt;slotuse,$/;"	a
l03180	doxygen-html/a00026_source.html	/^<a name="l03180"><\/a>03180                           inner-&gt;slotkey + slot-1);$/;"	a
l03181	doxygen-html/a00026_source.html	/^<a name="l03181"><\/a>03181                 std::copy(inner-&gt;childid + slot+1, inner-&gt;childid + inner-&gt;slotuse+1,$/;"	a
l03182	doxygen-html/a00026_source.html	/^<a name="l03182"><\/a>03182                           inner-&gt;childid + slot);$/;"	a
l03183	doxygen-html/a00026_source.html	/^<a name="l03183"><\/a>03183 $/;"	a
l03184	doxygen-html/a00026_source.html	/^<a name="l03184"><\/a>03184                 inner-&gt;slotuse--;$/;"	a
l03185	doxygen-html/a00026_source.html	/^<a name="l03185"><\/a>03185 $/;"	a
l03186	doxygen-html/a00026_source.html	/^<a name="l03186"><\/a>03186                 <span class="keywordflow">if<\/span> (inner-&gt;level == 1)$/;"	a
l03187	doxygen-html/a00026_source.html	/^<a name="l03187"><\/a>03187                 {$/;"	a
l03188	doxygen-html/a00026_source.html	/^<a name="l03188"><\/a>03188                     <span class="comment">\/\/ fix split key for children leaves<\/span>$/;"	a
l03189	doxygen-html/a00026_source.html	/^<a name="l03189"><\/a>03189                     slot--;$/;"	a
l03190	doxygen-html/a00026_source.html	/^<a name="l03190"><\/a>03190                     leaf_node *child = <span class="keyword">static_cast&lt;<\/span>leaf_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot]);$/;"	a
l03191	doxygen-html/a00026_source.html	/^<a name="l03191"><\/a>03191                     inner-&gt;slotkey[slot] = child-&gt;slotkey[ child-&gt;slotuse-1 ];$/;"	a
l03192	doxygen-html/a00026_source.html	/^<a name="l03192"><\/a>03192                 }$/;"	a
l03193	doxygen-html/a00026_source.html	/^<a name="l03193"><\/a>03193             }$/;"	a
l03194	doxygen-html/a00026_source.html	/^<a name="l03194"><\/a>03194 $/;"	a
l03195	doxygen-html/a00026_source.html	/^<a name="l03195"><\/a>03195             <span class="keywordflow">if<\/span> (inner-&gt;isunderflow() &amp;&amp; !(inner == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> &amp;&amp; inner-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> &gt;= 1))$/;"	a
l03196	doxygen-html/a00026_source.html	/^<a name="l03196"><\/a>03196             {$/;"	a
l03197	doxygen-html/a00026_source.html	/^<a name="l03197"><\/a>03197                 <span class="comment">\/\/ case: the inner node is the root and has just one<\/span>$/;"	a
l03198	doxygen-html/a00026_source.html	/^<a name="l03198"><\/a>03198                 <span class="comment">\/\/ child. that child becomes the new root<\/span>$/;"	a
l03199	doxygen-html/a00026_source.html	/^<a name="l03199"><\/a>03199                 <span class="keywordflow">if<\/span> (leftinner == NULL &amp;&amp; rightinner == NULL)$/;"	a
l03200	doxygen-html/a00026_source.html	/^<a name="l03200"><\/a>03200                 {$/;"	a
l03201	doxygen-html/a00026_source.html	/^<a name="l03201"><\/a>03201                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l03202	doxygen-html/a00026_source.html	/^<a name="l03202"><\/a>03202                     <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(inner-&gt;slotuse == 0);$/;"	a
l03203	doxygen-html/a00026_source.html	/^<a name="l03203"><\/a>03203 $/;"	a
l03204	doxygen-html/a00026_source.html	/^<a name="l03204"><\/a>03204                     <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = inner-&gt;childid[0];$/;"	a
l03205	doxygen-html/a00026_source.html	/^<a name="l03205"><\/a>03205 $/;"	a
l03206	doxygen-html/a00026_source.html	/^<a name="l03206"><\/a>03206                     inner-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> = 0;$/;"	a
l03207	doxygen-html/a00026_source.html	/^<a name="l03207"><\/a>03207                     <a class="code" href="a00001.html#a1bac362a2e8585e6682d332c9b4ec583" title="Correctly free either inner or leaf node, destructs all contained key and value objects.">free_node<\/a>(inner);$/;"	a
l03208	doxygen-html/a00026_source.html	/^<a name="l03208"><\/a>03208 $/;"	a
l03209	doxygen-html/a00026_source.html	/^<a name="l03209"><\/a>03209                     <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l03210	doxygen-html/a00026_source.html	/^<a name="l03210"><\/a>03210                 }$/;"	a
l03211	doxygen-html/a00026_source.html	/^<a name="l03211"><\/a>03211                 <span class="comment">\/\/ case : if both left and right leaves would underflow in case of<\/span>$/;"	a
l03212	doxygen-html/a00026_source.html	/^<a name="l03212"><\/a>03212                 <span class="comment">\/\/ a shift, then merging is necessary. choose the more local merger<\/span>$/;"	a
l03213	doxygen-html/a00026_source.html	/^<a name="l03213"><\/a>03213                 <span class="comment">\/\/ with our parent<\/span>$/;"	a
l03214	doxygen-html/a00026_source.html	/^<a name="l03214"><\/a>03214                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner == NULL || leftinner-&gt;isfew()) &amp;&amp; (rightinner == NULL || rightinner-&gt;isfew()) )$/;"	a
l03215	doxygen-html/a00026_source.html	/^<a name="l03215"><\/a>03215                 {$/;"	a
l03216	doxygen-html/a00026_source.html	/^<a name="l03216"><\/a>03216                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03217	doxygen-html/a00026_source.html	/^<a name="l03217"><\/a>03217                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l03218	doxygen-html/a00026_source.html	/^<a name="l03218"><\/a>03218                     <span class="keywordflow">else<\/span>$/;"	a
l03219	doxygen-html/a00026_source.html	/^<a name="l03219"><\/a>03219                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l03220	doxygen-html/a00026_source.html	/^<a name="l03220"><\/a>03220                 }$/;"	a
l03221	doxygen-html/a00026_source.html	/^<a name="l03221"><\/a>03221                 <span class="comment">\/\/ case : the right leaf has extra data, so balance right with current<\/span>$/;"	a
l03222	doxygen-html/a00026_source.html	/^<a name="l03222"><\/a>03222                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner != NULL &amp;&amp; leftinner-&gt;isfew()) &amp;&amp; (rightinner != NULL &amp;&amp; !rightinner-&gt;isfew()) )$/;"	a
l03223	doxygen-html/a00026_source.html	/^<a name="l03223"><\/a>03223                 {$/;"	a
l03224	doxygen-html/a00026_source.html	/^<a name="l03224"><\/a>03224                     <span class="keywordflow">if<\/span> (rightparent == parent)$/;"	a
l03225	doxygen-html/a00026_source.html	/^<a name="l03225"><\/a>03225                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l03226	doxygen-html/a00026_source.html	/^<a name="l03226"><\/a>03226                     <span class="keywordflow">else<\/span>$/;"	a
l03227	doxygen-html/a00026_source.html	/^<a name="l03227"><\/a>03227                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l03228	doxygen-html/a00026_source.html	/^<a name="l03228"><\/a>03228                 }$/;"	a
l03229	doxygen-html/a00026_source.html	/^<a name="l03229"><\/a>03229                 <span class="comment">\/\/ case : the left leaf has extra data, so balance left with current<\/span>$/;"	a
l03230	doxygen-html/a00026_source.html	/^<a name="l03230"><\/a>03230                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> ( (leftinner != NULL &amp;&amp; !leftinner-&gt;isfew()) &amp;&amp; (rightinner != NULL &amp;&amp; rightinner-&gt;isfew()) )$/;"	a
l03231	doxygen-html/a00026_source.html	/^<a name="l03231"><\/a>03231                 {$/;"	a
l03232	doxygen-html/a00026_source.html	/^<a name="l03232"><\/a>03232                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03233	doxygen-html/a00026_source.html	/^<a name="l03233"><\/a>03233                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l03234	doxygen-html/a00026_source.html	/^<a name="l03234"><\/a>03234                     <span class="keywordflow">else<\/span>$/;"	a
l03235	doxygen-html/a00026_source.html	/^<a name="l03235"><\/a>03235                         myres |= <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l03236	doxygen-html/a00026_source.html	/^<a name="l03236"><\/a>03236                 }$/;"	a
l03237	doxygen-html/a00026_source.html	/^<a name="l03237"><\/a>03237                 <span class="comment">\/\/ case : both the leaf and right leaves have extra data and our<\/span>$/;"	a
l03238	doxygen-html/a00026_source.html	/^<a name="l03238"><\/a>03238                 <span class="comment">\/\/ parent, choose the leaf with more data<\/span>$/;"	a
l03239	doxygen-html/a00026_source.html	/^<a name="l03239"><\/a>03239                 <span class="keywordflow">else<\/span> <span class="keywordflow">if<\/span> (leftparent == rightparent)$/;"	a
l03240	doxygen-html/a00026_source.html	/^<a name="l03240"><\/a>03240                 {$/;"	a
l03241	doxygen-html/a00026_source.html	/^<a name="l03241"><\/a>03241                     <span class="keywordflow">if<\/span> (leftinner-&gt;slotuse &lt;= rightinner-&gt;slotuse)$/;"	a
l03242	doxygen-html/a00026_source.html	/^<a name="l03242"><\/a>03242                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l03243	doxygen-html/a00026_source.html	/^<a name="l03243"><\/a>03243                     <span class="keywordflow">else<\/span>$/;"	a
l03244	doxygen-html/a00026_source.html	/^<a name="l03244"><\/a>03244                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l03245	doxygen-html/a00026_source.html	/^<a name="l03245"><\/a>03245                 }$/;"	a
l03246	doxygen-html/a00026_source.html	/^<a name="l03246"><\/a>03246                 <span class="keywordflow">else<\/span>$/;"	a
l03247	doxygen-html/a00026_source.html	/^<a name="l03247"><\/a>03247                 {$/;"	a
l03248	doxygen-html/a00026_source.html	/^<a name="l03248"><\/a>03248                     <span class="keywordflow">if<\/span> (leftparent == parent)$/;"	a
l03249	doxygen-html/a00026_source.html	/^<a name="l03249"><\/a>03249                         <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(leftinner, inner, leftparent, parentslot - 1);$/;"	a
l03250	doxygen-html/a00026_source.html	/^<a name="l03250"><\/a>03250                     <span class="keywordflow">else<\/span>$/;"	a
l03251	doxygen-html/a00026_source.html	/^<a name="l03251"><\/a>03251                         <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner, rightinner, rightparent, parentslot);$/;"	a
l03252	doxygen-html/a00026_source.html	/^<a name="l03252"><\/a>03252                 }$/;"	a
l03253	doxygen-html/a00026_source.html	/^<a name="l03253"><\/a>03253             }$/;"	a
l03254	doxygen-html/a00026_source.html	/^<a name="l03254"><\/a>03254 $/;"	a
l03255	doxygen-html/a00026_source.html	/^<a name="l03255"><\/a>03255             <span class="keywordflow">return<\/span> myres;$/;"	a
l03256	doxygen-html/a00026_source.html	/^<a name="l03256"><\/a>03256         }$/;"	a
l03257	doxygen-html/a00026_source.html	/^<a name="l03257"><\/a>03257     }$/;"	a
l03258	doxygen-html/a00026_source.html	/^<a name="l03258"><\/a>03258 <span class="comment"><\/span>$/;"	a
l03259	doxygen-html/a00026_source.html	/^<a name="l03259"><\/a>03259 <span class="comment">    \/\/\/ Merge two leaf nodes. The function moves all key\/data pairs from right<\/span>$/;"	a
l03260	doxygen-html/a00026_source.html	/^<a name="l03260"><\/a>03260 <span class="comment">    \/\/\/ to left and sets right&#39;s slotuse to zero. The right slot is then<\/span>$/;"	a
l03261	doxygen-html/a00026_source.html	/^<a name="l03261"><\/a>03261 <span class="comment">    \/\/\/ removed by the calling parent node.<\/span>$/;"	a
l03262	doxygen-html/a00026_source.html	/^<a name="l03262"><\/a><a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9">03262<\/a> <span class="comment"><\/span>    result_t <a class="code" href="a00001.html#a8fde1571d49bf44f58f492ccad6875f9" title="Merge two leaf nodes.">merge_leaves<\/a>(leaf_node* left, leaf_node* right, inner_node* parent)$/;"	a
l03263	doxygen-html/a00026_source.html	/^<a name="l03263"><\/a>03263     {$/;"	a
l03264	doxygen-html/a00026_source.html	/^<a name="l03264"><\/a>03264         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Merge leaf nodes &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; and &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03265	doxygen-html/a00026_source.html	/^<a name="l03265"><\/a>03265         (void)parent;$/;"	a
l03266	doxygen-html/a00026_source.html	/^<a name="l03266"><\/a>03266 $/;"	a
l03267	doxygen-html/a00026_source.html	/^<a name="l03267"><\/a>03267         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;isleafnode() &amp;&amp; right-&gt;isleafnode());$/;"	a
l03268	doxygen-html/a00026_source.html	/^<a name="l03268"><\/a>03268         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == 1);$/;"	a
l03269	doxygen-html/a00026_source.html	/^<a name="l03269"><\/a>03269 $/;"	a
l03270	doxygen-html/a00026_source.html	/^<a name="l03270"><\/a>03270         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse + right-&gt;slotuse &lt; <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>);$/;"	a
l03271	doxygen-html/a00026_source.html	/^<a name="l03271"><\/a>03271 $/;"	a
l03272	doxygen-html/a00026_source.html	/^<a name="l03272"><\/a>03272         std::copy(right-&gt;slotkey, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03273	doxygen-html/a00026_source.html	/^<a name="l03273"><\/a>03273                   left-&gt;slotkey + left-&gt;slotuse);$/;"	a
l03274	doxygen-html/a00026_source.html	/^<a name="l03274"><\/a>03274         <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(right-&gt;slotdata, right-&gt;slotdata + right-&gt;slotuse,$/;"	a
l03275	doxygen-html/a00026_source.html	/^<a name="l03275"><\/a>03275                   left-&gt;slotdata + left-&gt;slotuse);$/;"	a
l03276	doxygen-html/a00026_source.html	/^<a name="l03276"><\/a>03276 $/;"	a
l03277	doxygen-html/a00026_source.html	/^<a name="l03277"><\/a>03277         left-&gt;slotuse += right-&gt;slotuse;$/;"	a
l03278	doxygen-html/a00026_source.html	/^<a name="l03278"><\/a>03278 $/;"	a
l03279	doxygen-html/a00026_source.html	/^<a name="l03279"><\/a>03279         left-&gt;nextleaf = right-&gt;nextleaf;$/;"	a
l03280	doxygen-html/a00026_source.html	/^<a name="l03280"><\/a>03280         <span class="keywordflow">if<\/span> (left-&gt;nextleaf)$/;"	a
l03281	doxygen-html/a00026_source.html	/^<a name="l03281"><\/a>03281             left-&gt;nextleaf-&gt;prevleaf = left;$/;"	a
l03282	doxygen-html/a00026_source.html	/^<a name="l03282"><\/a>03282         <span class="keywordflow">else<\/span>$/;"	a
l03283	doxygen-html/a00026_source.html	/^<a name="l03283"><\/a>03283             <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = left;$/;"	a
l03284	doxygen-html/a00026_source.html	/^<a name="l03284"><\/a>03284 $/;"	a
l03285	doxygen-html/a00026_source.html	/^<a name="l03285"><\/a>03285         right-&gt;<a class="code" href="a00018.html#a3c6e7088a8ca73d43cec76973bb8f903" title="Number of key slotuse use, so number of valid children or data pointers.">slotuse<\/a> = 0;$/;"	a
l03286	doxygen-html/a00026_source.html	/^<a name="l03286"><\/a>03286 $/;"	a
l03287	doxygen-html/a00026_source.html	/^<a name="l03287"><\/a>03287         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43" title="Deletion successful, children nodes were merged and the parent needs to remove the empty node...">btree_fixmerge<\/a>;$/;"	a
l03288	doxygen-html/a00026_source.html	/^<a name="l03288"><\/a>03288     }$/;"	a
l03289	doxygen-html/a00026_source.html	/^<a name="l03289"><\/a>03289 <span class="comment"><\/span>$/;"	a
l03290	doxygen-html/a00026_source.html	/^<a name="l03290"><\/a>03290 <span class="comment">    \/\/\/ Merge two inner nodes. The function moves all key\/childid pairs from<\/span>$/;"	a
l03291	doxygen-html/a00026_source.html	/^<a name="l03291"><\/a>03291 <span class="comment">    \/\/\/ right to left and sets right&#39;s slotuse to zero. The right slot is then<\/span>$/;"	a
l03292	doxygen-html/a00026_source.html	/^<a name="l03292"><\/a>03292 <span class="comment">    \/\/\/ removed by the calling parent node.<\/span>$/;"	a
l03293	doxygen-html/a00026_source.html	/^<a name="l03293"><\/a><a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c">03293<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> result_t <a class="code" href="a00001.html#ae41ed6372b1f0e7cc76d082fb7d0c18c" title="Merge two inner nodes.">merge_inner<\/a>(inner_node* left, inner_node* right, inner_node* parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l03294	doxygen-html/a00026_source.html	/^<a name="l03294"><\/a>03294     {$/;"	a
l03295	doxygen-html/a00026_source.html	/^<a name="l03295"><\/a>03295         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Merge inner nodes &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; and &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03296	doxygen-html/a00026_source.html	/^<a name="l03296"><\/a>03296 $/;"	a
l03297	doxygen-html/a00026_source.html	/^<a name="l03297"><\/a>03297         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;level == right-&gt;level);$/;"	a
l03298	doxygen-html/a00026_source.html	/^<a name="l03298"><\/a>03298         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == left-&gt;level + 1);$/;"	a
l03299	doxygen-html/a00026_source.html	/^<a name="l03299"><\/a>03299 $/;"	a
l03300	doxygen-html/a00026_source.html	/^<a name="l03300"><\/a>03300         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == left);$/;"	a
l03301	doxygen-html/a00026_source.html	/^<a name="l03301"><\/a>03301 $/;"	a
l03302	doxygen-html/a00026_source.html	/^<a name="l03302"><\/a>03302         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse + right-&gt;slotuse &lt; <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>);$/;"	a
l03303	doxygen-html/a00026_source.html	/^<a name="l03303"><\/a>03303 $/;"	a
l03304	doxygen-html/a00026_source.html	/^<a name="l03304"><\/a>03304         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l03305	doxygen-html/a00026_source.html	/^<a name="l03305"><\/a>03305         {$/;"	a
l03306	doxygen-html/a00026_source.html	/^<a name="l03306"><\/a>03306             <span class="comment">\/\/ find the left node&#39;s slot in the parent&#39;s children<\/span>$/;"	a
l03307	doxygen-html/a00026_source.html	/^<a name="l03307"><\/a>03307             <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> leftslot = 0;$/;"	a
l03308	doxygen-html/a00026_source.html	/^<a name="l03308"><\/a>03308             <span class="keywordflow">while<\/span>(leftslot &lt;= parent-&gt;slotuse &amp;&amp; parent-&gt;childid[leftslot] != left)$/;"	a
l03309	doxygen-html/a00026_source.html	/^<a name="l03309"><\/a>03309                 ++leftslot;$/;"	a
l03310	doxygen-html/a00026_source.html	/^<a name="l03310"><\/a>03310 $/;"	a
l03311	doxygen-html/a00026_source.html	/^<a name="l03311"><\/a>03311             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot &lt; parent-&gt;slotuse);$/;"	a
l03312	doxygen-html/a00026_source.html	/^<a name="l03312"><\/a>03312             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot] == left);$/;"	a
l03313	doxygen-html/a00026_source.html	/^<a name="l03313"><\/a>03313             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot+1] == right);$/;"	a
l03314	doxygen-html/a00026_source.html	/^<a name="l03314"><\/a>03314 $/;"	a
l03315	doxygen-html/a00026_source.html	/^<a name="l03315"><\/a>03315             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parentslot == leftslot);$/;"	a
l03316	doxygen-html/a00026_source.html	/^<a name="l03316"><\/a>03316         }$/;"	a
l03317	doxygen-html/a00026_source.html	/^<a name="l03317"><\/a>03317 $/;"	a
l03318	doxygen-html/a00026_source.html	/^<a name="l03318"><\/a>03318         <span class="comment">\/\/ retrieve the decision key from parent<\/span>$/;"	a
l03319	doxygen-html/a00026_source.html	/^<a name="l03319"><\/a>03319         left-&gt;slotkey[left-&gt;slotuse] = parent-&gt;slotkey[parentslot];$/;"	a
l03320	doxygen-html/a00026_source.html	/^<a name="l03320"><\/a>03320         left-&gt;slotuse++;$/;"	a
l03321	doxygen-html/a00026_source.html	/^<a name="l03321"><\/a>03321 $/;"	a
l03322	doxygen-html/a00026_source.html	/^<a name="l03322"><\/a>03322         <span class="comment">\/\/ copy over keys and children from right<\/span>$/;"	a
l03323	doxygen-html/a00026_source.html	/^<a name="l03323"><\/a>03323         std::copy(right-&gt;slotkey, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03324	doxygen-html/a00026_source.html	/^<a name="l03324"><\/a>03324                   left-&gt;slotkey + left-&gt;slotuse);$/;"	a
l03325	doxygen-html/a00026_source.html	/^<a name="l03325"><\/a>03325         std::copy(right-&gt;childid, right-&gt;childid + right-&gt;slotuse+1,$/;"	a
l03326	doxygen-html/a00026_source.html	/^<a name="l03326"><\/a>03326                   left-&gt;childid + left-&gt;slotuse);$/;"	a
l03327	doxygen-html/a00026_source.html	/^<a name="l03327"><\/a>03327 $/;"	a
l03328	doxygen-html/a00026_source.html	/^<a name="l03328"><\/a>03328         left-&gt;slotuse += right-&gt;slotuse;$/;"	a
l03329	doxygen-html/a00026_source.html	/^<a name="l03329"><\/a>03329         right-&gt;slotuse = 0;$/;"	a
l03330	doxygen-html/a00026_source.html	/^<a name="l03330"><\/a>03330 $/;"	a
l03331	doxygen-html/a00026_source.html	/^<a name="l03331"><\/a>03331         <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba22159386e444003f86027c412d28ef43" title="Deletion successful, children nodes were merged and the parent needs to remove the empty node...">btree_fixmerge<\/a>;$/;"	a
l03332	doxygen-html/a00026_source.html	/^<a name="l03332"><\/a>03332     }$/;"	a
l03333	doxygen-html/a00026_source.html	/^<a name="l03333"><\/a>03333 <span class="comment"><\/span>$/;"	a
l03334	doxygen-html/a00026_source.html	/^<a name="l03334"><\/a>03334 <span class="comment">    \/\/\/ Balance two leaf nodes. The function moves key\/data pairs from right to<\/span>$/;"	a
l03335	doxygen-html/a00026_source.html	/^<a name="l03335"><\/a>03335 <span class="comment">    \/\/\/ left so that both nodes are equally filled. The parent node is updated<\/span>$/;"	a
l03336	doxygen-html/a00026_source.html	/^<a name="l03336"><\/a>03336 <span class="comment">    \/\/\/ if possible.<\/span>$/;"	a
l03337	doxygen-html/a00026_source.html	/^<a name="l03337"><\/a><a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249">03337<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> result_t <a class="code" href="a00001.html#a11529634e6a0fd90440272d0b8caf249" title="Balance two leaf nodes.">shift_left_leaf<\/a>(leaf_node *left, leaf_node *right, inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l03338	doxygen-html/a00026_source.html	/^<a name="l03338"><\/a>03338     {$/;"	a
l03339	doxygen-html/a00026_source.html	/^<a name="l03339"><\/a>03339         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;isleafnode() &amp;&amp; right-&gt;isleafnode());$/;"	a
l03340	doxygen-html/a00026_source.html	/^<a name="l03340"><\/a>03340         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == 1);$/;"	a
l03341	doxygen-html/a00026_source.html	/^<a name="l03341"><\/a>03341 $/;"	a
l03342	doxygen-html/a00026_source.html	/^<a name="l03342"><\/a>03342         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;nextleaf == right);$/;"	a
l03343	doxygen-html/a00026_source.html	/^<a name="l03343"><\/a>03343         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left == right-&gt;prevleaf);$/;"	a
l03344	doxygen-html/a00026_source.html	/^<a name="l03344"><\/a>03344 $/;"	a
l03345	doxygen-html/a00026_source.html	/^<a name="l03345"><\/a>03345         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse &lt; right-&gt;slotuse);$/;"	a
l03346	doxygen-html/a00026_source.html	/^<a name="l03346"><\/a>03346         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == left);$/;"	a
l03347	doxygen-html/a00026_source.html	/^<a name="l03347"><\/a>03347 $/;"	a
l03348	doxygen-html/a00026_source.html	/^<a name="l03348"><\/a>03348         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> shiftnum = (right-&gt;slotuse - left-&gt;slotuse) &gt;&gt; 1;$/;"	a
l03349	doxygen-html/a00026_source.html	/^<a name="l03349"><\/a>03349 $/;"	a
l03350	doxygen-html/a00026_source.html	/^<a name="l03350"><\/a>03350         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Shifting (leaf) &quot;<\/span> &lt;&lt; shiftnum &lt;&lt; <span class="stringliteral">&quot; entries to left &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; from right &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03351	doxygen-html/a00026_source.html	/^<a name="l03351"><\/a>03351 $/;"	a
l03352	doxygen-html/a00026_source.html	/^<a name="l03352"><\/a>03352         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse + shiftnum &lt; <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>);$/;"	a
l03353	doxygen-html/a00026_source.html	/^<a name="l03353"><\/a>03353 $/;"	a
l03354	doxygen-html/a00026_source.html	/^<a name="l03354"><\/a>03354         <span class="comment">\/\/ copy the first items from the right node to the last slot in the left node.<\/span>$/;"	a
l03355	doxygen-html/a00026_source.html	/^<a name="l03355"><\/a>03355 $/;"	a
l03356	doxygen-html/a00026_source.html	/^<a name="l03356"><\/a>03356         std::copy(right-&gt;slotkey, right-&gt;slotkey + shiftnum,$/;"	a
l03357	doxygen-html/a00026_source.html	/^<a name="l03357"><\/a>03357                   left-&gt;slotkey + left-&gt;slotuse);$/;"	a
l03358	doxygen-html/a00026_source.html	/^<a name="l03358"><\/a>03358         <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(right-&gt;slotdata, right-&gt;slotdata + shiftnum,$/;"	a
l03359	doxygen-html/a00026_source.html	/^<a name="l03359"><\/a>03359                   left-&gt;slotdata + left-&gt;slotuse);$/;"	a
l03360	doxygen-html/a00026_source.html	/^<a name="l03360"><\/a>03360 $/;"	a
l03361	doxygen-html/a00026_source.html	/^<a name="l03361"><\/a>03361         left-&gt;slotuse += shiftnum;$/;"	a
l03362	doxygen-html/a00026_source.html	/^<a name="l03362"><\/a>03362 $/;"	a
l03363	doxygen-html/a00026_source.html	/^<a name="l03363"><\/a>03363         <span class="comment">\/\/ shift all slots in the right node to the left<\/span>$/;"	a
l03364	doxygen-html/a00026_source.html	/^<a name="l03364"><\/a>03364 $/;"	a
l03365	doxygen-html/a00026_source.html	/^<a name="l03365"><\/a>03365         std::copy(right-&gt;slotkey + shiftnum, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03366	doxygen-html/a00026_source.html	/^<a name="l03366"><\/a>03366                   right-&gt;slotkey);$/;"	a
l03367	doxygen-html/a00026_source.html	/^<a name="l03367"><\/a>03367         <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(right-&gt;slotdata + shiftnum, right-&gt;slotdata + right-&gt;slotuse,$/;"	a
l03368	doxygen-html/a00026_source.html	/^<a name="l03368"><\/a>03368                   right-&gt;slotdata);$/;"	a
l03369	doxygen-html/a00026_source.html	/^<a name="l03369"><\/a>03369 $/;"	a
l03370	doxygen-html/a00026_source.html	/^<a name="l03370"><\/a>03370         right-&gt;slotuse -= shiftnum;$/;"	a
l03371	doxygen-html/a00026_source.html	/^<a name="l03371"><\/a>03371 $/;"	a
l03372	doxygen-html/a00026_source.html	/^<a name="l03372"><\/a>03372         <span class="comment">\/\/ fixup parent<\/span>$/;"	a
l03373	doxygen-html/a00026_source.html	/^<a name="l03373"><\/a>03373         <span class="keywordflow">if<\/span> (parentslot &lt; parent-&gt;slotuse) {$/;"	a
l03374	doxygen-html/a00026_source.html	/^<a name="l03374"><\/a>03374             parent-&gt;slotkey[parentslot] = left-&gt;slotkey[left-&gt;slotuse - 1];$/;"	a
l03375	doxygen-html/a00026_source.html	/^<a name="l03375"><\/a>03375             <span class="keywordflow">return<\/span> <a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02bae9409a8c5c6d8b59e3fd6a70e1106d88" title="Deletion successful and no fix-ups necessary.">btree_ok<\/a>;$/;"	a
l03376	doxygen-html/a00026_source.html	/^<a name="l03376"><\/a>03376         }$/;"	a
l03377	doxygen-html/a00026_source.html	/^<a name="l03377"><\/a>03377         <span class="keywordflow">else<\/span> { <span class="comment">\/\/ the update is further up the tree<\/span>$/;"	a
l03378	doxygen-html/a00026_source.html	/^<a name="l03378"><\/a>03378             <span class="keywordflow">return<\/span> result_t(<a class="code" href="a00001.html#a971345163fcd46bfd726cb31ad5cd02ba7e66903441bb2c3c8164040f9efea0d8" title="Deletion successful, the last key was updated so parent slotkeys need updates.">btree_update_lastkey<\/a>, left-&gt;slotkey[left-&gt;slotuse - 1]);$/;"	a
l03379	doxygen-html/a00026_source.html	/^<a name="l03379"><\/a>03379         }$/;"	a
l03380	doxygen-html/a00026_source.html	/^<a name="l03380"><\/a>03380     }$/;"	a
l03381	doxygen-html/a00026_source.html	/^<a name="l03381"><\/a>03381 <span class="comment"><\/span>$/;"	a
l03382	doxygen-html/a00026_source.html	/^<a name="l03382"><\/a>03382 <span class="comment">    \/\/\/ Balance two inner nodes. The function moves key\/data pairs from right<\/span>$/;"	a
l03383	doxygen-html/a00026_source.html	/^<a name="l03383"><\/a>03383 <span class="comment">    \/\/\/ to left so that both nodes are equally filled. The parent node is<\/span>$/;"	a
l03384	doxygen-html/a00026_source.html	/^<a name="l03384"><\/a>03384 <span class="comment">    \/\/\/ updated if possible.<\/span>$/;"	a
l03385	doxygen-html/a00026_source.html	/^<a name="l03385"><\/a><a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750">03385<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a8abbc58dfcbb672bc1273a402b57b750" title="Balance two inner nodes.">shift_left_inner<\/a>(inner_node *left, inner_node *right, inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l03386	doxygen-html/a00026_source.html	/^<a name="l03386"><\/a>03386     {$/;"	a
l03387	doxygen-html/a00026_source.html	/^<a name="l03387"><\/a>03387         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;level == right-&gt;level);$/;"	a
l03388	doxygen-html/a00026_source.html	/^<a name="l03388"><\/a>03388         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == left-&gt;level + 1);$/;"	a
l03389	doxygen-html/a00026_source.html	/^<a name="l03389"><\/a>03389 $/;"	a
l03390	doxygen-html/a00026_source.html	/^<a name="l03390"><\/a>03390         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse &lt; right-&gt;slotuse);$/;"	a
l03391	doxygen-html/a00026_source.html	/^<a name="l03391"><\/a>03391         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == left);$/;"	a
l03392	doxygen-html/a00026_source.html	/^<a name="l03392"><\/a>03392 $/;"	a
l03393	doxygen-html/a00026_source.html	/^<a name="l03393"><\/a>03393         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> shiftnum = (right-&gt;slotuse - left-&gt;slotuse) &gt;&gt; 1;$/;"	a
l03394	doxygen-html/a00026_source.html	/^<a name="l03394"><\/a>03394 $/;"	a
l03395	doxygen-html/a00026_source.html	/^<a name="l03395"><\/a>03395         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Shifting (inner) &quot;<\/span> &lt;&lt; shiftnum &lt;&lt; <span class="stringliteral">&quot; entries to left &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; from right &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03396	doxygen-html/a00026_source.html	/^<a name="l03396"><\/a>03396 $/;"	a
l03397	doxygen-html/a00026_source.html	/^<a name="l03397"><\/a>03397         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse + shiftnum &lt; <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>);$/;"	a
l03398	doxygen-html/a00026_source.html	/^<a name="l03398"><\/a>03398 $/;"	a
l03399	doxygen-html/a00026_source.html	/^<a name="l03399"><\/a>03399         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l03400	doxygen-html/a00026_source.html	/^<a name="l03400"><\/a>03400         {$/;"	a
l03401	doxygen-html/a00026_source.html	/^<a name="l03401"><\/a>03401             <span class="comment">\/\/ find the left node&#39;s slot in the parent&#39;s children and compare to parentslot<\/span>$/;"	a
l03402	doxygen-html/a00026_source.html	/^<a name="l03402"><\/a>03402 $/;"	a
l03403	doxygen-html/a00026_source.html	/^<a name="l03403"><\/a>03403             <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> leftslot = 0;$/;"	a
l03404	doxygen-html/a00026_source.html	/^<a name="l03404"><\/a>03404             <span class="keywordflow">while<\/span>(leftslot &lt;= parent-&gt;slotuse &amp;&amp; parent-&gt;childid[leftslot] != left)$/;"	a
l03405	doxygen-html/a00026_source.html	/^<a name="l03405"><\/a>03405                 ++leftslot;$/;"	a
l03406	doxygen-html/a00026_source.html	/^<a name="l03406"><\/a>03406 $/;"	a
l03407	doxygen-html/a00026_source.html	/^<a name="l03407"><\/a>03407             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot &lt; parent-&gt;slotuse);$/;"	a
l03408	doxygen-html/a00026_source.html	/^<a name="l03408"><\/a>03408             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot] == left);$/;"	a
l03409	doxygen-html/a00026_source.html	/^<a name="l03409"><\/a>03409             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot+1] == right);$/;"	a
l03410	doxygen-html/a00026_source.html	/^<a name="l03410"><\/a>03410 $/;"	a
l03411	doxygen-html/a00026_source.html	/^<a name="l03411"><\/a>03411             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot == parentslot);$/;"	a
l03412	doxygen-html/a00026_source.html	/^<a name="l03412"><\/a>03412         }$/;"	a
l03413	doxygen-html/a00026_source.html	/^<a name="l03413"><\/a>03413 $/;"	a
l03414	doxygen-html/a00026_source.html	/^<a name="l03414"><\/a>03414         <span class="comment">\/\/ copy the parent&#39;s decision slotkey and childid to the first new key on the left<\/span>$/;"	a
l03415	doxygen-html/a00026_source.html	/^<a name="l03415"><\/a>03415         left-&gt;slotkey[left-&gt;slotuse] = parent-&gt;slotkey[parentslot];$/;"	a
l03416	doxygen-html/a00026_source.html	/^<a name="l03416"><\/a>03416         left-&gt;slotuse++;$/;"	a
l03417	doxygen-html/a00026_source.html	/^<a name="l03417"><\/a>03417 $/;"	a
l03418	doxygen-html/a00026_source.html	/^<a name="l03418"><\/a>03418         <span class="comment">\/\/ copy the other items from the right node to the last slots in the left node.<\/span>$/;"	a
l03419	doxygen-html/a00026_source.html	/^<a name="l03419"><\/a>03419 $/;"	a
l03420	doxygen-html/a00026_source.html	/^<a name="l03420"><\/a>03420         std::copy(right-&gt;slotkey, right-&gt;slotkey + shiftnum-1,$/;"	a
l03421	doxygen-html/a00026_source.html	/^<a name="l03421"><\/a>03421                   left-&gt;slotkey + left-&gt;slotuse);$/;"	a
l03422	doxygen-html/a00026_source.html	/^<a name="l03422"><\/a>03422         std::copy(right-&gt;childid, right-&gt;childid + shiftnum,$/;"	a
l03423	doxygen-html/a00026_source.html	/^<a name="l03423"><\/a>03423                   left-&gt;childid + left-&gt;slotuse);$/;"	a
l03424	doxygen-html/a00026_source.html	/^<a name="l03424"><\/a>03424 $/;"	a
l03425	doxygen-html/a00026_source.html	/^<a name="l03425"><\/a>03425         left-&gt;slotuse += shiftnum - 1;$/;"	a
l03426	doxygen-html/a00026_source.html	/^<a name="l03426"><\/a>03426 $/;"	a
l03427	doxygen-html/a00026_source.html	/^<a name="l03427"><\/a>03427         <span class="comment">\/\/ fixup parent<\/span>$/;"	a
l03428	doxygen-html/a00026_source.html	/^<a name="l03428"><\/a>03428         parent-&gt;slotkey[parentslot] = right-&gt;slotkey[shiftnum - 1];$/;"	a
l03429	doxygen-html/a00026_source.html	/^<a name="l03429"><\/a>03429 $/;"	a
l03430	doxygen-html/a00026_source.html	/^<a name="l03430"><\/a>03430         <span class="comment">\/\/ shift all slots in the right node<\/span>$/;"	a
l03431	doxygen-html/a00026_source.html	/^<a name="l03431"><\/a>03431 $/;"	a
l03432	doxygen-html/a00026_source.html	/^<a name="l03432"><\/a>03432         std::copy(right-&gt;slotkey + shiftnum, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03433	doxygen-html/a00026_source.html	/^<a name="l03433"><\/a>03433                   right-&gt;slotkey);$/;"	a
l03434	doxygen-html/a00026_source.html	/^<a name="l03434"><\/a>03434         std::copy(right-&gt;childid + shiftnum, right-&gt;childid + right-&gt;slotuse+1,$/;"	a
l03435	doxygen-html/a00026_source.html	/^<a name="l03435"><\/a>03435                   right-&gt;childid);$/;"	a
l03436	doxygen-html/a00026_source.html	/^<a name="l03436"><\/a>03436 $/;"	a
l03437	doxygen-html/a00026_source.html	/^<a name="l03437"><\/a>03437         right-&gt;slotuse -= shiftnum;$/;"	a
l03438	doxygen-html/a00026_source.html	/^<a name="l03438"><\/a>03438     }$/;"	a
l03439	doxygen-html/a00026_source.html	/^<a name="l03439"><\/a>03439 <span class="comment"><\/span>$/;"	a
l03440	doxygen-html/a00026_source.html	/^<a name="l03440"><\/a>03440 <span class="comment">    \/\/\/ Balance two leaf nodes. The function moves key\/data pairs from left to<\/span>$/;"	a
l03441	doxygen-html/a00026_source.html	/^<a name="l03441"><\/a>03441 <span class="comment">    \/\/\/ right so that both nodes are equally filled. The parent node is updated<\/span>$/;"	a
l03442	doxygen-html/a00026_source.html	/^<a name="l03442"><\/a>03442 <span class="comment">    \/\/\/ if possible.<\/span>$/;"	a
l03443	doxygen-html/a00026_source.html	/^<a name="l03443"><\/a><a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523">03443<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#acb8565c057e6c9923adbae0e96f51523" title="Balance two leaf nodes.">shift_right_leaf<\/a>(leaf_node *left, leaf_node *right, inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l03444	doxygen-html/a00026_source.html	/^<a name="l03444"><\/a>03444     {$/;"	a
l03445	doxygen-html/a00026_source.html	/^<a name="l03445"><\/a>03445         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;isleafnode() &amp;&amp; right-&gt;isleafnode());$/;"	a
l03446	doxygen-html/a00026_source.html	/^<a name="l03446"><\/a>03446         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == 1);$/;"	a
l03447	doxygen-html/a00026_source.html	/^<a name="l03447"><\/a>03447 $/;"	a
l03448	doxygen-html/a00026_source.html	/^<a name="l03448"><\/a>03448         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;nextleaf == right);$/;"	a
l03449	doxygen-html/a00026_source.html	/^<a name="l03449"><\/a>03449         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left == right-&gt;prevleaf);$/;"	a
l03450	doxygen-html/a00026_source.html	/^<a name="l03450"><\/a>03450         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == left);$/;"	a
l03451	doxygen-html/a00026_source.html	/^<a name="l03451"><\/a>03451 $/;"	a
l03452	doxygen-html/a00026_source.html	/^<a name="l03452"><\/a>03452         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse &gt; right-&gt;slotuse);$/;"	a
l03453	doxygen-html/a00026_source.html	/^<a name="l03453"><\/a>03453 $/;"	a
l03454	doxygen-html/a00026_source.html	/^<a name="l03454"><\/a>03454         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> shiftnum = (left-&gt;slotuse - right-&gt;slotuse) &gt;&gt; 1;$/;"	a
l03455	doxygen-html/a00026_source.html	/^<a name="l03455"><\/a>03455 $/;"	a
l03456	doxygen-html/a00026_source.html	/^<a name="l03456"><\/a>03456         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Shifting (leaf) &quot;<\/span> &lt;&lt; shiftnum &lt;&lt; <span class="stringliteral">&quot; entries to right &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; from left &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03457	doxygen-html/a00026_source.html	/^<a name="l03457"><\/a>03457 $/;"	a
l03458	doxygen-html/a00026_source.html	/^<a name="l03458"><\/a>03458         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l03459	doxygen-html/a00026_source.html	/^<a name="l03459"><\/a>03459         {$/;"	a
l03460	doxygen-html/a00026_source.html	/^<a name="l03460"><\/a>03460             <span class="comment">\/\/ find the left node&#39;s slot in the parent&#39;s children<\/span>$/;"	a
l03461	doxygen-html/a00026_source.html	/^<a name="l03461"><\/a>03461             <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> leftslot = 0;$/;"	a
l03462	doxygen-html/a00026_source.html	/^<a name="l03462"><\/a>03462             <span class="keywordflow">while<\/span>(leftslot &lt;= parent-&gt;slotuse &amp;&amp; parent-&gt;childid[leftslot] != left)$/;"	a
l03463	doxygen-html/a00026_source.html	/^<a name="l03463"><\/a>03463                 ++leftslot;$/;"	a
l03464	doxygen-html/a00026_source.html	/^<a name="l03464"><\/a>03464 $/;"	a
l03465	doxygen-html/a00026_source.html	/^<a name="l03465"><\/a>03465             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot &lt; parent-&gt;slotuse);$/;"	a
l03466	doxygen-html/a00026_source.html	/^<a name="l03466"><\/a>03466             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot] == left);$/;"	a
l03467	doxygen-html/a00026_source.html	/^<a name="l03467"><\/a>03467             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot+1] == right);$/;"	a
l03468	doxygen-html/a00026_source.html	/^<a name="l03468"><\/a>03468 $/;"	a
l03469	doxygen-html/a00026_source.html	/^<a name="l03469"><\/a>03469             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot == parentslot);$/;"	a
l03470	doxygen-html/a00026_source.html	/^<a name="l03470"><\/a>03470         }$/;"	a
l03471	doxygen-html/a00026_source.html	/^<a name="l03471"><\/a>03471 $/;"	a
l03472	doxygen-html/a00026_source.html	/^<a name="l03472"><\/a>03472         <span class="comment">\/\/ shift all slots in the right node<\/span>$/;"	a
l03473	doxygen-html/a00026_source.html	/^<a name="l03473"><\/a>03473 $/;"	a
l03474	doxygen-html/a00026_source.html	/^<a name="l03474"><\/a>03474         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(right-&gt;slotuse + shiftnum &lt; <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">leafslotmax<\/a>);$/;"	a
l03475	doxygen-html/a00026_source.html	/^<a name="l03475"><\/a>03475 $/;"	a
l03476	doxygen-html/a00026_source.html	/^<a name="l03476"><\/a>03476         std::copy_backward(right-&gt;slotkey, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03477	doxygen-html/a00026_source.html	/^<a name="l03477"><\/a>03477                            right-&gt;slotkey + right-&gt;slotuse + shiftnum);$/;"	a
l03478	doxygen-html/a00026_source.html	/^<a name="l03478"><\/a>03478         <a class="code" href="a00001.html#a555a24bfd925a5d77bba28041d207f8d" title="Convenient template function for conditional copying of slotdata.">data_copy_backward<\/a>(right-&gt;slotdata, right-&gt;slotdata + right-&gt;slotuse,$/;"	a
l03479	doxygen-html/a00026_source.html	/^<a name="l03479"><\/a>03479                            right-&gt;slotdata + right-&gt;slotuse + shiftnum);$/;"	a
l03480	doxygen-html/a00026_source.html	/^<a name="l03480"><\/a>03480 $/;"	a
l03481	doxygen-html/a00026_source.html	/^<a name="l03481"><\/a>03481         right-&gt;slotuse += shiftnum;$/;"	a
l03482	doxygen-html/a00026_source.html	/^<a name="l03482"><\/a>03482 $/;"	a
l03483	doxygen-html/a00026_source.html	/^<a name="l03483"><\/a>03483         <span class="comment">\/\/ copy the last items from the left node to the first slot in the right node.<\/span>$/;"	a
l03484	doxygen-html/a00026_source.html	/^<a name="l03484"><\/a>03484         std::copy(left-&gt;slotkey + left-&gt;slotuse - shiftnum, left-&gt;slotkey + left-&gt;slotuse,$/;"	a
l03485	doxygen-html/a00026_source.html	/^<a name="l03485"><\/a>03485                   right-&gt;slotkey);$/;"	a
l03486	doxygen-html/a00026_source.html	/^<a name="l03486"><\/a>03486         <a class="code" href="a00001.html#ad8a89e088fbfedec4218ea46f8899941" title="Convenient template function for conditional copying of slotdata.">data_copy<\/a>(left-&gt;slotdata + left-&gt;slotuse - shiftnum, left-&gt;slotdata + left-&gt;slotuse,$/;"	a
l03487	doxygen-html/a00026_source.html	/^<a name="l03487"><\/a>03487                   right-&gt;slotdata);$/;"	a
l03488	doxygen-html/a00026_source.html	/^<a name="l03488"><\/a>03488 $/;"	a
l03489	doxygen-html/a00026_source.html	/^<a name="l03489"><\/a>03489         left-&gt;slotuse -= shiftnum;$/;"	a
l03490	doxygen-html/a00026_source.html	/^<a name="l03490"><\/a>03490 $/;"	a
l03491	doxygen-html/a00026_source.html	/^<a name="l03491"><\/a>03491         parent-&gt;slotkey[parentslot] = left-&gt;slotkey[left-&gt;slotuse-1];$/;"	a
l03492	doxygen-html/a00026_source.html	/^<a name="l03492"><\/a>03492     }$/;"	a
l03493	doxygen-html/a00026_source.html	/^<a name="l03493"><\/a>03493 <span class="comment"><\/span>$/;"	a
l03494	doxygen-html/a00026_source.html	/^<a name="l03494"><\/a>03494 <span class="comment">    \/\/\/ Balance two inner nodes. The function moves key\/data pairs from left to<\/span>$/;"	a
l03495	doxygen-html/a00026_source.html	/^<a name="l03495"><\/a>03495 <span class="comment">    \/\/\/ right so that both nodes are equally filled. The parent node is updated<\/span>$/;"	a
l03496	doxygen-html/a00026_source.html	/^<a name="l03496"><\/a>03496 <span class="comment">    \/\/\/ if possible.<\/span>$/;"	a
l03497	doxygen-html/a00026_source.html	/^<a name="l03497"><\/a><a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24">03497<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a4aebdb2c529528d5f17d14b9b0ec1f24" title="Balance two inner nodes.">shift_right_inner<\/a>(inner_node *left, inner_node *right, inner_node *parent, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> parentslot)$/;"	a
l03498	doxygen-html/a00026_source.html	/^<a name="l03498"><\/a>03498     {$/;"	a
l03499	doxygen-html/a00026_source.html	/^<a name="l03499"><\/a>03499         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;level == right-&gt;level);$/;"	a
l03500	doxygen-html/a00026_source.html	/^<a name="l03500"><\/a>03500         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;level == left-&gt;level + 1);$/;"	a
l03501	doxygen-html/a00026_source.html	/^<a name="l03501"><\/a>03501 $/;"	a
l03502	doxygen-html/a00026_source.html	/^<a name="l03502"><\/a>03502         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(left-&gt;slotuse &gt; right-&gt;slotuse);$/;"	a
l03503	doxygen-html/a00026_source.html	/^<a name="l03503"><\/a>03503         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[parentslot] == left);$/;"	a
l03504	doxygen-html/a00026_source.html	/^<a name="l03504"><\/a>03504 $/;"	a
l03505	doxygen-html/a00026_source.html	/^<a name="l03505"><\/a>03505         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> shiftnum = (left-&gt;slotuse - right-&gt;slotuse) &gt;&gt; 1;$/;"	a
l03506	doxygen-html/a00026_source.html	/^<a name="l03506"><\/a>03506 $/;"	a
l03507	doxygen-html/a00026_source.html	/^<a name="l03507"><\/a>03507         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;Shifting (leaf) &quot;<\/span> &lt;&lt; shiftnum &lt;&lt; <span class="stringliteral">&quot; entries to right &quot;<\/span> &lt;&lt; right &lt;&lt; <span class="stringliteral">&quot; from left &quot;<\/span> &lt;&lt; left &lt;&lt; <span class="stringliteral">&quot; with common parent &quot;<\/span> &lt;&lt; parent &lt;&lt; <span class="stringliteral">&quot;.&quot;<\/span>);$/;"	a
l03508	doxygen-html/a00026_source.html	/^<a name="l03508"><\/a>03508 $/;"	a
l03509	doxygen-html/a00026_source.html	/^<a name="l03509"><\/a>03509         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>)$/;"	a
l03510	doxygen-html/a00026_source.html	/^<a name="l03510"><\/a>03510         {$/;"	a
l03511	doxygen-html/a00026_source.html	/^<a name="l03511"><\/a>03511             <span class="comment">\/\/ find the left node&#39;s slot in the parent&#39;s children<\/span>$/;"	a
l03512	doxygen-html/a00026_source.html	/^<a name="l03512"><\/a>03512             <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> leftslot = 0;$/;"	a
l03513	doxygen-html/a00026_source.html	/^<a name="l03513"><\/a>03513             <span class="keywordflow">while<\/span>(leftslot &lt;= parent-&gt;slotuse &amp;&amp; parent-&gt;childid[leftslot] != left)$/;"	a
l03514	doxygen-html/a00026_source.html	/^<a name="l03514"><\/a>03514                 ++leftslot;$/;"	a
l03515	doxygen-html/a00026_source.html	/^<a name="l03515"><\/a>03515 $/;"	a
l03516	doxygen-html/a00026_source.html	/^<a name="l03516"><\/a>03516             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot &lt; parent-&gt;slotuse);$/;"	a
l03517	doxygen-html/a00026_source.html	/^<a name="l03517"><\/a>03517             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot] == left);$/;"	a
l03518	doxygen-html/a00026_source.html	/^<a name="l03518"><\/a>03518             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(parent-&gt;childid[leftslot+1] == right);$/;"	a
l03519	doxygen-html/a00026_source.html	/^<a name="l03519"><\/a>03519 $/;"	a
l03520	doxygen-html/a00026_source.html	/^<a name="l03520"><\/a>03520             <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(leftslot == parentslot);$/;"	a
l03521	doxygen-html/a00026_source.html	/^<a name="l03521"><\/a>03521         }$/;"	a
l03522	doxygen-html/a00026_source.html	/^<a name="l03522"><\/a>03522 $/;"	a
l03523	doxygen-html/a00026_source.html	/^<a name="l03523"><\/a>03523         <span class="comment">\/\/ shift all slots in the right node<\/span>$/;"	a
l03524	doxygen-html/a00026_source.html	/^<a name="l03524"><\/a>03524 $/;"	a
l03525	doxygen-html/a00026_source.html	/^<a name="l03525"><\/a>03525         <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(right-&gt;slotuse + shiftnum &lt; <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">innerslotmax<\/a>);$/;"	a
l03526	doxygen-html/a00026_source.html	/^<a name="l03526"><\/a>03526 $/;"	a
l03527	doxygen-html/a00026_source.html	/^<a name="l03527"><\/a>03527         std::copy_backward(right-&gt;slotkey, right-&gt;slotkey + right-&gt;slotuse,$/;"	a
l03528	doxygen-html/a00026_source.html	/^<a name="l03528"><\/a>03528                            right-&gt;slotkey + right-&gt;slotuse + shiftnum);$/;"	a
l03529	doxygen-html/a00026_source.html	/^<a name="l03529"><\/a>03529         std::copy_backward(right-&gt;childid, right-&gt;childid + right-&gt;slotuse+1,$/;"	a
l03530	doxygen-html/a00026_source.html	/^<a name="l03530"><\/a>03530                            right-&gt;childid + right-&gt;slotuse+1 + shiftnum);$/;"	a
l03531	doxygen-html/a00026_source.html	/^<a name="l03531"><\/a>03531 $/;"	a
l03532	doxygen-html/a00026_source.html	/^<a name="l03532"><\/a>03532         right-&gt;slotuse += shiftnum;$/;"	a
l03533	doxygen-html/a00026_source.html	/^<a name="l03533"><\/a>03533 $/;"	a
l03534	doxygen-html/a00026_source.html	/^<a name="l03534"><\/a>03534         <span class="comment">\/\/ copy the parent&#39;s decision slotkey and childid to the last new key on the right<\/span>$/;"	a
l03535	doxygen-html/a00026_source.html	/^<a name="l03535"><\/a>03535         right-&gt;slotkey[shiftnum - 1] = parent-&gt;slotkey[parentslot];$/;"	a
l03536	doxygen-html/a00026_source.html	/^<a name="l03536"><\/a>03536 $/;"	a
l03537	doxygen-html/a00026_source.html	/^<a name="l03537"><\/a>03537         <span class="comment">\/\/ copy the remaining last items from the left node to the first slot in the right node.<\/span>$/;"	a
l03538	doxygen-html/a00026_source.html	/^<a name="l03538"><\/a>03538         std::copy(left-&gt;slotkey + left-&gt;slotuse - shiftnum+1, left-&gt;slotkey + left-&gt;slotuse,$/;"	a
l03539	doxygen-html/a00026_source.html	/^<a name="l03539"><\/a>03539                   right-&gt;slotkey);$/;"	a
l03540	doxygen-html/a00026_source.html	/^<a name="l03540"><\/a>03540         std::copy(left-&gt;childid + left-&gt;slotuse - shiftnum+1, left-&gt;childid + left-&gt;slotuse+1,$/;"	a
l03541	doxygen-html/a00026_source.html	/^<a name="l03541"><\/a>03541                   right-&gt;childid);$/;"	a
l03542	doxygen-html/a00026_source.html	/^<a name="l03542"><\/a>03542 $/;"	a
l03543	doxygen-html/a00026_source.html	/^<a name="l03543"><\/a>03543         <span class="comment">\/\/ copy the first to-be-removed key from the left node to the parent&#39;s decision slot<\/span>$/;"	a
l03544	doxygen-html/a00026_source.html	/^<a name="l03544"><\/a>03544         parent-&gt;slotkey[parentslot] = left-&gt;slotkey[left-&gt;slotuse - shiftnum];$/;"	a
l03545	doxygen-html/a00026_source.html	/^<a name="l03545"><\/a>03545 $/;"	a
l03546	doxygen-html/a00026_source.html	/^<a name="l03546"><\/a>03546         left-&gt;slotuse -= shiftnum;$/;"	a
l03547	doxygen-html/a00026_source.html	/^<a name="l03547"><\/a>03547     }$/;"	a
l03548	doxygen-html/a00026_source.html	/^<a name="l03548"><\/a>03548 $/;"	a
l03549	doxygen-html/a00026_source.html	/^<a name="l03549"><\/a>03549 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l03550	doxygen-html/a00026_source.html	/^<a name="l03550"><\/a>03550 <span class="preprocessor"><\/span><span class="keyword">public<\/span>:$/;"	a
l03551	doxygen-html/a00026_source.html	/^<a name="l03551"><\/a>03551     <span class="comment">\/\/ *** Debug Printing<\/span>$/;"	a
l03552	doxygen-html/a00026_source.html	/^<a name="l03552"><\/a>03552 <span class="comment"><\/span>$/;"	a
l03553	doxygen-html/a00026_source.html	/^<a name="l03553"><\/a>03553 <span class="comment">    \/\/\/ Print out the B+ tree structure with keys onto the given ostream. This<\/span>$/;"	a
l03554	doxygen-html/a00026_source.html	/^<a name="l03554"><\/a>03554 <span class="comment">    \/\/\/ function requires that the header is compiled with BTREE_DEBUG and that<\/span>$/;"	a
l03555	doxygen-html/a00026_source.html	/^<a name="l03555"><\/a>03555 <span class="comment">    \/\/\/ key_type is printable via std::ostream.<\/span>$/;"	a
l03556	doxygen-html/a00026_source.html	/^<a name="l03556"><\/a><a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017">03556<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l03557	doxygen-html/a00026_source.html	/^<a name="l03557"><\/a>03557 <span class="keyword">    <\/span>{$/;"	a
l03558	doxygen-html/a00026_source.html	/^<a name="l03558"><\/a>03558         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) {$/;"	a
l03559	doxygen-html/a00026_source.html	/^<a name="l03559"><\/a>03559             <a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4" title="Recursively descend down the tree and print out nodes.">print_node<\/a>(os, <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, 0, <span class="keyword">true<\/span>);$/;"	a
l03560	doxygen-html/a00026_source.html	/^<a name="l03560"><\/a>03560         }$/;"	a
l03561	doxygen-html/a00026_source.html	/^<a name="l03561"><\/a>03561     }$/;"	a
l03562	doxygen-html/a00026_source.html	/^<a name="l03562"><\/a>03562 <span class="comment"><\/span>$/;"	a
l03563	doxygen-html/a00026_source.html	/^<a name="l03563"><\/a>03563 <span class="comment">    \/\/\/ Print out only the leaves via the double linked list.<\/span>$/;"	a
l03564	doxygen-html/a00026_source.html	/^<a name="l03564"><\/a><a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6">03564<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a2e9097d4266851d84d9e3813921155c6" title="Print out only the leaves via the double linked list.">print_leaves<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l03565	doxygen-html/a00026_source.html	/^<a name="l03565"><\/a>03565 <span class="keyword">    <\/span>{$/;"	a
l03566	doxygen-html/a00026_source.html	/^<a name="l03566"><\/a>03566         os &lt;&lt; <span class="stringliteral">&quot;leaves:&quot;<\/span> &lt;&lt; std::endl;$/;"	a
l03567	doxygen-html/a00026_source.html	/^<a name="l03567"><\/a>03567 $/;"	a
l03568	doxygen-html/a00026_source.html	/^<a name="l03568"><\/a>03568         <span class="keyword">const<\/span> leaf_node *n = <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>;$/;"	a
l03569	doxygen-html/a00026_source.html	/^<a name="l03569"><\/a>03569 $/;"	a
l03570	doxygen-html/a00026_source.html	/^<a name="l03570"><\/a>03570         <span class="keywordflow">while<\/span>(n)$/;"	a
l03571	doxygen-html/a00026_source.html	/^<a name="l03571"><\/a>03571         {$/;"	a
l03572	doxygen-html/a00026_source.html	/^<a name="l03572"><\/a>03572             os &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span> &lt;&lt; n &lt;&lt; std::endl;$/;"	a
l03573	doxygen-html/a00026_source.html	/^<a name="l03573"><\/a>03573 $/;"	a
l03574	doxygen-html/a00026_source.html	/^<a name="l03574"><\/a>03574             n = n-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a>;$/;"	a
l03575	doxygen-html/a00026_source.html	/^<a name="l03575"><\/a>03575         }$/;"	a
l03576	doxygen-html/a00026_source.html	/^<a name="l03576"><\/a>03576     }$/;"	a
l03577	doxygen-html/a00026_source.html	/^<a name="l03577"><\/a>03577 $/;"	a
l03578	doxygen-html/a00026_source.html	/^<a name="l03578"><\/a>03578 <span class="keyword">private<\/span>:$/;"	a
l03579	doxygen-html/a00026_source.html	/^<a name="l03579"><\/a>03579 <span class="comment"><\/span>$/;"	a
l03580	doxygen-html/a00026_source.html	/^<a name="l03580"><\/a>03580 <span class="comment">    \/\/\/ Recursively descend down the tree and print out nodes.<\/span>$/;"	a
l03581	doxygen-html/a00026_source.html	/^<a name="l03581"><\/a><a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4">03581<\/a> <span class="comment"><\/span>    <span class="keyword">static<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4" title="Recursively descend down the tree and print out nodes.">print_node<\/a>(std::ostream &amp;os, <span class="keyword">const<\/span> node* node, <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> depth=0, <span class="keywordtype">bool<\/span> recursive=<span class="keyword">false<\/span>)$/;"	a
l03582	doxygen-html/a00026_source.html	/^<a name="l03582"><\/a>03582     {$/;"	a
l03583	doxygen-html/a00026_source.html	/^<a name="l03583"><\/a>03583         <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; depth; i++) os &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span>;$/;"	a
l03584	doxygen-html/a00026_source.html	/^<a name="l03584"><\/a>03584 $/;"	a
l03585	doxygen-html/a00026_source.html	/^<a name="l03585"><\/a>03585         os &lt;&lt; <span class="stringliteral">&quot;node &quot;<\/span> &lt;&lt; node &lt;&lt; <span class="stringliteral">&quot; level &quot;<\/span> &lt;&lt; node-&gt;level &lt;&lt; <span class="stringliteral">&quot; slotuse &quot;<\/span> &lt;&lt; node-&gt;slotuse &lt;&lt; std::endl;$/;"	a
l03586	doxygen-html/a00026_source.html	/^<a name="l03586"><\/a>03586 $/;"	a
l03587	doxygen-html/a00026_source.html	/^<a name="l03587"><\/a>03587         <span class="keywordflow">if<\/span> (node-&gt;isleafnode())$/;"	a
l03588	doxygen-html/a00026_source.html	/^<a name="l03588"><\/a>03588         {$/;"	a
l03589	doxygen-html/a00026_source.html	/^<a name="l03589"><\/a>03589             <span class="keyword">const<\/span> leaf_node *leafnode = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(node);$/;"	a
l03590	doxygen-html/a00026_source.html	/^<a name="l03590"><\/a>03590 $/;"	a
l03591	doxygen-html/a00026_source.html	/^<a name="l03591"><\/a>03591             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; depth; i++) os &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span>;$/;"	a
l03592	doxygen-html/a00026_source.html	/^<a name="l03592"><\/a>03592             os &lt;&lt; <span class="stringliteral">&quot;  leaf prev &quot;<\/span> &lt;&lt; leafnode-&gt;prevleaf &lt;&lt; <span class="stringliteral">&quot; next &quot;<\/span> &lt;&lt; leafnode-&gt;nextleaf &lt;&lt; std::endl;$/;"	a
l03593	doxygen-html/a00026_source.html	/^<a name="l03593"><\/a>03593 $/;"	a
l03594	doxygen-html/a00026_source.html	/^<a name="l03594"><\/a>03594             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; depth; i++) os &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span>;$/;"	a
l03595	doxygen-html/a00026_source.html	/^<a name="l03595"><\/a>03595 $/;"	a
l03596	doxygen-html/a00026_source.html	/^<a name="l03596"><\/a>03596             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> slot = 0; slot &lt; leafnode-&gt;slotuse; ++slot)$/;"	a
l03597	doxygen-html/a00026_source.html	/^<a name="l03597"><\/a>03597             {$/;"	a
l03598	doxygen-html/a00026_source.html	/^<a name="l03598"><\/a>03598                 os &lt;&lt; leafnode-&gt;slotkey[slot] &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span>; <span class="comment">\/\/ &lt;&lt; &quot;(data: &quot; &lt;&lt; leafnode-&gt;slotdata[slot] &lt;&lt; &quot;) &quot;;<\/span>$/;"	a
l03599	doxygen-html/a00026_source.html	/^<a name="l03599"><\/a>03599             }$/;"	a
l03600	doxygen-html/a00026_source.html	/^<a name="l03600"><\/a>03600             os &lt;&lt; std::endl;$/;"	a
l03601	doxygen-html/a00026_source.html	/^<a name="l03601"><\/a>03601         }$/;"	a
l03602	doxygen-html/a00026_source.html	/^<a name="l03602"><\/a>03602         <span class="keywordflow">else<\/span>$/;"	a
l03603	doxygen-html/a00026_source.html	/^<a name="l03603"><\/a>03603         {$/;"	a
l03604	doxygen-html/a00026_source.html	/^<a name="l03604"><\/a>03604             <span class="keyword">const<\/span> inner_node *innernode = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(node);$/;"	a
l03605	doxygen-html/a00026_source.html	/^<a name="l03605"><\/a>03605 $/;"	a
l03606	doxygen-html/a00026_source.html	/^<a name="l03606"><\/a>03606             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> i = 0; i &lt; depth; i++) os &lt;&lt; <span class="stringliteral">&quot;  &quot;<\/span>;$/;"	a
l03607	doxygen-html/a00026_source.html	/^<a name="l03607"><\/a>03607 $/;"	a
l03608	doxygen-html/a00026_source.html	/^<a name="l03608"><\/a>03608             <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; innernode-&gt;slotuse; ++slot)$/;"	a
l03609	doxygen-html/a00026_source.html	/^<a name="l03609"><\/a>03609             {$/;"	a
l03610	doxygen-html/a00026_source.html	/^<a name="l03610"><\/a>03610                 os &lt;&lt; <span class="stringliteral">&quot;(&quot;<\/span> &lt;&lt; innernode-&gt;childid[slot] &lt;&lt; <span class="stringliteral">&quot;) &quot;<\/span> &lt;&lt; innernode-&gt;slotkey[slot] &lt;&lt; <span class="stringliteral">&quot; &quot;<\/span>;$/;"	a
l03611	doxygen-html/a00026_source.html	/^<a name="l03611"><\/a>03611             }$/;"	a
l03612	doxygen-html/a00026_source.html	/^<a name="l03612"><\/a>03612             os &lt;&lt; <span class="stringliteral">&quot;(&quot;<\/span> &lt;&lt; innernode-&gt;childid[innernode-&gt;slotuse] &lt;&lt; <span class="stringliteral">&quot;)&quot;<\/span> &lt;&lt; std::endl;$/;"	a
l03613	doxygen-html/a00026_source.html	/^<a name="l03613"><\/a>03613 $/;"	a
l03614	doxygen-html/a00026_source.html	/^<a name="l03614"><\/a>03614             <span class="keywordflow">if<\/span> (recursive)$/;"	a
l03615	doxygen-html/a00026_source.html	/^<a name="l03615"><\/a>03615             {$/;"	a
l03616	doxygen-html/a00026_source.html	/^<a name="l03616"><\/a>03616                 <span class="keywordflow">for<\/span> (<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; innernode-&gt;slotuse + 1; ++slot)$/;"	a
l03617	doxygen-html/a00026_source.html	/^<a name="l03617"><\/a>03617                 {$/;"	a
l03618	doxygen-html/a00026_source.html	/^<a name="l03618"><\/a>03618                     <a class="code" href="a00001.html#a7a031022658d93a4d7d92522947816b4" title="Recursively descend down the tree and print out nodes.">print_node<\/a>(os, innernode-&gt;childid[slot], depth + 1, recursive);$/;"	a
l03619	doxygen-html/a00026_source.html	/^<a name="l03619"><\/a>03619                 }$/;"	a
l03620	doxygen-html/a00026_source.html	/^<a name="l03620"><\/a>03620             }$/;"	a
l03621	doxygen-html/a00026_source.html	/^<a name="l03621"><\/a>03621         }$/;"	a
l03622	doxygen-html/a00026_source.html	/^<a name="l03622"><\/a>03622     }$/;"	a
l03623	doxygen-html/a00026_source.html	/^<a name="l03623"><\/a>03623 <span class="preprocessor">#endif<\/span>$/;"	a
l03624	doxygen-html/a00026_source.html	/^<a name="l03624"><\/a>03624 <span class="preprocessor"><\/span>$/;"	a
l03625	doxygen-html/a00026_source.html	/^<a name="l03625"><\/a>03625 <span class="keyword">public<\/span>:$/;"	a
l03626	doxygen-html/a00026_source.html	/^<a name="l03626"><\/a>03626     <span class="comment">\/\/ *** Verification of B+ Tree Invariants<\/span>$/;"	a
l03627	doxygen-html/a00026_source.html	/^<a name="l03627"><\/a>03627 <span class="comment"><\/span>$/;"	a
l03628	doxygen-html/a00026_source.html	/^<a name="l03628"><\/a>03628 <span class="comment">    \/\/\/ Run a thorough verification of all B+ tree invariants. The program<\/span>$/;"	a
l03629	doxygen-html/a00026_source.html	/^<a name="l03629"><\/a>03629 <span class="comment">    \/\/\/ aborts via assert() if something is wrong.<\/span>$/;"	a
l03630	doxygen-html/a00026_source.html	/^<a name="l03630"><\/a><a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59">03630<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>()<span class="keyword"> const<\/span>$/;"	a
l03631	doxygen-html/a00026_source.html	/^<a name="l03631"><\/a>03631 <span class="keyword">    <\/span>{$/;"	a
l03632	doxygen-html/a00026_source.html	/^<a name="l03632"><\/a>03632         <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> minkey, maxkey;$/;"	a
l03633	doxygen-html/a00026_source.html	/^<a name="l03633"><\/a>03633         tree_stats vstats;$/;"	a
l03634	doxygen-html/a00026_source.html	/^<a name="l03634"><\/a>03634 $/;"	a
l03635	doxygen-html/a00026_source.html	/^<a name="l03635"><\/a>03635         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>)$/;"	a
l03636	doxygen-html/a00026_source.html	/^<a name="l03636"><\/a>03636         {$/;"	a
l03637	doxygen-html/a00026_source.html	/^<a name="l03637"><\/a>03637             <a class="code" href="a00001.html#a3691c46df55869209c7221844f48217c" title="Recursively descend down the tree and verify each node.">verify_node<\/a>(<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>, &amp;minkey, &amp;maxkey, vstats);$/;"	a
l03638	doxygen-html/a00026_source.html	/^<a name="l03638"><\/a>03638 $/;"	a
l03639	doxygen-html/a00026_source.html	/^<a name="l03639"><\/a>03639             assert( vstats.itemcount == <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> );$/;"	a
l03640	doxygen-html/a00026_source.html	/^<a name="l03640"><\/a>03640             assert( vstats.leaves == <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#aa4d4f72b9a8f7a58424063aa1d4a1fcc" title="Number of leaves in the B+ tree.">leaves<\/a> );$/;"	a
l03641	doxygen-html/a00026_source.html	/^<a name="l03641"><\/a>03641             assert( vstats.innernodes == <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#ab63b03a814b985680a46151fd9f59e17" title="Number of inner nodes in the B+ tree.">innernodes<\/a> );$/;"	a
l03642	doxygen-html/a00026_source.html	/^<a name="l03642"><\/a>03642 $/;"	a
l03643	doxygen-html/a00026_source.html	/^<a name="l03643"><\/a>03643             <a class="code" href="a00001.html#ae89a72438aead5bbc0e2cf0b01999291" title="Verify the double linked list of leaves.">verify_leaflinks<\/a>();$/;"	a
l03644	doxygen-html/a00026_source.html	/^<a name="l03644"><\/a>03644         }$/;"	a
l03645	doxygen-html/a00026_source.html	/^<a name="l03645"><\/a>03645     }$/;"	a
l03646	doxygen-html/a00026_source.html	/^<a name="l03646"><\/a>03646 $/;"	a
l03647	doxygen-html/a00026_source.html	/^<a name="l03647"><\/a>03647 <span class="keyword">private<\/span>:$/;"	a
l03648	doxygen-html/a00026_source.html	/^<a name="l03648"><\/a>03648 <span class="comment"><\/span>$/;"	a
l03649	doxygen-html/a00026_source.html	/^<a name="l03649"><\/a>03649 <span class="comment">    \/\/\/ Recursively descend down the tree and verify each node<\/span>$/;"	a
l03650	doxygen-html/a00026_source.html	/^<a name="l03650"><\/a><a class="code" href="a00001.html#a3691c46df55869209c7221844f48217c">03650<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#a3691c46df55869209c7221844f48217c" title="Recursively descend down the tree and verify each node.">verify_node<\/a>(<span class="keyword">const<\/span> node* n, <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>* minkey, <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>* maxkey, tree_stats &amp;vstats)<span class="keyword"> const<\/span>$/;"	a
l03651	doxygen-html/a00026_source.html	/^<a name="l03651"><\/a>03651 <span class="keyword">    <\/span>{$/;"	a
l03652	doxygen-html/a00026_source.html	/^<a name="l03652"><\/a>03652         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;verifynode &quot;<\/span> &lt;&lt; n);$/;"	a
l03653	doxygen-html/a00026_source.html	/^<a name="l03653"><\/a>03653 $/;"	a
l03654	doxygen-html/a00026_source.html	/^<a name="l03654"><\/a>03654         <span class="keywordflow">if<\/span> (n-&gt;isleafnode())$/;"	a
l03655	doxygen-html/a00026_source.html	/^<a name="l03655"><\/a>03655         {$/;"	a
l03656	doxygen-html/a00026_source.html	/^<a name="l03656"><\/a>03656             <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l03657	doxygen-html/a00026_source.html	/^<a name="l03657"><\/a>03657 $/;"	a
l03658	doxygen-html/a00026_source.html	/^<a name="l03658"><\/a>03658             assert( leaf == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> || !leaf-&gt;isunderflow() );$/;"	a
l03659	doxygen-html/a00026_source.html	/^<a name="l03659"><\/a>03659             assert( leaf-&gt;slotuse &gt; 0 );$/;"	a
l03660	doxygen-html/a00026_source.html	/^<a name="l03660"><\/a>03660 $/;"	a
l03661	doxygen-html/a00026_source.html	/^<a name="l03661"><\/a>03661             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; leaf-&gt;slotuse - 1; ++slot)$/;"	a
l03662	doxygen-html/a00026_source.html	/^<a name="l03662"><\/a>03662             {$/;"	a
l03663	doxygen-html/a00026_source.html	/^<a name="l03663"><\/a>03663                 assert(<a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(leaf-&gt;slotkey[slot], leaf-&gt;slotkey[slot + 1]));$/;"	a
l03664	doxygen-html/a00026_source.html	/^<a name="l03664"><\/a>03664             }$/;"	a
l03665	doxygen-html/a00026_source.html	/^<a name="l03665"><\/a>03665 $/;"	a
l03666	doxygen-html/a00026_source.html	/^<a name="l03666"><\/a>03666             *minkey = leaf-&gt;slotkey[0];$/;"	a
l03667	doxygen-html/a00026_source.html	/^<a name="l03667"><\/a>03667             *maxkey = leaf-&gt;slotkey[leaf-&gt;slotuse - 1];$/;"	a
l03668	doxygen-html/a00026_source.html	/^<a name="l03668"><\/a>03668 $/;"	a
l03669	doxygen-html/a00026_source.html	/^<a name="l03669"><\/a>03669             vstats.leaves++;$/;"	a
l03670	doxygen-html/a00026_source.html	/^<a name="l03670"><\/a>03670             vstats.itemcount += leaf-&gt;slotuse;$/;"	a
l03671	doxygen-html/a00026_source.html	/^<a name="l03671"><\/a>03671         }$/;"	a
l03672	doxygen-html/a00026_source.html	/^<a name="l03672"><\/a>03672         <span class="keywordflow">else<\/span> <span class="comment">\/\/ !n-&gt;isleafnode()<\/span>$/;"	a
l03673	doxygen-html/a00026_source.html	/^<a name="l03673"><\/a>03673         {$/;"	a
l03674	doxygen-html/a00026_source.html	/^<a name="l03674"><\/a>03674             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l03675	doxygen-html/a00026_source.html	/^<a name="l03675"><\/a>03675             vstats.innernodes++;$/;"	a
l03676	doxygen-html/a00026_source.html	/^<a name="l03676"><\/a>03676 $/;"	a
l03677	doxygen-html/a00026_source.html	/^<a name="l03677"><\/a>03677             assert( inner == <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> || !inner-&gt;isunderflow() );$/;"	a
l03678	doxygen-html/a00026_source.html	/^<a name="l03678"><\/a>03678             assert( inner-&gt;slotuse &gt; 0 );$/;"	a
l03679	doxygen-html/a00026_source.html	/^<a name="l03679"><\/a>03679 $/;"	a
l03680	doxygen-html/a00026_source.html	/^<a name="l03680"><\/a>03680             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; inner-&gt;slotuse - 1; ++slot)$/;"	a
l03681	doxygen-html/a00026_source.html	/^<a name="l03681"><\/a>03681             {$/;"	a
l03682	doxygen-html/a00026_source.html	/^<a name="l03682"><\/a>03682                 assert(<a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(inner-&gt;slotkey[slot], inner-&gt;slotkey[slot + 1]));$/;"	a
l03683	doxygen-html/a00026_source.html	/^<a name="l03683"><\/a>03683             }$/;"	a
l03684	doxygen-html/a00026_source.html	/^<a name="l03684"><\/a>03684 $/;"	a
l03685	doxygen-html/a00026_source.html	/^<a name="l03685"><\/a>03685             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt;= inner-&gt;slotuse; ++slot)$/;"	a
l03686	doxygen-html/a00026_source.html	/^<a name="l03686"><\/a>03686             {$/;"	a
l03687	doxygen-html/a00026_source.html	/^<a name="l03687"><\/a>03687                 <span class="keyword">const<\/span> node *subnode = inner-&gt;childid[slot];$/;"	a
l03688	doxygen-html/a00026_source.html	/^<a name="l03688"><\/a>03688                 <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> subminkey = <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>();$/;"	a
l03689	doxygen-html/a00026_source.html	/^<a name="l03689"><\/a>03689                 <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a> submaxkey = <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">key_type<\/a>();$/;"	a
l03690	doxygen-html/a00026_source.html	/^<a name="l03690"><\/a>03690 $/;"	a
l03691	doxygen-html/a00026_source.html	/^<a name="l03691"><\/a>03691                 assert(subnode-&gt;level + 1 == inner-&gt;level);$/;"	a
l03692	doxygen-html/a00026_source.html	/^<a name="l03692"><\/a>03692                 <a class="code" href="a00001.html#a3691c46df55869209c7221844f48217c" title="Recursively descend down the tree and verify each node.">verify_node<\/a>(subnode, &amp;subminkey, &amp;submaxkey, vstats);$/;"	a
l03693	doxygen-html/a00026_source.html	/^<a name="l03693"><\/a>03693 $/;"	a
l03694	doxygen-html/a00026_source.html	/^<a name="l03694"><\/a>03694                 <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;verify subnode &quot;<\/span> &lt;&lt; subnode &lt;&lt; <span class="stringliteral">&quot;: &quot;<\/span> &lt;&lt; subminkey &lt;&lt; <span class="stringliteral">&quot; - &quot;<\/span> &lt;&lt; submaxkey);$/;"	a
l03695	doxygen-html/a00026_source.html	/^<a name="l03695"><\/a>03695 $/;"	a
l03696	doxygen-html/a00026_source.html	/^<a name="l03696"><\/a>03696                 <span class="keywordflow">if<\/span> (slot == 0)$/;"	a
l03697	doxygen-html/a00026_source.html	/^<a name="l03697"><\/a>03697                     *minkey = subminkey;$/;"	a
l03698	doxygen-html/a00026_source.html	/^<a name="l03698"><\/a>03698                 <span class="keywordflow">else<\/span>$/;"	a
l03699	doxygen-html/a00026_source.html	/^<a name="l03699"><\/a>03699                     assert(<a class="code" href="a00001.html#a7d9e621a7b8c3e88820e49874381ec1b" title="True if a &gt;= b ? constructed from key_less()">key_greaterequal<\/a>(subminkey, inner-&gt;slotkey[slot-1]));$/;"	a
l03700	doxygen-html/a00026_source.html	/^<a name="l03700"><\/a>03700 $/;"	a
l03701	doxygen-html/a00026_source.html	/^<a name="l03701"><\/a>03701                 <span class="keywordflow">if<\/span> (slot == inner-&gt;slotuse)$/;"	a
l03702	doxygen-html/a00026_source.html	/^<a name="l03702"><\/a>03702                     *maxkey = submaxkey;$/;"	a
l03703	doxygen-html/a00026_source.html	/^<a name="l03703"><\/a>03703                 <span class="keywordflow">else<\/span>$/;"	a
l03704	doxygen-html/a00026_source.html	/^<a name="l03704"><\/a>03704                     assert(<a class="code" href="a00001.html#ac3b0c8e750101dfad0ef70c54532dd68" title="True if a == b ? constructed from key_less().">key_equal<\/a>(inner-&gt;slotkey[slot], submaxkey));$/;"	a
l03705	doxygen-html/a00026_source.html	/^<a name="l03705"><\/a>03705 $/;"	a
l03706	doxygen-html/a00026_source.html	/^<a name="l03706"><\/a>03706                 <span class="keywordflow">if<\/span> (inner-&gt;level == 1 &amp;&amp; slot &lt; inner-&gt;slotuse)$/;"	a
l03707	doxygen-html/a00026_source.html	/^<a name="l03707"><\/a>03707                 {$/;"	a
l03708	doxygen-html/a00026_source.html	/^<a name="l03708"><\/a>03708                     <span class="comment">\/\/ children are leaves and must be linked together in the<\/span>$/;"	a
l03709	doxygen-html/a00026_source.html	/^<a name="l03709"><\/a>03709                     <span class="comment">\/\/ correct order<\/span>$/;"	a
l03710	doxygen-html/a00026_source.html	/^<a name="l03710"><\/a>03710                     <span class="keyword">const<\/span> leaf_node *leafa = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot]);$/;"	a
l03711	doxygen-html/a00026_source.html	/^<a name="l03711"><\/a>03711                     <span class="keyword">const<\/span> leaf_node *leafb = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot + 1]);$/;"	a
l03712	doxygen-html/a00026_source.html	/^<a name="l03712"><\/a>03712 $/;"	a
l03713	doxygen-html/a00026_source.html	/^<a name="l03713"><\/a>03713                     assert(leafa-&gt;nextleaf == leafb);$/;"	a
l03714	doxygen-html/a00026_source.html	/^<a name="l03714"><\/a>03714                     assert(leafa == leafb-&gt;prevleaf);$/;"	a
l03715	doxygen-html/a00026_source.html	/^<a name="l03715"><\/a>03715                     (void)leafa; (void)leafb;$/;"	a
l03716	doxygen-html/a00026_source.html	/^<a name="l03716"><\/a>03716                 }$/;"	a
l03717	doxygen-html/a00026_source.html	/^<a name="l03717"><\/a>03717                 <span class="keywordflow">if<\/span> (inner-&gt;level == 2 &amp;&amp; slot &lt; inner-&gt;slotuse)$/;"	a
l03718	doxygen-html/a00026_source.html	/^<a name="l03718"><\/a>03718                 {$/;"	a
l03719	doxygen-html/a00026_source.html	/^<a name="l03719"><\/a>03719                     <span class="comment">\/\/ verify leaf links between the adjacent inner nodes<\/span>$/;"	a
l03720	doxygen-html/a00026_source.html	/^<a name="l03720"><\/a>03720                     <span class="keyword">const<\/span> inner_node *parenta = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot]);$/;"	a
l03721	doxygen-html/a00026_source.html	/^<a name="l03721"><\/a>03721                     <span class="keyword">const<\/span> inner_node *parentb = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(inner-&gt;childid[slot+1]);$/;"	a
l03722	doxygen-html/a00026_source.html	/^<a name="l03722"><\/a>03722 $/;"	a
l03723	doxygen-html/a00026_source.html	/^<a name="l03723"><\/a>03723                     <span class="keyword">const<\/span> leaf_node *leafa = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(parenta-&gt;childid[parenta-&gt;slotuse]);$/;"	a
l03724	doxygen-html/a00026_source.html	/^<a name="l03724"><\/a>03724                     <span class="keyword">const<\/span> leaf_node *leafb = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(parentb-&gt;childid[0]);$/;"	a
l03725	doxygen-html/a00026_source.html	/^<a name="l03725"><\/a>03725 $/;"	a
l03726	doxygen-html/a00026_source.html	/^<a name="l03726"><\/a>03726                     assert(leafa-&gt;nextleaf == leafb);$/;"	a
l03727	doxygen-html/a00026_source.html	/^<a name="l03727"><\/a>03727                     assert(leafa == leafb-&gt;prevleaf);$/;"	a
l03728	doxygen-html/a00026_source.html	/^<a name="l03728"><\/a>03728                     (void)leafa; (void)leafb;$/;"	a
l03729	doxygen-html/a00026_source.html	/^<a name="l03729"><\/a>03729                 }$/;"	a
l03730	doxygen-html/a00026_source.html	/^<a name="l03730"><\/a>03730             }$/;"	a
l03731	doxygen-html/a00026_source.html	/^<a name="l03731"><\/a>03731         }$/;"	a
l03732	doxygen-html/a00026_source.html	/^<a name="l03732"><\/a>03732     }$/;"	a
l03733	doxygen-html/a00026_source.html	/^<a name="l03733"><\/a>03733 <span class="comment"><\/span>$/;"	a
l03734	doxygen-html/a00026_source.html	/^<a name="l03734"><\/a>03734 <span class="comment">    \/\/\/ Verify the double linked list of leaves.<\/span>$/;"	a
l03735	doxygen-html/a00026_source.html	/^<a name="l03735"><\/a><a class="code" href="a00001.html#ae89a72438aead5bbc0e2cf0b01999291">03735<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#ae89a72438aead5bbc0e2cf0b01999291" title="Verify the double linked list of leaves.">verify_leaflinks<\/a>()<span class="keyword"> const<\/span>$/;"	a
l03736	doxygen-html/a00026_source.html	/^<a name="l03736"><\/a>03736 <span class="keyword">    <\/span>{$/;"	a
l03737	doxygen-html/a00026_source.html	/^<a name="l03737"><\/a>03737         <span class="keyword">const<\/span> leaf_node *n = <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a>;$/;"	a
l03738	doxygen-html/a00026_source.html	/^<a name="l03738"><\/a>03738 $/;"	a
l03739	doxygen-html/a00026_source.html	/^<a name="l03739"><\/a>03739         assert(n-&gt;level == 0);$/;"	a
l03740	doxygen-html/a00026_source.html	/^<a name="l03740"><\/a>03740         assert(!n || n-&gt;prevleaf == NULL);$/;"	a
l03741	doxygen-html/a00026_source.html	/^<a name="l03741"><\/a>03741 $/;"	a
l03742	doxygen-html/a00026_source.html	/^<a name="l03742"><\/a>03742         <span class="keywordtype">unsigned<\/span> <span class="keywordtype">int<\/span> testcount = 0;$/;"	a
l03743	doxygen-html/a00026_source.html	/^<a name="l03743"><\/a>03743 $/;"	a
l03744	doxygen-html/a00026_source.html	/^<a name="l03744"><\/a>03744         <span class="keywordflow">while<\/span>(n)$/;"	a
l03745	doxygen-html/a00026_source.html	/^<a name="l03745"><\/a>03745         {$/;"	a
l03746	doxygen-html/a00026_source.html	/^<a name="l03746"><\/a>03746             assert(n-&gt;level == 0);$/;"	a
l03747	doxygen-html/a00026_source.html	/^<a name="l03747"><\/a>03747             assert(n-&gt;slotuse &gt; 0);$/;"	a
l03748	doxygen-html/a00026_source.html	/^<a name="l03748"><\/a>03748 $/;"	a
l03749	doxygen-html/a00026_source.html	/^<a name="l03749"><\/a>03749             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt; n-&gt;slotuse - 1; ++slot)$/;"	a
l03750	doxygen-html/a00026_source.html	/^<a name="l03750"><\/a>03750             {$/;"	a
l03751	doxygen-html/a00026_source.html	/^<a name="l03751"><\/a>03751                 assert(<a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(n-&gt;slotkey[slot], n-&gt;slotkey[slot + 1]));$/;"	a
l03752	doxygen-html/a00026_source.html	/^<a name="l03752"><\/a>03752             }$/;"	a
l03753	doxygen-html/a00026_source.html	/^<a name="l03753"><\/a>03753 $/;"	a
l03754	doxygen-html/a00026_source.html	/^<a name="l03754"><\/a>03754             testcount += n-&gt;slotuse;$/;"	a
l03755	doxygen-html/a00026_source.html	/^<a name="l03755"><\/a>03755 $/;"	a
l03756	doxygen-html/a00026_source.html	/^<a name="l03756"><\/a>03756             <span class="keywordflow">if<\/span> (n-&gt;nextleaf)$/;"	a
l03757	doxygen-html/a00026_source.html	/^<a name="l03757"><\/a>03757             {$/;"	a
l03758	doxygen-html/a00026_source.html	/^<a name="l03758"><\/a>03758                 assert(<a class="code" href="a00001.html#a1a0b97590280a37b8622b000fe4d2d07" title="True if a &lt;= b ? constructed from key_less()">key_lessequal<\/a>(n-&gt;slotkey[n-&gt;slotuse-1], n-&gt;nextleaf-&gt;slotkey[0]));$/;"	a
l03759	doxygen-html/a00026_source.html	/^<a name="l03759"><\/a>03759 $/;"	a
l03760	doxygen-html/a00026_source.html	/^<a name="l03760"><\/a>03760                 assert(n == n-&gt;nextleaf-&gt;prevleaf);$/;"	a
l03761	doxygen-html/a00026_source.html	/^<a name="l03761"><\/a>03761             }$/;"	a
l03762	doxygen-html/a00026_source.html	/^<a name="l03762"><\/a>03762             <span class="keywordflow">else<\/span>$/;"	a
l03763	doxygen-html/a00026_source.html	/^<a name="l03763"><\/a>03763             {$/;"	a
l03764	doxygen-html/a00026_source.html	/^<a name="l03764"><\/a>03764                 assert(<a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> == n);$/;"	a
l03765	doxygen-html/a00026_source.html	/^<a name="l03765"><\/a>03765             }$/;"	a
l03766	doxygen-html/a00026_source.html	/^<a name="l03766"><\/a>03766 $/;"	a
l03767	doxygen-html/a00026_source.html	/^<a name="l03767"><\/a>03767             n = n-&gt;nextleaf;$/;"	a
l03768	doxygen-html/a00026_source.html	/^<a name="l03768"><\/a>03768         }$/;"	a
l03769	doxygen-html/a00026_source.html	/^<a name="l03769"><\/a>03769 $/;"	a
l03770	doxygen-html/a00026_source.html	/^<a name="l03770"><\/a>03770         assert(testcount == <a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>());$/;"	a
l03771	doxygen-html/a00026_source.html	/^<a name="l03771"><\/a>03771     }$/;"	a
l03772	doxygen-html/a00026_source.html	/^<a name="l03772"><\/a>03772 $/;"	a
l03773	doxygen-html/a00026_source.html	/^<a name="l03773"><\/a>03773 <span class="keyword">private<\/span>:$/;"	a
l03774	doxygen-html/a00026_source.html	/^<a name="l03774"><\/a>03774     <span class="comment">\/\/ *** Dump and Restore of B+ Trees<\/span>$/;"	a
l03775	doxygen-html/a00026_source.html	/^<a name="l03775"><\/a>03775 <span class="comment"><\/span>$/;"	a
l03776	doxygen-html/a00026_source.html	/^<a name="l03776"><\/a>03776 <span class="comment">    \/\/\/ A header for the binary image containing the base properties of the B+<\/span>$/;"	a
l03777	doxygen-html/a00026_source.html	/^<a name="l03777"><\/a>03777 <span class="comment">    \/\/\/ tree. These properties have to match the current template<\/span>$/;"	a
l03778	doxygen-html/a00026_source.html	/^<a name="l03778"><\/a>03778 <span class="comment">    \/\/\/ instantiation.<\/span>$/;"	a
l03779	doxygen-html/a00026_source.html	/^<a name="l03779"><\/a><a class="code" href="a00012.html">03779<\/a> <span class="comment"><\/span>    <span class="keyword">struct <\/span><a class="code" href="a00012.html" title="A header for the binary image containing the base properties of the B+ tree.">dump_header<\/a>$/;"	a
l03780	doxygen-html/a00026_source.html	/^<a name="l03780"><\/a>03780     {<span class="comment"><\/span>$/;"	a
l03781	doxygen-html/a00026_source.html	/^<a name="l03781"><\/a>03781 <span class="comment">        \/\/\/ &quot;stx-btree&quot;, just to stop the restore() function from loading garbage<\/span>$/;"	a
l03782	doxygen-html/a00026_source.html	/^<a name="l03782"><\/a><a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925">03782<\/a> <span class="comment"><\/span>        <span class="keywordtype">char<\/span>            <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[12];$/;"	a
l03783	doxygen-html/a00026_source.html	/^<a name="l03783"><\/a>03783 <span class="comment"><\/span>$/;"	a
l03784	doxygen-html/a00026_source.html	/^<a name="l03784"><\/a>03784 <span class="comment">        \/\/\/ Currently 0<\/span>$/;"	a
l03785	doxygen-html/a00026_source.html	/^<a name="l03785"><\/a><a class="code" href="a00012.html#a71d827c1ccd04d8e6233ff219912c595">03785<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00012.html#a71d827c1ccd04d8e6233ff219912c595" title="Currently 0.">version<\/a>;$/;"	a
l03786	doxygen-html/a00026_source.html	/^<a name="l03786"><\/a>03786 <span class="comment"><\/span>$/;"	a
l03787	doxygen-html/a00026_source.html	/^<a name="l03787"><\/a>03787 <span class="comment">        \/\/\/ sizeof(key_type)<\/span>$/;"	a
l03788	doxygen-html/a00026_source.html	/^<a name="l03788"><\/a><a class="code" href="a00012.html#a8f67df3531d38ffcef8ad82d9da065f3">03788<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00012.html#a8f67df3531d38ffcef8ad82d9da065f3" title="sizeof(key_type)">key_type_size<\/a>;$/;"	a
l03789	doxygen-html/a00026_source.html	/^<a name="l03789"><\/a>03789 <span class="comment"><\/span>$/;"	a
l03790	doxygen-html/a00026_source.html	/^<a name="l03790"><\/a>03790 <span class="comment">        \/\/\/ sizeof(data_type)<\/span>$/;"	a
l03791	doxygen-html/a00026_source.html	/^<a name="l03791"><\/a><a class="code" href="a00012.html#a536d42c9baeada7861b53418cd57f956">03791<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00012.html#a536d42c9baeada7861b53418cd57f956" title="sizeof(data_type)">data_type_size<\/a>;$/;"	a
l03792	doxygen-html/a00026_source.html	/^<a name="l03792"><\/a>03792 <span class="comment"><\/span>$/;"	a
l03793	doxygen-html/a00026_source.html	/^<a name="l03793"><\/a>03793 <span class="comment">        \/\/\/ Number of slots in the leaves<\/span>$/;"	a
l03794	doxygen-html/a00026_source.html	/^<a name="l03794"><\/a><a class="code" href="a00012.html#ad34685edd1951aa742a1ead6e964e9d1">03794<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00012.html#ad34685edd1951aa742a1ead6e964e9d1" title="Number of slots in the leaves.">leafslots<\/a>;$/;"	a
l03795	doxygen-html/a00026_source.html	/^<a name="l03795"><\/a>03795 <span class="comment"><\/span>$/;"	a
l03796	doxygen-html/a00026_source.html	/^<a name="l03796"><\/a>03796 <span class="comment">        \/\/\/ Number of slots in the inner nodes<\/span>$/;"	a
l03797	doxygen-html/a00026_source.html	/^<a name="l03797"><\/a><a class="code" href="a00012.html#aa30e74b5b93fa0b4357a69d81c1c3158">03797<\/a> <span class="comment"><\/span>        <span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span>  <a class="code" href="a00012.html#aa30e74b5b93fa0b4357a69d81c1c3158" title="Number of slots in the inner nodes.">innerslots<\/a>;$/;"	a
l03798	doxygen-html/a00026_source.html	/^<a name="l03798"><\/a>03798 <span class="comment"><\/span>$/;"	a
l03799	doxygen-html/a00026_source.html	/^<a name="l03799"><\/a>03799 <span class="comment">        \/\/\/ Allow duplicates<\/span>$/;"	a
l03800	doxygen-html/a00026_source.html	/^<a name="l03800"><\/a><a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4">03800<\/a> <span class="comment"><\/span>        <span class="keywordtype">bool<\/span>            <a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4" title="Allow duplicates.">allow_duplicates<\/a>;$/;"	a
l03801	doxygen-html/a00026_source.html	/^<a name="l03801"><\/a>03801 <span class="comment"><\/span>$/;"	a
l03802	doxygen-html/a00026_source.html	/^<a name="l03802"><\/a>03802 <span class="comment">        \/\/\/ The item count of the tree<\/span>$/;"	a
l03803	doxygen-html/a00026_source.html	/^<a name="l03803"><\/a><a class="code" href="a00012.html#ac6afd8dcd6ff5b432cbea929e7d9092a">03803<\/a> <span class="comment"><\/span>        <a class="code" href="a00001.html#aa692f5303dd2c4fee4958cbbfc3db5da" title="Size type used to count keys.">size_type<\/a>       <a class="code" href="a00012.html#ac6afd8dcd6ff5b432cbea929e7d9092a" title="The item count of the tree.">itemcount<\/a>;$/;"	a
l03804	doxygen-html/a00026_source.html	/^<a name="l03804"><\/a>03804 <span class="comment"><\/span>$/;"	a
l03805	doxygen-html/a00026_source.html	/^<a name="l03805"><\/a>03805 <span class="comment">        \/\/\/ Fill the struct with the current B+ tree&#39;s properties, itemcount is<\/span>$/;"	a
l03806	doxygen-html/a00026_source.html	/^<a name="l03806"><\/a>03806 <span class="comment">        \/\/\/ not filled.<\/span>$/;"	a
l03807	doxygen-html/a00026_source.html	/^<a name="l03807"><\/a><a class="code" href="a00012.html#a9860eb582bc28a17920c4a8e28128231">03807<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">void<\/span> <a class="code" href="a00012.html#a9860eb582bc28a17920c4a8e28128231" title="Fill the struct with the current B+ tree&#39;s properties, itemcount is not filled.">fill<\/a>()$/;"	a
l03808	doxygen-html/a00026_source.html	/^<a name="l03808"><\/a>03808         {$/;"	a
l03809	doxygen-html/a00026_source.html	/^<a name="l03809"><\/a>03809             <span class="comment">\/\/ don&#39;t want to include string.h just for this signature<\/span>$/;"	a
l03810	doxygen-html/a00026_source.html	/^<a name="l03810"><\/a>03810             <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[0] = <span class="charliteral">&#39;s&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[1] = <span class="charliteral">&#39;t&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[2] = <span class="charliteral">&#39;x&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[3] = <span class="charliteral">&#39;-&#39;<\/span>;$/;"	a
l03811	doxygen-html/a00026_source.html	/^<a name="l03811"><\/a>03811             <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[4] = <span class="charliteral">&#39;b&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[5] = <span class="charliteral">&#39;t&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[6] = <span class="charliteral">&#39;r&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[7] = <span class="charliteral">&#39;e&#39;<\/span>;$/;"	a
l03812	doxygen-html/a00026_source.html	/^<a name="l03812"><\/a>03812             <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[8] = <span class="charliteral">&#39;e&#39;<\/span>; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[9] = 0; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[10] = 0; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[11] = 0;$/;"	a
l03813	doxygen-html/a00026_source.html	/^<a name="l03813"><\/a>03813 $/;"	a
l03814	doxygen-html/a00026_source.html	/^<a name="l03814"><\/a>03814             <a class="code" href="a00012.html#a71d827c1ccd04d8e6233ff219912c595" title="Currently 0.">version<\/a> = 0;$/;"	a
l03815	doxygen-html/a00026_source.html	/^<a name="l03815"><\/a>03815             <a class="code" href="a00012.html#a8f67df3531d38ffcef8ad82d9da065f3" title="sizeof(key_type)">key_type_size<\/a> = <span class="keyword">sizeof<\/span>(<span class="keyword">typename<\/span> <a class="code" href="a00001.html#a73a9d635f33527a1329937f3e5f0ee5a" title="First template parameter: The key type of the B+ tree.">btree_self::key_type<\/a>);$/;"	a
l03816	doxygen-html/a00026_source.html	/^<a name="l03816"><\/a>03816             <a class="code" href="a00012.html#a536d42c9baeada7861b53418cd57f956" title="sizeof(data_type)">data_type_size<\/a> = <span class="keyword">sizeof<\/span>(<span class="keyword">typename<\/span> <a class="code" href="a00001.html#acfb48ad6a3845870e64c38dd1b562616" title="Second template parameter: The data type associated with each key.">btree_self::data_type<\/a>);$/;"	a
l03817	doxygen-html/a00026_source.html	/^<a name="l03817"><\/a>03817             <a class="code" href="a00012.html#ad34685edd1951aa742a1ead6e964e9d1" title="Number of slots in the leaves.">leafslots<\/a> = <a class="code" href="a00001.html#ac6c274f39fce8e14f6a881fc1da39cf8" title="Base B+ tree parameter: The number of key\/data slots in each leaf.">btree_self::leafslotmax<\/a>;$/;"	a
l03818	doxygen-html/a00026_source.html	/^<a name="l03818"><\/a>03818             <a class="code" href="a00012.html#aa30e74b5b93fa0b4357a69d81c1c3158" title="Number of slots in the inner nodes.">innerslots<\/a> = <a class="code" href="a00001.html#a78ae296638b9d6961f9101ddf45bf3e0" title="Base B+ tree parameter: The number of key slots in each inner node, this can differ from slots in eac...">btree_self::innerslotmax<\/a>;$/;"	a
l03819	doxygen-html/a00026_source.html	/^<a name="l03819"><\/a>03819             <a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4" title="Allow duplicates.">allow_duplicates<\/a> = <a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4" title="Allow duplicates.">btree_self::allow_duplicates<\/a>;$/;"	a
l03820	doxygen-html/a00026_source.html	/^<a name="l03820"><\/a>03820         }$/;"	a
l03821	doxygen-html/a00026_source.html	/^<a name="l03821"><\/a>03821 <span class="comment"><\/span>$/;"	a
l03822	doxygen-html/a00026_source.html	/^<a name="l03822"><\/a>03822 <span class="comment">        \/\/\/ Returns true if the headers have the same vital properties<\/span>$/;"	a
l03823	doxygen-html/a00026_source.html	/^<a name="l03823"><\/a><a class="code" href="a00012.html#a8af9b3bcc5f4e1370c343116afcef6fe">03823<\/a> <span class="comment"><\/span>        <span class="keyword">inline<\/span> <span class="keywordtype">bool<\/span> <a class="code" href="a00012.html#a8af9b3bcc5f4e1370c343116afcef6fe" title="Returns true if the headers have the same vital properties.">same<\/a>(<span class="keyword">const<\/span> <span class="keyword">struct<\/span> <a class="code" href="a00012.html" title="A header for the binary image containing the base properties of the B+ tree.">dump_header<\/a> &amp;o)<span class="keyword"> const<\/span>$/;"	a
l03824	doxygen-html/a00026_source.html	/^<a name="l03824"><\/a>03824 <span class="keyword">        <\/span>{$/;"	a
l03825	doxygen-html/a00026_source.html	/^<a name="l03825"><\/a>03825             <span class="keywordflow">return<\/span> (<a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[0] == <span class="charliteral">&#39;s&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[1] == <span class="charliteral">&#39;t&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[2] == <span class="charliteral">&#39;x&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[3] == <span class="charliteral">&#39;-&#39;<\/span> &amp;&amp;$/;"	a
l03826	doxygen-html/a00026_source.html	/^<a name="l03826"><\/a>03826                     <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[4] == <span class="charliteral">&#39;b&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[5] == <span class="charliteral">&#39;t&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[6] == <span class="charliteral">&#39;r&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[7] == <span class="charliteral">&#39;e&#39;<\/span> &amp;&amp;$/;"	a
l03827	doxygen-html/a00026_source.html	/^<a name="l03827"><\/a>03827                     <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[8] == <span class="charliteral">&#39;e&#39;<\/span> &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[9] == 0 &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[10] == 0 &amp;&amp; <a class="code" href="a00012.html#ab44be47294b727f4a876cc210c498925" title="&quot;stx-btree&quot;, just to stop the restore() function from loading garbage">signature<\/a>[11] == 0)$/;"	a
l03828	doxygen-html/a00026_source.html	/^<a name="l03828"><\/a>03828                 &amp;&amp; (<a class="code" href="a00012.html#a71d827c1ccd04d8e6233ff219912c595" title="Currently 0.">version<\/a> == o.<a class="code" href="a00012.html#a71d827c1ccd04d8e6233ff219912c595" title="Currently 0.">version<\/a>)$/;"	a
l03829	doxygen-html/a00026_source.html	/^<a name="l03829"><\/a>03829                 &amp;&amp; (<a class="code" href="a00012.html#a8f67df3531d38ffcef8ad82d9da065f3" title="sizeof(key_type)">key_type_size<\/a> == o.<a class="code" href="a00012.html#a8f67df3531d38ffcef8ad82d9da065f3" title="sizeof(key_type)">key_type_size<\/a>)$/;"	a
l03830	doxygen-html/a00026_source.html	/^<a name="l03830"><\/a>03830                 &amp;&amp; (<a class="code" href="a00012.html#a536d42c9baeada7861b53418cd57f956" title="sizeof(data_type)">data_type_size<\/a> == o.<a class="code" href="a00012.html#a536d42c9baeada7861b53418cd57f956" title="sizeof(data_type)">data_type_size<\/a>)$/;"	a
l03831	doxygen-html/a00026_source.html	/^<a name="l03831"><\/a>03831                 &amp;&amp; (<a class="code" href="a00012.html#ad34685edd1951aa742a1ead6e964e9d1" title="Number of slots in the leaves.">leafslots<\/a> == o.<a class="code" href="a00012.html#ad34685edd1951aa742a1ead6e964e9d1" title="Number of slots in the leaves.">leafslots<\/a>)$/;"	a
l03832	doxygen-html/a00026_source.html	/^<a name="l03832"><\/a>03832                 &amp;&amp; (<a class="code" href="a00012.html#aa30e74b5b93fa0b4357a69d81c1c3158" title="Number of slots in the inner nodes.">innerslots<\/a> == o.<a class="code" href="a00012.html#aa30e74b5b93fa0b4357a69d81c1c3158" title="Number of slots in the inner nodes.">innerslots<\/a>)$/;"	a
l03833	doxygen-html/a00026_source.html	/^<a name="l03833"><\/a>03833                 &amp;&amp; (<a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4" title="Allow duplicates.">allow_duplicates<\/a> == o.<a class="code" href="a00012.html#a6c34468093568a6008699cf81e489cc4" title="Allow duplicates.">allow_duplicates<\/a>);$/;"	a
l03834	doxygen-html/a00026_source.html	/^<a name="l03834"><\/a>03834         }$/;"	a
l03835	doxygen-html/a00026_source.html	/^<a name="l03835"><\/a>03835     };$/;"	a
l03836	doxygen-html/a00026_source.html	/^<a name="l03836"><\/a>03836 $/;"	a
l03837	doxygen-html/a00026_source.html	/^<a name="l03837"><\/a>03837 <span class="keyword">public<\/span>:$/;"	a
l03838	doxygen-html/a00026_source.html	/^<a name="l03838"><\/a>03838 <span class="comment"><\/span>$/;"	a
l03839	doxygen-html/a00026_source.html	/^<a name="l03839"><\/a>03839 <span class="comment">    \/\/\/ Dump the contents of the B+ tree out onto an ostream as a binary<\/span>$/;"	a
l03840	doxygen-html/a00026_source.html	/^<a name="l03840"><\/a>03840 <span class="comment">    \/\/\/ image. The image contains memory pointers which will be fixed when the<\/span>$/;"	a
l03841	doxygen-html/a00026_source.html	/^<a name="l03841"><\/a>03841 <span class="comment">    \/\/\/ image is restored. For this to work your key_type and data_type must be<\/span>$/;"	a
l03842	doxygen-html/a00026_source.html	/^<a name="l03842"><\/a>03842 <span class="comment">    \/\/\/ integral types and contain no pointers or references.<\/span>$/;"	a
l03843	doxygen-html/a00026_source.html	/^<a name="l03843"><\/a><a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28">03843<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#af26da2c6a1723bd3c98229b3670e2d28" title="Dump the contents of the B+ tree out onto an ostream as a binary image.">dump<\/a>(std::ostream &amp;os)<span class="keyword"> const<\/span>$/;"	a
l03844	doxygen-html/a00026_source.html	/^<a name="l03844"><\/a>03844 <span class="keyword">    <\/span>{$/;"	a
l03845	doxygen-html/a00026_source.html	/^<a name="l03845"><\/a>03845         <span class="keyword">struct <\/span>dump_header header;$/;"	a
l03846	doxygen-html/a00026_source.html	/^<a name="l03846"><\/a>03846         header.fill();$/;"	a
l03847	doxygen-html/a00026_source.html	/^<a name="l03847"><\/a>03847         header.itemcount = <a class="code" href="a00001.html#a3942d7144bc93cf094b62f03e6113f4e" title="Return the number of key\/data pairs in the B+ tree.">size<\/a>();$/;"	a
l03848	doxygen-html/a00026_source.html	/^<a name="l03848"><\/a>03848 $/;"	a
l03849	doxygen-html/a00026_source.html	/^<a name="l03849"><\/a>03849         os.write(reinterpret_cast&lt;char*&gt;(&amp;header), <span class="keyword">sizeof<\/span>(header));$/;"	a
l03850	doxygen-html/a00026_source.html	/^<a name="l03850"><\/a>03850 $/;"	a
l03851	doxygen-html/a00026_source.html	/^<a name="l03851"><\/a>03851         <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>) {$/;"	a
l03852	doxygen-html/a00026_source.html	/^<a name="l03852"><\/a>03852             <a class="code" href="a00001.html#ad4ad2abd47967f9a7d89730bd5a0380d" title="Recursively descend down the tree and dump each node in a precise order.">dump_node<\/a>(os, <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a>);$/;"	a
l03853	doxygen-html/a00026_source.html	/^<a name="l03853"><\/a>03853         }$/;"	a
l03854	doxygen-html/a00026_source.html	/^<a name="l03854"><\/a>03854     }$/;"	a
l03855	doxygen-html/a00026_source.html	/^<a name="l03855"><\/a>03855 <span class="comment"><\/span>$/;"	a
l03856	doxygen-html/a00026_source.html	/^<a name="l03856"><\/a>03856 <span class="comment">    \/\/\/ Restore a binary image of a dumped B+ tree from an istream. The B+ tree<\/span>$/;"	a
l03857	doxygen-html/a00026_source.html	/^<a name="l03857"><\/a>03857 <span class="comment">    \/\/\/ pointers are fixed using the dump order. For dump and restore to work<\/span>$/;"	a
l03858	doxygen-html/a00026_source.html	/^<a name="l03858"><\/a>03858 <span class="comment">    \/\/\/ your key_type and data_type must be integral types and contain no<\/span>$/;"	a
l03859	doxygen-html/a00026_source.html	/^<a name="l03859"><\/a>03859 <span class="comment">    \/\/\/ pointers or references. Returns true if the restore was successful.<\/span>$/;"	a
l03860	doxygen-html/a00026_source.html	/^<a name="l03860"><\/a><a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d">03860<\/a> <span class="comment"><\/span>    <span class="keywordtype">bool<\/span> <a class="code" href="a00001.html#adf438d8a86c9784e277adfbb6ed5783d" title="Restore a binary image of a dumped B+ tree from an istream.">restore<\/a>(std::istream &amp;is)$/;"	a
l03861	doxygen-html/a00026_source.html	/^<a name="l03861"><\/a>03861     {$/;"	a
l03862	doxygen-html/a00026_source.html	/^<a name="l03862"><\/a>03862         <span class="keyword">struct <\/span>dump_header fileheader;$/;"	a
l03863	doxygen-html/a00026_source.html	/^<a name="l03863"><\/a>03863         is.read(reinterpret_cast&lt;char*&gt;(&amp;fileheader), <span class="keyword">sizeof<\/span>(fileheader));$/;"	a
l03864	doxygen-html/a00026_source.html	/^<a name="l03864"><\/a>03864         <span class="keywordflow">if<\/span> (!is.good()) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;$/;"	a
l03865	doxygen-html/a00026_source.html	/^<a name="l03865"><\/a>03865 $/;"	a
l03866	doxygen-html/a00026_source.html	/^<a name="l03866"><\/a>03866         <span class="keyword">struct <\/span>dump_header myheader;$/;"	a
l03867	doxygen-html/a00026_source.html	/^<a name="l03867"><\/a>03867         myheader.fill();$/;"	a
l03868	doxygen-html/a00026_source.html	/^<a name="l03868"><\/a>03868         myheader.itemcount = fileheader.itemcount;$/;"	a
l03869	doxygen-html/a00026_source.html	/^<a name="l03869"><\/a>03869 $/;"	a
l03870	doxygen-html/a00026_source.html	/^<a name="l03870"><\/a>03870         <span class="keywordflow">if<\/span> (!myheader.same(fileheader))$/;"	a
l03871	doxygen-html/a00026_source.html	/^<a name="l03871"><\/a>03871         {$/;"	a
l03872	doxygen-html/a00026_source.html	/^<a name="l03872"><\/a>03872             <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;btree::restore: file header does not match instantiation signature.&quot;<\/span>);$/;"	a
l03873	doxygen-html/a00026_source.html	/^<a name="l03873"><\/a>03873             <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;$/;"	a
l03874	doxygen-html/a00026_source.html	/^<a name="l03874"><\/a>03874         }$/;"	a
l03875	doxygen-html/a00026_source.html	/^<a name="l03875"><\/a>03875 $/;"	a
l03876	doxygen-html/a00026_source.html	/^<a name="l03876"><\/a>03876         <a class="code" href="a00001.html#aa2acf975007740100b9803fcea573036" title="Frees all key\/data pairs and all nodes of the tree.">clear<\/a>();$/;"	a
l03877	doxygen-html/a00026_source.html	/^<a name="l03877"><\/a>03877 $/;"	a
l03878	doxygen-html/a00026_source.html	/^<a name="l03878"><\/a>03878         <span class="keywordflow">if<\/span> (fileheader.itemcount &gt; 0)$/;"	a
l03879	doxygen-html/a00026_source.html	/^<a name="l03879"><\/a>03879         {$/;"	a
l03880	doxygen-html/a00026_source.html	/^<a name="l03880"><\/a>03880             <a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> = <a class="code" href="a00001.html#a90299b74161abaef68c886e2d53ad490" title="Read the dump image and construct a tree from the node order in the serialization.">restore_node<\/a>(is);$/;"	a
l03881	doxygen-html/a00026_source.html	/^<a name="l03881"><\/a>03881             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a359f38ed7d0557cd5726ecf80f868e80" title="Pointer to the B+ tree&#39;s root node, either leaf or inner node.">m_root<\/a> == NULL) <span class="keywordflow">return<\/span> <span class="keyword">false<\/span>;$/;"	a
l03882	doxygen-html/a00026_source.html	/^<a name="l03882"><\/a>03882 $/;"	a
l03883	doxygen-html/a00026_source.html	/^<a name="l03883"><\/a>03883             <a class="code" href="a00001.html#ac1971d7f227239aae76a2a88657a31a3" title="Other small statistics about the B+ tree.">m_stats<\/a>.<a class="code" href="a00021.html#afef2ae775091d9913de5ebfb84ef7aae" title="Number of items in the B+ tree.">itemcount<\/a> = fileheader.itemcount;$/;"	a
l03884	doxygen-html/a00026_source.html	/^<a name="l03884"><\/a>03884         }$/;"	a
l03885	doxygen-html/a00026_source.html	/^<a name="l03885"><\/a>03885 $/;"	a
l03886	doxygen-html/a00026_source.html	/^<a name="l03886"><\/a>03886 <span class="preprocessor">#ifdef BTREE_DEBUG<\/span>$/;"	a
l03887	doxygen-html/a00026_source.html	/^<a name="l03887"><\/a>03887 <span class="preprocessor"><\/span>        <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a224f31a88d50490e14f0f291d70ef2fc" title="Debug parameter: Prints out lots of debug information about how the algorithms change the tree...">debug<\/a>) <a class="code" href="a00001.html#a29af931b81dc3446d1ffadab6fd5e017" title="Print out the B+ tree structure with keys onto the given ostream.">print<\/a>(std::cout);$/;"	a
l03888	doxygen-html/a00026_source.html	/^<a name="l03888"><\/a>03888 <span class="preprocessor">#endif<\/span>$/;"	a
l03889	doxygen-html/a00026_source.html	/^<a name="l03889"><\/a>03889 <span class="preprocessor"><\/span>        <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a598601fa16cfb97b8b60a4eae6bde5ae" title="Debug parameter: Enables expensive and thorough checking of the B+ tree invariants after each insert\/...">selfverify<\/a>) <a class="code" href="a00001.html#ad7008114b409fe53a5739a69f3b90e59" title="Run a thorough verification of all B+ tree invariants.">verify<\/a>();$/;"	a
l03890	doxygen-html/a00026_source.html	/^<a name="l03890"><\/a>03890 $/;"	a
l03891	doxygen-html/a00026_source.html	/^<a name="l03891"><\/a>03891         <span class="keywordflow">return<\/span> <span class="keyword">true<\/span>;$/;"	a
l03892	doxygen-html/a00026_source.html	/^<a name="l03892"><\/a>03892     }$/;"	a
l03893	doxygen-html/a00026_source.html	/^<a name="l03893"><\/a>03893 $/;"	a
l03894	doxygen-html/a00026_source.html	/^<a name="l03894"><\/a>03894 <span class="keyword">private<\/span>:$/;"	a
l03895	doxygen-html/a00026_source.html	/^<a name="l03895"><\/a>03895 <span class="comment"><\/span>$/;"	a
l03896	doxygen-html/a00026_source.html	/^<a name="l03896"><\/a>03896 <span class="comment">    \/\/\/ Recursively descend down the tree and dump each node in a precise order<\/span>$/;"	a
l03897	doxygen-html/a00026_source.html	/^<a name="l03897"><\/a><a class="code" href="a00001.html#ad4ad2abd47967f9a7d89730bd5a0380d">03897<\/a> <span class="comment"><\/span>    <span class="keywordtype">void<\/span> <a class="code" href="a00001.html#ad4ad2abd47967f9a7d89730bd5a0380d" title="Recursively descend down the tree and dump each node in a precise order.">dump_node<\/a>(std::ostream &amp;os, <span class="keyword">const<\/span> node* n)<span class="keyword"> const<\/span>$/;"	a
l03898	doxygen-html/a00026_source.html	/^<a name="l03898"><\/a>03898 <span class="keyword">    <\/span>{$/;"	a
l03899	doxygen-html/a00026_source.html	/^<a name="l03899"><\/a>03899         <a class="code" href="a00026.html#acd87b40df0c1d4ead6fac13b49cb5345" title="Print out debug information to std::cout if BTREE_DEBUG is defined.">BTREE_PRINT<\/a>(<span class="stringliteral">&quot;dump_node &quot;<\/span> &lt;&lt; n &lt;&lt; std::endl);$/;"	a
l03900	doxygen-html/a00026_source.html	/^<a name="l03900"><\/a>03900 $/;"	a
l03901	doxygen-html/a00026_source.html	/^<a name="l03901"><\/a>03901         <span class="keywordflow">if<\/span> (n-&gt;isleafnode())$/;"	a
l03902	doxygen-html/a00026_source.html	/^<a name="l03902"><\/a>03902         {$/;"	a
l03903	doxygen-html/a00026_source.html	/^<a name="l03903"><\/a>03903             <span class="keyword">const<\/span> leaf_node *leaf = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>leaf_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l03904	doxygen-html/a00026_source.html	/^<a name="l03904"><\/a>03904 $/;"	a
l03905	doxygen-html/a00026_source.html	/^<a name="l03905"><\/a>03905             os.write(reinterpret_cast&lt;const char*&gt;(leaf), <span class="keyword">sizeof<\/span>(*leaf));$/;"	a
l03906	doxygen-html/a00026_source.html	/^<a name="l03906"><\/a>03906         }$/;"	a
l03907	doxygen-html/a00026_source.html	/^<a name="l03907"><\/a>03907         <span class="keywordflow">else<\/span> <span class="comment">\/\/ !n-&gt;isleafnode()<\/span>$/;"	a
l03908	doxygen-html/a00026_source.html	/^<a name="l03908"><\/a>03908         {$/;"	a
l03909	doxygen-html/a00026_source.html	/^<a name="l03909"><\/a>03909             <span class="keyword">const<\/span> inner_node *inner = <span class="keyword">static_cast&lt;<\/span><span class="keyword">const <\/span>inner_node*<span class="keyword">&gt;<\/span>(n);$/;"	a
l03910	doxygen-html/a00026_source.html	/^<a name="l03910"><\/a>03910 $/;"	a
l03911	doxygen-html/a00026_source.html	/^<a name="l03911"><\/a>03911             os.write(reinterpret_cast&lt;const char*&gt;(inner), <span class="keyword">sizeof<\/span>(*inner));$/;"	a
l03912	doxygen-html/a00026_source.html	/^<a name="l03912"><\/a>03912 $/;"	a
l03913	doxygen-html/a00026_source.html	/^<a name="l03913"><\/a>03913             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt;= inner-&gt;slotuse; ++slot)$/;"	a
l03914	doxygen-html/a00026_source.html	/^<a name="l03914"><\/a>03914             {$/;"	a
l03915	doxygen-html/a00026_source.html	/^<a name="l03915"><\/a>03915                 <span class="keyword">const<\/span> node *subnode = inner-&gt;childid[slot];$/;"	a
l03916	doxygen-html/a00026_source.html	/^<a name="l03916"><\/a>03916 $/;"	a
l03917	doxygen-html/a00026_source.html	/^<a name="l03917"><\/a>03917                 <a class="code" href="a00001.html#ad4ad2abd47967f9a7d89730bd5a0380d" title="Recursively descend down the tree and dump each node in a precise order.">dump_node<\/a>(os, subnode);$/;"	a
l03918	doxygen-html/a00026_source.html	/^<a name="l03918"><\/a>03918             }$/;"	a
l03919	doxygen-html/a00026_source.html	/^<a name="l03919"><\/a>03919         }$/;"	a
l03920	doxygen-html/a00026_source.html	/^<a name="l03920"><\/a>03920     }$/;"	a
l03921	doxygen-html/a00026_source.html	/^<a name="l03921"><\/a>03921 <span class="comment"><\/span>$/;"	a
l03922	doxygen-html/a00026_source.html	/^<a name="l03922"><\/a>03922 <span class="comment">    \/\/\/ Read the dump image and construct a tree from the node order in the<\/span>$/;"	a
l03923	doxygen-html/a00026_source.html	/^<a name="l03923"><\/a>03923 <span class="comment">    \/\/\/ serialization.<\/span>$/;"	a
l03924	doxygen-html/a00026_source.html	/^<a name="l03924"><\/a><a class="code" href="a00001.html#a90299b74161abaef68c886e2d53ad490">03924<\/a> <span class="comment"><\/span>    node* <a class="code" href="a00001.html#a90299b74161abaef68c886e2d53ad490" title="Read the dump image and construct a tree from the node order in the serialization.">restore_node<\/a>(std::istream &amp;is)$/;"	a
l03925	doxygen-html/a00026_source.html	/^<a name="l03925"><\/a>03925     {$/;"	a
l03926	doxygen-html/a00026_source.html	/^<a name="l03926"><\/a>03926         <span class="keyword">union <\/span>{$/;"	a
l03927	doxygen-html/a00026_source.html	/^<a name="l03927"><\/a>03927             node        top;$/;"	a
l03928	doxygen-html/a00026_source.html	/^<a name="l03928"><\/a>03928             leaf_node   leaf;$/;"	a
l03929	doxygen-html/a00026_source.html	/^<a name="l03929"><\/a>03929             inner_node  inner;$/;"	a
l03930	doxygen-html/a00026_source.html	/^<a name="l03930"><\/a>03930         } nu;$/;"	a
l03931	doxygen-html/a00026_source.html	/^<a name="l03931"><\/a>03931 $/;"	a
l03932	doxygen-html/a00026_source.html	/^<a name="l03932"><\/a>03932         <span class="comment">\/\/ first read only the top of the node<\/span>$/;"	a
l03933	doxygen-html/a00026_source.html	/^<a name="l03933"><\/a>03933         is.read(reinterpret_cast&lt;char*&gt;(&amp;nu.top), <span class="keyword">sizeof<\/span>(nu.top));$/;"	a
l03934	doxygen-html/a00026_source.html	/^<a name="l03934"><\/a>03934         <span class="keywordflow">if<\/span> (!is.good()) <span class="keywordflow">return<\/span> NULL;$/;"	a
l03935	doxygen-html/a00026_source.html	/^<a name="l03935"><\/a>03935 $/;"	a
l03936	doxygen-html/a00026_source.html	/^<a name="l03936"><\/a>03936         <span class="keywordflow">if<\/span> (nu.top.isleafnode())$/;"	a
l03937	doxygen-html/a00026_source.html	/^<a name="l03937"><\/a>03937         {$/;"	a
l03938	doxygen-html/a00026_source.html	/^<a name="l03938"><\/a>03938             <span class="comment">\/\/ read remaining data of leaf node<\/span>$/;"	a
l03939	doxygen-html/a00026_source.html	/^<a name="l03939"><\/a>03939             is.read(reinterpret_cast&lt;char*&gt;(&amp;nu.leaf) + <span class="keyword">sizeof<\/span>(nu.top), <span class="keyword">sizeof<\/span>(nu.leaf) - <span class="keyword">sizeof<\/span>(nu.top));$/;"	a
l03940	doxygen-html/a00026_source.html	/^<a name="l03940"><\/a>03940             <span class="keywordflow">if<\/span> (!is.good()) <span class="keywordflow">return<\/span> NULL;$/;"	a
l03941	doxygen-html/a00026_source.html	/^<a name="l03941"><\/a>03941 $/;"	a
l03942	doxygen-html/a00026_source.html	/^<a name="l03942"><\/a>03942             leaf_node *newleaf = <a class="code" href="a00001.html#ab6ff4b0f13f48e417a45431318a00337" title="Allocate and initialize a leaf node.">allocate_leaf<\/a>();$/;"	a
l03943	doxygen-html/a00026_source.html	/^<a name="l03943"><\/a>03943 $/;"	a
l03944	doxygen-html/a00026_source.html	/^<a name="l03944"><\/a>03944             <span class="comment">\/\/ copy over all data, the leaf nodes contain only their double linked list pointers<\/span>$/;"	a
l03945	doxygen-html/a00026_source.html	/^<a name="l03945"><\/a>03945             *newleaf = nu.leaf;$/;"	a
l03946	doxygen-html/a00026_source.html	/^<a name="l03946"><\/a>03946 $/;"	a
l03947	doxygen-html/a00026_source.html	/^<a name="l03947"><\/a>03947             <span class="comment">\/\/ reconstruct the linked list from the order in the file<\/span>$/;"	a
l03948	doxygen-html/a00026_source.html	/^<a name="l03948"><\/a>03948             <span class="keywordflow">if<\/span> (<a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> == NULL) {$/;"	a
l03949	doxygen-html/a00026_source.html	/^<a name="l03949"><\/a>03949                 <a class="code" href="a00026.html#a6ac57b9b59dae34aea28cda65b0d14bb" title="Assertion only if BTREE_DEBUG is defined. This is not used in verify().">BTREE_ASSERT<\/a>(newleaf-&gt;prevleaf == NULL);$/;"	a
l03950	doxygen-html/a00026_source.html	/^<a name="l03950"><\/a>03950                 <a class="code" href="a00001.html#a13acabf72d2c7d380bfd49fc8cb946aa" title="Pointer to first leaf in the double linked leaf chain.">m_headleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = newleaf;$/;"	a
l03951	doxygen-html/a00026_source.html	/^<a name="l03951"><\/a>03951             }$/;"	a
l03952	doxygen-html/a00026_source.html	/^<a name="l03952"><\/a>03952             <span class="keywordflow">else<\/span> {$/;"	a
l03953	doxygen-html/a00026_source.html	/^<a name="l03953"><\/a>03953                 newleaf-&gt;<a class="code" href="a00017.html#a56890dc287b29ae39f3e070a26cae000" title="Double linked list pointers to traverse the leaves.">prevleaf<\/a> = <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>;$/;"	a
l03954	doxygen-html/a00026_source.html	/^<a name="l03954"><\/a>03954                 <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a>-&gt;<a class="code" href="a00017.html#a32f06cf3a6f67709039ca40851b03367" title="Double linked list pointers to traverse the leaves.">nextleaf<\/a> = newleaf;$/;"	a
l03955	doxygen-html/a00026_source.html	/^<a name="l03955"><\/a>03955                 <a class="code" href="a00001.html#a570d9cb259032b2ce9c5edce77afbcc7" title="Pointer to last leaf in the double linked leaf chain.">m_tailleaf<\/a> = newleaf;$/;"	a
l03956	doxygen-html/a00026_source.html	/^<a name="l03956"><\/a>03956             }$/;"	a
l03957	doxygen-html/a00026_source.html	/^<a name="l03957"><\/a>03957 $/;"	a
l03958	doxygen-html/a00026_source.html	/^<a name="l03958"><\/a>03958             <span class="keywordflow">return<\/span> newleaf;$/;"	a
l03959	doxygen-html/a00026_source.html	/^<a name="l03959"><\/a>03959         }$/;"	a
l03960	doxygen-html/a00026_source.html	/^<a name="l03960"><\/a>03960         <span class="keywordflow">else<\/span>$/;"	a
l03961	doxygen-html/a00026_source.html	/^<a name="l03961"><\/a>03961         {$/;"	a
l03962	doxygen-html/a00026_source.html	/^<a name="l03962"><\/a>03962             <span class="comment">\/\/ read remaining data of inner node<\/span>$/;"	a
l03963	doxygen-html/a00026_source.html	/^<a name="l03963"><\/a>03963             is.read(reinterpret_cast&lt;char*&gt;(&amp;nu.inner) + <span class="keyword">sizeof<\/span>(nu.top), <span class="keyword">sizeof<\/span>(nu.inner) - <span class="keyword">sizeof<\/span>(nu.top));$/;"	a
l03964	doxygen-html/a00026_source.html	/^<a name="l03964"><\/a>03964             <span class="keywordflow">if<\/span> (!is.good()) <span class="keywordflow">return<\/span> NULL;$/;"	a
l03965	doxygen-html/a00026_source.html	/^<a name="l03965"><\/a>03965 $/;"	a
l03966	doxygen-html/a00026_source.html	/^<a name="l03966"><\/a>03966             inner_node *newinner = <a class="code" href="a00001.html#a1bf04093f2dc2a1cb57955ff55d3762a" title="Allocate and initialize an inner node.">allocate_inner<\/a>(0);$/;"	a
l03967	doxygen-html/a00026_source.html	/^<a name="l03967"><\/a>03967 $/;"	a
l03968	doxygen-html/a00026_source.html	/^<a name="l03968"><\/a>03968             <span class="comment">\/\/ copy over all data, the inner nodes contain only pointers to their children<\/span>$/;"	a
l03969	doxygen-html/a00026_source.html	/^<a name="l03969"><\/a>03969             *newinner = nu.inner;$/;"	a
l03970	doxygen-html/a00026_source.html	/^<a name="l03970"><\/a>03970 $/;"	a
l03971	doxygen-html/a00026_source.html	/^<a name="l03971"><\/a>03971             <span class="keywordflow">for<\/span>(<span class="keywordtype">unsigned<\/span> <span class="keywordtype">short<\/span> slot = 0; slot &lt;= newinner-&gt;slotuse; ++slot)$/;"	a
l03972	doxygen-html/a00026_source.html	/^<a name="l03972"><\/a>03972             {$/;"	a
l03973	doxygen-html/a00026_source.html	/^<a name="l03973"><\/a>03973                 newinner-&gt;childid[slot] = <a class="code" href="a00001.html#a90299b74161abaef68c886e2d53ad490" title="Read the dump image and construct a tree from the node order in the serialization.">restore_node<\/a>(is);$/;"	a
l03974	doxygen-html/a00026_source.html	/^<a name="l03974"><\/a>03974             }$/;"	a
l03975	doxygen-html/a00026_source.html	/^<a name="l03975"><\/a>03975 $/;"	a
l03976	doxygen-html/a00026_source.html	/^<a name="l03976"><\/a>03976             <span class="keywordflow">return<\/span> newinner;$/;"	a
l03977	doxygen-html/a00026_source.html	/^<a name="l03977"><\/a>03977         }$/;"	a
l03978	doxygen-html/a00026_source.html	/^<a name="l03978"><\/a>03978     }$/;"	a
l03979	doxygen-html/a00026_source.html	/^<a name="l03979"><\/a>03979 };$/;"	a
l03980	doxygen-html/a00026_source.html	/^<a name="l03980"><\/a>03980 $/;"	a
l03981	doxygen-html/a00026_source.html	/^<a name="l03981"><\/a>03981 } <span class="comment">\/\/ namespace stx<\/span>$/;"	a
l03982	doxygen-html/a00026_source.html	/^<a name="l03982"><\/a>03982 $/;"	a
l03983	doxygen-html/a00026_source.html	/^<a name="l03983"><\/a>03983 <span class="preprocessor">#endif \/\/ _STX_BTREE_H_<\/span>$/;"	a
lastkey	include/stx/btree.h	/^        key_type        lastkey;$/;"	m	struct:stx::btree::result_t
leaf_node	include/stx/btree.h	/^    struct leaf_node : public node$/;"	s	class:stx::btree
leaf_node_allocator	include/stx/btree.h	/^    typename leaf_node::alloc_type leaf_node_allocator()$/;"	f	class:stx::btree
leafslotmax	include/stx/btree.h	/^    static const unsigned short         leafslotmax =  traits::leafslots;$/;"	m	class:stx::btree
leafslotmax	include/stx/btree_map.h	/^    static const unsigned short         leafslotmax =  btree_impl::leafslotmax;$/;"	m	class:stx::btree_map
leafslotmax	include/stx/btree_multimap.h	/^    static const unsigned short         leafslotmax =  btree_impl::leafslotmax;$/;"	m	class:stx::btree_multimap
leafslotmax	include/stx/btree_multiset.h	/^    static const unsigned short         leafslotmax =  btree_impl::leafslotmax;$/;"	m	class:stx::btree_multiset
leafslotmax	include/stx/btree_set.h	/^    static const unsigned short         leafslotmax =  btree_impl::leafslotmax;$/;"	m	class:stx::btree_set
leafslots	include/stx/btree.h	/^        static const unsigned short     leafslots = btree_self::leafslotmax;$/;"	m	struct:stx::btree::tree_stats
leafslots	include/stx/btree.h	/^        unsigned short  leafslots;$/;"	m	struct:stx::btree::dump_header
leafslots	include/stx/btree.h	/^    static const int    leafslots = BTREE_MAX( 8, 256 \/ (sizeof(_Key) + sizeof(_Data)) );$/;"	m	struct:stx::btree_default_map_traits
leafslots	include/stx/btree.h	/^    static const int    leafslots = BTREE_MAX( 8, 256 \/ (sizeof(_Key)) );$/;"	m	struct:stx::btree_default_set_traits
leafslots	speedtest/speedtest.cc	/^    static const int    leafslots = _innerslots;$/;"	m	struct:btree_traits_speed	file:
leafslots	testsuite/BoundTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:BoundTest::traits_nodebug	file:
leafslots	testsuite/BulkLoadTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:BulkLoadTest::traits_nodebug	file:
leafslots	testsuite/DumpRestoreTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:DumpRestoreTest::traits_nodebug	file:
leafslots	testsuite/IteratorTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:IteratorTest::traits_nodebug	file:
leafslots	testsuite/LargeTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:LargeTest::traits_nodebug	file:
leafslots	testsuite/RelationTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:RelationTest::traits_nodebug	file:
leafslots	testsuite/SimpleTest.cc	/^        static const int        leafslots = Slots;$/;"	m	struct:SimpleTest::traits_nodebug	file:
leafslots	testsuite/StructureTest.cc	/^        static const int        leafslots = 8;$/;"	m	struct:StructureTest::traits_nodebug	file:
leafslots	wxbtreedemo/WMain.h	/^        static const int        leafslots = Slots;$/;"	m	struct:BTreeBundle::btree_traits_nodebug
leaves	include/stx/btree.h	/^        size_type       leaves;$/;"	m	struct:stx::btree::tree_stats
len	wxbtreedemo/WMain.cpp	/^    int         len;$/;"	m	struct:BTreeOp_InsertRandomString	file:
letter_B	doxygen-html/classes.html	/^<tr><td rowspan="2" valign="bottom"><a name="letter_B"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;B&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_C	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00001.html">btree<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_C"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;C&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_D	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00005.html">btree_multimap<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_D"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;D&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_E	doxygen-html/classes.html	/^<\/td><td valign="top"><a class="el" href="a00008.html">btree::btree_pair_to_value&lt; value_type, value_type &gt;<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_E"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;E&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_I	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00003.html">btree_default_set_traits<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="a00010.html">btree::const_iterator<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_I"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;I&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_L	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00007.html">btree::btree_pair_to_value<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="a00012.html">btree::dump_header<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_L"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;L&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_N	doxygen-html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_N"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;N&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_R	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00002.html">btree_default_map_traits<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="a00013.html">btree_set::empty_struct<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_R"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;R&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_T	doxygen-html/classes.html	/^<tr><td valign="top"><a class="el" href="a00006.html">btree_multiset<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td valign="top"><a class="el" href="a00016.html">btree::iterator<\/a> (<a class="el" href="a00036.html">stx<\/a>)&#160;&#160;&#160;<\/td><td rowspan="2" valign="bottom"><a name="letter_T"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;T&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
letter_V	doxygen-html/classes.html	/^<\/td><td rowspan="2" valign="bottom"><a name="letter_V"><\/a><table border="0" cellspacing="0" cellpadding="0"><tr><td><div class="ah">&#160;&#160;V&#160;&#160;<\/div><\/td><\/tr><\/table>$/;"	a
level	include/stx/btree.h	/^        unsigned short  level;$/;"	m	struct:stx::btree::node
log_operations	memprofile/malloc_count.c	/^static const int log_operations = 0;    \/* <-- set this to 1 for log output *\/$/;"	v	file:
log_operations_init_heap	memprofile/malloc_count.c	/^static const int log_operations_init_heap = 0;$/;"	v	file:
log_operations_threshold	memprofile/malloc_count.c	/^static const size_t log_operations_threshold = 1024*1024;$/;"	v	file:
lower_bound	include/stx/btree.h	/^    const_iterator lower_bound(const key_type& key) const$/;"	f	class:stx::btree
lower_bound	include/stx/btree.h	/^    iterator lower_bound(const key_type& key)$/;"	f	class:stx::btree
lower_bound	include/stx/btree_map.h	/^    const_iterator lower_bound(const key_type& key) const$/;"	f	class:stx::btree_map
lower_bound	include/stx/btree_map.h	/^    iterator lower_bound(const key_type& key)$/;"	f	class:stx::btree_map
lower_bound	include/stx/btree_multimap.h	/^    const_iterator lower_bound(const key_type& key) const$/;"	f	class:stx::btree_multimap
lower_bound	include/stx/btree_multimap.h	/^    iterator lower_bound(const key_type& key)$/;"	f	class:stx::btree_multimap
lower_bound	include/stx/btree_multiset.h	/^    const_iterator lower_bound(const key_type& key) const$/;"	f	class:stx::btree_multiset
lower_bound	include/stx/btree_multiset.h	/^    iterator lower_bound(const key_type& key)$/;"	f	class:stx::btree_multiset
lower_bound	include/stx/btree_set.h	/^    const_iterator lower_bound(const key_type& key) const$/;"	f	class:stx::btree_set
lower_bound	include/stx/btree_set.h	/^    iterator lower_bound(const key_type& key)$/;"	f	class:stx::btree_set
m_allocator	include/stx/btree.h	/^    allocator_type m_allocator;$/;"	m	class:stx::btree
m_base_mem	memprofile/memprofile.h	/^    size_t      m_base_mem;$/;"	m	class:MemProfile
m_base_ts	memprofile/memprofile.h	/^    double      m_base_ts;$/;"	m	class:MemProfile
m_file	memprofile/memprofile.h	/^    FILE*       m_file;$/;"	m	class:MemProfile
m_funcname	memprofile/memprofile.h	/^    const char* m_funcname;$/;"	m	class:MemProfile
m_headleaf	include/stx/btree.h	/^    leaf_node   *m_headleaf;$/;"	m	class:stx::btree
m_key_less	include/stx/btree.h	/^    key_compare m_key_less;$/;"	m	class:stx::btree
m_max	memprofile/memprofile.h	/^    size_t      m_max;$/;"	m	class:MemProfile
m_prev_mem	memprofile/memprofile.h	/^    size_t      m_prev_mem;$/;"	m	class:MemProfile
m_prev_ts	memprofile/memprofile.h	/^    double      m_prev_ts;$/;"	m	class:MemProfile
m_root	include/stx/btree.h	/^    node*       m_root;$/;"	m	class:stx::btree
m_size_resolution	memprofile/memprofile.h	/^    size_t      m_size_resolution;$/;"	m	class:MemProfile
m_stack_base	memprofile/memprofile.h	/^    char*       m_stack_base;$/;"	m	class:MemProfile
m_stats	include/stx/btree.h	/^    tree_stats  m_stats;$/;"	m	class:stx::btree
m_tailleaf	include/stx/btree.h	/^    leaf_node   *m_tailleaf;$/;"	m	class:stx::btree
m_time_resolution	memprofile/memprofile.h	/^    double      m_time_resolution;$/;"	m	class:MemProfile
main	memprofile/main.cc	/^int main()$/;"	f
main	scripts/config.guess	/^		main()$/;"	f
main	scripts/config.guess	/^	main ()$/;"	f
main	scripts/config.guess	/^main ()$/;"	f
main	speedtest/speedtest-tune.cc	/^int main()$/;"	f
main	speedtest/speedtest.cc	/^int main()$/;"	f
main	testsuite/tpunit.cc	/^int main()$/;"	f
malloc	memprofile/malloc_count.c	/^extern void* malloc(size_t size)$/;"	f
malloc_count_callback_type	memprofile/malloc_count.h	/^typedef void (*malloc_count_callback_type)(void* cookie, size_t current);$/;"	t
malloc_count_current	memprofile/malloc_count.c	/^extern size_t malloc_count_current(void)$/;"	f
malloc_count_peak	memprofile/malloc_count.c	/^extern size_t malloc_count_peak(void)$/;"	f
malloc_count_print_status	memprofile/malloc_count.c	/^extern void malloc_count_print_status(void)$/;"	f
malloc_count_reset_peak	memprofile/malloc_count.c	/^extern void malloc_count_reset_peak(void)$/;"	f
malloc_count_set_callback	memprofile/malloc_count.c	/^void malloc_count_set_callback(malloc_count_callback_type cb, void* cookie)$/;"	f
malloc_type	memprofile/malloc_count.c	/^typedef void* (*malloc_type)(size_t);$/;"	t	file:
map	speedtest/speedtest.cc	/^    MapType map;$/;"	m	struct:Test_Map_Find	file:
mark1_node	wxbtreedemo/WMain.h	/^    const void* mark1_node;$/;"	m	class:BTreeBundle
mark1_slot	wxbtreedemo/WMain.h	/^    int         mark1_slot;$/;"	m	class:BTreeBundle
mark2_node	wxbtreedemo/WMain.h	/^    const void* mark2_node;$/;"	m	class:BTreeBundle
mark2_slot	wxbtreedemo/WMain.h	/^    int         mark2_slot;$/;"	m	class:BTreeBundle
max_nodeslots	speedtest/speedtest-tune.cc	/^const int max_nodeslots = 564;$/;"	v
max_nodeslots	speedtest/speedtest.cc	/^const int max_nodeslots = 256;$/;"	v
max_size	include/stx/btree.h	/^    inline size_type max_size() const$/;"	f	class:stx::btree
max_size	include/stx/btree_map.h	/^    inline size_type max_size() const$/;"	f	class:stx::btree_map
max_size	include/stx/btree_multimap.h	/^    inline size_type max_size() const$/;"	f	class:stx::btree_multimap
max_size	include/stx/btree_multiset.h	/^    inline size_type max_size() const$/;"	f	class:stx::btree_multiset
max_size	include/stx/btree_set.h	/^    inline size_type max_size() const$/;"	f	class:stx::btree_set
maxitems	speedtest/speedtest.cc	/^const unsigned int maxitems = 1024000 * 64;$/;"	v
merge_inner	include/stx/btree.h	/^    static result_t merge_inner(inner_node* left, inner_node* right, inner_node* parent, unsigned int parentslot)$/;"	f	class:stx::btree
merge_leaves	include/stx/btree.h	/^    result_t merge_leaves(leaf_node* left, leaf_node* right, inner_node* parent)$/;"	f	class:stx::btree
method	testsuite/tpunit.h	/^            method(TestFixture* obj, void (TestFixture::*addr)(), const char* name, unsigned char type)$/;"	f	struct:tpunit::TestFixture::method
method	testsuite/tpunit.h	/^         struct method$/;"	s	class:tpunit::TestFixture
min_nodeslots	speedtest/speedtest-tune.cc	/^const int min_nodeslots = 564;$/;"	v
min_nodeslots	speedtest/speedtest.cc	/^const int min_nodeslots = 4;$/;"	v
mininnerslots	include/stx/btree.h	/^    static const unsigned short mininnerslots = (innerslotmax \/ 2);$/;"	m	class:stx::btree
mininnerslots	include/stx/btree_map.h	/^    static const unsigned short         mininnerslots = btree_impl::mininnerslots;$/;"	m	class:stx::btree_map
mininnerslots	include/stx/btree_multimap.h	/^    static const unsigned short         mininnerslots = btree_impl::mininnerslots;$/;"	m	class:stx::btree_multimap
mininnerslots	include/stx/btree_multiset.h	/^    static const unsigned short         mininnerslots = btree_impl::mininnerslots;$/;"	m	class:stx::btree_multiset
mininnerslots	include/stx/btree_set.h	/^    static const unsigned short mininnerslots = btree_impl::mininnerslots;$/;"	m	class:stx::btree_set
minitems	speedtest/speedtest.cc	/^const unsigned int minitems = 125;$/;"	v
minleafslots	include/stx/btree.h	/^    static const unsigned short minleafslots = (leafslotmax \/ 2);$/;"	m	class:stx::btree
minleafslots	include/stx/btree_map.h	/^    static const unsigned short         minleafslots = btree_impl::minleafslots;$/;"	m	class:stx::btree_map
minleafslots	include/stx/btree_multimap.h	/^    static const unsigned short         minleafslots = btree_impl::minleafslots;$/;"	m	class:stx::btree_multimap
minleafslots	include/stx/btree_multiset.h	/^    static const unsigned short         minleafslots = btree_impl::minleafslots;$/;"	m	class:stx::btree_multiset
minleafslots	include/stx/btree_set.h	/^    static const unsigned short minleafslots = btree_impl::minleafslots;$/;"	m	class:stx::btree_set
namespaces	doxygen-html/a00026.html	/^<tr><td colspan="2"><h2><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen-html/a00028.html	/^<tr><td colspan="2"><h2><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen-html/a00030.html	/^<tr><td colspan="2"><h2><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen-html/a00032.html	/^<tr><td colspan="2"><h2><a name="namespaces"><\/a>$/;"	a
namespaces	doxygen-html/a00034.html	/^<tr><td colspan="2"><h2><a name="namespaces"><\/a>$/;"	a
nested-classes	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00006.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00009.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00026.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00028.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00030.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00032.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00034.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nested-classes	doxygen-html/a00036.html	/^<tr><td colspan="2"><h2><a name="nested-classes"><\/a>$/;"	a
nextleaf	include/stx/btree.h	/^        leaf_node       *nextleaf;$/;"	m	struct:stx::btree::leaf_node
node	include/stx/btree.h	/^    struct node$/;"	s	class:stx::btree
nodes	include/stx/btree.h	/^        inline size_type nodes() const$/;"	f	struct:stx::btree::tree_stats
num	wxbtreedemo/WMain.cpp	/^    int         num;$/;"	m	struct:BTreeOp_InsertRandomInteger	file:
num	wxbtreedemo/WMain.cpp	/^    int         num;$/;"	m	struct:BTreeOp_InsertRandomString	file:
o.browser.version	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	p
o.fn.init	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	c
oldTreeSize	wxbtreedemo/WTreeDrawing.h	/^    wxSize              oldTreeSize;$/;"	m	class:WTreeDrawing
oldscalefactor	wxbtreedemo/WTreeDrawing.h	/^    double              oldscalefactor;$/;"	m	class:WTreeDrawing
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_Clear
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_EqualRange
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_Erase
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_FindKey
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_GetVector
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_Insert
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomInteger
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomString
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_LoadFile
opInteger	wxbtreedemo/WMain.cpp	/^    inline result_type opInteger(BTreeType &bt) const$/;"	f	struct:BTreeOp_PutVector
opInteger	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::opInteger(BTreeType &bt)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Clear
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_EqualRange
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Erase
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_FindKey
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_GetVector
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Insert
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomInteger
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomString
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_LoadFile
opIntegerMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opIntegerMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_PutVector
opIntegerMulti	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::opIntegerMulti(BTreeType &bt)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_Clear
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_EqualRange
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_Erase
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_FindKey
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_GetVector
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_Insert
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomInteger
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomString
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_LoadFile
opString	wxbtreedemo/WMain.cpp	/^    inline result_type opString(BTreeType &bt) const$/;"	f	struct:BTreeOp_PutVector
opString	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::opString(BTreeType &bt)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Clear
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_EqualRange
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Erase
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_FindKey
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_GetVector
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_Insert
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomInteger
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_InsertRandomString
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_LoadFile
opStringMulti	wxbtreedemo/WMain.cpp	/^    inline result_type opStringMulti(BTreeType &bt) const$/;"	f	struct:BTreeOp_PutVector
opStringMulti	wxbtreedemo/WTreeDrawing.cpp	/^wxSize WTreeDrawing::BTreeOp_Draw::opStringMulti(BTreeType &bt)$/;"	f	class:WTreeDrawing::BTreeOp_Draw
operator !=	include/stx/btree.h	/^        inline bool operator!=(const self& x) const$/;"	f	class:stx::btree::const_iterator
operator !=	include/stx/btree.h	/^        inline bool operator!=(const self& x) const$/;"	f	class:stx::btree::const_reverse_iterator
operator !=	include/stx/btree.h	/^        inline bool operator!=(const self& x) const$/;"	f	class:stx::btree::iterator
operator !=	include/stx/btree.h	/^        inline bool operator!=(const self& x) const$/;"	f	class:stx::btree::reverse_iterator
operator !=	include/stx/btree.h	/^    inline bool operator!=(const btree_self &other) const$/;"	f	class:stx::btree
operator !=	include/stx/btree_map.h	/^    inline bool operator!=(const self &other) const$/;"	f	class:stx::btree_map
operator !=	include/stx/btree_multimap.h	/^    inline bool operator!=(const self &other) const$/;"	f	class:stx::btree_multimap
operator !=	include/stx/btree_multiset.h	/^    inline bool operator!=(const self &other) const$/;"	f	class:stx::btree_multiset
operator !=	include/stx/btree_set.h	/^    inline bool operator!=(const self &other) const$/;"	f	class:stx::btree_set
operator ()	include/stx/btree.h	/^        inline bool operator()(const value_type& x, const value_type& y) const$/;"	f	class:stx::btree::value_compare
operator ()	include/stx/btree.h	/^        inline value_type operator()(const pair_type& p) const {$/;"	f	struct:stx::btree::btree_pair_to_value
operator ()	include/stx/btree.h	/^        inline value_type operator()(pair_type& p) const {$/;"	f	struct:stx::btree::btree_pair_to_value
operator ()	speedtest/speedtest-tune.cc	/^    inline void operator()(std::ostream& os, unsigned int insertnum)$/;"	f	struct:test_range
operator ()	speedtest/speedtest.cc	/^    inline void operator()(std::ostream& os, unsigned int items)$/;"	f	struct:btree_range
operator ()	testsuite/StructureTest.cc	/^        bool operator()(const struct testdata &a, const struct testdata &b) const$/;"	f	struct:StructureTest::testcomp
operator *	include/stx/btree.h	/^        inline reference operator*() const$/;"	f	class:stx::btree::const_iterator
operator *	include/stx/btree.h	/^        inline reference operator*() const$/;"	f	class:stx::btree::const_reverse_iterator
operator *	include/stx/btree.h	/^        inline reference operator*() const$/;"	f	class:stx::btree::iterator
operator *	include/stx/btree.h	/^        inline reference operator*() const$/;"	f	class:stx::btree::reverse_iterator
operator ++	include/stx/btree.h	/^        inline self operator++(int)$/;"	f	class:stx::btree::const_iterator
operator ++	include/stx/btree.h	/^        inline self operator++(int)$/;"	f	class:stx::btree::const_reverse_iterator
operator ++	include/stx/btree.h	/^        inline self operator++(int)$/;"	f	class:stx::btree::iterator
operator ++	include/stx/btree.h	/^        inline self operator++(int)$/;"	f	class:stx::btree::reverse_iterator
operator ++	include/stx/btree.h	/^        inline self& operator++()$/;"	f	class:stx::btree::const_iterator
operator ++	include/stx/btree.h	/^        inline self& operator++()$/;"	f	class:stx::btree::const_reverse_iterator
operator ++	include/stx/btree.h	/^        inline self& operator++()$/;"	f	class:stx::btree::iterator
operator ++	include/stx/btree.h	/^        inline self& operator++()$/;"	f	class:stx::btree::reverse_iterator
operator --	include/stx/btree.h	/^        inline self operator--(int)$/;"	f	class:stx::btree::const_iterator
operator --	include/stx/btree.h	/^        inline self operator--(int)$/;"	f	class:stx::btree::const_reverse_iterator
operator --	include/stx/btree.h	/^        inline self operator--(int)$/;"	f	class:stx::btree::iterator
operator --	include/stx/btree.h	/^        inline self operator--(int)$/;"	f	class:stx::btree::reverse_iterator
operator --	include/stx/btree.h	/^        inline self& operator--()$/;"	f	class:stx::btree::const_iterator
operator --	include/stx/btree.h	/^        inline self& operator--()$/;"	f	class:stx::btree::const_reverse_iterator
operator --	include/stx/btree.h	/^        inline self& operator--()$/;"	f	class:stx::btree::iterator
operator --	include/stx/btree.h	/^        inline self& operator--()$/;"	f	class:stx::btree::reverse_iterator
operator ->	include/stx/btree.h	/^        inline pointer operator->() const$/;"	f	class:stx::btree::const_iterator
operator ->	include/stx/btree.h	/^        inline pointer operator->() const$/;"	f	class:stx::btree::const_reverse_iterator
operator ->	include/stx/btree.h	/^        inline pointer operator->() const$/;"	f	class:stx::btree::iterator
operator ->	include/stx/btree.h	/^        inline pointer operator->() const$/;"	f	class:stx::btree::reverse_iterator
operator <	include/stx/btree.h	/^    inline bool operator<(const btree_self &other) const$/;"	f	class:stx::btree
operator <	include/stx/btree_map.h	/^    inline bool operator<(const self &other) const$/;"	f	class:stx::btree_map
operator <	include/stx/btree_multimap.h	/^    inline bool operator<(const self &other) const$/;"	f	class:stx::btree_multimap
operator <	include/stx/btree_multiset.h	/^    inline bool operator<(const self &other) const$/;"	f	class:stx::btree_multiset
operator <	include/stx/btree_set.h	/^    inline bool operator<(const self &other) const$/;"	f	class:stx::btree_set
operator <<	testsuite/StructureTest.cc	/^inline std::ostream& operator<< (std::ostream &o, const struct StructureTest::testdata &t)$/;"	f
operator <=	include/stx/btree.h	/^    inline bool operator<=(const btree_self &other) const$/;"	f	class:stx::btree
operator <=	include/stx/btree_map.h	/^    inline bool operator<=(const self &other) const$/;"	f	class:stx::btree_map
operator <=	include/stx/btree_multimap.h	/^    inline bool operator<=(const self &other) const$/;"	f	class:stx::btree_multimap
operator <=	include/stx/btree_multiset.h	/^    inline bool operator<=(const self &other) const$/;"	f	class:stx::btree_multiset
operator <=	include/stx/btree_set.h	/^    inline bool operator<=(const self &other) const$/;"	f	class:stx::btree_set
operator =	include/stx/btree.h	/^    inline btree_self& operator= (const btree_self &other)$/;"	f	class:stx::btree
operator =	include/stx/btree_map.h	/^    inline self& operator= (const self &other)$/;"	f	class:stx::btree_map
operator =	include/stx/btree_multimap.h	/^    inline self& operator= (const self &other)$/;"	f	class:stx::btree_multimap
operator =	include/stx/btree_multiset.h	/^    inline self& operator= (const self &other)$/;"	f	class:stx::btree_multiset
operator =	include/stx/btree_set.h	/^    inline self& operator= (const self &other)$/;"	f	class:stx::btree_set
operator ==	include/stx/btree.h	/^        inline bool operator==(const self& x) const$/;"	f	class:stx::btree::const_iterator
operator ==	include/stx/btree.h	/^        inline bool operator==(const self& x) const$/;"	f	class:stx::btree::const_reverse_iterator
operator ==	include/stx/btree.h	/^        inline bool operator==(const self& x) const$/;"	f	class:stx::btree::iterator
operator ==	include/stx/btree.h	/^        inline bool operator==(const self& x) const$/;"	f	class:stx::btree::reverse_iterator
operator ==	include/stx/btree.h	/^    inline bool operator==(const btree_self &other) const$/;"	f	class:stx::btree
operator ==	include/stx/btree_map.h	/^    inline bool operator==(const self &other) const$/;"	f	class:stx::btree_map
operator ==	include/stx/btree_multimap.h	/^    inline bool operator==(const self &other) const$/;"	f	class:stx::btree_multimap
operator ==	include/stx/btree_multiset.h	/^    inline bool operator==(const self &other) const$/;"	f	class:stx::btree_multiset
operator ==	include/stx/btree_set.h	/^    inline bool operator==(const self &other) const$/;"	f	class:stx::btree_set
operator >	include/stx/btree.h	/^    inline bool operator>(const btree_self &other) const$/;"	f	class:stx::btree
operator >	include/stx/btree_map.h	/^    inline bool operator>(const self &other) const$/;"	f	class:stx::btree_map
operator >	include/stx/btree_multimap.h	/^    inline bool operator>(const self &other) const$/;"	f	class:stx::btree_multimap
operator >	include/stx/btree_multiset.h	/^    inline bool operator>(const self &other) const$/;"	f	class:stx::btree_multiset
operator >	include/stx/btree_set.h	/^    inline bool operator>(const self &other) const$/;"	f	class:stx::btree_set
operator >=	include/stx/btree.h	/^    inline bool operator>=(const btree_self &other) const$/;"	f	class:stx::btree
operator >=	include/stx/btree_map.h	/^    inline bool operator>=(const self &other) const$/;"	f	class:stx::btree_map
operator >=	include/stx/btree_multimap.h	/^    inline bool operator>=(const self &other) const$/;"	f	class:stx::btree_multimap
operator >=	include/stx/btree_multiset.h	/^    inline bool operator>=(const self &other) const$/;"	f	class:stx::btree_multiset
operator >=	include/stx/btree_set.h	/^    inline bool operator>=(const self &other) const$/;"	f	class:stx::btree_set
operator []	include/stx/btree_map.h	/^    inline data_type& operator[](const key_type& key)$/;"	f	class:stx::btree_map
operator |=	include/stx/btree.h	/^        inline result_t& operator|= (const result_t &other)$/;"	f	struct:stx::btree::result_t
output	memprofile/memprofile.h	/^    inline void output(double ts, unsigned long long mem)$/;"	f	class:MemProfile
outvector	wxbtreedemo/WMain.cpp	/^    std::vector< std::pair<wxString,wxString> > &outvector;$/;"	m	struct:BTreeOp_GetVector	file:
pair_to_value_type	include/stx/btree.h	/^    typedef btree_pair_to_value<value_type, pair_type> pair_to_value_type;$/;"	t	class:stx::btree
pair_type	include/stx/btree.h	/^        typedef typename btree::pair_type               pair_type;$/;"	t	class:stx::btree::const_iterator
pair_type	include/stx/btree.h	/^        typedef typename btree::pair_type               pair_type;$/;"	t	class:stx::btree::const_reverse_iterator
pair_type	include/stx/btree.h	/^        typedef typename btree::pair_type               pair_type;$/;"	t	class:stx::btree::iterator
pair_type	include/stx/btree.h	/^        typedef typename btree::pair_type               pair_type;$/;"	t	class:stx::btree::reverse_iterator
pair_type	include/stx/btree.h	/^    typedef std::pair<key_type, data_type>      pair_type;$/;"	t	class:stx::btree
panel_Main	wxbtreedemo/WMain_wxg.h	/^    wxPanel* panel_Main;$/;"	m	class:WMain_wxg
peak	memprofile/malloc_count.c	/^static long long peak = 0, curr = 0, total = 0;$/;"	v	file:
pointer	include/stx/btree.h	/^        typedef const value_type*               pointer;$/;"	t	class:stx::btree::const_iterator
pointer	include/stx/btree.h	/^        typedef const value_type*               pointer;$/;"	t	class:stx::btree::const_reverse_iterator
pointer	include/stx/btree.h	/^        typedef value_type*             pointer;$/;"	t	class:stx::btree::iterator
pointer	include/stx/btree.h	/^        typedef value_type*             pointer;$/;"	t	class:stx::btree::reverse_iterator
prevleaf	include/stx/btree.h	/^        leaf_node       *prevleaf;$/;"	m	struct:stx::btree::leaf_node
pri-attribs	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00004.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00005.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00006.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00009.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00010.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00011.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00016.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-attribs	doxygen-html/a00020.html	/^<tr><td colspan="2"><h2><a name="pri-attribs"><\/a>$/;"	a
pri-methods	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pri-methods"><\/a>$/;"	a
pri-static-methods	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pri-static-methods"><\/a>$/;"	a
pri-types	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pri-types"><\/a>$/;"	a
print	include/stx/btree.h	/^    void print(std::ostream &os) const$/;"	f	class:stx::btree
print	include/stx/btree_map.h	/^    void print(std::ostream &os) const$/;"	f	class:stx::btree_map
print	include/stx/btree_multimap.h	/^    void print(std::ostream &os) const$/;"	f	class:stx::btree_multimap
print	include/stx/btree_multiset.h	/^    void print(std::ostream &os) const$/;"	f	class:stx::btree_multiset
print	include/stx/btree_set.h	/^    void print(std::ostream &os) const$/;"	f	class:stx::btree_set
print_leaves	include/stx/btree.h	/^    void print_leaves(std::ostream &os) const$/;"	f	class:stx::btree
print_leaves	include/stx/btree_map.h	/^    void print_leaves(std::ostream &os) const$/;"	f	class:stx::btree_map
print_leaves	include/stx/btree_multimap.h	/^    void print_leaves(std::ostream &os) const$/;"	f	class:stx::btree_multimap
print_leaves	include/stx/btree_multiset.h	/^    void print_leaves(std::ostream &os) const$/;"	f	class:stx::btree_multiset
print_leaves	include/stx/btree_set.h	/^    void print_leaves(std::ostream &os) const$/;"	f	class:stx::btree_set
print_node	include/stx/btree.h	/^    static void print_node(std::ostream &os, const node* node, unsigned int depth=0, bool recursive=false)$/;"	f	class:stx::btree
pro-attribs	doxygen-html/a00022.html	/^<tr><td colspan="2"><h2><a name="pro-attribs"><\/a>$/;"	a
pro-methods	doxygen-html/a00022.html	/^<tr><td colspan="2"><h2><a name="pro-methods"><\/a>$/;"	a
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
pub-attribs	doxygen-html/a00012.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen-html/a00015.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen-html/a00017.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen-html/a00018.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen-html/a00019.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-attribs	doxygen-html/a00021.html	/^<tr><td colspan="2"><h2><a name="pub-attribs"><\/a>$/;"	a
pub-methods	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00004.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00005.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00006.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00007.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00008.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00009.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00010.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00011.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00012.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00015.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00016.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00017.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00018.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00019.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00020.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00021.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-methods	doxygen-html/a00022.html	/^<tr><td colspan="2"><h2><a name="pub-methods"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00002.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00003.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00004.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00005.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00006.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00009.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-static-attribs	doxygen-html/a00021.html	/^<tr><td colspan="2"><h2><a name="pub-static-attribs"><\/a>$/;"	a
pub-types	doxygen-html/a00001.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00004.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00005.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00006.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00009.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00010.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00011.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00015.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00016.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00017.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
pub-types	doxygen-html/a00020.html	/^<tr><td colspan="2"><h2><a name="pub-types"><\/a>$/;"	a
randseed	memprofile/main.cc	/^const int randseed = 34234235;$/;"	v
randseed	speedtest/speedtest-tune.cc	/^const int randseed = 34234235;$/;"	v
randseed	speedtest/speedtest.cc	/^const int randseed = 34234235;$/;"	v
rbegin	include/stx/btree.h	/^    inline const_reverse_iterator rbegin() const$/;"	f	class:stx::btree
rbegin	include/stx/btree.h	/^    inline reverse_iterator rbegin()$/;"	f	class:stx::btree
rbegin	include/stx/btree_map.h	/^    inline const_reverse_iterator rbegin() const$/;"	f	class:stx::btree_map
rbegin	include/stx/btree_map.h	/^    inline reverse_iterator rbegin()$/;"	f	class:stx::btree_map
rbegin	include/stx/btree_multimap.h	/^    inline const_reverse_iterator rbegin() const$/;"	f	class:stx::btree_multimap
rbegin	include/stx/btree_multimap.h	/^    inline reverse_iterator rbegin()$/;"	f	class:stx::btree_multimap
rbegin	include/stx/btree_multiset.h	/^    inline const_reverse_iterator rbegin() const$/;"	f	class:stx::btree_multiset
rbegin	include/stx/btree_multiset.h	/^    inline reverse_iterator rbegin()$/;"	f	class:stx::btree_multiset
rbegin	include/stx/btree_set.h	/^    inline const_reverse_iterator rbegin() const$/;"	f	class:stx::btree_set
rbegin	include/stx/btree_set.h	/^    inline reverse_iterator rbegin()$/;"	f	class:stx::btree_set
real_free	memprofile/malloc_count.c	/^static free_type real_free = NULL;$/;"	v	file:
real_malloc	memprofile/malloc_count.c	/^static malloc_type real_malloc = NULL;$/;"	v	file:
real_realloc	memprofile/malloc_count.c	/^static realloc_type real_realloc = NULL;$/;"	v	file:
realloc	memprofile/malloc_count.c	/^extern void* realloc(void* ptr, size_t size)$/;"	f
realloc_type	memprofile/malloc_count.c	/^typedef void* (*realloc_type)(void*, size_t);$/;"	t	file:
reference	include/stx/btree.h	/^        typedef const value_type&               reference;$/;"	t	class:stx::btree::const_iterator
reference	include/stx/btree.h	/^        typedef const value_type&               reference;$/;"	t	class:stx::btree::const_reverse_iterator
reference	include/stx/btree.h	/^        typedef value_type&             reference;$/;"	t	class:stx::btree::iterator
reference	include/stx/btree.h	/^        typedef value_type&             reference;$/;"	t	class:stx::btree::reverse_iterator
rend	include/stx/btree.h	/^    inline const_reverse_iterator rend() const$/;"	f	class:stx::btree
rend	include/stx/btree.h	/^    inline reverse_iterator rend()$/;"	f	class:stx::btree
rend	include/stx/btree_map.h	/^    inline const_reverse_iterator rend() const$/;"	f	class:stx::btree_map
rend	include/stx/btree_map.h	/^    inline reverse_iterator rend()$/;"	f	class:stx::btree_map
rend	include/stx/btree_multimap.h	/^    inline const_reverse_iterator rend() const$/;"	f	class:stx::btree_multimap
rend	include/stx/btree_multimap.h	/^    inline reverse_iterator rend()$/;"	f	class:stx::btree_multimap
rend	include/stx/btree_multiset.h	/^    inline const_reverse_iterator rend() const$/;"	f	class:stx::btree_multiset
rend	include/stx/btree_multiset.h	/^    inline reverse_iterator rend()$/;"	f	class:stx::btree_multiset
rend	include/stx/btree_set.h	/^    inline const_reverse_iterator rend() const$/;"	f	class:stx::btree_set
rend	include/stx/btree_set.h	/^    inline reverse_iterator rend()$/;"	f	class:stx::btree_set
repeatuntil	speedtest/speedtest-tune.cc	/^unsigned int repeatuntil;$/;"	v
repeatuntil	speedtest/speedtest.cc	/^unsigned int repeatuntil;$/;"	v
restore	include/stx/btree.h	/^    bool restore(std::istream &is)$/;"	f	class:stx::btree
restore	include/stx/btree_map.h	/^    bool restore(std::istream &is)$/;"	f	class:stx::btree_map
restore	include/stx/btree_multimap.h	/^    bool restore(std::istream &is)$/;"	f	class:stx::btree_multimap
restore	include/stx/btree_multiset.h	/^    bool restore(std::istream &is)$/;"	f	class:stx::btree_multiset
restore	include/stx/btree_set.h	/^    bool restore(std::istream &is)$/;"	f	class:stx::btree_set
restore_node	include/stx/btree.h	/^    node* restore_node(std::istream &is)$/;"	f	class:stx::btree
result_flags_t	include/stx/btree.h	/^    enum result_flags_t$/;"	g	class:stx::btree
result_t	include/stx/btree.h	/^        inline result_t(result_flags_t f = btree_ok)$/;"	f	struct:stx::btree::result_t
result_t	include/stx/btree.h	/^        inline result_t(result_flags_t f, const key_type &k)$/;"	f	struct:stx::btree::result_t
result_t	include/stx/btree.h	/^    struct result_t$/;"	s	class:stx::btree
result_type	wxbtreedemo/WMain.cpp	/^    typedef     int     result_type;$/;"	t	struct:BTreeOp_LoadFile	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     int     result_type;$/;"	t	struct:BTreeOp_PutVector	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     void    result_type;$/;"	t	struct:BTreeOp_GetVector	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_Clear	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_EqualRange	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_Erase	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_FindKey	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_Insert	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_InsertRandomInteger	file:
result_type	wxbtreedemo/WMain.cpp	/^    typedef     wxString        result_type;$/;"	t	struct:BTreeOp_InsertRandomString	file:
result_type	wxbtreedemo/WTreeDrawing.h	/^        typedef wxSize  result_type;$/;"	t	struct:WTreeDrawing::BTreeOp_Draw
reverse_iterator	include/stx/btree.h	/^        inline reverse_iterator()$/;"	f	class:stx::btree::reverse_iterator
reverse_iterator	include/stx/btree.h	/^        inline reverse_iterator(const iterator &it)$/;"	f	class:stx::btree::reverse_iterator
reverse_iterator	include/stx/btree.h	/^        inline reverse_iterator(typename btree::leaf_node *l, unsigned short s)$/;"	f	class:stx::btree::reverse_iterator
reverse_iterator	include/stx/btree.h	/^    class reverse_iterator$/;"	c	class:stx::btree
reverse_iterator	include/stx/btree_map.h	/^    typedef typename btree_impl::reverse_iterator       reverse_iterator;$/;"	t	class:stx::btree_map
reverse_iterator	include/stx/btree_multimap.h	/^    typedef typename btree_impl::reverse_iterator       reverse_iterator;$/;"	t	class:stx::btree_multimap
reverse_iterator	include/stx/btree_multiset.h	/^    typedef typename btree_impl::reverse_iterator       reverse_iterator;$/;"	t	class:stx::btree_multiset
reverse_iterator	include/stx/btree_set.h	/^    typedef typename btree_impl::reverse_iterator       reverse_iterator;$/;"	t	class:stx::btree_set
run	memprofile/main.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Array_Insert
run	memprofile/main.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Map_Insert
run	speedtest/speedtest-tune.cc	/^    void run(unsigned int insertnum)$/;"	f	struct:Test_BtreeSet_Find
run	speedtest/speedtest-tune.cc	/^    void run(unsigned int insertnum)$/;"	f	struct:Test_BtreeSet_Insert
run	speedtest/speedtest-tune.cc	/^    void run(unsigned int insertnum)$/;"	f	struct:Test_BtreeSet_InsertFindDelete
run	speedtest/speedtest.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Map_Insert
run	speedtest/speedtest.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Map_InsertFindDelete
run	speedtest/speedtest.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Set_Insert
run	speedtest/speedtest.cc	/^    inline void run(unsigned int items)$/;"	f	struct:Test_Set_InsertFindDelete
run	speedtest/speedtest.cc	/^    void run(unsigned int items)$/;"	f	struct:Test_Map_Find
run	speedtest/speedtest.cc	/^    void run(unsigned int items)$/;"	f	struct:Test_Set_Find
run	wxbtreedemo/WMain.h	/^    typename Operation::result_type     run(Operation operation)$/;"	f	class:BTreeBundle
same	include/stx/btree.h	/^        inline bool same(const struct dump_header &o) const$/;"	f	struct:stx::btree::dump_header
scalefactor	wxbtreedemo/WTreeDrawing.h	/^    double              scalefactor;$/;"	m	class:WTreeDrawing
searchData	doxygen-html/search/all_61.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_64.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_65.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_66.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_67.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_68.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_6b.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_6c.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_6d.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_6e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_6f.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_70.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_73.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_74.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_75.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_76.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/all_7e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_64.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_65.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_6c.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_6e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_74.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/classes_76.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/defines_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/enums_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/enumvalues_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/files_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_61.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_64.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_65.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_66.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_67.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_68.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_6b.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_6c.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_6d.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_6e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_6f.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_70.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_73.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_74.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_75.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_76.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/functions_7e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/namespaces_73.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/related_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/related_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/related_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/related_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_61.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_64.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_6b.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_70.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_72.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_73.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_74.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/typedefs_76.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_61.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_62.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_63.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_64.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_66.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_69.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_6b.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_6c.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_6d.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_6e.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_70.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_73.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_74.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_75.js	/^var searchData=$/;"	v
searchData	doxygen-html/search/variables_76.js	/^var searchData=$/;"	v
selected_multimap	wxbtreedemo/WMain.h	/^    bool        selected_multimap;$/;"	m	class:BTreeBundle
selected_slots	wxbtreedemo/WMain.h	/^    int         selected_slots;$/;"	m	class:BTreeBundle
selected_type	wxbtreedemo/WMain.h	/^    int         selected_type;$/;"	m	class:BTreeBundle
self	include/stx/btree.h	/^        typedef const_iterator          self;$/;"	t	class:stx::btree::const_iterator
self	include/stx/btree.h	/^        typedef const_reverse_iterator  self;$/;"	t	class:stx::btree::const_reverse_iterator
self	include/stx/btree.h	/^        typedef iterator                self;$/;"	t	class:stx::btree::iterator
self	include/stx/btree.h	/^        typedef reverse_iterator        self;$/;"	t	class:stx::btree::reverse_iterator
self	include/stx/btree_map.h	/^    typedef btree_map<key_type, data_type, key_compare, traits, allocator_type> self;$/;"	t	class:stx::btree_map
self	include/stx/btree_multimap.h	/^    typedef btree_multimap<key_type, data_type, key_compare, traits, allocator_type>    self;$/;"	t	class:stx::btree_multimap
self	include/stx/btree_multiset.h	/^    typedef btree_multiset<key_type, key_compare, traits, allocator_type> self;$/;"	t	class:stx::btree_multiset
self	include/stx/btree_set.h	/^    typedef btree_set<key_type, key_compare, traits, allocator_type> self;$/;"	t	class:stx::btree_set
selfverify	include/stx/btree.h	/^    static const bool                   selfverify = traits::selfverify;$/;"	m	class:stx::btree
selfverify	include/stx/btree.h	/^    static const bool   selfverify = false;$/;"	m	struct:stx::btree_default_map_traits
selfverify	include/stx/btree.h	/^    static const bool   selfverify = false;$/;"	m	struct:stx::btree_default_set_traits
selfverify	include/stx/btree_map.h	/^    static const bool                   selfverify = btree_impl::selfverify;$/;"	m	class:stx::btree_map
selfverify	include/stx/btree_multimap.h	/^    static const bool                   selfverify = btree_impl::selfverify;$/;"	m	class:stx::btree_multimap
selfverify	include/stx/btree_multiset.h	/^    static const bool                   selfverify = btree_impl::selfverify;$/;"	m	class:stx::btree_multiset
selfverify	include/stx/btree_set.h	/^    static const bool                   selfverify = btree_impl::selfverify;$/;"	m	class:stx::btree_set
selfverify	speedtest/speedtest.cc	/^    static const bool   selfverify = false;$/;"	m	struct:btree_traits_speed	file:
selfverify	testsuite/BoundTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:BoundTest::traits_nodebug	file:
selfverify	testsuite/BulkLoadTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:BulkLoadTest::traits_nodebug	file:
selfverify	testsuite/DumpRestoreTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:DumpRestoreTest::traits_nodebug	file:
selfverify	testsuite/IteratorTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:IteratorTest::traits_nodebug	file:
selfverify	testsuite/LargeTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:LargeTest::traits_nodebug	file:
selfverify	testsuite/RelationTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:RelationTest::traits_nodebug	file:
selfverify	testsuite/SimpleTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:SimpleTest::traits_nodebug	file:
selfverify	testsuite/StructureTest.cc	/^        static const bool       selfverify = true;$/;"	m	struct:StructureTest::traits_nodebug	file:
selfverify	wxbtreedemo/WMain.h	/^        static const bool       selfverify = true;$/;"	m	struct:BTreeBundle::btree_traits_nodebug
sentinel	memprofile/malloc_count.c	/^static const size_t sentinel = 0xDEADC0DE;$/;"	v	file:
set	speedtest/speedtest.cc	/^    SetType set;$/;"	m	struct:Test_Set_Find	file:
setClassAttr	doxygen-html/search/search.js	/^function setClassAttr(elem,attr)$/;"	f
setKeyActions	doxygen-html/search/search.js	/^function setKeyActions(elem,action)$/;"	f
setMark1	wxbtreedemo/WMain.h	/^    inline void setMark1(const BTreeIter &iter)$/;"	f	class:BTreeBundle
setMark2	wxbtreedemo/WMain.h	/^    inline void setMark2(const BTreeIter &iter)$/;"	f	class:BTreeBundle
set_properties	wxbtreedemo/WMain_wxg.cpp	/^void WMain_wxg::set_properties()$/;"	f	class:WMain_wxg
set_slot	include/stx/btree.h	/^        inline void set_slot(unsigned short slot, const key_type& key)$/;"	f	struct:stx::btree::leaf_node
set_slot	include/stx/btree.h	/^        inline void set_slot(unsigned short slot, const pair_type& value)$/;"	f	struct:stx::btree::leaf_node
shift_left_inner	include/stx/btree.h	/^    static void shift_left_inner(inner_node *left, inner_node *right, inner_node *parent, unsigned int parentslot)$/;"	f	class:stx::btree
shift_left_leaf	include/stx/btree.h	/^    static result_t shift_left_leaf(leaf_node *left, leaf_node *right, inner_node *parent, unsigned int parentslot)$/;"	f	class:stx::btree
shift_right_inner	include/stx/btree.h	/^    static void shift_right_inner(inner_node *left, inner_node *right, inner_node *parent, unsigned int parentslot)$/;"	f	class:stx::btree
shift_right_leaf	include/stx/btree.h	/^    static void shift_right_leaf(leaf_node *left, leaf_node *right, inner_node *parent, unsigned int parentslot)$/;"	f	class:stx::btree
signature	include/stx/btree.h	/^        char            signature[12];$/;"	m	struct:stx::btree::dump_header
size	include/stx/btree.h	/^    inline size_type size() const$/;"	f	class:stx::btree
size	include/stx/btree_map.h	/^    inline size_type size() const$/;"	f	class:stx::btree_map
size	include/stx/btree_multimap.h	/^    inline size_type size() const$/;"	f	class:stx::btree_multimap
size	include/stx/btree_multiset.h	/^    inline size_type size() const$/;"	f	class:stx::btree_multiset
size	include/stx/btree_set.h	/^    inline size_type size() const$/;"	f	class:stx::btree_set
size_type	include/stx/btree.h	/^    typedef size_t                              size_type;$/;"	t	class:stx::btree
size_type	include/stx/btree_map.h	/^    typedef typename btree_impl::size_type      size_type;$/;"	t	class:stx::btree_map
size_type	include/stx/btree_multimap.h	/^    typedef typename btree_impl::size_type      size_type;$/;"	t	class:stx::btree_multimap
size_type	include/stx/btree_multiset.h	/^    typedef typename btree_impl::size_type      size_type;$/;"	t	class:stx::btree_multiset
size_type	include/stx/btree_set.h	/^    typedef typename btree_impl::size_type      size_type;$/;"	t	class:stx::btree_set
sizer_10_staticbox	wxbtreedemo/WMain_wxg.h	/^    wxStaticBox* sizer_10_staticbox;$/;"	m	class:WMain_wxg
sizer_3_staticbox	wxbtreedemo/WMain_wxg.h	/^    wxStaticBox* sizer_3_staticbox;$/;"	m	class:WMain_wxg
sizer_8_staticbox	wxbtreedemo/WMain_wxg.h	/^    wxStaticBox* sizer_8_staticbox;$/;"	m	class:WMain_wxg
sizer_9_staticbox	wxbtreedemo/WMain_wxg.h	/^    wxStaticBox* sizer_9_staticbox;$/;"	m	class:WMain_wxg
slotdata	include/stx/btree.h	/^        data_type       slotdata[used_as_set ? 1 : leafslotmax];$/;"	m	struct:stx::btree::leaf_node
slotkey	include/stx/btree.h	/^        key_type        slotkey[innerslotmax];$/;"	m	struct:stx::btree::inner_node
slotkey	include/stx/btree.h	/^        key_type        slotkey[leafslotmax];$/;"	m	struct:stx::btree::leaf_node
slotuse	include/stx/btree.h	/^        unsigned short  slotuse;$/;"	m	struct:stx::btree::node
somevalue	testsuite/StructureTest.cc	/^        unsigned int somevalue;$/;"	m	struct:StructureTest::testcomp	file:
split_inner_node	include/stx/btree.h	/^    void split_inner_node(inner_node* inner, key_type* _newkey, node** _newinner, unsigned int addslot)$/;"	f	class:stx::btree
split_leaf_node	include/stx/btree.h	/^    void split_leaf_node(leaf_node* leaf, key_type* _newkey, node** _newleaf)$/;"	f	class:stx::btree
static_callback	memprofile/memprofile.h	/^    static void static_callback(void* cookie, size_t memcurr)$/;"	f	class:MemProfile
stats	testsuite/tpunit.h	/^            stats()$/;"	f	struct:tpunit::TestFixture::stats
stats	testsuite/tpunit.h	/^         struct stats$/;"	s	class:tpunit::TestFixture
stringpair_type	wxbtreedemo/WMain.cpp	/^    typedef     std::pair<wxString,wxString> stringpair_type;$/;"	t	struct:BTreeOp_GetVector	file:
stx	include/stx/btree.h	/^namespace stx {$/;"	n
stx	include/stx/btree_map.h	/^namespace stx {$/;"	n
stx	include/stx/btree_multimap.h	/^namespace stx {$/;"	n
stx	include/stx/btree_multiset.h	/^namespace stx {$/;"	n
stx	include/stx/btree_set.h	/^namespace stx {$/;"	n
swap	include/stx/btree.h	/^    void swap(btree_self& from)$/;"	f	class:stx::btree
swap	include/stx/btree_map.h	/^    void swap(self& from)$/;"	f	class:stx::btree_map
swap	include/stx/btree_multimap.h	/^    void swap(self& from)$/;"	f	class:stx::btree_multimap
swap	include/stx/btree_multiset.h	/^    void swap(self& from)$/;"	f	class:stx::btree_multiset
swap	include/stx/btree_set.h	/^    void swap(self& from)$/;"	f	class:stx::btree_set
tb	wxbtreedemo/WTreeDrawing.h	/^        const BTreeBundle &tb;$/;"	m	struct:WTreeDrawing::BTreeOp_Draw
temp_value	include/stx/btree.h	/^        mutable value_type              temp_value;$/;"	m	class:stx::btree::const_iterator
temp_value	include/stx/btree.h	/^        mutable value_type              temp_value;$/;"	m	class:stx::btree::const_reverse_iterator
temp_value	include/stx/btree.h	/^        mutable value_type              temp_value;$/;"	m	class:stx::btree::iterator
temp_value	include/stx/btree.h	/^        mutable value_type              temp_value;$/;"	m	class:stx::btree::reverse_iterator
test2_map_insert_erase_strings	testsuite/SimpleTest.cc	/^    void test2_map_insert_erase_strings()$/;"	f	struct:SimpleTest
test_32000_mod_10000	testsuite/LargeTest.cc	/^    void test_32000_mod_10000()$/;"	f	struct:LargeTest
test_3200_10	testsuite/BoundTest.cc	/^    void test_3200_10()$/;"	f	struct:BoundTest
test_3200_mod_10	testsuite/LargeTest.cc	/^    void test_3200_mod_10()$/;"	f	struct:LargeTest
test_3200_mod_100	testsuite/LargeTest.cc	/^    void test_3200_mod_100()$/;"	f	struct:LargeTest
test_3200_mod_1000	testsuite/LargeTest.cc	/^    void test_3200_mod_1000()$/;"	f	struct:LargeTest
test_3200_mod_10000	testsuite/LargeTest.cc	/^    void test_3200_mod_10000()$/;"	f	struct:LargeTest
test_320_1000	testsuite/BoundTest.cc	/^    void test_320_1000()$/;"	f	struct:BoundTest
test_320_mod_1000	testsuite/LargeTest.cc	/^    void test_320_mod_1000()$/;"	f	struct:LargeTest
test_320_mod_10000	testsuite/LargeTest.cc	/^    void test_320_mod_10000()$/;"	f	struct:LargeTest
test_dump_restore_3200	testsuite/DumpRestoreTest.cc	/^    void test_dump_restore_3200()$/;"	f	struct:DumpRestoreTest
test_empty	testsuite/SimpleTest.cc	/^    void test_empty()$/;"	f	struct:SimpleTest
test_erase_iterator1	testsuite/IteratorTest.cc	/^    void test_erase_iterator1()$/;"	f	struct:IteratorTest
test_insert_erase	testsuite/StructureTest.cc	/^    void test_insert_erase()$/;"	f	struct:StructureTest
test_iterator1	testsuite/IteratorTest.cc	/^    void test_iterator1()$/;"	f	struct:IteratorTest
test_iterator2	testsuite/IteratorTest.cc	/^    void test_iterator2()$/;"	f	struct:IteratorTest
test_iterator3	testsuite/IteratorTest.cc	/^    void test_iterator3()$/;"	f	struct:IteratorTest
test_iterator4	testsuite/IteratorTest.cc	/^    void test_iterator4()$/;"	f	struct:IteratorTest
test_iterator5	testsuite/IteratorTest.cc	/^    void test_iterator5()$/;"	f	struct:IteratorTest
test_map	testsuite/BulkLoadTest.cc	/^    void test_map()$/;"	f	struct:BulkLoadTest
test_map_insert_erase_3200	testsuite/SimpleTest.cc	/^    void test_map_insert_erase_3200()$/;"	f	struct:SimpleTest
test_map_insert_erase_3200_descending	testsuite/SimpleTest.cc	/^    void test_map_insert_erase_3200_descending()$/;"	f	struct:SimpleTest
test_map_instance	testsuite/BulkLoadTest.cc	/^    void test_map_instance(size_t numkeys, unsigned int mod)$/;"	f	struct:BulkLoadTest
test_multi	testsuite/BoundTest.cc	/^    void test_multi(const unsigned int insnum, const int modulo)$/;"	f	struct:BoundTest
test_multi	testsuite/LargeTest.cc	/^    void test_multi(const unsigned int insnum, const unsigned int modulo)$/;"	f	struct:LargeTest
test_multiset_100000_uint32	testsuite/SimpleTest.cc	/^    void test_multiset_100000_uint32()$/;"	f	struct:SimpleTest
test_range	speedtest/speedtest-tune.cc	/^struct test_range$/;"	s	file:
test_range	speedtest/speedtest-tune.cc	/^struct test_range<functional, Low, Low>$/;"	s	file:
test_relations	testsuite/RelationTest.cc	/^    void test_relations()$/;"	f	struct:RelationTest
test_sequence	testsuite/LargeTest.cc	/^    void test_sequence()$/;"	f	struct:LargeTest
test_set	testsuite/BulkLoadTest.cc	/^    void test_set()$/;"	f	struct:BulkLoadTest
test_set_100000_uint64	testsuite/SimpleTest.cc	/^    void test_set_100000_uint64()$/;"	f	struct:SimpleTest
test_set_insert_erase_3200	testsuite/SimpleTest.cc	/^    void test_set_insert_erase_3200()$/;"	f	struct:SimpleTest
test_set_insert_erase_3200_descending	testsuite/SimpleTest.cc	/^    void test_set_insert_erase_3200_descending()$/;"	f	struct:SimpleTest
test_set_instance	testsuite/BulkLoadTest.cc	/^    void test_set_instance(size_t numkeys, unsigned int mod)$/;"	f	struct:BulkLoadTest
testcomp	testsuite/StructureTest.cc	/^        inline testcomp(unsigned int sv)$/;"	f	struct:StructureTest::testcomp
testcomp	testsuite/StructureTest.cc	/^    struct testcomp$/;"	s	struct:StructureTest	file:
testdata	testsuite/StructureTest.cc	/^        inline testdata(unsigned int _a)$/;"	f	struct:StructureTest::testdata
testdata	testsuite/StructureTest.cc	/^        testdata()$/;"	f	struct:StructureTest::testdata
testdata	testsuite/StructureTest.cc	/^    struct testdata$/;"	s	struct:StructureTest	file:
testrunner_loop	speedtest/speedtest-tune.cc	/^void testrunner_loop(std::ostream& os, unsigned int insertnum, unsigned int slots)$/;"	f
testrunner_loop	speedtest/speedtest.cc	/^void testrunner_loop(std::ostream& os, unsigned int items)$/;"	f
textctrl_Data	wxbtreedemo/WMain_wxg.h	/^    wxTextCtrl* textctrl_Data;$/;"	m	class:WMain_wxg
textctrl_Key	wxbtreedemo/WMain_wxg.h	/^    wxTextCtrl* textctrl_Key;$/;"	m	class:WMain_wxg
textctrl_OpResult	wxbtreedemo/WMain_wxg.h	/^    wxTextCtrl* textctrl_OpResult;$/;"	m	class:WMain_wxg
timestamp	memprofile/main.cc	/^inline double timestamp()$/;"	f
timestamp	memprofile/memprofile.h	/^    static inline double timestamp()$/;"	f	class:MemProfile
timestamp	speedtest/speedtest-tune.cc	/^inline double timestamp()$/;"	f
timestamp	speedtest/speedtest.cc	/^inline double timestamp()$/;"	f
total	memprofile/malloc_count.c	/^static long long peak = 0, curr = 0, total = 0;$/;"	v	file:
tpunit	testsuite/tpunit.h	/^namespace tpunit$/;"	n
traits	include/stx/btree.h	/^    typedef _Traits                     traits;$/;"	t	class:stx::btree
traits	include/stx/btree_map.h	/^    typedef _Traits                     traits;$/;"	t	class:stx::btree_map
traits	include/stx/btree_multimap.h	/^    typedef _Traits                     traits;$/;"	t	class:stx::btree_multimap
traits	include/stx/btree_multiset.h	/^    typedef _Traits                     traits;$/;"	t	class:stx::btree_multiset
traits	include/stx/btree_set.h	/^    typedef _Traits                     traits;$/;"	t	class:stx::btree_set
traits_nodebug	testsuite/BoundTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:BoundTest	file:
traits_nodebug	testsuite/BulkLoadTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:BulkLoadTest	file:
traits_nodebug	testsuite/DumpRestoreTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:DumpRestoreTest	file:
traits_nodebug	testsuite/IteratorTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:IteratorTest	file:
traits_nodebug	testsuite/LargeTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:LargeTest	file:
traits_nodebug	testsuite/RelationTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:RelationTest	file:
traits_nodebug	testsuite/SimpleTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:SimpleTest	file:
traits_nodebug	testsuite/StructureTest.cc	/^    struct traits_nodebug : stx::btree_default_set_traits<KeyType>$/;"	s	struct:StructureTest	file:
tree	include/stx/btree_map.h	/^    btree_impl  tree;$/;"	m	class:stx::btree_map
tree	include/stx/btree_multimap.h	/^    btree_impl  tree;$/;"	m	class:stx::btree_multimap
tree	include/stx/btree_multiset.h	/^    btree_impl  tree;$/;"	m	class:stx::btree_multiset
tree	include/stx/btree_set.h	/^    btree_impl  tree;$/;"	m	class:stx::btree_set
tree_stats	include/stx/btree.h	/^        inline tree_stats()$/;"	f	struct:stx::btree::tree_stats
tree_stats	include/stx/btree.h	/^    struct tree_stats$/;"	s	class:stx::btree
tree_stats	include/stx/btree_map.h	/^    typedef typename btree_impl::tree_stats     tree_stats;$/;"	t	class:stx::btree_map
tree_stats	include/stx/btree_multimap.h	/^    typedef typename btree_impl::tree_stats     tree_stats;$/;"	t	class:stx::btree_multimap
tree_stats	include/stx/btree_multiset.h	/^    typedef typename btree_impl::tree_stats     tree_stats;$/;"	t	class:stx::btree_multiset
tree_stats	include/stx/btree_set.h	/^    typedef typename btree_impl::tree_stats     tree_stats;$/;"	t	class:stx::btree_set
treebundle	wxbtreedemo/WMain.cpp	/^    BTreeBundle&        treebundle;$/;"	m	struct:BTreeOp_EqualRange	file:
treebundle	wxbtreedemo/WMain.cpp	/^    BTreeBundle&        treebundle;$/;"	m	struct:BTreeOp_Erase	file:
treebundle	wxbtreedemo/WMain.cpp	/^    BTreeBundle&        treebundle;$/;"	m	struct:BTreeOp_FindKey	file:
treebundle	wxbtreedemo/WMain.cpp	/^    BTreeBundle&        treebundle;$/;"	m	struct:BTreeOp_Insert	file:
treebundle	wxbtreedemo/WMain.h	/^    class BTreeBundle   treebundle;$/;"	m	class:WMain	typeref:class:WMain::BTreeBundle
upper_bound	include/stx/btree.h	/^    const_iterator upper_bound(const key_type& key) const$/;"	f	class:stx::btree
upper_bound	include/stx/btree.h	/^    iterator upper_bound(const key_type& key)$/;"	f	class:stx::btree
upper_bound	include/stx/btree_map.h	/^    const_iterator upper_bound(const key_type& key) const$/;"	f	class:stx::btree_map
upper_bound	include/stx/btree_map.h	/^    iterator upper_bound(const key_type& key)$/;"	f	class:stx::btree_map
upper_bound	include/stx/btree_multimap.h	/^    const_iterator upper_bound(const key_type& key) const$/;"	f	class:stx::btree_multimap
upper_bound	include/stx/btree_multimap.h	/^    iterator upper_bound(const key_type& key)$/;"	f	class:stx::btree_multimap
upper_bound	include/stx/btree_multiset.h	/^    const_iterator upper_bound(const key_type& key) const$/;"	f	class:stx::btree_multiset
upper_bound	include/stx/btree_multiset.h	/^    iterator upper_bound(const key_type& key)$/;"	f	class:stx::btree_multiset
upper_bound	include/stx/btree_set.h	/^    const_iterator upper_bound(const key_type& key) const$/;"	f	class:stx::btree_set
upper_bound	include/stx/btree_set.h	/^    iterator upper_bound(const key_type& key)$/;"	f	class:stx::btree_set
usage	doxygen-html/installdox	/^sub usage {$/;"	s
used_as_set	include/stx/btree.h	/^    static const bool                   used_as_set = _UsedAsSet;$/;"	m	class:stx::btree
value_comp	include/stx/btree.h	/^    inline value_compare value_comp() const$/;"	f	class:stx::btree
value_comp	include/stx/btree_map.h	/^    inline value_compare value_comp() const$/;"	f	class:stx::btree_map
value_comp	include/stx/btree_multimap.h	/^    inline value_compare value_comp() const$/;"	f	class:stx::btree_multimap
value_comp	include/stx/btree_multiset.h	/^    inline value_compare value_comp() const$/;"	f	class:stx::btree_multiset
value_comp	include/stx/btree_set.h	/^    inline value_compare value_comp() const$/;"	f	class:stx::btree_set
value_compare	include/stx/btree.h	/^        inline value_compare(key_compare kc)$/;"	f	class:stx::btree::value_compare
value_compare	include/stx/btree.h	/^    class value_compare$/;"	c	class:stx::btree
value_compare	include/stx/btree_map.h	/^    typedef typename btree_impl::value_compare  value_compare;$/;"	t	class:stx::btree_map
value_compare	include/stx/btree_multimap.h	/^    typedef typename btree_impl::value_compare  value_compare;$/;"	t	class:stx::btree_multimap
value_compare	include/stx/btree_multiset.h	/^    typedef typename btree_impl::value_compare  value_compare;$/;"	t	class:stx::btree_multiset
value_compare	include/stx/btree_set.h	/^    typedef typename btree_impl::value_compare  value_compare;$/;"	t	class:stx::btree_set
value_type	include/stx/btree.h	/^        typedef typename btree::value_type              value_type;$/;"	t	class:stx::btree::const_iterator
value_type	include/stx/btree.h	/^        typedef typename btree::value_type              value_type;$/;"	t	class:stx::btree::const_reverse_iterator
value_type	include/stx/btree.h	/^        typedef typename btree::value_type              value_type;$/;"	t	class:stx::btree::iterator
value_type	include/stx/btree.h	/^        typedef typename btree::value_type              value_type;$/;"	t	class:stx::btree::reverse_iterator
value_type	include/stx/btree.h	/^    typedef _Value                      value_type;$/;"	t	class:stx::btree
value_type	include/stx/btree_map.h	/^    typedef std::pair<key_type, data_type>      value_type;$/;"	t	class:stx::btree_map
value_type	include/stx/btree_multimap.h	/^    typedef std::pair<key_type, data_type>      value_type;$/;"	t	class:stx::btree_multimap
value_type	include/stx/btree_multiset.h	/^    typedef key_type                    value_type;$/;"	t	class:stx::btree_multiset
value_type	include/stx/btree_set.h	/^    typedef key_type                    value_type;$/;"	t	class:stx::btree_set
verify	include/stx/btree.h	/^    void verify() const$/;"	f	class:stx::btree
verify	include/stx/btree_map.h	/^    void verify() const$/;"	f	class:stx::btree_map
verify	include/stx/btree_multimap.h	/^    void verify() const$/;"	f	class:stx::btree_multimap
verify	include/stx/btree_multiset.h	/^    void verify() const$/;"	f	class:stx::btree_multiset
verify	include/stx/btree_set.h	/^    void verify() const$/;"	f	class:stx::btree_set
verify_leaflinks	include/stx/btree.h	/^    void verify_leaflinks() const$/;"	f	class:stx::btree
verify_node	include/stx/btree.h	/^    void verify_node(const node* n, key_type* minkey, key_type* maxkey, tree_stats &vstats) const$/;"	f	class:stx::btree
version	include/stx/btree.h	/^        unsigned short  version;$/;"	m	struct:stx::btree::dump_header
w	wxbtreedemo/WTreeDrawing.h	/^        WTreeDrawing &w;$/;"	m	struct:WTreeDrawing::BTreeOp_Draw
window_TreeDrawing	wxbtreedemo/WMain_wxg.h	/^    WTreeDrawing* window_TreeDrawing;$/;"	m	class:WMain_wxg
wmain	wxbtreedemo/WTreeDrawing.h	/^    class WMain*        wmain;$/;"	m	class:WTreeDrawing	typeref:class:WTreeDrawing::WMain
write_memprofile	memprofile/main.cc	/^void write_memprofile(const char* filename)$/;"	f
z	doxygen-html/jquery.js	/^(function(){var l=this,g,y=l.jQuery,p=l.$,o=l.jQuery=l.$=function(E,F){return new o.fn.init(E,F)},D=\/^[^<]*(<(.|\\s)+>)[^>]*$|^#([\\w-]+)$\/,f=\/^.[^:#\\[\\.,]*$\/;o.fn=o.prototype={init:function(E,H){E=E||document;if(E.nodeType){this[0]=E;this.length=1;this.context=E;return this}if(typeof E==="string"){var G=D.exec(E);if(G&&(G[1]||!H)){if(G[1]){E=o.clean([G[1]],H)}else{var I=document.getElementById(G[3]);if(I&&I.id!=G[3]){return o().find(E)}var F=o(I||[]);F.context=document;F.selector=E;return F}}else{return o(H).find(E)}}else{if(o.isFunction(E)){return o(document).ready(E)}}if(E.selector&&E.context){this.selector=E.selector;this.context=E.context}return this.setArray(o.isArray(E)?E:o.makeArray(E))},selector:"",jquery:"1.3.2",size:function(){return this.length},get:function(E){return E===g?Array.prototype.slice.call(this):this[E]},pushStack:function(F,H,E){var G=o(F);G.prevObject=this;G.context=this.context;if(H==="find"){G.selector=this.selector+(this.selector?" ":"")+E}else{if(H){G.selector=this.selector+"."+H+"("+E+")"}}return G},setArray:function(E){this.length=0;Array.prototype.push.apply(this,E);return this},each:function(F,E){return o.each(this,F,E)},index:function(E){return o.inArray(E&&E.jquery?E[0]:E,this)},attr:function(F,H,G){var E=F;if(typeof F==="string"){if(H===g){return this[0]&&o[G||"attr"](this[0],F)}else{E={};E[F]=H}}return this.each(function(I){for(F in E){o.attr(G?this.style:this,F,o.prop(this,E[F],G,I,F))}})},css:function(E,F){if((E=="width"||E=="height")&&parseFloat(F)<0){F=g}return this.attr(E,F,"curCSS")},text:function(F){if(typeof F!=="object"&&F!=null){return this.empty().append((this[0]&&this[0].ownerDocument||document).createTextNode(F))}var E="";o.each(F||this,function(){o.each(this.childNodes,function(){if(this.nodeType!=8){E+=this.nodeType!=1?this.nodeValue:o.fn.text([this])}})});return E},wrapAll:function(E){if(this[0]){var F=o(E,this[0].ownerDocument).clone();if(this[0].parentNode){F.insertBefore(this[0])}F.map(function(){var G=this;while(G.firstChild){G=G.firstChild}return G}).append(this)}return this},wrapInner:function(E){return this.each(function(){o(this).contents().wrapAll(E)})},wrap:function(E){return this.each(function(){o(this).wrapAll(E)})},append:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.appendChild(E)}})},prepend:function(){return this.domManip(arguments,true,function(E){if(this.nodeType==1){this.insertBefore(E,this.firstChild)}})},before:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this)})},after:function(){return this.domManip(arguments,false,function(E){this.parentNode.insertBefore(E,this.nextSibling)})},end:function(){return this.prevObject||o([])},push:[].push,sort:[].sort,splice:[].splice,find:function(E){if(this.length===1){var F=this.pushStack([],"find",E);F.length=0;o.find(E,this[0],F);return F}else{return this.pushStack(o.unique(o.map(this,function(G){return o.find(E,G)})),"find",E)}},clone:function(G){var E=this.map(function(){if(!o.support.noCloneEvent&&!o.isXMLDoc(this)){var I=this.outerHTML;if(!I){var J=this.ownerDocument.createElement("div");J.appendChild(this.cloneNode(true));I=J.innerHTML}return o.clean([I.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,"").replace(\/^\\s*\/,"")])[0]}else{return this.cloneNode(true)}});if(G===true){var H=this.find("*").andSelf(),F=0;E.find("*").andSelf().each(function(){if(this.nodeName!==H[F].nodeName){return}var I=o.data(H[F],"events");for(var K in I){for(var J in I[K]){o.event.add(this,K,I[K][J],I[K][J].data)}}F++})}return E},filter:function(E){return this.pushStack(o.isFunction(E)&&o.grep(this,function(G,F){return E.call(G,F)})||o.multiFilter(E,o.grep(this,function(F){return F.nodeType===1})),"filter",E)},closest:function(E){var G=o.expr.match.POS.test(E)?o(E):null,F=0;return this.map(function(){var H=this;while(H&&H.ownerDocument){if(G?G.index(H)>-1:o(H).is(E)){o.data(H,"closest",F);return H}H=H.parentNode;F++}})},not:function(E){if(typeof E==="string"){if(f.test(E)){return this.pushStack(o.multiFilter(E,this,true),"not",E)}else{E=o.multiFilter(E,this)}}var F=E.length&&E[E.length-1]!==g&&!E.nodeType;return this.filter(function(){return F?o.inArray(this,E)<0:this!=E})},add:function(E){return this.pushStack(o.unique(o.merge(this.get(),typeof E==="string"?o(E):o.makeArray(E))))},is:function(E){return !!E&&o.multiFilter(E,this).length>0},hasClass:function(E){return !!E&&this.is("."+E)},val:function(K){if(K===g){var E=this[0];if(E){if(o.nodeName(E,"option")){return(E.attributes.value||{}).specified?E.value:E.text}if(o.nodeName(E,"select")){var I=E.selectedIndex,L=[],M=E.options,H=E.type=="select-one";if(I<0){return null}for(var F=H?I:0,J=H?I+1:M.length;F<J;F++){var G=M[F];if(G.selected){K=o(G).val();if(H){return K}L.push(K)}}return L}return(E.value||"").replace(\/\\r\/g,"")}return g}if(typeof K==="number"){K+=""}return this.each(function(){if(this.nodeType!=1){return}if(o.isArray(K)&&\/radio|checkbox\/.test(this.type)){this.checked=(o.inArray(this.value,K)>=0||o.inArray(this.name,K)>=0)}else{if(o.nodeName(this,"select")){var N=o.makeArray(K);o("option",this).each(function(){this.selected=(o.inArray(this.value,N)>=0||o.inArray(this.text,N)>=0)});if(!N.length){this.selectedIndex=-1}}else{this.value=K}}})},html:function(E){return E===g?(this[0]?this[0].innerHTML.replace(\/ jQuery\\d+="(?:\\d+|null)"\/g,""):null):this.empty().append(E)},replaceWith:function(E){return this.after(E).remove()},eq:function(E){return this.slice(E,+E+1)},slice:function(){return this.pushStack(Array.prototype.slice.apply(this,arguments),"slice",Array.prototype.slice.call(arguments).join(","))},map:function(E){return this.pushStack(o.map(this,function(G,F){return E.call(G,F,G)}))},andSelf:function(){return this.add(this.prevObject)},domManip:function(J,M,L){if(this[0]){var I=(this[0].ownerDocument||this[0]).createDocumentFragment(),F=o.clean(J,(this[0].ownerDocument||this[0]),I),H=I.firstChild;if(H){for(var G=0,E=this.length;G<E;G++){L.call(K(this[G],H),this.length>1||G>0?I.cloneNode(true):I)}}if(F){o.each(F,z)}}return this;function K(N,O){return M&&o.nodeName(N,"table")&&o.nodeName(O,"tr")?(N.getElementsByTagName("tbody")[0]||N.appendChild(N.ownerDocument.createElement("tbody"))):N}}};o.fn.init.prototype=o.fn;function z(E,F){if(F.src){o.ajax({url:F.src,async:false,dataType:"script"})}else{o.globalEval(F.text||F.textContent||F.innerHTML||"")}if(F.parentNode){F.parentNode.removeChild(F)}}function e(){return +new Date}o.extend=o.fn.extend=function(){var J=arguments[0]||{},H=1,I=arguments.length,E=false,G;if(typeof J==="boolean"){E=J;J=arguments[1]||{};H=2}if(typeof J!=="object"&&!o.isFunction(J)){J={}}if(I==H){J=this;--H}for(;H<I;H++){if((G=arguments[H])!=null){for(var F in G){var K=J[F],L=G[F];if(J===L){continue}if(E&&L&&typeof L==="object"&&!L.nodeType){J[F]=o.extend(E,K||(L.length!=null?[]:{}),L)}else{if(L!==g){J[F]=L}}}}}return J};var b=\/z-?index|font-?weight|opacity|zoom|line-?height\/i,q=document.defaultView||{},s=Object.prototype.toString;o.extend({noConflict:function(E){l.$=p;if(E){l.jQuery=y}return o},isFunction:function(E){return s.call(E)==="[object Function]"},isArray:function(E){return s.call(E)==="[object Array]"},isXMLDoc:function(E){return E.nodeType===9&&E.documentElement.nodeName!=="HTML"||!!E.ownerDocument&&o.isXMLDoc(E.ownerDocument)},globalEval:function(G){if(G&&\/\\S\/.test(G)){var F=document.getElementsByTagName("head")[0]||document.documentElement,E=document.createElement("script");E.type="text\/javascript";if(o.support.scriptEval){E.appendChild(document.createTextNode(G))}else{E.text=G}F.insertBefore(E,F.firstChild);F.removeChild(E)}},nodeName:function(F,E){return F.nodeName&&F.nodeName.toUpperCase()==E.toUpperCase()},each:function(G,K,F){var E,H=0,I=G.length;if(F){if(I===g){for(E in G){if(K.apply(G[E],F)===false){break}}}else{for(;H<I;){if(K.apply(G[H++],F)===false){break}}}}else{if(I===g){for(E in G){if(K.call(G[E],E,G[E])===false){break}}}else{for(var J=G[0];H<I&&K.call(J,H,J)!==false;J=G[++H]){}}}return G},prop:function(H,I,G,F,E){if(o.isFunction(I)){I=I.call(H,F)}return typeof I==="number"&&G=="curCSS"&&!b.test(E)?I+"px":I},className:{add:function(E,F){o.each((F||"").split(\/\\s+\/),function(G,H){if(E.nodeType==1&&!o.className.has(E.className,H)){E.className+=(E.className?" ":"")+H}})},remove:function(E,F){if(E.nodeType==1){E.className=F!==g?o.grep(E.className.split(\/\\s+\/),function(G){return !o.className.has(F,G)}).join(" "):""}},has:function(F,E){return F&&o.inArray(E,(F.className||F).toString().split(\/\\s+\/))>-1}},swap:function(H,G,I){var E={};for(var F in G){E[F]=H.style[F];H.style[F]=G[F]}I.call(H);for(var F in G){H.style[F]=E[F]}},css:function(H,F,J,E){if(F=="width"||F=="height"){var L,G={position:"absolute",visibility:"hidden",display:"block"},K=F=="width"?["Left","Right"]:["Top","Bottom"];function I(){L=F=="width"?H.offsetWidth:H.offsetHeight;if(E==="border"){return}o.each(K,function(){if(!E){L-=parseFloat(o.curCSS(H,"padding"+this,true))||0}if(E==="margin"){L+=parseFloat(o.curCSS(H,"margin"+this,true))||0}else{L-=parseFloat(o.curCSS(H,"border"+this+"Width",true))||0}})}if(H.offsetWidth!==0){I()}else{o.swap(H,G,I)}return Math.max(0,Math.round(L))}return o.curCSS(H,F,J)},curCSS:function(I,F,G){var L,E=I.style;if(F=="opacity"&&!o.support.opacity){L=o.attr(E,"opacity");return L==""?"1":L}if(F.match(\/float\/i)){F=w}if(!G&&E&&E[F]){L=E[F]}else{if(q.getComputedStyle){if(F.match(\/float\/i)){F="float"}F=F.replace(\/([A-Z])\/g,"-$1").toLowerCase();var M=q.getComputedStyle(I,null);if(M){L=M.getPropertyValue(F)}if(F=="opacity"&&L==""){L="1"}}else{if(I.currentStyle){var J=F.replace(\/\\-(\\w)\/g,function(N,O){return O.toUpperCase()});L=I.currentStyle[F]||I.currentStyle[J];if(!\/^\\d+(px)?$\/i.test(L)&&\/^\\d\/.test(L)){var H=E.left,K=I.runtimeStyle.left;I.runtimeStyle.left=I.currentStyle.left;E.left=L||0;L=E.pixelLeft+"px";E.left=H;I.runtimeStyle.left=K}}}}return L},clean:function(F,K,I){K=K||document;if(typeof K.createElement==="undefined"){K=K.ownerDocument||K[0]&&K[0].ownerDocument||document}if(!I&&F.length===1&&typeof F[0]==="string"){var H=\/^<(\\w+)\\s*\\\/?>$\/.exec(F[0]);if(H){return[K.createElement(H[1])]}}var G=[],E=[],L=K.createElement("div");o.each(F,function(P,S){if(typeof S==="number"){S+=""}if(!S){return}if(typeof S==="string"){S=S.replace(\/(<(\\w+)[^>]*?)\\\/>\/g,function(U,V,T){return T.match(\/^(abbr|br|col|img|input|link|meta|param|hr|area|embed)$\/i)?U:V+"><\/"+T+">"});var O=S.replace(\/^\\s+\/,"").substring(0,10).toLowerCase();var Q=!O.indexOf("<opt")&&[1,"<select multiple='multiple'>","<\/select>"]||!O.indexOf("<leg")&&[1,"<fieldset>","<\/fieldset>"]||O.match(\/^<(thead|tbody|tfoot|colg|cap)\/)&&[1,"<table>","<\/table>"]||!O.indexOf("<tr")&&[2,"<table><tbody>","<\/tbody><\/table>"]||(!O.indexOf("<td")||!O.indexOf("<th"))&&[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"]||!O.indexOf("<col")&&[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"]||!o.support.htmlSerialize&&[1,"div<div>","<\/div>"]||[0,"",""];L.innerHTML=Q[1]+S+Q[2];while(Q[0]--){L=L.lastChild}if(!o.support.tbody){var R=\/<tbody\/i.test(S),N=!O.indexOf("<table")&&!R?L.firstChild&&L.firstChild.childNodes:Q[1]=="<table>"&&!R?L.childNodes:[];for(var M=N.length-1;M>=0;--M){if(o.nodeName(N[M],"tbody")&&!N[M].childNodes.length){N[M].parentNode.removeChild(N[M])}}}if(!o.support.leadingWhitespace&&\/^\\s\/.test(S)){L.insertBefore(K.createTextNode(S.match(\/^\\s*\/)[0]),L.firstChild)}S=o.makeArray(L.childNodes)}if(S.nodeType){G.push(S)}else{G=o.merge(G,S)}});if(I){for(var J=0;G[J];J++){if(o.nodeName(G[J],"script")&&(!G[J].type||G[J].type.toLowerCase()==="text\/javascript")){E.push(G[J].parentNode?G[J].parentNode.removeChild(G[J]):G[J])}else{if(G[J].nodeType===1){G.splice.apply(G,[J+1,0].concat(o.makeArray(G[J].getElementsByTagName("script"))))}I.appendChild(G[J])}}return E}return G},attr:function(J,G,K){if(!J||J.nodeType==3||J.nodeType==8){return g}var H=!o.isXMLDoc(J),L=K!==g;G=H&&o.props[G]||G;if(J.tagName){var F=\/href|src|style\/.test(G);if(G=="selected"&&J.parentNode){J.parentNode.selectedIndex}if(G in J&&H&&!F){if(L){if(G=="type"&&o.nodeName(J,"input")&&J.parentNode){throw"type property can't be changed"}J[G]=K}if(o.nodeName(J,"form")&&J.getAttributeNode(G)){return J.getAttributeNode(G).nodeValue}if(G=="tabIndex"){var I=J.getAttributeNode("tabIndex");return I&&I.specified?I.value:J.nodeName.match(\/(button|input|object|select|textarea)\/i)?0:J.nodeName.match(\/^(a|area)$\/i)&&J.href?0:g}return J[G]}if(!o.support.style&&H&&G=="style"){return o.attr(J.style,"cssText",K)}if(L){J.setAttribute(G,""+K)}var E=!o.support.hrefNormalized&&H&&F?J.getAttribute(G,2):J.getAttribute(G);return E===null?g:E}if(!o.support.opacity&&G=="opacity"){if(L){J.zoom=1;J.filter=(J.filter||"").replace(\/alpha\\([^)]*\\)\/,"")+(parseInt(K)+""=="NaN"?"":"alpha(opacity="+K*100+")")}return J.filter&&J.filter.indexOf("opacity=")>=0?(parseFloat(J.filter.match(\/opacity=([^)]*)\/)[1])\/100)+"":""}G=G.replace(\/-([a-z])\/ig,function(M,N){return N.toUpperCase()});if(L){J[G]=K}return J[G]},trim:function(E){return(E||"").replace(\/^\\s+|\\s+$\/g,"")},makeArray:function(G){var E=[];if(G!=null){var F=G.length;if(F==null||typeof G==="string"||o.isFunction(G)||G.setInterval){E[0]=G}else{while(F){E[--F]=G[F]}}}return E},inArray:function(G,H){for(var E=0,F=H.length;E<F;E++){if(H[E]===G){return E}}return -1},merge:function(H,E){var F=0,G,I=H.length;if(!o.support.getAll){while((G=E[F++])!=null){if(G.nodeType!=8){H[I++]=G}}}else{while((G=E[F++])!=null){H[I++]=G}}return H},unique:function(K){var F=[],E={};try{for(var G=0,H=K.length;G<H;G++){var J=o.data(K[G]);if(!E[J]){E[J]=true;F.push(K[G])}}}catch(I){F=K}return F},grep:function(F,J,E){var G=[];for(var H=0,I=F.length;H<I;H++){if(!E!=!J(F[H],H)){G.push(F[H])}}return G},map:function(E,J){var F=[];for(var G=0,H=E.length;G<H;G++){var I=J(E[G],G);if(I!=null){F[F.length]=I}}return F.concat.apply([],F)}});var C=navigator.userAgent.toLowerCase();o.browser={version:(C.match(\/.+(?:rv|it|ra|ie)[\\\/: ]([\\d.]+)\/)||[0,"0"])[1],safari:\/webkit\/.test(C),opera:\/opera\/.test(C),msie:\/msie\/.test(C)&&!\/opera\/.test(C),mozilla:\/mozilla\/.test(C)&&!\/(compatible|webkit)\/.test(C)};o.each({parent:function(E){return E.parentNode},parents:function(E){return o.dir(E,"parentNode")},next:function(E){return o.nth(E,2,"nextSibling")},prev:function(E){return o.nth(E,2,"previousSibling")},nextAll:function(E){return o.dir(E,"nextSibling")},prevAll:function(E){return o.dir(E,"previousSibling")},siblings:function(E){return o.sibling(E.parentNode.firstChild,E)},children:function(E){return o.sibling(E.firstChild)},contents:function(E){return o.nodeName(E,"iframe")?E.contentDocument||E.contentWindow.document:o.makeArray(E.childNodes)}},function(E,F){o.fn[E]=function(G){var H=o.map(this,F);if(G&&typeof G=="string"){H=o.multiFilter(G,H)}return this.pushStack(o.unique(H),E,G)}});o.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(E,F){o.fn[E]=function(G){var J=[],L=o(G);for(var K=0,H=L.length;K<H;K++){$/;"	f
~MemProfile	memprofile/memprofile.h	/^    ~MemProfile()$/;"	f	class:MemProfile
~btree	include/stx/btree.h	/^    inline ~btree()$/;"	f	class:stx::btree
~btree_map	include/stx/btree_map.h	/^    inline ~btree_map()$/;"	f	class:stx::btree_map
~btree_multimap	include/stx/btree_multimap.h	/^    inline ~btree_multimap()$/;"	f	class:stx::btree_multimap
~btree_multiset	include/stx/btree_multiset.h	/^    inline ~btree_multiset()$/;"	f	class:stx::btree_multiset
~btree_set	include/stx/btree_set.h	/^    inline ~btree_set()$/;"	f	class:stx::btree_set
~fixture	testsuite/tpunit.h	/^            ~fixture()$/;"	f	struct:tpunit::TestFixture::fixture
~method	testsuite/tpunit.h	/^            ~method()$/;"	f	struct:tpunit::TestFixture::method
